
C:\Users\LENOVO\Documents\BotonSecuencia\Debug\BotonSecuencia.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c74  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000dfc  08000dfc  00010dfc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000e0c  08000e0c  00010e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000e10  08000e10  00010e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000e14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          00000020  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000024  20000024  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   00009091  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000016ee  00000000  00000000  000290c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000f2f  00000000  00000000  0002a7b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000348  00000000  00000000  0002b6e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000004b0  00000000  00000000  0002ba30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00002239  00000000  00000000  0002bee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00001855  00000000  00000000  0002e119  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0002f96e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000006d8  00000000  00000000  0002f9ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000de4 	.word	0x08000de4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000de4 	.word	0x08000de4

080001c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80001ca:	4b08      	ldr	r3, [pc, #32]	; (80001ec <HAL_InitTick+0x24>)
{
 80001cc:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80001ce:	6818      	ldr	r0, [r3, #0]
 80001d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80001d8:	f000 f888 	bl	80002ec <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001dc:	2200      	movs	r2, #0
 80001de:	4621      	mov	r1, r4
 80001e0:	f04f 30ff 	mov.w	r0, #4294967295
 80001e4:	f000 f84e 	bl	8000284 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80001e8:	2000      	movs	r0, #0
 80001ea:	bd10      	pop	{r4, pc}
 80001ec:	20000000 	.word	0x20000000

080001f0 <HAL_Init>:
{
 80001f0:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80001f2:	4b0b      	ldr	r3, [pc, #44]	; (8000220 <HAL_Init+0x30>)
 80001f4:	681a      	ldr	r2, [r3, #0]
 80001f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80001fa:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80001fc:	681a      	ldr	r2, [r3, #0]
 80001fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000202:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000204:	681a      	ldr	r2, [r3, #0]
 8000206:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800020a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800020c:	2003      	movs	r0, #3
 800020e:	f000 f827 	bl	8000260 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000212:	2000      	movs	r0, #0
 8000214:	f7ff ffd8 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 8000218:	f000 fd30 	bl	8000c7c <HAL_MspInit>
}
 800021c:	2000      	movs	r0, #0
 800021e:	bd08      	pop	{r3, pc}
 8000220:	40023c00 	.word	0x40023c00

08000224 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000224:	4a02      	ldr	r2, [pc, #8]	; (8000230 <HAL_IncTick+0xc>)
 8000226:	6813      	ldr	r3, [r2, #0]
 8000228:	3301      	adds	r3, #1
 800022a:	6013      	str	r3, [r2, #0]
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	20000020 	.word	0x20000020

08000234 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000234:	4b01      	ldr	r3, [pc, #4]	; (800023c <HAL_GetTick+0x8>)
 8000236:	6818      	ldr	r0, [r3, #0]
}
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	20000020 	.word	0x20000020

08000240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000240:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000242:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000244:	f7ff fff6 	bl	8000234 <HAL_GetTick>
  uint32_t wait = Delay;
 8000248:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800024a:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800024c:	4605      	mov	r5, r0
  {
     wait++;
 800024e:	bf18      	it	ne
 8000250:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000252:	f7ff ffef 	bl	8000234 <HAL_GetTick>
 8000256:	1b40      	subs	r0, r0, r5
 8000258:	42a0      	cmp	r0, r4
 800025a:	d3fa      	bcc.n	8000252 <HAL_Delay+0x12>
  {
  }
}
 800025c:	b003      	add	sp, #12
 800025e:	bd30      	pop	{r4, r5, pc}

08000260 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000260:	4a07      	ldr	r2, [pc, #28]	; (8000280 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000262:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000264:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000268:	041b      	lsls	r3, r3, #16
 800026a:	0c1b      	lsrs	r3, r3, #16
 800026c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000270:	0200      	lsls	r0, r0, #8
 8000272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000276:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800027a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800027c:	60d3      	str	r3, [r2, #12]
 800027e:	4770      	bx	lr
 8000280:	e000ed00 	.word	0xe000ed00

08000284 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000284:	4b17      	ldr	r3, [pc, #92]	; (80002e4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000286:	b530      	push	{r4, r5, lr}
 8000288:	68dc      	ldr	r4, [r3, #12]
 800028a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800028e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000292:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000294:	2b04      	cmp	r3, #4
 8000296:	bf28      	it	cs
 8000298:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800029a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800029c:	f04f 0501 	mov.w	r5, #1
 80002a0:	fa05 f303 	lsl.w	r3, r5, r3
 80002a4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002a8:	bf8c      	ite	hi
 80002aa:	3c03      	subhi	r4, #3
 80002ac:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002ae:	4019      	ands	r1, r3
 80002b0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002b2:	fa05 f404 	lsl.w	r4, r5, r4
 80002b6:	3c01      	subs	r4, #1
 80002b8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80002ba:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002bc:	ea42 0201 	orr.w	r2, r2, r1
 80002c0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c4:	bfaf      	iteee	ge
 80002c6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ca:	f000 000f 	andlt.w	r0, r0, #15
 80002ce:	4b06      	ldrlt	r3, [pc, #24]	; (80002e8 <HAL_NVIC_SetPriority+0x64>)
 80002d0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d2:	bfa5      	ittet	ge
 80002d4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80002d8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002da:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002dc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002e0:	bd30      	pop	{r4, r5, pc}
 80002e2:	bf00      	nop
 80002e4:	e000ed00 	.word	0xe000ed00
 80002e8:	e000ed14 	.word	0xe000ed14

080002ec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002ec:	3801      	subs	r0, #1
 80002ee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002f2:	d20a      	bcs.n	800030a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002f4:	4b06      	ldr	r3, [pc, #24]	; (8000310 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f6:	4a07      	ldr	r2, [pc, #28]	; (8000314 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002f8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fa:	21f0      	movs	r1, #240	; 0xf0
 80002fc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000300:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000302:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000304:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000306:	601a      	str	r2, [r3, #0]
 8000308:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800030a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	e000e010 	.word	0xe000e010
 8000314:	e000ed00 	.word	0xe000ed00

08000318 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000318:	4b04      	ldr	r3, [pc, #16]	; (800032c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800031a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800031c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800031e:	bf0c      	ite	eq
 8000320:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000324:	f022 0204 	bicne.w	r2, r2, #4
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	4770      	bx	lr
 800032c:	e000e010 	.word	0xe000e010

08000330 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000330:	4770      	bx	lr

08000332 <HAL_SYSTICK_IRQHandler>:
{
 8000332:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000334:	f7ff fffc 	bl	8000330 <HAL_SYSTICK_Callback>
 8000338:	bd08      	pop	{r3, pc}
	...

0800033c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800033c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000340:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000342:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000344:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80004f4 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000348:	4a68      	ldr	r2, [pc, #416]	; (80004ec <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800034a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80004f8 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800034e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000350:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000352:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000356:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000358:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800035c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000360:	45b6      	cmp	lr, r6
 8000362:	f040 80ae 	bne.w	80004c2 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000366:	684c      	ldr	r4, [r1, #4]
 8000368:	f024 0710 	bic.w	r7, r4, #16
 800036c:	2f02      	cmp	r7, #2
 800036e:	d116      	bne.n	800039e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000370:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000374:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000378:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800037c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000380:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000384:	f04f 0c0f 	mov.w	ip, #15
 8000388:	fa0c fc0b 	lsl.w	ip, ip, fp
 800038c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000390:	690d      	ldr	r5, [r1, #16]
 8000392:	fa05 f50b 	lsl.w	r5, r5, fp
 8000396:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800039a:	f8ca 5020 	str.w	r5, [sl, #32]
 800039e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003a2:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80003a4:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003a8:	fa05 f50a 	lsl.w	r5, r5, sl
 80003ac:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003ae:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003b2:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003b6:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003ba:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003bc:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003c0:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80003c2:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003c6:	d811      	bhi.n	80003ec <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80003c8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003ca:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80003ce:	68cf      	ldr	r7, [r1, #12]
 80003d0:	fa07 fc0a 	lsl.w	ip, r7, sl
 80003d4:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80003d8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80003da:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80003dc:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003e0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80003e4:	409f      	lsls	r7, r3
 80003e6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80003ea:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80003ec:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80003ee:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80003f0:	688f      	ldr	r7, [r1, #8]
 80003f2:	fa07 f70a 	lsl.w	r7, r7, sl
 80003f6:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80003f8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003fa:	00e5      	lsls	r5, r4, #3
 80003fc:	d561      	bpl.n	80004c2 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003fe:	f04f 0b00 	mov.w	fp, #0
 8000402:	f8cd b00c 	str.w	fp, [sp, #12]
 8000406:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800040a:	4d39      	ldr	r5, [pc, #228]	; (80004f0 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800040c:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000410:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000414:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000418:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800041c:	9703      	str	r7, [sp, #12]
 800041e:	9f03      	ldr	r7, [sp, #12]
 8000420:	f023 0703 	bic.w	r7, r3, #3
 8000424:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000428:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800042c:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000430:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000434:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000438:	f04f 0e0f 	mov.w	lr, #15
 800043c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000440:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000442:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000446:	d043      	beq.n	80004d0 <HAL_GPIO_Init+0x194>
 8000448:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800044c:	42a8      	cmp	r0, r5
 800044e:	d041      	beq.n	80004d4 <HAL_GPIO_Init+0x198>
 8000450:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000454:	42a8      	cmp	r0, r5
 8000456:	d03f      	beq.n	80004d8 <HAL_GPIO_Init+0x19c>
 8000458:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800045c:	42a8      	cmp	r0, r5
 800045e:	d03d      	beq.n	80004dc <HAL_GPIO_Init+0x1a0>
 8000460:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000464:	42a8      	cmp	r0, r5
 8000466:	d03b      	beq.n	80004e0 <HAL_GPIO_Init+0x1a4>
 8000468:	4548      	cmp	r0, r9
 800046a:	d03b      	beq.n	80004e4 <HAL_GPIO_Init+0x1a8>
 800046c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000470:	42a8      	cmp	r0, r5
 8000472:	d039      	beq.n	80004e8 <HAL_GPIO_Init+0x1ac>
 8000474:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000478:	42a8      	cmp	r0, r5
 800047a:	bf14      	ite	ne
 800047c:	2508      	movne	r5, #8
 800047e:	2507      	moveq	r5, #7
 8000480:	fa05 f50c 	lsl.w	r5, r5, ip
 8000484:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000488:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800048a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800048c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800048e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000492:	bf0c      	ite	eq
 8000494:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000496:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000498:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800049a:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800049c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80004a0:	bf0c      	ite	eq
 80004a2:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80004a4:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80004a6:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80004a8:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004aa:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80004ae:	bf0c      	ite	eq
 80004b0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80004b2:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80004b4:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80004b6:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004b8:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80004ba:	bf54      	ite	pl
 80004bc:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80004be:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80004c0:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80004c2:	3301      	adds	r3, #1
 80004c4:	2b10      	cmp	r3, #16
 80004c6:	f47f af44 	bne.w	8000352 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80004ca:	b005      	add	sp, #20
 80004cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80004d0:	465d      	mov	r5, fp
 80004d2:	e7d5      	b.n	8000480 <HAL_GPIO_Init+0x144>
 80004d4:	2501      	movs	r5, #1
 80004d6:	e7d3      	b.n	8000480 <HAL_GPIO_Init+0x144>
 80004d8:	2502      	movs	r5, #2
 80004da:	e7d1      	b.n	8000480 <HAL_GPIO_Init+0x144>
 80004dc:	2503      	movs	r5, #3
 80004de:	e7cf      	b.n	8000480 <HAL_GPIO_Init+0x144>
 80004e0:	2504      	movs	r5, #4
 80004e2:	e7cd      	b.n	8000480 <HAL_GPIO_Init+0x144>
 80004e4:	2505      	movs	r5, #5
 80004e6:	e7cb      	b.n	8000480 <HAL_GPIO_Init+0x144>
 80004e8:	2506      	movs	r5, #6
 80004ea:	e7c9      	b.n	8000480 <HAL_GPIO_Init+0x144>
 80004ec:	40013c00 	.word	0x40013c00
 80004f0:	40020000 	.word	0x40020000
 80004f4:	40023800 	.word	0x40023800
 80004f8:	40021400 	.word	0x40021400

080004fc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80004fc:	6903      	ldr	r3, [r0, #16]
 80004fe:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000500:	bf14      	ite	ne
 8000502:	2001      	movne	r0, #1
 8000504:	2000      	moveq	r0, #0
 8000506:	4770      	bx	lr

08000508 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000508:	b10a      	cbz	r2, 800050e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800050a:	6181      	str	r1, [r0, #24]
 800050c:	4770      	bx	lr
 800050e:	0409      	lsls	r1, r1, #16
 8000510:	e7fb      	b.n	800050a <HAL_GPIO_WritePin+0x2>
	...

08000514 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000514:	6803      	ldr	r3, [r0, #0]
{
 8000516:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000518:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800051a:	07d8      	lsls	r0, r3, #31
 800051c:	d43b      	bmi.n	8000596 <HAL_RCC_OscConfig+0x82>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800051e:	6823      	ldr	r3, [r4, #0]
 8000520:	0799      	lsls	r1, r3, #30
 8000522:	f100 8086 	bmi.w	8000632 <HAL_RCC_OscConfig+0x11e>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000526:	6823      	ldr	r3, [r4, #0]
 8000528:	071e      	lsls	r6, r3, #28
 800052a:	f100 80d1 	bmi.w	80006d0 <HAL_RCC_OscConfig+0x1bc>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800052e:	6823      	ldr	r3, [r4, #0]
 8000530:	075d      	lsls	r5, r3, #29
 8000532:	d52a      	bpl.n	800058a <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000534:	2300      	movs	r3, #0
 8000536:	9301      	str	r3, [sp, #4]
 8000538:	4b8e      	ldr	r3, [pc, #568]	; (8000774 <HAL_RCC_OscConfig+0x260>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800053a:	4d8f      	ldr	r5, [pc, #572]	; (8000778 <HAL_RCC_OscConfig+0x264>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800053c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800053e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000542:	641a      	str	r2, [r3, #64]	; 0x40
 8000544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800054a:	9301      	str	r3, [sp, #4]
 800054c:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800054e:	682b      	ldr	r3, [r5, #0]
 8000550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000554:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8000556:	f7ff fe6d 	bl	8000234 <HAL_GetTick>
 800055a:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800055c:	682b      	ldr	r3, [r5, #0]
 800055e:	05da      	lsls	r2, r3, #23
 8000560:	f140 80d8 	bpl.w	8000714 <HAL_RCC_OscConfig+0x200>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000564:	68a3      	ldr	r3, [r4, #8]
 8000566:	4d83      	ldr	r5, [pc, #524]	; (8000774 <HAL_RCC_OscConfig+0x260>)
 8000568:	2b01      	cmp	r3, #1
 800056a:	f040 80da 	bne.w	8000722 <HAL_RCC_OscConfig+0x20e>
 800056e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	672b      	str	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000576:	f7ff fe5d 	bl	8000234 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800057a:	4d7e      	ldr	r5, [pc, #504]	; (8000774 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 800057c:	4606      	mov	r6, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800057e:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000582:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000584:	079b      	lsls	r3, r3, #30
 8000586:	f140 80ed 	bpl.w	8000764 <HAL_RCC_OscConfig+0x250>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800058a:	69a2      	ldr	r2, [r4, #24]
 800058c:	2a00      	cmp	r2, #0
 800058e:	f040 80f9 	bne.w	8000784 <HAL_RCC_OscConfig+0x270>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000592:	2000      	movs	r0, #0
 8000594:	e015      	b.n	80005c2 <HAL_RCC_OscConfig+0xae>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000596:	4b77      	ldr	r3, [pc, #476]	; (8000774 <HAL_RCC_OscConfig+0x260>)
 8000598:	689a      	ldr	r2, [r3, #8]
 800059a:	f002 020c 	and.w	r2, r2, #12
 800059e:	2a04      	cmp	r2, #4
 80005a0:	d007      	beq.n	80005b2 <HAL_RCC_OscConfig+0x9e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80005a2:	689a      	ldr	r2, [r3, #8]
 80005a4:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80005a8:	2a08      	cmp	r2, #8
 80005aa:	d10c      	bne.n	80005c6 <HAL_RCC_OscConfig+0xb2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	025a      	lsls	r2, r3, #9
 80005b0:	d509      	bpl.n	80005c6 <HAL_RCC_OscConfig+0xb2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005b2:	4b70      	ldr	r3, [pc, #448]	; (8000774 <HAL_RCC_OscConfig+0x260>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	039b      	lsls	r3, r3, #14
 80005b8:	d5b1      	bpl.n	800051e <HAL_RCC_OscConfig+0xa>
 80005ba:	6863      	ldr	r3, [r4, #4]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d1ae      	bne.n	800051e <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 80005c0:	2001      	movs	r0, #1
}
 80005c2:	b003      	add	sp, #12
 80005c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005c6:	6863      	ldr	r3, [r4, #4]
 80005c8:	4d6a      	ldr	r5, [pc, #424]	; (8000774 <HAL_RCC_OscConfig+0x260>)
 80005ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005ce:	d111      	bne.n	80005f4 <HAL_RCC_OscConfig+0xe0>
 80005d0:	682b      	ldr	r3, [r5, #0]
 80005d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005d6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80005d8:	f7ff fe2c 	bl	8000234 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005dc:	4d65      	ldr	r5, [pc, #404]	; (8000774 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 80005de:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005e0:	682b      	ldr	r3, [r5, #0]
 80005e2:	039f      	lsls	r7, r3, #14
 80005e4:	d49b      	bmi.n	800051e <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005e6:	f7ff fe25 	bl	8000234 <HAL_GetTick>
 80005ea:	1b80      	subs	r0, r0, r6
 80005ec:	2864      	cmp	r0, #100	; 0x64
 80005ee:	d9f7      	bls.n	80005e0 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 80005f0:	2003      	movs	r0, #3
 80005f2:	e7e6      	b.n	80005c2 <HAL_RCC_OscConfig+0xae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80005f8:	d104      	bne.n	8000604 <HAL_RCC_OscConfig+0xf0>
 80005fa:	682b      	ldr	r3, [r5, #0]
 80005fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000600:	602b      	str	r3, [r5, #0]
 8000602:	e7e5      	b.n	80005d0 <HAL_RCC_OscConfig+0xbc>
 8000604:	682a      	ldr	r2, [r5, #0]
 8000606:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800060a:	602a      	str	r2, [r5, #0]
 800060c:	682a      	ldr	r2, [r5, #0]
 800060e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000612:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000614:	2b00      	cmp	r3, #0
 8000616:	d1df      	bne.n	80005d8 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8000618:	f7ff fe0c 	bl	8000234 <HAL_GetTick>
 800061c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800061e:	682b      	ldr	r3, [r5, #0]
 8000620:	0398      	lsls	r0, r3, #14
 8000622:	f57f af7c 	bpl.w	800051e <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000626:	f7ff fe05 	bl	8000234 <HAL_GetTick>
 800062a:	1b80      	subs	r0, r0, r6
 800062c:	2864      	cmp	r0, #100	; 0x64
 800062e:	d9f6      	bls.n	800061e <HAL_RCC_OscConfig+0x10a>
 8000630:	e7de      	b.n	80005f0 <HAL_RCC_OscConfig+0xdc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000632:	4b50      	ldr	r3, [pc, #320]	; (8000774 <HAL_RCC_OscConfig+0x260>)
 8000634:	689a      	ldr	r2, [r3, #8]
 8000636:	f012 0f0c 	tst.w	r2, #12
 800063a:	d007      	beq.n	800064c <HAL_RCC_OscConfig+0x138>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800063c:	689a      	ldr	r2, [r3, #8]
 800063e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000642:	2a08      	cmp	r2, #8
 8000644:	d116      	bne.n	8000674 <HAL_RCC_OscConfig+0x160>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	0259      	lsls	r1, r3, #9
 800064a:	d413      	bmi.n	8000674 <HAL_RCC_OscConfig+0x160>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800064c:	4b49      	ldr	r3, [pc, #292]	; (8000774 <HAL_RCC_OscConfig+0x260>)
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	0792      	lsls	r2, r2, #30
 8000652:	d502      	bpl.n	800065a <HAL_RCC_OscConfig+0x146>
 8000654:	68e2      	ldr	r2, [r4, #12]
 8000656:	2a01      	cmp	r2, #1
 8000658:	d1b2      	bne.n	80005c0 <HAL_RCC_OscConfig+0xac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800065a:	6818      	ldr	r0, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800065c:	22f8      	movs	r2, #248	; 0xf8
 800065e:	fa92 f2a2 	rbit	r2, r2
 8000662:	fab2 f182 	clz	r1, r2
 8000666:	6922      	ldr	r2, [r4, #16]
 8000668:	408a      	lsls	r2, r1
 800066a:	f020 01f8 	bic.w	r1, r0, #248	; 0xf8
 800066e:	430a      	orrs	r2, r1
 8000670:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000672:	e758      	b.n	8000526 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000674:	68e2      	ldr	r2, [r4, #12]
 8000676:	4b41      	ldr	r3, [pc, #260]	; (800077c <HAL_RCC_OscConfig+0x268>)
 8000678:	b1da      	cbz	r2, 80006b2 <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_HSI_ENABLE();
 800067a:	2201      	movs	r2, #1
 800067c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800067e:	f7ff fdd9 	bl	8000234 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000682:	4d3c      	ldr	r5, [pc, #240]	; (8000774 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 8000684:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000686:	682b      	ldr	r3, [r5, #0]
 8000688:	079b      	lsls	r3, r3, #30
 800068a:	d50c      	bpl.n	80006a6 <HAL_RCC_OscConfig+0x192>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800068c:	6829      	ldr	r1, [r5, #0]
 800068e:	23f8      	movs	r3, #248	; 0xf8
 8000690:	fa93 f3a3 	rbit	r3, r3
 8000694:	fab3 f283 	clz	r2, r3
 8000698:	6923      	ldr	r3, [r4, #16]
 800069a:	4093      	lsls	r3, r2
 800069c:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 80006a0:	4313      	orrs	r3, r2
 80006a2:	602b      	str	r3, [r5, #0]
 80006a4:	e73f      	b.n	8000526 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006a6:	f7ff fdc5 	bl	8000234 <HAL_GetTick>
 80006aa:	1b80      	subs	r0, r0, r6
 80006ac:	2802      	cmp	r0, #2
 80006ae:	d9ea      	bls.n	8000686 <HAL_RCC_OscConfig+0x172>
 80006b0:	e79e      	b.n	80005f0 <HAL_RCC_OscConfig+0xdc>
        __HAL_RCC_HSI_DISABLE();
 80006b2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80006b4:	f7ff fdbe 	bl	8000234 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006b8:	4d2e      	ldr	r5, [pc, #184]	; (8000774 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 80006ba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006bc:	682b      	ldr	r3, [r5, #0]
 80006be:	079f      	lsls	r7, r3, #30
 80006c0:	f57f af31 	bpl.w	8000526 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006c4:	f7ff fdb6 	bl	8000234 <HAL_GetTick>
 80006c8:	1b80      	subs	r0, r0, r6
 80006ca:	2802      	cmp	r0, #2
 80006cc:	d9f6      	bls.n	80006bc <HAL_RCC_OscConfig+0x1a8>
 80006ce:	e78f      	b.n	80005f0 <HAL_RCC_OscConfig+0xdc>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80006d0:	6962      	ldr	r2, [r4, #20]
 80006d2:	4b2b      	ldr	r3, [pc, #172]	; (8000780 <HAL_RCC_OscConfig+0x26c>)
 80006d4:	b17a      	cbz	r2, 80006f6 <HAL_RCC_OscConfig+0x1e2>
      __HAL_RCC_LSI_ENABLE();
 80006d6:	2201      	movs	r2, #1
 80006d8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80006da:	f7ff fdab 	bl	8000234 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006de:	4d25      	ldr	r5, [pc, #148]	; (8000774 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 80006e0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006e2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80006e4:	0798      	lsls	r0, r3, #30
 80006e6:	f53f af22 	bmi.w	800052e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006ea:	f7ff fda3 	bl	8000234 <HAL_GetTick>
 80006ee:	1b80      	subs	r0, r0, r6
 80006f0:	2802      	cmp	r0, #2
 80006f2:	d9f6      	bls.n	80006e2 <HAL_RCC_OscConfig+0x1ce>
 80006f4:	e77c      	b.n	80005f0 <HAL_RCC_OscConfig+0xdc>
      __HAL_RCC_LSI_DISABLE();
 80006f6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80006f8:	f7ff fd9c 	bl	8000234 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006fc:	4d1d      	ldr	r5, [pc, #116]	; (8000774 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 80006fe:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000700:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000702:	0799      	lsls	r1, r3, #30
 8000704:	f57f af13 	bpl.w	800052e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000708:	f7ff fd94 	bl	8000234 <HAL_GetTick>
 800070c:	1b80      	subs	r0, r0, r6
 800070e:	2802      	cmp	r0, #2
 8000710:	d9f6      	bls.n	8000700 <HAL_RCC_OscConfig+0x1ec>
 8000712:	e76d      	b.n	80005f0 <HAL_RCC_OscConfig+0xdc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000714:	f7ff fd8e 	bl	8000234 <HAL_GetTick>
 8000718:	1b80      	subs	r0, r0, r6
 800071a:	2802      	cmp	r0, #2
 800071c:	f67f af1e 	bls.w	800055c <HAL_RCC_OscConfig+0x48>
 8000720:	e766      	b.n	80005f0 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000722:	2b05      	cmp	r3, #5
 8000724:	d104      	bne.n	8000730 <HAL_RCC_OscConfig+0x21c>
 8000726:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000728:	f043 0304 	orr.w	r3, r3, #4
 800072c:	672b      	str	r3, [r5, #112]	; 0x70
 800072e:	e71e      	b.n	800056e <HAL_RCC_OscConfig+0x5a>
 8000730:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000732:	f022 0201 	bic.w	r2, r2, #1
 8000736:	672a      	str	r2, [r5, #112]	; 0x70
 8000738:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800073a:	f022 0204 	bic.w	r2, r2, #4
 800073e:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000740:	2b00      	cmp	r3, #0
 8000742:	f47f af18 	bne.w	8000576 <HAL_RCC_OscConfig+0x62>
      tickstart = HAL_GetTick();
 8000746:	f7ff fd75 	bl	8000234 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800074a:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800074e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000750:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000752:	0798      	lsls	r0, r3, #30
 8000754:	f57f af19 	bpl.w	800058a <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000758:	f7ff fd6c 	bl	8000234 <HAL_GetTick>
 800075c:	1b80      	subs	r0, r0, r6
 800075e:	42b8      	cmp	r0, r7
 8000760:	d9f6      	bls.n	8000750 <HAL_RCC_OscConfig+0x23c>
 8000762:	e745      	b.n	80005f0 <HAL_RCC_OscConfig+0xdc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000764:	f7ff fd66 	bl	8000234 <HAL_GetTick>
 8000768:	1b80      	subs	r0, r0, r6
 800076a:	42b8      	cmp	r0, r7
 800076c:	f67f af09 	bls.w	8000582 <HAL_RCC_OscConfig+0x6e>
 8000770:	e73e      	b.n	80005f0 <HAL_RCC_OscConfig+0xdc>
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800
 8000778:	40007000 	.word	0x40007000
 800077c:	42470000 	.word	0x42470000
 8000780:	42470e80 	.word	0x42470e80
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000784:	4d2b      	ldr	r5, [pc, #172]	; (8000834 <HAL_RCC_OscConfig+0x320>)
 8000786:	68ab      	ldr	r3, [r5, #8]
 8000788:	f003 030c 	and.w	r3, r3, #12
 800078c:	2b08      	cmp	r3, #8
 800078e:	f43f af17 	beq.w	80005c0 <HAL_RCC_OscConfig+0xac>
 8000792:	4e29      	ldr	r6, [pc, #164]	; (8000838 <HAL_RCC_OscConfig+0x324>)
 8000794:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000796:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000798:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800079a:	d13e      	bne.n	800081a <HAL_RCC_OscConfig+0x306>
        tickstart = HAL_GetTick();
 800079c:	f7ff fd4a 	bl	8000234 <HAL_GetTick>
 80007a0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80007a2:	682b      	ldr	r3, [r5, #0]
 80007a4:	0199      	lsls	r1, r3, #6
 80007a6:	d432      	bmi.n	800080e <HAL_RCC_OscConfig+0x2fa>
 80007a8:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 80007ac:	fa97 f7a7 	rbit	r7, r7
 80007b0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80007b4:	fab7 f787 	clz	r7, r7
 80007b8:	fa92 f2a2 	rbit	r2, r2
 80007bc:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 80007c0:	fab2 f082 	clz	r0, r2
 80007c4:	fa91 f1a1 	rbit	r1, r1
 80007c8:	6a22      	ldr	r2, [r4, #32]
 80007ca:	69e3      	ldr	r3, [r4, #28]
 80007cc:	4313      	orrs	r3, r2
 80007ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80007d0:	fa02 f707 	lsl.w	r7, r2, r7
 80007d4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80007d6:	0852      	lsrs	r2, r2, #1
 80007d8:	3a01      	subs	r2, #1
 80007da:	4082      	lsls	r2, r0
 80007dc:	433b      	orrs	r3, r7
 80007de:	4313      	orrs	r3, r2
 80007e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80007e2:	4c14      	ldr	r4, [pc, #80]	; (8000834 <HAL_RCC_OscConfig+0x320>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80007e4:	fab1 f181 	clz	r1, r1
 80007e8:	fa02 f101 	lsl.w	r1, r2, r1
 80007ec:	430b      	orrs	r3, r1
 80007ee:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80007f0:	2301      	movs	r3, #1
 80007f2:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80007f4:	f7ff fd1e 	bl	8000234 <HAL_GetTick>
 80007f8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80007fa:	6823      	ldr	r3, [r4, #0]
 80007fc:	019a      	lsls	r2, r3, #6
 80007fe:	f53f aec8 	bmi.w	8000592 <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000802:	f7ff fd17 	bl	8000234 <HAL_GetTick>
 8000806:	1b40      	subs	r0, r0, r5
 8000808:	2802      	cmp	r0, #2
 800080a:	d9f6      	bls.n	80007fa <HAL_RCC_OscConfig+0x2e6>
 800080c:	e6f0      	b.n	80005f0 <HAL_RCC_OscConfig+0xdc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800080e:	f7ff fd11 	bl	8000234 <HAL_GetTick>
 8000812:	1bc0      	subs	r0, r0, r7
 8000814:	2802      	cmp	r0, #2
 8000816:	d9c4      	bls.n	80007a2 <HAL_RCC_OscConfig+0x28e>
 8000818:	e6ea      	b.n	80005f0 <HAL_RCC_OscConfig+0xdc>
        tickstart = HAL_GetTick();
 800081a:	f7ff fd0b 	bl	8000234 <HAL_GetTick>
 800081e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000820:	682b      	ldr	r3, [r5, #0]
 8000822:	019b      	lsls	r3, r3, #6
 8000824:	f57f aeb5 	bpl.w	8000592 <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000828:	f7ff fd04 	bl	8000234 <HAL_GetTick>
 800082c:	1b00      	subs	r0, r0, r4
 800082e:	2802      	cmp	r0, #2
 8000830:	d9f6      	bls.n	8000820 <HAL_RCC_OscConfig+0x30c>
 8000832:	e6dd      	b.n	80005f0 <HAL_RCC_OscConfig+0xdc>
 8000834:	40023800 	.word	0x40023800
 8000838:	42470060 	.word	0x42470060

0800083c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800083c:	4a19      	ldr	r2, [pc, #100]	; (80008a4 <HAL_RCC_GetSysClockFreq+0x68>)
 800083e:	6893      	ldr	r3, [r2, #8]
 8000840:	f003 030c 	and.w	r3, r3, #12
 8000844:	2b04      	cmp	r3, #4
{
 8000846:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000848:	d003      	beq.n	8000852 <HAL_RCC_GetSysClockFreq+0x16>
 800084a:	2b08      	cmp	r3, #8
 800084c:	d003      	beq.n	8000856 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800084e:	4816      	ldr	r0, [pc, #88]	; (80008a8 <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000850:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8000852:	4816      	ldr	r0, [pc, #88]	; (80008ac <HAL_RCC_GetSysClockFreq+0x70>)
 8000854:	bd10      	pop	{r4, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000856:	6851      	ldr	r1, [r2, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000858:	6853      	ldr	r3, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800085a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800085e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000862:	f647 74c0 	movw	r4, #32704	; 0x7fc0
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000866:	6853      	ldr	r3, [r2, #4]
 8000868:	fa94 f0a4 	rbit	r0, r4
 800086c:	fab0 f080 	clz	r0, r0
 8000870:	ea03 0304 	and.w	r3, r3, r4
 8000874:	fa23 f300 	lsr.w	r3, r3, r0
 8000878:	bf14      	ite	ne
 800087a:	480c      	ldrne	r0, [pc, #48]	; (80008ac <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 800087c:	480a      	ldreq	r0, [pc, #40]	; (80008a8 <HAL_RCC_GetSysClockFreq+0x6c>)
 800087e:	fbb0 f0f1 	udiv	r0, r0, r1
 8000882:	4358      	muls	r0, r3
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8000884:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <HAL_RCC_GetSysClockFreq+0x68>)
 8000886:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	fa92 f2a2 	rbit	r2, r2
 8000890:	fab2 f282 	clz	r2, r2
 8000894:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000898:	40d3      	lsrs	r3, r2
 800089a:	3301      	adds	r3, #1
 800089c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800089e:	fbb0 f0f3 	udiv	r0, r0, r3
 80008a2:	bd10      	pop	{r4, pc}
 80008a4:	40023800 	.word	0x40023800
 80008a8:	00f42400 	.word	0x00f42400
 80008ac:	017d7840 	.word	0x017d7840

080008b0 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008b0:	4b56      	ldr	r3, [pc, #344]	; (8000a0c <HAL_RCC_ClockConfig+0x15c>)
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	f002 020f 	and.w	r2, r2, #15
 80008b8:	428a      	cmp	r2, r1
{
 80008ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008be:	4605      	mov	r5, r0
 80008c0:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008c2:	d330      	bcc.n	8000926 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80008c4:	682a      	ldr	r2, [r5, #0]
 80008c6:	0794      	lsls	r4, r2, #30
 80008c8:	d437      	bmi.n	800093a <HAL_RCC_ClockConfig+0x8a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80008ca:	07d0      	lsls	r0, r2, #31
 80008cc:	d43d      	bmi.n	800094a <HAL_RCC_ClockConfig+0x9a>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80008ce:	4b4f      	ldr	r3, [pc, #316]	; (8000a0c <HAL_RCC_ClockConfig+0x15c>)
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	f002 020f 	and.w	r2, r2, #15
 80008d6:	4296      	cmp	r6, r2
 80008d8:	f0c0 8088 	bcc.w	80009ec <HAL_RCC_ClockConfig+0x13c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80008dc:	682a      	ldr	r2, [r5, #0]
 80008de:	0751      	lsls	r1, r2, #29
 80008e0:	f100 808c 	bmi.w	80009fc <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80008e4:	0713      	lsls	r3, r2, #28
 80008e6:	d507      	bpl.n	80008f8 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80008e8:	4a49      	ldr	r2, [pc, #292]	; (8000a10 <HAL_RCC_ClockConfig+0x160>)
 80008ea:	6929      	ldr	r1, [r5, #16]
 80008ec:	6893      	ldr	r3, [r2, #8]
 80008ee:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80008f2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80008f6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80008f8:	f7ff ffa0 	bl	800083c <HAL_RCC_GetSysClockFreq>
 80008fc:	4b44      	ldr	r3, [pc, #272]	; (8000a10 <HAL_RCC_ClockConfig+0x160>)
 80008fe:	22f0      	movs	r2, #240	; 0xf0
 8000900:	689b      	ldr	r3, [r3, #8]
 8000902:	fa92 f2a2 	rbit	r2, r2
 8000906:	fab2 f282 	clz	r2, r2
 800090a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800090e:	40d3      	lsrs	r3, r2
 8000910:	4a40      	ldr	r2, [pc, #256]	; (8000a14 <HAL_RCC_ClockConfig+0x164>)
 8000912:	5cd3      	ldrb	r3, [r2, r3]
 8000914:	40d8      	lsrs	r0, r3
 8000916:	4b40      	ldr	r3, [pc, #256]	; (8000a18 <HAL_RCC_ClockConfig+0x168>)
 8000918:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800091a:	2000      	movs	r0, #0
 800091c:	f7ff fc54 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 8000920:	2000      	movs	r0, #0
}
 8000922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000926:	b2ca      	uxtb	r2, r1
 8000928:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f003 030f 	and.w	r3, r3, #15
 8000930:	4299      	cmp	r1, r3
 8000932:	d0c7      	beq.n	80008c4 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000934:	2001      	movs	r0, #1
 8000936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800093a:	4935      	ldr	r1, [pc, #212]	; (8000a10 <HAL_RCC_ClockConfig+0x160>)
 800093c:	68a8      	ldr	r0, [r5, #8]
 800093e:	688b      	ldr	r3, [r1, #8]
 8000940:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000944:	4303      	orrs	r3, r0
 8000946:	608b      	str	r3, [r1, #8]
 8000948:	e7bf      	b.n	80008ca <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800094a:	686a      	ldr	r2, [r5, #4]
 800094c:	4b30      	ldr	r3, [pc, #192]	; (8000a10 <HAL_RCC_ClockConfig+0x160>)
 800094e:	2a01      	cmp	r2, #1
 8000950:	d11e      	bne.n	8000990 <HAL_RCC_ClockConfig+0xe0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000958:	d0ec      	beq.n	8000934 <HAL_RCC_ClockConfig+0x84>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800095a:	4c2d      	ldr	r4, [pc, #180]	; (8000a10 <HAL_RCC_ClockConfig+0x160>)
 800095c:	68a3      	ldr	r3, [r4, #8]
 800095e:	f023 0303 	bic.w	r3, r3, #3
 8000962:	4313      	orrs	r3, r2
 8000964:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8000966:	f7ff fc65 	bl	8000234 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800096a:	686b      	ldr	r3, [r5, #4]
 800096c:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 800096e:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000970:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000974:	d116      	bne.n	80009a4 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000976:	68a3      	ldr	r3, [r4, #8]
 8000978:	f003 030c 	and.w	r3, r3, #12
 800097c:	2b04      	cmp	r3, #4
 800097e:	d0a6      	beq.n	80008ce <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000980:	f7ff fc58 	bl	8000234 <HAL_GetTick>
 8000984:	1bc0      	subs	r0, r0, r7
 8000986:	4540      	cmp	r0, r8
 8000988:	d9f5      	bls.n	8000976 <HAL_RCC_ClockConfig+0xc6>
          return HAL_TIMEOUT;
 800098a:	2003      	movs	r0, #3
 800098c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000990:	1e91      	subs	r1, r2, #2
 8000992:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000994:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000996:	d802      	bhi.n	800099e <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000998:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800099c:	e7dc      	b.n	8000958 <HAL_RCC_ClockConfig+0xa8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800099e:	f013 0f02 	tst.w	r3, #2
 80009a2:	e7d9      	b.n	8000958 <HAL_RCC_ClockConfig+0xa8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80009a4:	2b02      	cmp	r3, #2
 80009a6:	d10a      	bne.n	80009be <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009a8:	68a3      	ldr	r3, [r4, #8]
 80009aa:	f003 030c 	and.w	r3, r3, #12
 80009ae:	2b08      	cmp	r3, #8
 80009b0:	d08d      	beq.n	80008ce <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009b2:	f7ff fc3f 	bl	8000234 <HAL_GetTick>
 80009b6:	1bc0      	subs	r0, r0, r7
 80009b8:	4540      	cmp	r0, r8
 80009ba:	d9f5      	bls.n	80009a8 <HAL_RCC_ClockConfig+0xf8>
 80009bc:	e7e5      	b.n	800098a <HAL_RCC_ClockConfig+0xda>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 80009be:	2b03      	cmp	r3, #3
 80009c0:	d10f      	bne.n	80009e2 <HAL_RCC_ClockConfig+0x132>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80009c2:	68a3      	ldr	r3, [r4, #8]
 80009c4:	f003 030c 	and.w	r3, r3, #12
 80009c8:	2b0c      	cmp	r3, #12
 80009ca:	d080      	beq.n	80008ce <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009cc:	f7ff fc32 	bl	8000234 <HAL_GetTick>
 80009d0:	1bc0      	subs	r0, r0, r7
 80009d2:	4540      	cmp	r0, r8
 80009d4:	d9f5      	bls.n	80009c2 <HAL_RCC_ClockConfig+0x112>
 80009d6:	e7d8      	b.n	800098a <HAL_RCC_ClockConfig+0xda>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009d8:	f7ff fc2c 	bl	8000234 <HAL_GetTick>
 80009dc:	1bc0      	subs	r0, r0, r7
 80009de:	4540      	cmp	r0, r8
 80009e0:	d8d3      	bhi.n	800098a <HAL_RCC_ClockConfig+0xda>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80009e2:	68a3      	ldr	r3, [r4, #8]
 80009e4:	f013 0f0c 	tst.w	r3, #12
 80009e8:	d1f6      	bne.n	80009d8 <HAL_RCC_ClockConfig+0x128>
 80009ea:	e770      	b.n	80008ce <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009ec:	b2f2      	uxtb	r2, r6
 80009ee:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f003 030f 	and.w	r3, r3, #15
 80009f6:	429e      	cmp	r6, r3
 80009f8:	d19c      	bne.n	8000934 <HAL_RCC_ClockConfig+0x84>
 80009fa:	e76f      	b.n	80008dc <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80009fc:	4904      	ldr	r1, [pc, #16]	; (8000a10 <HAL_RCC_ClockConfig+0x160>)
 80009fe:	68e8      	ldr	r0, [r5, #12]
 8000a00:	688b      	ldr	r3, [r1, #8]
 8000a02:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000a06:	4303      	orrs	r3, r0
 8000a08:	608b      	str	r3, [r1, #8]
 8000a0a:	e76b      	b.n	80008e4 <HAL_RCC_ClockConfig+0x34>
 8000a0c:	40023c00 	.word	0x40023c00
 8000a10:	40023800 	.word	0x40023800
 8000a14:	08000dfc 	.word	0x08000dfc
 8000a18:	20000000 	.word	0x20000000

08000a1c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000a1c:	4b01      	ldr	r3, [pc, #4]	; (8000a24 <HAL_RCC_GetHCLKFreq+0x8>)
 8000a1e:	6818      	ldr	r0, [r3, #0]
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	20000000 	.word	0x20000000

08000a28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a2c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2e:	2400      	movs	r4, #0
 8000a30:	4b2c      	ldr	r3, [pc, #176]	; (8000ae4 <MX_GPIO_Init+0xbc>)
 8000a32:	9400      	str	r4, [sp, #0]
 8000a34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led_1_Pin|Led_2_Pin|Led_3_Pin|Led_4_Pin, GPIO_PIN_RESET);
 8000a36:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8000af0 <MX_GPIO_Init+0xc8>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Led_5_Pin|Led_6_Pin, GPIO_PIN_RESET);
 8000a3a:	4e2b      	ldr	r6, [pc, #172]	; (8000ae8 <MX_GPIO_Init+0xc0>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Led_7_Pin|Led_8_Pin, GPIO_PIN_RESET);
 8000a3c:	4f2b      	ldr	r7, [pc, #172]	; (8000aec <MX_GPIO_Init+0xc4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3e:	f042 0204 	orr.w	r2, r2, #4
 8000a42:	631a      	str	r2, [r3, #48]	; 0x30
 8000a44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a46:	f002 0204 	and.w	r2, r2, #4
 8000a4a:	9200      	str	r2, [sp, #0]
 8000a4c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	9401      	str	r4, [sp, #4]
 8000a50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a52:	f042 0201 	orr.w	r2, r2, #1
 8000a56:	631a      	str	r2, [r3, #48]	; 0x30
 8000a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a5a:	f002 0201 	and.w	r2, r2, #1
 8000a5e:	9201      	str	r2, [sp, #4]
 8000a60:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a62:	9402      	str	r4, [sp, #8]
 8000a64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a66:	f042 0202 	orr.w	r2, r2, #2
 8000a6a:	631a      	str	r2, [r3, #48]	; 0x30
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, Led_1_Pin|Led_2_Pin|Led_3_Pin|Led_4_Pin, GPIO_PIN_RESET);
 8000a74:	4622      	mov	r2, r4
 8000a76:	4640      	mov	r0, r8
 8000a78:	210f      	movs	r1, #15
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7a:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, Led_1_Pin|Led_2_Pin|Led_3_Pin|Led_4_Pin, GPIO_PIN_RESET);
 8000a7c:	f7ff fd44 	bl	8000508 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, Led_5_Pin|Led_6_Pin, GPIO_PIN_RESET);
 8000a80:	4622      	mov	r2, r4
 8000a82:	4630      	mov	r0, r6
 8000a84:	2130      	movs	r1, #48	; 0x30
 8000a86:	f7ff fd3f 	bl	8000508 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, Led_7_Pin|Led_8_Pin, GPIO_PIN_RESET);
 8000a8a:	4622      	mov	r2, r4
 8000a8c:	4638      	mov	r0, r7
 8000a8e:	2103      	movs	r1, #3
 8000a90:	f7ff fd3a 	bl	8000508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Boton_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a94:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = Boton_Pin;
 8000a96:	2304      	movs	r3, #4
  HAL_GPIO_Init(Boton_GPIO_Port, &GPIO_InitStruct);
 8000a98:	a903      	add	r1, sp, #12
 8000a9a:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = Boton_Pin;
 8000a9c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9e:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa0:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(Boton_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f7ff fc4b 	bl	800033c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Led_1_Pin|Led_2_Pin|Led_3_Pin|Led_4_Pin;
 8000aa6:	230f      	movs	r3, #15
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa8:	a903      	add	r1, sp, #12
 8000aaa:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = Led_1_Pin|Led_2_Pin|Led_3_Pin|Led_4_Pin;
 8000aac:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab4:	f7ff fc42 	bl	800033c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Led_5_Pin|Led_6_Pin;
 8000ab8:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aba:	a903      	add	r1, sp, #12
 8000abc:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = Led_5_Pin|Led_6_Pin;
 8000abe:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac6:	f7ff fc39 	bl	800033c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Led_7_Pin|Led_8_Pin;
 8000aca:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	a903      	add	r1, sp, #12
 8000ace:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = Led_7_Pin|Led_8_Pin;
 8000ad0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad2:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad8:	f7ff fc30 	bl	800033c <HAL_GPIO_Init>

}
 8000adc:	b008      	add	sp, #32
 8000ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020800 	.word	0x40020800
 8000aec:	40020400 	.word	0x40020400
 8000af0:	40020000 	.word	0x40020000

08000af4 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000af4:	b510      	push	{r4, lr}
 8000af6:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af8:	2300      	movs	r3, #0
 8000afa:	4a21      	ldr	r2, [pc, #132]	; (8000b80 <SystemClock_Config+0x8c>)
 8000afc:	9301      	str	r3, [sp, #4]
 8000afe:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000b00:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000b04:	6411      	str	r1, [r2, #64]	; 0x40
 8000b06:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000b08:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000b0c:	9201      	str	r2, [sp, #4]
 8000b0e:	9a01      	ldr	r2, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b10:	4a1c      	ldr	r2, [pc, #112]	; (8000b84 <SystemClock_Config+0x90>)
 8000b12:	9302      	str	r3, [sp, #8]
 8000b14:	6811      	ldr	r1, [r2, #0]
 8000b16:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000b1a:	6011      	str	r1, [r2, #0]
 8000b1c:	6812      	ldr	r2, [r2, #0]
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b1e:	930e      	str	r3, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b20:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000b24:	9202      	str	r2, [sp, #8]
 8000b26:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b28:	2202      	movs	r2, #2
 8000b2a:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b30:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000b32:	2210      	movs	r2, #16
 8000b34:	920c      	str	r2, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b36:	f7ff fced 	bl	8000514 <HAL_RCC_OscConfig>
 8000b3a:	4601      	mov	r1, r0
 8000b3c:	b100      	cbz	r0, 8000b40 <SystemClock_Config+0x4c>
 8000b3e:	e7fe      	b.n	8000b3e <SystemClock_Config+0x4a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b40:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b42:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b44:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b46:	9006      	str	r0, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b48:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b4a:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b4c:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b4e:	f7ff feaf 	bl	80008b0 <HAL_RCC_ClockConfig>
 8000b52:	4604      	mov	r4, r0
 8000b54:	b100      	cbz	r0, 8000b58 <SystemClock_Config+0x64>
 8000b56:	e7fe      	b.n	8000b56 <SystemClock_Config+0x62>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000b58:	f7ff ff60 	bl	8000a1c <HAL_RCC_GetHCLKFreq>
 8000b5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b60:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b64:	f7ff fbc2 	bl	80002ec <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000b68:	2004      	movs	r0, #4
 8000b6a:	f7ff fbd5 	bl	8000318 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000b6e:	4622      	mov	r2, r4
 8000b70:	4621      	mov	r1, r4
 8000b72:	f04f 30ff 	mov.w	r0, #4294967295
 8000b76:	f7ff fb85 	bl	8000284 <HAL_NVIC_SetPriority>
}
 8000b7a:	b014      	add	sp, #80	; 0x50
 8000b7c:	bd10      	pop	{r4, pc}
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40007000 	.word	0x40007000

08000b88 <main>:
{
 8000b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_Init();
 8000b8a:	f7ff fb31 	bl	80001f0 <HAL_Init>
  SystemClock_Config();
 8000b8e:	f7ff ffb1 	bl	8000af4 <SystemClock_Config>
  MX_GPIO_Init();
 8000b92:	f7ff ff49 	bl	8000a28 <MX_GPIO_Init>
	  while(HAL_GPIO_ReadPin(GPIOC, Boton_Pin)){}
 8000b96:	4d36      	ldr	r5, [pc, #216]	; (8000c70 <main+0xe8>)
	  	HAL_GPIO_WritePin(GPIOA, Led_1_Pin,GPIO_PIN_RESET);
 8000b98:	4c36      	ldr	r4, [pc, #216]	; (8000c74 <main+0xec>)
	     		HAL_GPIO_WritePin(GPIOB, Led_7_Pin,GPIO_PIN_RESET);
 8000b9a:	4e37      	ldr	r6, [pc, #220]	; (8000c78 <main+0xf0>)
  int contador=0;
 8000b9c:	2700      	movs	r7, #0
	  while(HAL_GPIO_ReadPin(GPIOC, Boton_Pin)){}
 8000b9e:	2104      	movs	r1, #4
 8000ba0:	4628      	mov	r0, r5
 8000ba2:	f7ff fcab 	bl	80004fc <HAL_GPIO_ReadPin>
 8000ba6:	2800      	cmp	r0, #0
 8000ba8:	d1f9      	bne.n	8000b9e <main+0x16>
	  	  while(!HAL_GPIO_ReadPin(GPIOC, Boton_Pin)){}///se va a ciclar cuando se ha un cero
 8000baa:	2104      	movs	r1, #4
 8000bac:	4830      	ldr	r0, [pc, #192]	; (8000c70 <main+0xe8>)
 8000bae:	f7ff fca5 	bl	80004fc <HAL_GPIO_ReadPin>
 8000bb2:	2800      	cmp	r0, #0
 8000bb4:	d0f9      	beq.n	8000baa <main+0x22>
	  	HAL_GPIO_WritePin(GPIOA, Led_1_Pin,GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2101      	movs	r1, #1
 8000bba:	4620      	mov	r0, r4
 8000bbc:	f7ff fca4 	bl	8000508 <HAL_GPIO_WritePin>
	     		HAL_GPIO_WritePin(GPIOA, Led_2_Pin,GPIO_PIN_RESET);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2102      	movs	r1, #2
 8000bc4:	4620      	mov	r0, r4
 8000bc6:	f7ff fc9f 	bl	8000508 <HAL_GPIO_WritePin>
	     		HAL_GPIO_WritePin(GPIOA, Led_3_Pin,GPIO_PIN_RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2104      	movs	r1, #4
 8000bce:	4620      	mov	r0, r4
 8000bd0:	f7ff fc9a 	bl	8000508 <HAL_GPIO_WritePin>
	     		HAL_GPIO_WritePin(GPIOA, Led_4_Pin,GPIO_PIN_RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2108      	movs	r1, #8
 8000bd8:	4620      	mov	r0, r4
 8000bda:	f7ff fc95 	bl	8000508 <HAL_GPIO_WritePin>
	     	    HAL_GPIO_WritePin(GPIOC, Led_5_Pin,GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2110      	movs	r1, #16
 8000be2:	4628      	mov	r0, r5
 8000be4:	f7ff fc90 	bl	8000508 <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOC, Led_6_Pin,GPIO_PIN_RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2120      	movs	r1, #32
 8000bec:	4628      	mov	r0, r5
 8000bee:	f7ff fc8b 	bl	8000508 <HAL_GPIO_WritePin>
	     		HAL_GPIO_WritePin(GPIOB, Led_7_Pin,GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	4630      	mov	r0, r6
 8000bf8:	f7ff fc86 	bl	8000508 <HAL_GPIO_WritePin>
	  	  contador++;
 8000bfc:	3701      	adds	r7, #1
	     		HAL_GPIO_WritePin(GPIOB, Led_8_Pin,GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2102      	movs	r1, #2
 8000c02:	4630      	mov	r0, r6
 8000c04:	f7ff fc80 	bl	8000508 <HAL_GPIO_WritePin>
	  	  switch(contador){
 8000c08:	1e7b      	subs	r3, r7, #1
 8000c0a:	2b0d      	cmp	r3, #13
 8000c0c:	d80d      	bhi.n	8000c2a <main+0xa2>
 8000c0e:	e8df f003 	tbb	[pc, r3]
 8000c12:	1107      	.short	0x1107
 8000c14:	1b1f2225 	.word	0x1b1f2225
 8000c18:	1b181418 	.word	0x1b181418
 8000c1c:	2825221f 	.word	0x2825221f
	  	  		HAL_GPIO_WritePin(GPIOA, Led_1_Pin,GPIO_PIN_SET);
 8000c20:	2201      	movs	r2, #1
 8000c22:	4611      	mov	r1, r2
	  	   		HAL_GPIO_WritePin(GPIOA, Led_2_Pin,GPIO_PIN_SET);
 8000c24:	4620      	mov	r0, r4
 8000c26:	f7ff fc6f 	bl	8000508 <HAL_GPIO_WritePin>
	  	  HAL_Delay(300);
 8000c2a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c2e:	f7ff fb07 	bl	8000240 <HAL_Delay>
	  while(HAL_GPIO_ReadPin(GPIOC, Boton_Pin)){}
 8000c32:	e7b4      	b.n	8000b9e <main+0x16>
	  	   		HAL_GPIO_WritePin(GPIOA, Led_2_Pin,GPIO_PIN_SET);
 8000c34:	2201      	movs	r2, #1
 8000c36:	2102      	movs	r1, #2
 8000c38:	e7f4      	b.n	8000c24 <main+0x9c>
	  	   		HAL_GPIO_WritePin(GPIOB, Led_8_Pin,GPIO_PIN_SET);
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	2102      	movs	r1, #2
	  	   		HAL_GPIO_WritePin(GPIOB, Led_7_Pin,GPIO_PIN_SET);
 8000c3e:	4630      	mov	r0, r6
 8000c40:	e7f1      	b.n	8000c26 <main+0x9e>
 8000c42:	2201      	movs	r2, #1
 8000c44:	4611      	mov	r1, r2
 8000c46:	e7fa      	b.n	8000c3e <main+0xb6>
	  	        HAL_GPIO_WritePin(GPIOC, Led_6_Pin,GPIO_PIN_SET);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	2120      	movs	r1, #32
	  	   	    HAL_GPIO_WritePin(GPIOC, Led_5_Pin,GPIO_PIN_SET);
 8000c4c:	4628      	mov	r0, r5
 8000c4e:	e7ea      	b.n	8000c26 <main+0x9e>
 8000c50:	2201      	movs	r2, #1
 8000c52:	2110      	movs	r1, #16
 8000c54:	e7fa      	b.n	8000c4c <main+0xc4>
	  	   		HAL_GPIO_WritePin(GPIOA, Led_4_Pin,GPIO_PIN_SET);
 8000c56:	2201      	movs	r2, #1
 8000c58:	2108      	movs	r1, #8
 8000c5a:	e7e3      	b.n	8000c24 <main+0x9c>
	  	   		HAL_GPIO_WritePin(GPIOA, Led_3_Pin,GPIO_PIN_SET);
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	2104      	movs	r1, #4
 8000c60:	e7e0      	b.n	8000c24 <main+0x9c>
	  	  	HAL_GPIO_WritePin(GPIOA, Led_2_Pin,GPIO_PIN_SET);
 8000c62:	2201      	movs	r2, #1
 8000c64:	2102      	movs	r1, #2
 8000c66:	4620      	mov	r0, r4
 8000c68:	f7ff fc4e 	bl	8000508 <HAL_GPIO_WritePin>
    	   		contador=0;
 8000c6c:	2700      	movs	r7, #0
	  	   		break;
 8000c6e:	e7dc      	b.n	8000c2a <main+0xa2>
 8000c70:	40020800 	.word	0x40020800
 8000c74:	40020000 	.word	0x40020000
 8000c78:	40020400 	.word	0x40020400

08000c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c7c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c7e:	2003      	movs	r0, #3
 8000c80:	f7ff faee 	bl	8000260 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000c84:	2200      	movs	r2, #0
 8000c86:	4611      	mov	r1, r2
 8000c88:	f06f 000b 	mvn.w	r0, #11
 8000c8c:	f7ff fafa 	bl	8000284 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000c90:	2200      	movs	r2, #0
 8000c92:	4611      	mov	r1, r2
 8000c94:	f06f 000a 	mvn.w	r0, #10
 8000c98:	f7ff faf4 	bl	8000284 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4611      	mov	r1, r2
 8000ca0:	f06f 0009 	mvn.w	r0, #9
 8000ca4:	f7ff faee 	bl	8000284 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	4611      	mov	r1, r2
 8000cac:	f06f 0004 	mvn.w	r0, #4
 8000cb0:	f7ff fae8 	bl	8000284 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	4611      	mov	r1, r2
 8000cb8:	f06f 0003 	mvn.w	r0, #3
 8000cbc:	f7ff fae2 	bl	8000284 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	f06f 0001 	mvn.w	r0, #1
 8000cc8:	f7ff fadc 	bl	8000284 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4611      	mov	r1, r2
 8000cd0:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000cd8:	f7ff bad4 	b.w	8000284 <HAL_NVIC_SetPriority>

08000cdc <NMI_Handler>:
 8000cdc:	4770      	bx	lr

08000cde <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8000cde:	e7fe      	b.n	8000cde <HardFault_Handler>

08000ce0 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000ce0:	e7fe      	b.n	8000ce0 <MemManage_Handler>

08000ce2 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8000ce2:	e7fe      	b.n	8000ce2 <BusFault_Handler>

08000ce4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8000ce4:	e7fe      	b.n	8000ce4 <UsageFault_Handler>

08000ce6 <SVC_Handler>:
 8000ce6:	4770      	bx	lr

08000ce8 <DebugMon_Handler>:
 8000ce8:	4770      	bx	lr

08000cea <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8000cea:	4770      	bx	lr

08000cec <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000cec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cee:	f7ff fa99 	bl	8000224 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8000cf6:	f7ff bb1c 	b.w	8000332 <HAL_SYSTICK_IRQHandler>
	...

08000cfc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cfc:	490f      	ldr	r1, [pc, #60]	; (8000d3c <SystemInit+0x40>)
 8000cfe:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000d02:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000d0a:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <SystemInit+0x44>)
 8000d0c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d0e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8000d10:	f042 0201 	orr.w	r2, r2, #1
 8000d14:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000d16:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000d1e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d22:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000d24:	4a07      	ldr	r2, [pc, #28]	; (8000d44 <SystemInit+0x48>)
 8000d26:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d2e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000d30:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d32:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d36:	608b      	str	r3, [r1, #8]
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	e000ed00 	.word	0xe000ed00
 8000d40:	40023800 	.word	0x40023800
 8000d44:	24003010 	.word	0x24003010

08000d48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d80 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d4c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d4e:	e003      	b.n	8000d58 <LoopCopyDataInit>

08000d50 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d52:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d54:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d56:	3104      	adds	r1, #4

08000d58 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d58:	480b      	ldr	r0, [pc, #44]	; (8000d88 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d5c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d5e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d60:	d3f6      	bcc.n	8000d50 <CopyDataInit>
  ldr  r2, =_sbss
 8000d62:	4a0b      	ldr	r2, [pc, #44]	; (8000d90 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d64:	e002      	b.n	8000d6c <LoopFillZerobss>

08000d66 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d66:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d68:	f842 3b04 	str.w	r3, [r2], #4

08000d6c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d6c:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d6e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d70:	d3f9      	bcc.n	8000d66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d72:	f7ff ffc3 	bl	8000cfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d76:	f000 f811 	bl	8000d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d7a:	f7ff ff05 	bl	8000b88 <main>
  bx  lr    
 8000d7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d80:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d84:	08000e14 	.word	0x08000e14
  ldr  r0, =_sdata
 8000d88:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d8c:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8000d90:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8000d94:	20000024 	.word	0x20000024

08000d98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d98:	e7fe      	b.n	8000d98 <ADC_IRQHandler>
	...

08000d9c <__libc_init_array>:
 8000d9c:	b570      	push	{r4, r5, r6, lr}
 8000d9e:	4e0d      	ldr	r6, [pc, #52]	; (8000dd4 <__libc_init_array+0x38>)
 8000da0:	4c0d      	ldr	r4, [pc, #52]	; (8000dd8 <__libc_init_array+0x3c>)
 8000da2:	1ba4      	subs	r4, r4, r6
 8000da4:	10a4      	asrs	r4, r4, #2
 8000da6:	2500      	movs	r5, #0
 8000da8:	42a5      	cmp	r5, r4
 8000daa:	d109      	bne.n	8000dc0 <__libc_init_array+0x24>
 8000dac:	4e0b      	ldr	r6, [pc, #44]	; (8000ddc <__libc_init_array+0x40>)
 8000dae:	4c0c      	ldr	r4, [pc, #48]	; (8000de0 <__libc_init_array+0x44>)
 8000db0:	f000 f818 	bl	8000de4 <_init>
 8000db4:	1ba4      	subs	r4, r4, r6
 8000db6:	10a4      	asrs	r4, r4, #2
 8000db8:	2500      	movs	r5, #0
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	d105      	bne.n	8000dca <__libc_init_array+0x2e>
 8000dbe:	bd70      	pop	{r4, r5, r6, pc}
 8000dc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000dc4:	4798      	blx	r3
 8000dc6:	3501      	adds	r5, #1
 8000dc8:	e7ee      	b.n	8000da8 <__libc_init_array+0xc>
 8000dca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000dce:	4798      	blx	r3
 8000dd0:	3501      	adds	r5, #1
 8000dd2:	e7f2      	b.n	8000dba <__libc_init_array+0x1e>
 8000dd4:	08000e0c 	.word	0x08000e0c
 8000dd8:	08000e0c 	.word	0x08000e0c
 8000ddc:	08000e0c 	.word	0x08000e0c
 8000de0:	08000e10 	.word	0x08000e10

08000de4 <_init>:
 8000de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000de6:	bf00      	nop
 8000de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dea:	bc08      	pop	{r3}
 8000dec:	469e      	mov	lr, r3
 8000dee:	4770      	bx	lr

08000df0 <_fini>:
 8000df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000df2:	bf00      	nop
 8000df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000df6:	bc08      	pop	{r3}
 8000df8:	469e      	mov	lr, r3
 8000dfa:	4770      	bx	lr
