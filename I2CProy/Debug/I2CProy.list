
C:\Users\LENOVO\Documents\I2CProy\Debug\I2CProy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006468  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  080065f8  080065f8  000165f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006928  08006928  00016928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006930  08006930  00016930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006934  08006934  00016934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000678  20000000  08006938  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020678  2**0
                  CONTENTS
  8 .bss          00000138  20000678  20000678  00020678  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200007b0  200007b0  00020678  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020678  2**0
                  CONTENTS, READONLY
 11 .debug_info   00017eea  00000000  00000000  000206a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002ba4  00000000  00000000  00038592  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00008c39  00000000  00000000  0003b136  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a20  00000000  00000000  00043d70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e28  00000000  00000000  00044790  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000694f  00000000  00000000  000455b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000040da  00000000  00000000  0004bf07  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0004ffe1  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002a88  00000000  00000000  00050060  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000678 	.word	0x20000678
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080065e0 	.word	0x080065e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000067c 	.word	0x2000067c
 80001cc:	080065e0 	.word	0x080065e0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_uldivmod>:
 8000c40:	b953      	cbnz	r3, 8000c58 <__aeabi_uldivmod+0x18>
 8000c42:	b94a      	cbnz	r2, 8000c58 <__aeabi_uldivmod+0x18>
 8000c44:	2900      	cmp	r1, #0
 8000c46:	bf08      	it	eq
 8000c48:	2800      	cmpeq	r0, #0
 8000c4a:	bf1c      	itt	ne
 8000c4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c50:	f04f 30ff 	movne.w	r0, #4294967295
 8000c54:	f000 b97a 	b.w	8000f4c <__aeabi_idiv0>
 8000c58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c60:	f000 f806 	bl	8000c70 <__udivmoddi4>
 8000c64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c6c:	b004      	add	sp, #16
 8000c6e:	4770      	bx	lr

08000c70 <__udivmoddi4>:
 8000c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c74:	468c      	mov	ip, r1
 8000c76:	460d      	mov	r5, r1
 8000c78:	4604      	mov	r4, r0
 8000c7a:	9e08      	ldr	r6, [sp, #32]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d151      	bne.n	8000d24 <__udivmoddi4+0xb4>
 8000c80:	428a      	cmp	r2, r1
 8000c82:	4617      	mov	r7, r2
 8000c84:	d96d      	bls.n	8000d62 <__udivmoddi4+0xf2>
 8000c86:	fab2 fe82 	clz	lr, r2
 8000c8a:	f1be 0f00 	cmp.w	lr, #0
 8000c8e:	d00b      	beq.n	8000ca8 <__udivmoddi4+0x38>
 8000c90:	f1ce 0c20 	rsb	ip, lr, #32
 8000c94:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c98:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c9c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ca0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000ca4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ca8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cac:	0c25      	lsrs	r5, r4, #16
 8000cae:	fbbc f8fa 	udiv	r8, ip, sl
 8000cb2:	fa1f f987 	uxth.w	r9, r7
 8000cb6:	fb0a cc18 	mls	ip, sl, r8, ip
 8000cba:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000cbe:	fb08 f309 	mul.w	r3, r8, r9
 8000cc2:	42ab      	cmp	r3, r5
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x6c>
 8000cc6:	19ed      	adds	r5, r5, r7
 8000cc8:	f108 32ff 	add.w	r2, r8, #4294967295
 8000ccc:	f080 8123 	bcs.w	8000f16 <__udivmoddi4+0x2a6>
 8000cd0:	42ab      	cmp	r3, r5
 8000cd2:	f240 8120 	bls.w	8000f16 <__udivmoddi4+0x2a6>
 8000cd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cda:	443d      	add	r5, r7
 8000cdc:	1aed      	subs	r5, r5, r3
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb5 f0fa 	udiv	r0, r5, sl
 8000ce4:	fb0a 5510 	mls	r5, sl, r0, r5
 8000ce8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cec:	fb00 f909 	mul.w	r9, r0, r9
 8000cf0:	45a1      	cmp	r9, r4
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x98>
 8000cf4:	19e4      	adds	r4, r4, r7
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	f080 810a 	bcs.w	8000f12 <__udivmoddi4+0x2a2>
 8000cfe:	45a1      	cmp	r9, r4
 8000d00:	f240 8107 	bls.w	8000f12 <__udivmoddi4+0x2a2>
 8000d04:	3802      	subs	r0, #2
 8000d06:	443c      	add	r4, r7
 8000d08:	eba4 0409 	sub.w	r4, r4, r9
 8000d0c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d10:	2100      	movs	r1, #0
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	d061      	beq.n	8000dda <__udivmoddi4+0x16a>
 8000d16:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	6034      	str	r4, [r6, #0]
 8000d1e:	6073      	str	r3, [r6, #4]
 8000d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d24:	428b      	cmp	r3, r1
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0xc8>
 8000d28:	2e00      	cmp	r6, #0
 8000d2a:	d054      	beq.n	8000dd6 <__udivmoddi4+0x166>
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d32:	4608      	mov	r0, r1
 8000d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d38:	fab3 f183 	clz	r1, r3
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	f040 808e 	bne.w	8000e5e <__udivmoddi4+0x1ee>
 8000d42:	42ab      	cmp	r3, r5
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xdc>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80fa 	bhi.w	8000f40 <__udivmoddi4+0x2d0>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb65 0503 	sbc.w	r5, r5, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	46ac      	mov	ip, r5
 8000d56:	2e00      	cmp	r6, #0
 8000d58:	d03f      	beq.n	8000dda <__udivmoddi4+0x16a>
 8000d5a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	b912      	cbnz	r2, 8000d6a <__udivmoddi4+0xfa>
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d6a:	fab7 fe87 	clz	lr, r7
 8000d6e:	f1be 0f00 	cmp.w	lr, #0
 8000d72:	d134      	bne.n	8000dde <__udivmoddi4+0x16e>
 8000d74:	1beb      	subs	r3, r5, r7
 8000d76:	0c3a      	lsrs	r2, r7, #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d82:	0c25      	lsrs	r5, r4, #16
 8000d84:	fb02 3318 	mls	r3, r2, r8, r3
 8000d88:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d8c:	fb0c f308 	mul.w	r3, ip, r8
 8000d90:	42ab      	cmp	r3, r5
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x134>
 8000d94:	19ed      	adds	r5, r5, r7
 8000d96:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x132>
 8000d9c:	42ab      	cmp	r3, r5
 8000d9e:	f200 80d1 	bhi.w	8000f44 <__udivmoddi4+0x2d4>
 8000da2:	4680      	mov	r8, r0
 8000da4:	1aed      	subs	r5, r5, r3
 8000da6:	b2a3      	uxth	r3, r4
 8000da8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dac:	fb02 5510 	mls	r5, r2, r0, r5
 8000db0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000db4:	fb0c fc00 	mul.w	ip, ip, r0
 8000db8:	45a4      	cmp	ip, r4
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x15c>
 8000dbc:	19e4      	adds	r4, r4, r7
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x15a>
 8000dc4:	45a4      	cmp	ip, r4
 8000dc6:	f200 80b8 	bhi.w	8000f3a <__udivmoddi4+0x2ca>
 8000dca:	4618      	mov	r0, r3
 8000dcc:	eba4 040c 	sub.w	r4, r4, ip
 8000dd0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dd4:	e79d      	b.n	8000d12 <__udivmoddi4+0xa2>
 8000dd6:	4631      	mov	r1, r6
 8000dd8:	4630      	mov	r0, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	f1ce 0420 	rsb	r4, lr, #32
 8000de2:	fa05 f30e 	lsl.w	r3, r5, lr
 8000de6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000dea:	fa20 f804 	lsr.w	r8, r0, r4
 8000dee:	0c3a      	lsrs	r2, r7, #16
 8000df0:	fa25 f404 	lsr.w	r4, r5, r4
 8000df4:	ea48 0803 	orr.w	r8, r8, r3
 8000df8:	fbb4 f1f2 	udiv	r1, r4, r2
 8000dfc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e00:	fb02 4411 	mls	r4, r2, r1, r4
 8000e04:	fa1f fc87 	uxth.w	ip, r7
 8000e08:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e0c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e10:	42ab      	cmp	r3, r5
 8000e12:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e16:	d909      	bls.n	8000e2c <__udivmoddi4+0x1bc>
 8000e18:	19ed      	adds	r5, r5, r7
 8000e1a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e1e:	f080 808a 	bcs.w	8000f36 <__udivmoddi4+0x2c6>
 8000e22:	42ab      	cmp	r3, r5
 8000e24:	f240 8087 	bls.w	8000f36 <__udivmoddi4+0x2c6>
 8000e28:	3902      	subs	r1, #2
 8000e2a:	443d      	add	r5, r7
 8000e2c:	1aeb      	subs	r3, r5, r3
 8000e2e:	fa1f f588 	uxth.w	r5, r8
 8000e32:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e36:	fb02 3310 	mls	r3, r2, r0, r3
 8000e3a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e3e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e42:	42ab      	cmp	r3, r5
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x1e6>
 8000e46:	19ed      	adds	r5, r5, r7
 8000e48:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4c:	d26f      	bcs.n	8000f2e <__udivmoddi4+0x2be>
 8000e4e:	42ab      	cmp	r3, r5
 8000e50:	d96d      	bls.n	8000f2e <__udivmoddi4+0x2be>
 8000e52:	3802      	subs	r0, #2
 8000e54:	443d      	add	r5, r7
 8000e56:	1aeb      	subs	r3, r5, r3
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	e78f      	b.n	8000d7e <__udivmoddi4+0x10e>
 8000e5e:	f1c1 0720 	rsb	r7, r1, #32
 8000e62:	fa22 f807 	lsr.w	r8, r2, r7
 8000e66:	408b      	lsls	r3, r1
 8000e68:	fa05 f401 	lsl.w	r4, r5, r1
 8000e6c:	ea48 0303 	orr.w	r3, r8, r3
 8000e70:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e74:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e7e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e82:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e86:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e8a:	fa1f f883 	uxth.w	r8, r3
 8000e8e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e92:	fb09 f408 	mul.w	r4, r9, r8
 8000e96:	42ac      	cmp	r4, r5
 8000e98:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ea0:	d908      	bls.n	8000eb4 <__udivmoddi4+0x244>
 8000ea2:	18ed      	adds	r5, r5, r3
 8000ea4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ea8:	d243      	bcs.n	8000f32 <__udivmoddi4+0x2c2>
 8000eaa:	42ac      	cmp	r4, r5
 8000eac:	d941      	bls.n	8000f32 <__udivmoddi4+0x2c2>
 8000eae:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb2:	441d      	add	r5, r3
 8000eb4:	1b2d      	subs	r5, r5, r4
 8000eb6:	fa1f fe8e 	uxth.w	lr, lr
 8000eba:	fbb5 f0fc 	udiv	r0, r5, ip
 8000ebe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000ec2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000ec6:	fb00 f808 	mul.w	r8, r0, r8
 8000eca:	45a0      	cmp	r8, r4
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x26e>
 8000ece:	18e4      	adds	r4, r4, r3
 8000ed0:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ed4:	d229      	bcs.n	8000f2a <__udivmoddi4+0x2ba>
 8000ed6:	45a0      	cmp	r8, r4
 8000ed8:	d927      	bls.n	8000f2a <__udivmoddi4+0x2ba>
 8000eda:	3802      	subs	r0, #2
 8000edc:	441c      	add	r4, r3
 8000ede:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee2:	eba4 0408 	sub.w	r4, r4, r8
 8000ee6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eea:	454c      	cmp	r4, r9
 8000eec:	46c6      	mov	lr, r8
 8000eee:	464d      	mov	r5, r9
 8000ef0:	d315      	bcc.n	8000f1e <__udivmoddi4+0x2ae>
 8000ef2:	d012      	beq.n	8000f1a <__udivmoddi4+0x2aa>
 8000ef4:	b156      	cbz	r6, 8000f0c <__udivmoddi4+0x29c>
 8000ef6:	ebba 030e 	subs.w	r3, sl, lr
 8000efa:	eb64 0405 	sbc.w	r4, r4, r5
 8000efe:	fa04 f707 	lsl.w	r7, r4, r7
 8000f02:	40cb      	lsrs	r3, r1
 8000f04:	431f      	orrs	r7, r3
 8000f06:	40cc      	lsrs	r4, r1
 8000f08:	6037      	str	r7, [r6, #0]
 8000f0a:	6074      	str	r4, [r6, #4]
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	4618      	mov	r0, r3
 8000f14:	e6f8      	b.n	8000d08 <__udivmoddi4+0x98>
 8000f16:	4690      	mov	r8, r2
 8000f18:	e6e0      	b.n	8000cdc <__udivmoddi4+0x6c>
 8000f1a:	45c2      	cmp	sl, r8
 8000f1c:	d2ea      	bcs.n	8000ef4 <__udivmoddi4+0x284>
 8000f1e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f22:	eb69 0503 	sbc.w	r5, r9, r3
 8000f26:	3801      	subs	r0, #1
 8000f28:	e7e4      	b.n	8000ef4 <__udivmoddi4+0x284>
 8000f2a:	4628      	mov	r0, r5
 8000f2c:	e7d7      	b.n	8000ede <__udivmoddi4+0x26e>
 8000f2e:	4640      	mov	r0, r8
 8000f30:	e791      	b.n	8000e56 <__udivmoddi4+0x1e6>
 8000f32:	4681      	mov	r9, r0
 8000f34:	e7be      	b.n	8000eb4 <__udivmoddi4+0x244>
 8000f36:	4601      	mov	r1, r0
 8000f38:	e778      	b.n	8000e2c <__udivmoddi4+0x1bc>
 8000f3a:	3802      	subs	r0, #2
 8000f3c:	443c      	add	r4, r7
 8000f3e:	e745      	b.n	8000dcc <__udivmoddi4+0x15c>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e708      	b.n	8000d56 <__udivmoddi4+0xe6>
 8000f44:	f1a8 0802 	sub.w	r8, r8, #2
 8000f48:	443d      	add	r5, r7
 8000f4a:	e72b      	b.n	8000da4 <__udivmoddi4+0x134>

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f50:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000f52:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <HAL_InitTick+0x24>)
{
 8000f54:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000f56:	6818      	ldr	r0, [r3, #0]
 8000f58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f60:	f000 f888 	bl	8001074 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f64:	2200      	movs	r2, #0
 8000f66:	4621      	mov	r1, r4
 8000f68:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6c:	f000 f84e 	bl	800100c <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000f70:	2000      	movs	r0, #0
 8000f72:	bd10      	pop	{r4, pc}
 8000f74:	20000000 	.word	0x20000000

08000f78 <HAL_Init>:
{
 8000f78:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <HAL_Init+0x30>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f82:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f8a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f92:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f94:	2003      	movs	r0, #3
 8000f96:	f000 f827 	bl	8000fe8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f7ff ffd8 	bl	8000f50 <HAL_InitTick>
  HAL_MspInit();
 8000fa0:	f001 ffb5 	bl	8002f0e <HAL_MspInit>
}
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	bd08      	pop	{r3, pc}
 8000fa8:	40023c00 	.word	0x40023c00

08000fac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000fac:	4a02      	ldr	r2, [pc, #8]	; (8000fb8 <HAL_IncTick+0xc>)
 8000fae:	6813      	ldr	r3, [r2, #0]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	6013      	str	r3, [r2, #0]
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	200006cc 	.word	0x200006cc

08000fbc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000fbc:	4b01      	ldr	r3, [pc, #4]	; (8000fc4 <HAL_GetTick+0x8>)
 8000fbe:	6818      	ldr	r0, [r3, #0]
}
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	200006cc 	.word	0x200006cc

08000fc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000fc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000fca:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fcc:	f7ff fff6 	bl	8000fbc <HAL_GetTick>
  uint32_t wait = Delay;
 8000fd0:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fd2:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000fd4:	4605      	mov	r5, r0
  {
     wait++;
 8000fd6:	bf18      	it	ne
 8000fd8:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000fda:	f7ff ffef 	bl	8000fbc <HAL_GetTick>
 8000fde:	1b40      	subs	r0, r0, r5
 8000fe0:	42a0      	cmp	r0, r4
 8000fe2:	d3fa      	bcc.n	8000fda <HAL_Delay+0x12>
  {
  }
}
 8000fe4:	b003      	add	sp, #12
 8000fe6:	bd30      	pop	{r4, r5, pc}

08000fe8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe8:	4a07      	ldr	r2, [pc, #28]	; (8001008 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000fea:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ff0:	041b      	lsls	r3, r3, #16
 8000ff2:	0c1b      	lsrs	r3, r3, #16
 8000ff4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000ff8:	0200      	lsls	r0, r0, #8
 8000ffa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ffe:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001002:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001004:	60d3      	str	r3, [r2, #12]
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800100c:	4b17      	ldr	r3, [pc, #92]	; (800106c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800100e:	b530      	push	{r4, r5, lr}
 8001010:	68dc      	ldr	r4, [r3, #12]
 8001012:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001016:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800101c:	2b04      	cmp	r3, #4
 800101e:	bf28      	it	cs
 8001020:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001022:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	f04f 0501 	mov.w	r5, #1
 8001028:	fa05 f303 	lsl.w	r3, r5, r3
 800102c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001030:	bf8c      	ite	hi
 8001032:	3c03      	subhi	r4, #3
 8001034:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001036:	4019      	ands	r1, r3
 8001038:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800103a:	fa05 f404 	lsl.w	r4, r5, r4
 800103e:	3c01      	subs	r4, #1
 8001040:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001042:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	ea42 0201 	orr.w	r2, r2, r1
 8001048:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104c:	bfaf      	iteee	ge
 800104e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001052:	f000 000f 	andlt.w	r0, r0, #15
 8001056:	4b06      	ldrlt	r3, [pc, #24]	; (8001070 <HAL_NVIC_SetPriority+0x64>)
 8001058:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105a:	bfa5      	ittet	ge
 800105c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001060:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001062:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001064:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001068:	bd30      	pop	{r4, r5, pc}
 800106a:	bf00      	nop
 800106c:	e000ed00 	.word	0xe000ed00
 8001070:	e000ed14 	.word	0xe000ed14

08001074 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001074:	3801      	subs	r0, #1
 8001076:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800107a:	d20a      	bcs.n	8001092 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107e:	4a07      	ldr	r2, [pc, #28]	; (800109c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001080:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001082:	21f0      	movs	r1, #240	; 0xf0
 8001084:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001088:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800108c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001092:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	e000e010 	.word	0xe000e010
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80010a0:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80010a2:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80010a4:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80010a6:	bf0c      	ite	eq
 80010a8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80010ac:	f022 0204 	bicne.w	r2, r2, #4
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	4770      	bx	lr
 80010b4:	e000e010 	.word	0xe000e010

080010b8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80010b8:	4770      	bx	lr

080010ba <HAL_SYSTICK_IRQHandler>:
{
 80010ba:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80010bc:	f7ff fffc 	bl	80010b8 <HAL_SYSTICK_Callback>
 80010c0:	bd08      	pop	{r3, pc}
	...

080010c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010c8:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ca:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800127c <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010d0:	4a68      	ldr	r2, [pc, #416]	; (8001274 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010d2:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8001280 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010d6:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010d8:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80010da:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010de:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80010e0:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010e4:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80010e8:	45b6      	cmp	lr, r6
 80010ea:	f040 80ae 	bne.w	800124a <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ee:	684c      	ldr	r4, [r1, #4]
 80010f0:	f024 0710 	bic.w	r7, r4, #16
 80010f4:	2f02      	cmp	r7, #2
 80010f6:	d116      	bne.n	8001126 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 80010f8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80010fc:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001100:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001104:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001108:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800110c:	f04f 0c0f 	mov.w	ip, #15
 8001110:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001114:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001118:	690d      	ldr	r5, [r1, #16]
 800111a:	fa05 f50b 	lsl.w	r5, r5, fp
 800111e:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8001122:	f8ca 5020 	str.w	r5, [sl, #32]
 8001126:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800112a:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800112c:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001130:	fa05 f50a 	lsl.w	r5, r5, sl
 8001134:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001136:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800113a:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800113e:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001142:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001144:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001148:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 800114a:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800114e:	d811      	bhi.n	8001174 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001150:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001152:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001156:	68cf      	ldr	r7, [r1, #12]
 8001158:	fa07 fc0a 	lsl.w	ip, r7, sl
 800115c:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001160:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001162:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001164:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001168:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800116c:	409f      	lsls	r7, r3
 800116e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001172:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001174:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001176:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001178:	688f      	ldr	r7, [r1, #8]
 800117a:	fa07 f70a 	lsl.w	r7, r7, sl
 800117e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001180:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001182:	00e5      	lsls	r5, r4, #3
 8001184:	d561      	bpl.n	800124a <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001186:	f04f 0b00 	mov.w	fp, #0
 800118a:	f8cd b00c 	str.w	fp, [sp, #12]
 800118e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001192:	4d39      	ldr	r5, [pc, #228]	; (8001278 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001194:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001198:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800119c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80011a0:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80011a4:	9703      	str	r7, [sp, #12]
 80011a6:	9f03      	ldr	r7, [sp, #12]
 80011a8:	f023 0703 	bic.w	r7, r3, #3
 80011ac:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80011b0:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011b4:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80011b8:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011bc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80011c0:	f04f 0e0f 	mov.w	lr, #15
 80011c4:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011c8:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011ca:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ce:	d043      	beq.n	8001258 <HAL_GPIO_Init+0x194>
 80011d0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011d4:	42a8      	cmp	r0, r5
 80011d6:	d041      	beq.n	800125c <HAL_GPIO_Init+0x198>
 80011d8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011dc:	42a8      	cmp	r0, r5
 80011de:	d03f      	beq.n	8001260 <HAL_GPIO_Init+0x19c>
 80011e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011e4:	42a8      	cmp	r0, r5
 80011e6:	d03d      	beq.n	8001264 <HAL_GPIO_Init+0x1a0>
 80011e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011ec:	42a8      	cmp	r0, r5
 80011ee:	d03b      	beq.n	8001268 <HAL_GPIO_Init+0x1a4>
 80011f0:	4548      	cmp	r0, r9
 80011f2:	d03b      	beq.n	800126c <HAL_GPIO_Init+0x1a8>
 80011f4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80011f8:	42a8      	cmp	r0, r5
 80011fa:	d039      	beq.n	8001270 <HAL_GPIO_Init+0x1ac>
 80011fc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001200:	42a8      	cmp	r0, r5
 8001202:	bf14      	ite	ne
 8001204:	2508      	movne	r5, #8
 8001206:	2507      	moveq	r5, #7
 8001208:	fa05 f50c 	lsl.w	r5, r5, ip
 800120c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001210:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001212:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001214:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001216:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800121a:	bf0c      	ite	eq
 800121c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800121e:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001220:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8001222:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001224:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001228:	bf0c      	ite	eq
 800122a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800122c:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800122e:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001230:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001232:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001236:	bf0c      	ite	eq
 8001238:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800123a:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 800123c:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800123e:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001240:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001242:	bf54      	ite	pl
 8001244:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001246:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001248:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800124a:	3301      	adds	r3, #1
 800124c:	2b10      	cmp	r3, #16
 800124e:	f47f af44 	bne.w	80010da <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001252:	b005      	add	sp, #20
 8001254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001258:	465d      	mov	r5, fp
 800125a:	e7d5      	b.n	8001208 <HAL_GPIO_Init+0x144>
 800125c:	2501      	movs	r5, #1
 800125e:	e7d3      	b.n	8001208 <HAL_GPIO_Init+0x144>
 8001260:	2502      	movs	r5, #2
 8001262:	e7d1      	b.n	8001208 <HAL_GPIO_Init+0x144>
 8001264:	2503      	movs	r5, #3
 8001266:	e7cf      	b.n	8001208 <HAL_GPIO_Init+0x144>
 8001268:	2504      	movs	r5, #4
 800126a:	e7cd      	b.n	8001208 <HAL_GPIO_Init+0x144>
 800126c:	2505      	movs	r5, #5
 800126e:	e7cb      	b.n	8001208 <HAL_GPIO_Init+0x144>
 8001270:	2506      	movs	r5, #6
 8001272:	e7c9      	b.n	8001208 <HAL_GPIO_Init+0x144>
 8001274:	40013c00 	.word	0x40013c00
 8001278:	40020000 	.word	0x40020000
 800127c:	40023800 	.word	0x40023800
 8001280:	40021400 	.word	0x40021400

08001284 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001284:	6802      	ldr	r2, [r0, #0]
 8001286:	6953      	ldr	r3, [r2, #20]
 8001288:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 800128c:	d00d      	beq.n	80012aa <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800128e:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001292:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001294:	2304      	movs	r3, #4
 8001296:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 8001298:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 800129a:	2300      	movs	r3, #0
 800129c:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800129e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 80012a2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 80012a6:	2001      	movs	r0, #1
 80012a8:	4770      	bx	lr
  }
  return HAL_OK;
 80012aa:	4618      	mov	r0, r3
}
 80012ac:	4770      	bx	lr

080012ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80012ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80012b2:	4604      	mov	r4, r0
 80012b4:	4617      	mov	r7, r2
 80012b6:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80012b8:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80012bc:	b28e      	uxth	r6, r1
 80012be:	6825      	ldr	r5, [r4, #0]
 80012c0:	f1b8 0f01 	cmp.w	r8, #1
 80012c4:	bf0c      	ite	eq
 80012c6:	696b      	ldreq	r3, [r5, #20]
 80012c8:	69ab      	ldrne	r3, [r5, #24]
 80012ca:	ea36 0303 	bics.w	r3, r6, r3
 80012ce:	bf14      	ite	ne
 80012d0:	2001      	movne	r0, #1
 80012d2:	2000      	moveq	r0, #0
 80012d4:	b908      	cbnz	r0, 80012da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 80012d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80012da:	696b      	ldr	r3, [r5, #20]
 80012dc:	055a      	lsls	r2, r3, #21
 80012de:	d512      	bpl.n	8001306 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80012e0:	682b      	ldr	r3, [r5, #0]
 80012e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012e6:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80012e8:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80012ec:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80012ee:	2304      	movs	r3, #4
 80012f0:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 80012f2:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 80012f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 80012fc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001300:	2001      	movs	r0, #1
 8001302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001306:	1c7b      	adds	r3, r7, #1
 8001308:	d0d9      	beq.n	80012be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800130a:	b94f      	cbnz	r7, 8001320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 800130c:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 800130e:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001310:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001312:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001316:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 800131a:	2003      	movs	r0, #3
 800131c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001320:	f7ff fe4c 	bl	8000fbc <HAL_GetTick>
 8001324:	eba0 0009 	sub.w	r0, r0, r9
 8001328:	4287      	cmp	r7, r0
 800132a:	d2c8      	bcs.n	80012be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 800132c:	e7ee      	b.n	800130c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

0800132e <I2C_WaitOnFlagUntilTimeout>:
{
 800132e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001332:	9e08      	ldr	r6, [sp, #32]
 8001334:	4604      	mov	r4, r0
 8001336:	4690      	mov	r8, r2
 8001338:	461f      	mov	r7, r3
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800133a:	f3c1 4907 	ubfx	r9, r1, #16, #8
 800133e:	b28d      	uxth	r5, r1
 8001340:	6823      	ldr	r3, [r4, #0]
 8001342:	f1b9 0f01 	cmp.w	r9, #1
 8001346:	bf0c      	ite	eq
 8001348:	695b      	ldreq	r3, [r3, #20]
 800134a:	699b      	ldrne	r3, [r3, #24]
 800134c:	ea35 0303 	bics.w	r3, r5, r3
 8001350:	bf0c      	ite	eq
 8001352:	2301      	moveq	r3, #1
 8001354:	2300      	movne	r3, #0
 8001356:	4543      	cmp	r3, r8
 8001358:	d002      	beq.n	8001360 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 800135a:	2000      	movs	r0, #0
}
 800135c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001360:	1c7b      	adds	r3, r7, #1
 8001362:	d0ed      	beq.n	8001340 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001364:	b95f      	cbnz	r7, 800137e <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001366:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001368:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800136a:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800136c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001370:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001374:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001376:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800137a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800137e:	f7ff fe1d 	bl	8000fbc <HAL_GetTick>
 8001382:	1b80      	subs	r0, r0, r6
 8001384:	4287      	cmp	r7, r0
 8001386:	d2db      	bcs.n	8001340 <I2C_WaitOnFlagUntilTimeout+0x12>
 8001388:	e7ed      	b.n	8001366 <I2C_WaitOnFlagUntilTimeout+0x38>

0800138a <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 800138a:	b570      	push	{r4, r5, r6, lr}
 800138c:	4604      	mov	r4, r0
 800138e:	460d      	mov	r5, r1
 8001390:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001392:	6823      	ldr	r3, [r4, #0]
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	061b      	lsls	r3, r3, #24
 8001398:	d501      	bpl.n	800139e <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 800139a:	2000      	movs	r0, #0
 800139c:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800139e:	4620      	mov	r0, r4
 80013a0:	f7ff ff70 	bl	8001284 <I2C_IsAcknowledgeFailed>
 80013a4:	b9a8      	cbnz	r0, 80013d2 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 80013a6:	1c6a      	adds	r2, r5, #1
 80013a8:	d0f3      	beq.n	8001392 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80013aa:	b965      	cbnz	r5, 80013c6 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013ae:	f043 0320 	orr.w	r3, r3, #32
 80013b2:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80013b4:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80013ba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80013be:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80013c2:	2003      	movs	r0, #3
 80013c4:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80013c6:	f7ff fdf9 	bl	8000fbc <HAL_GetTick>
 80013ca:	1b80      	subs	r0, r0, r6
 80013cc:	4285      	cmp	r5, r0
 80013ce:	d2e0      	bcs.n	8001392 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 80013d0:	e7ec      	b.n	80013ac <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80013d2:	2001      	movs	r0, #1
}
 80013d4:	bd70      	pop	{r4, r5, r6, pc}

080013d6 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 80013d6:	b570      	push	{r4, r5, r6, lr}
 80013d8:	4604      	mov	r4, r0
 80013da:	460d      	mov	r5, r1
 80013dc:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80013de:	6820      	ldr	r0, [r4, #0]
 80013e0:	6943      	ldr	r3, [r0, #20]
 80013e2:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80013e6:	d001      	beq.n	80013ec <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80013e8:	2000      	movs	r0, #0
}
 80013ea:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80013ec:	6942      	ldr	r2, [r0, #20]
 80013ee:	06d2      	lsls	r2, r2, #27
 80013f0:	d50b      	bpl.n	800140a <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013f2:	f06f 0210 	mvn.w	r2, #16
 80013f6:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 80013f8:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013fa:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80013fc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 8001400:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8001402:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 8001404:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001408:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800140a:	b95d      	cbnz	r5, 8001424 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800140c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800140e:	f043 0320 	orr.w	r3, r3, #32
 8001412:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8001414:	2320      	movs	r3, #32
 8001416:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 800141a:	2300      	movs	r3, #0
 800141c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001420:	2003      	movs	r0, #3
 8001422:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001424:	f7ff fdca 	bl	8000fbc <HAL_GetTick>
 8001428:	1b80      	subs	r0, r0, r6
 800142a:	4285      	cmp	r5, r0
 800142c:	d2d7      	bcs.n	80013de <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 800142e:	e7ed      	b.n	800140c <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

08001430 <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8001430:	b570      	push	{r4, r5, r6, lr}
 8001432:	4604      	mov	r4, r0
 8001434:	460d      	mov	r5, r1
 8001436:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001438:	6823      	ldr	r3, [r4, #0]
 800143a:	695b      	ldr	r3, [r3, #20]
 800143c:	075b      	lsls	r3, r3, #29
 800143e:	d501      	bpl.n	8001444 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001440:	2000      	movs	r0, #0
 8001442:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001444:	4620      	mov	r0, r4
 8001446:	f7ff ff1d 	bl	8001284 <I2C_IsAcknowledgeFailed>
 800144a:	b9a8      	cbnz	r0, 8001478 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 800144c:	1c6a      	adds	r2, r5, #1
 800144e:	d0f3      	beq.n	8001438 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001450:	b965      	cbnz	r5, 800146c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001452:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001454:	f043 0320 	orr.w	r3, r3, #32
 8001458:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 800145a:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800145c:	2300      	movs	r3, #0
 800145e:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001460:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001464:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001468:	2003      	movs	r0, #3
 800146a:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800146c:	f7ff fda6 	bl	8000fbc <HAL_GetTick>
 8001470:	1b80      	subs	r0, r0, r6
 8001472:	4285      	cmp	r5, r0
 8001474:	d2e0      	bcs.n	8001438 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8001476:	e7ec      	b.n	8001452 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001478:	2001      	movs	r0, #1
}
 800147a:	bd70      	pop	{r4, r5, r6, pc}

0800147c <HAL_I2C_Init>:
{
 800147c:	b570      	push	{r4, r5, r6, lr}
  if(hi2c == NULL)
 800147e:	4604      	mov	r4, r0
 8001480:	2800      	cmp	r0, #0
 8001482:	d062      	beq.n	800154a <HAL_I2C_Init+0xce>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001484:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001488:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800148c:	b91b      	cbnz	r3, 8001496 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800148e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001492:	f001 fa4b 	bl	800292c <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 8001496:	6822      	ldr	r2, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001498:	4e2d      	ldr	r6, [pc, #180]	; (8001550 <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 800149a:	4d2e      	ldr	r5, [pc, #184]	; (8001554 <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 800149c:	2324      	movs	r3, #36	; 0x24
 800149e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80014a2:	6813      	ldr	r3, [r2, #0]
 80014a4:	f023 0301 	bic.w	r3, r3, #1
 80014a8:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014aa:	f000 fd2b 	bl	8001f04 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80014ae:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 80014b0:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80014b2:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80014b6:	42b3      	cmp	r3, r6
 80014b8:	bf84      	itt	hi
 80014ba:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 80014be:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 80014c0:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80014c2:	bf91      	iteee	ls
 80014c4:	1c69      	addls	r1, r5, #1
 80014c6:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 80014ca:	fbb1 f1f5 	udivhi	r1, r1, r5
 80014ce:	3101      	addhi	r1, #1
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80014d0:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80014d2:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80014d4:	d821      	bhi.n	800151a <HAL_I2C_Init+0x9e>
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	fbb0 f0f3 	udiv	r0, r0, r3
 80014dc:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80014e0:	2b03      	cmp	r3, #3
 80014e2:	bf98      	it	ls
 80014e4:	2004      	movls	r0, #4
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014e6:	6a21      	ldr	r1, [r4, #32]
 80014e8:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80014ea:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014ec:	430b      	orrs	r3, r1
 80014ee:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80014f0:	68e1      	ldr	r1, [r4, #12]
 80014f2:	6923      	ldr	r3, [r4, #16]
 80014f4:	430b      	orrs	r3, r1
 80014f6:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80014f8:	69a1      	ldr	r1, [r4, #24]
 80014fa:	6963      	ldr	r3, [r4, #20]
 80014fc:	430b      	orrs	r3, r1
 80014fe:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001500:	6813      	ldr	r3, [r2, #0]
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001508:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800150a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800150c:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800150e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001512:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001514:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001518:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800151a:	68a1      	ldr	r1, [r4, #8]
 800151c:	b949      	cbnz	r1, 8001532 <HAL_I2C_Init+0xb6>
 800151e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001522:	fbb0 f0f3 	udiv	r0, r0, r3
 8001526:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800152a:	b163      	cbz	r3, 8001546 <HAL_I2C_Init+0xca>
 800152c:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8001530:	e7d9      	b.n	80014e6 <HAL_I2C_Init+0x6a>
 8001532:	2119      	movs	r1, #25
 8001534:	434b      	muls	r3, r1
 8001536:	fbb0 f0f3 	udiv	r0, r0, r3
 800153a:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800153e:	b113      	cbz	r3, 8001546 <HAL_I2C_Init+0xca>
 8001540:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8001544:	e7cf      	b.n	80014e6 <HAL_I2C_Init+0x6a>
 8001546:	2001      	movs	r0, #1
 8001548:	e7cd      	b.n	80014e6 <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 800154a:	2001      	movs	r0, #1
}
 800154c:	bd70      	pop	{r4, r5, r6, pc}
 800154e:	bf00      	nop
 8001550:	000186a0 	.word	0x000186a0
 8001554:	000f4240 	.word	0x000f4240

08001558 <HAL_I2C_Master_Transmit>:
{
 8001558:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800155c:	4604      	mov	r4, r0
 800155e:	461f      	mov	r7, r3
 8001560:	460d      	mov	r5, r1
 8001562:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8001564:	f7ff fd2a 	bl	8000fbc <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001568:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800156c:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 800156e:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001570:	d004      	beq.n	800157c <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8001572:	2502      	movs	r5, #2
}
 8001574:	4628      	mov	r0, r5
 8001576:	b004      	add	sp, #16
 8001578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800157c:	9000      	str	r0, [sp, #0]
 800157e:	2319      	movs	r3, #25
 8001580:	2201      	movs	r2, #1
 8001582:	495d      	ldr	r1, [pc, #372]	; (80016f8 <HAL_I2C_Master_Transmit+0x1a0>)
 8001584:	4620      	mov	r0, r4
 8001586:	f7ff fed2 	bl	800132e <I2C_WaitOnFlagUntilTimeout>
 800158a:	2800      	cmp	r0, #0
 800158c:	d1f1      	bne.n	8001572 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 800158e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001592:	2b01      	cmp	r3, #1
 8001594:	d0ed      	beq.n	8001572 <HAL_I2C_Master_Transmit+0x1a>
 8001596:	2301      	movs	r3, #1
 8001598:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800159c:	6823      	ldr	r3, [r4, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80015a2:	bf5e      	ittt	pl
 80015a4:	681a      	ldrpl	r2, [r3, #0]
 80015a6:	f042 0201 	orrpl.w	r2, r2, #1
 80015aa:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015b2:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80015b4:	2221      	movs	r2, #33	; 0x21
 80015b6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80015ba:	2210      	movs	r2, #16
 80015bc:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015c0:	2200      	movs	r2, #0
 80015c2:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015c4:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 80015c8:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015ca:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80015cc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80015ce:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80015d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 80015d2:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80015d6:	2a04      	cmp	r2, #4
 80015d8:	d004      	beq.n	80015e4 <HAL_I2C_Master_Transmit+0x8c>
 80015da:	2a01      	cmp	r2, #1
 80015dc:	d002      	beq.n	80015e4 <HAL_I2C_Master_Transmit+0x8c>
 80015de:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80015e2:	d104      	bne.n	80015ee <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	e002      	b.n	80015f4 <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80015ee:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80015f0:	2a12      	cmp	r2, #18
 80015f2:	d0f7      	beq.n	80015e4 <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80015f4:	9600      	str	r6, [sp, #0]
 80015f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80015f8:	2200      	movs	r2, #0
 80015fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80015fe:	4620      	mov	r0, r4
 8001600:	f7ff fe95 	bl	800132e <I2C_WaitOnFlagUntilTimeout>
 8001604:	bb28      	cbnz	r0, 8001652 <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001606:	6923      	ldr	r3, [r4, #16]
 8001608:	6822      	ldr	r2, [r4, #0]
 800160a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800160e:	d112      	bne.n	8001636 <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001610:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001614:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001616:	4633      	mov	r3, r6
 8001618:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800161a:	4938      	ldr	r1, [pc, #224]	; (80016fc <HAL_I2C_Master_Transmit+0x1a4>)
 800161c:	4620      	mov	r0, r4
 800161e:	f7ff fe46 	bl	80012ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001622:	4605      	mov	r5, r0
 8001624:	b9a0      	cbnz	r0, 8001650 <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001626:	6823      	ldr	r3, [r4, #0]
 8001628:	9003      	str	r0, [sp, #12]
 800162a:	695a      	ldr	r2, [r3, #20]
 800162c:	9203      	str	r2, [sp, #12]
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	9303      	str	r3, [sp, #12]
 8001632:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8001634:	e050      	b.n	80016d8 <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001636:	11eb      	asrs	r3, r5, #7
 8001638:	f003 0306 	and.w	r3, r3, #6
 800163c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001640:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001642:	492f      	ldr	r1, [pc, #188]	; (8001700 <HAL_I2C_Master_Transmit+0x1a8>)
 8001644:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001646:	4633      	mov	r3, r6
 8001648:	4620      	mov	r0, r4
 800164a:	f7ff fe30 	bl	80012ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800164e:	b148      	cbz	r0, 8001664 <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001650:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001652:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001654:	2b04      	cmp	r3, #4
 8001656:	f04f 0300 	mov.w	r3, #0
 800165a:	d107      	bne.n	800166c <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 800165c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8001660:	2501      	movs	r5, #1
 8001662:	e787      	b.n	8001574 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001664:	6823      	ldr	r3, [r4, #0]
 8001666:	b2ed      	uxtb	r5, r5
 8001668:	611d      	str	r5, [r3, #16]
 800166a:	e7d4      	b.n	8001616 <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 800166c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8001670:	2503      	movs	r5, #3
 8001672:	e77f      	b.n	8001574 <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001674:	4632      	mov	r2, r6
 8001676:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001678:	4620      	mov	r0, r4
 800167a:	f7ff fe86 	bl	800138a <I2C_WaitOnTXEFlagUntilTimeout>
 800167e:	b140      	cbz	r0, 8001692 <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001680:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001682:	2b04      	cmp	r3, #4
 8001684:	d1f4      	bne.n	8001670 <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001686:	6822      	ldr	r2, [r4, #0]
 8001688:	6813      	ldr	r3, [r2, #0]
 800168a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800168e:	6013      	str	r3, [r2, #0]
 8001690:	e7e6      	b.n	8001660 <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001692:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001694:	6820      	ldr	r0, [r4, #0]
      hi2c->XferSize--;
 8001696:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001698:	1c4b      	adds	r3, r1, #1
 800169a:	6263      	str	r3, [r4, #36]	; 0x24
 800169c:	780b      	ldrb	r3, [r1, #0]
 800169e:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 80016a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80016a2:	3b01      	subs	r3, #1
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016a8:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 80016aa:	1e53      	subs	r3, r2, #1
 80016ac:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016ae:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 80016b0:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016b2:	d50a      	bpl.n	80016ca <HAL_I2C_Master_Transmit+0x172>
 80016b4:	b14b      	cbz	r3, 80016ca <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80016b6:	1c8b      	adds	r3, r1, #2
 80016b8:	6263      	str	r3, [r4, #36]	; 0x24
 80016ba:	784b      	ldrb	r3, [r1, #1]
 80016bc:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 80016be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80016c0:	3b01      	subs	r3, #1
 80016c2:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80016c4:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 80016c6:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80016c8:	8522      	strh	r2, [r4, #40]	; 0x28
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016ca:	4632      	mov	r2, r6
 80016cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80016ce:	4620      	mov	r0, r4
 80016d0:	f7ff feae 	bl	8001430 <I2C_WaitOnBTFFlagUntilTimeout>
 80016d4:	2800      	cmp	r0, #0
 80016d6:	d1d3      	bne.n	8001680 <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 80016d8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1ca      	bne.n	8001674 <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80016de:	6821      	ldr	r1, [r4, #0]
 80016e0:	680a      	ldr	r2, [r1, #0]
 80016e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016e6:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80016e8:	2220      	movs	r2, #32
 80016ea:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80016ee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016f2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80016f6:	e73d      	b.n	8001574 <HAL_I2C_Master_Transmit+0x1c>
 80016f8:	00100002 	.word	0x00100002
 80016fc:	00010002 	.word	0x00010002
 8001700:	00010008 	.word	0x00010008

08001704 <HAL_I2C_Master_Receive>:
{
 8001704:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001708:	4604      	mov	r4, r0
 800170a:	b089      	sub	sp, #36	; 0x24
 800170c:	4698      	mov	r8, r3
 800170e:	460d      	mov	r5, r1
 8001710:	4691      	mov	r9, r2
 8001712:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8001714:	f7ff fc52 	bl	8000fbc <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001718:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800171c:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 800171e:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001720:	d004      	beq.n	800172c <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 8001722:	2502      	movs	r5, #2
}
 8001724:	4628      	mov	r0, r5
 8001726:	b009      	add	sp, #36	; 0x24
 8001728:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800172c:	9000      	str	r0, [sp, #0]
 800172e:	2319      	movs	r3, #25
 8001730:	2201      	movs	r2, #1
 8001732:	499c      	ldr	r1, [pc, #624]	; (80019a4 <HAL_I2C_Master_Receive+0x2a0>)
 8001734:	4620      	mov	r0, r4
 8001736:	f7ff fdfa 	bl	800132e <I2C_WaitOnFlagUntilTimeout>
 800173a:	2800      	cmp	r0, #0
 800173c:	d1f1      	bne.n	8001722 <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 800173e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001742:	2b01      	cmp	r3, #1
 8001744:	d0ed      	beq.n	8001722 <HAL_I2C_Master_Receive+0x1e>
 8001746:	2301      	movs	r3, #1
 8001748:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800174c:	6823      	ldr	r3, [r4, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001752:	bf5e      	ittt	pl
 8001754:	681a      	ldrpl	r2, [r3, #0]
 8001756:	f042 0201 	orrpl.w	r2, r2, #1
 800175a:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001762:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001764:	2222      	movs	r2, #34	; 0x22
 8001766:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800176a:	2210      	movs	r2, #16
 800176c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001770:	2200      	movs	r2, #0
 8001772:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001774:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8001778:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800177c:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800177e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001780:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001782:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001784:	6819      	ldr	r1, [r3, #0]
    hi2c->pBuffPtr    = pData;
 8001786:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800178a:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800178e:	2a04      	cmp	r2, #4
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001790:	6019      	str	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001792:	d004      	beq.n	800179e <HAL_I2C_Master_Receive+0x9a>
 8001794:	2a01      	cmp	r2, #1
 8001796:	d002      	beq.n	800179e <HAL_I2C_Master_Receive+0x9a>
 8001798:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800179c:	d104      	bne.n	80017a8 <HAL_I2C_Master_Receive+0xa4>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	e002      	b.n	80017ae <HAL_I2C_Master_Receive+0xaa>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80017a8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80017aa:	2a11      	cmp	r2, #17
 80017ac:	d0f7      	beq.n	800179e <HAL_I2C_Master_Receive+0x9a>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80017ae:	9600      	str	r6, [sp, #0]
 80017b0:	463b      	mov	r3, r7
 80017b2:	2200      	movs	r2, #0
 80017b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80017b8:	4620      	mov	r0, r4
 80017ba:	f7ff fdb8 	bl	800132e <I2C_WaitOnFlagUntilTimeout>
 80017be:	2800      	cmp	r0, #0
 80017c0:	d14a      	bne.n	8001858 <HAL_I2C_Master_Receive+0x154>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017c2:	6923      	ldr	r3, [r4, #16]
 80017c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017c8:	6823      	ldr	r3, [r4, #0]
 80017ca:	d136      	bne.n	800183a <HAL_I2C_Master_Receive+0x136>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80017cc:	f045 0501 	orr.w	r5, r5, #1
 80017d0:	b2ed      	uxtb	r5, r5
 80017d2:	611d      	str	r5, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80017d4:	4633      	mov	r3, r6
 80017d6:	463a      	mov	r2, r7
 80017d8:	4973      	ldr	r1, [pc, #460]	; (80019a8 <HAL_I2C_Master_Receive+0x2a4>)
 80017da:	4620      	mov	r0, r4
 80017dc:	f7ff fd67 	bl	80012ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017e0:	4605      	mov	r5, r0
 80017e2:	2800      	cmp	r0, #0
 80017e4:	d137      	bne.n	8001856 <HAL_I2C_Master_Receive+0x152>
    if(hi2c->XferSize == 0U)
 80017e6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80017e8:	6823      	ldr	r3, [r4, #0]
 80017ea:	2a00      	cmp	r2, #0
 80017ec:	d066      	beq.n	80018bc <HAL_I2C_Master_Receive+0x1b8>
    else if(hi2c->XferSize == 1U)
 80017ee:	2a01      	cmp	r2, #1
 80017f0:	d177      	bne.n	80018e2 <HAL_I2C_Master_Receive+0x1de>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017f8:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017fa:	9504      	str	r5, [sp, #16]
 80017fc:	695a      	ldr	r2, [r3, #20]
 80017fe:	9204      	str	r2, [sp, #16]
 8001800:	699a      	ldr	r2, [r3, #24]
 8001802:	9204      	str	r2, [sp, #16]
 8001804:	9a04      	ldr	r2, [sp, #16]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800180c:	601a      	str	r2, [r3, #0]
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800180e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80019b0 <HAL_I2C_Master_Receive+0x2ac>
    while(hi2c->XferSize > 0U)
 8001812:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001814:	2b00      	cmp	r3, #0
 8001816:	d05b      	beq.n	80018d0 <HAL_I2C_Master_Receive+0x1cc>
      if(hi2c->XferSize <= 3U)
 8001818:	2b03      	cmp	r3, #3
 800181a:	f200 80cb 	bhi.w	80019b4 <HAL_I2C_Master_Receive+0x2b0>
        if(hi2c->XferSize == 1U)
 800181e:	2b01      	cmp	r3, #1
 8001820:	d17a      	bne.n	8001918 <HAL_I2C_Master_Receive+0x214>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001822:	4632      	mov	r2, r6
 8001824:	4639      	mov	r1, r7
 8001826:	4620      	mov	r0, r4
 8001828:	f7ff fdd5 	bl	80013d6 <I2C_WaitOnRXNEFlagUntilTimeout>
 800182c:	2800      	cmp	r0, #0
 800182e:	f000 8090 	beq.w	8001952 <HAL_I2C_Master_Receive+0x24e>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001832:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001834:	2b20      	cmp	r3, #32
 8001836:	d116      	bne.n	8001866 <HAL_I2C_Master_Receive+0x162>
 8001838:	e03e      	b.n	80018b8 <HAL_I2C_Master_Receive+0x1b4>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800183a:	ea4f 18e5 	mov.w	r8, r5, asr #7
 800183e:	f008 0806 	and.w	r8, r8, #6
 8001842:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8001846:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001848:	4958      	ldr	r1, [pc, #352]	; (80019ac <HAL_I2C_Master_Receive+0x2a8>)
 800184a:	4633      	mov	r3, r6
 800184c:	463a      	mov	r2, r7
 800184e:	4620      	mov	r0, r4
 8001850:	f7ff fd2d 	bl	80012ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001854:	b148      	cbz	r0, 800186a <HAL_I2C_Master_Receive+0x166>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001856:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001858:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800185a:	2b04      	cmp	r3, #4
 800185c:	f04f 0300 	mov.w	r3, #0
 8001860:	d128      	bne.n	80018b4 <HAL_I2C_Master_Receive+0x1b0>
        __HAL_UNLOCK(hi2c);
 8001862:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 8001866:	2501      	movs	r5, #1
 8001868:	e75c      	b.n	8001724 <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800186a:	6823      	ldr	r3, [r4, #0]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800186c:	494e      	ldr	r1, [pc, #312]	; (80019a8 <HAL_I2C_Master_Receive+0x2a4>)
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800186e:	b2ed      	uxtb	r5, r5
 8001870:	611d      	str	r5, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001872:	463a      	mov	r2, r7
 8001874:	4633      	mov	r3, r6
 8001876:	4620      	mov	r0, r4
 8001878:	f7ff fd19 	bl	80012ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800187c:	4602      	mov	r2, r0
 800187e:	2800      	cmp	r0, #0
 8001880:	d1e9      	bne.n	8001856 <HAL_I2C_Master_Receive+0x152>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001882:	6823      	ldr	r3, [r4, #0]
 8001884:	9007      	str	r0, [sp, #28]
 8001886:	6959      	ldr	r1, [r3, #20]
 8001888:	9107      	str	r1, [sp, #28]
 800188a:	6999      	ldr	r1, [r3, #24]
 800188c:	9107      	str	r1, [sp, #28]
 800188e:	9907      	ldr	r1, [sp, #28]
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001890:	6819      	ldr	r1, [r3, #0]
 8001892:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001896:	6019      	str	r1, [r3, #0]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001898:	4620      	mov	r0, r4
 800189a:	9600      	str	r6, [sp, #0]
 800189c:	463b      	mov	r3, r7
 800189e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018a2:	f7ff fd44 	bl	800132e <I2C_WaitOnFlagUntilTimeout>
 80018a6:	2800      	cmp	r0, #0
 80018a8:	d1d6      	bne.n	8001858 <HAL_I2C_Master_Receive+0x154>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80018aa:	6822      	ldr	r2, [r4, #0]
 80018ac:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 80018b0:	6113      	str	r3, [r2, #16]
 80018b2:	e78f      	b.n	80017d4 <HAL_I2C_Master_Receive+0xd0>
        __HAL_UNLOCK(hi2c);
 80018b4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_TIMEOUT;
 80018b8:	2503      	movs	r5, #3
 80018ba:	e733      	b.n	8001724 <HAL_I2C_Master_Receive+0x20>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018bc:	9503      	str	r5, [sp, #12]
 80018be:	695a      	ldr	r2, [r3, #20]
 80018c0:	9203      	str	r2, [sp, #12]
 80018c2:	699a      	ldr	r2, [r3, #24]
 80018c4:	9203      	str	r2, [sp, #12]
 80018c6:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018ce:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80018d0:	2320      	movs	r3, #32
 80018d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80018dc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80018e0:	e720      	b.n	8001724 <HAL_I2C_Master_Receive+0x20>
    else if(hi2c->XferSize == 2U)
 80018e2:	2a02      	cmp	r2, #2
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80018e4:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 80018e6:	d10d      	bne.n	8001904 <HAL_I2C_Master_Receive+0x200>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80018e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018ec:	601a      	str	r2, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018f4:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018f6:	9505      	str	r5, [sp, #20]
 80018f8:	695a      	ldr	r2, [r3, #20]
 80018fa:	9205      	str	r2, [sp, #20]
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	9305      	str	r3, [sp, #20]
 8001900:	9b05      	ldr	r3, [sp, #20]
 8001902:	e784      	b.n	800180e <HAL_I2C_Master_Receive+0x10a>
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001904:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001908:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800190a:	9506      	str	r5, [sp, #24]
 800190c:	695a      	ldr	r2, [r3, #20]
 800190e:	9206      	str	r2, [sp, #24]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	9306      	str	r3, [sp, #24]
 8001914:	9b06      	ldr	r3, [sp, #24]
 8001916:	e77a      	b.n	800180e <HAL_I2C_Master_Receive+0x10a>
        else if(hi2c->XferSize == 2U)
 8001918:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800191a:	9600      	str	r6, [sp, #0]
 800191c:	463b      	mov	r3, r7
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	4641      	mov	r1, r8
 8001924:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 8001926:	d122      	bne.n	800196e <HAL_I2C_Master_Receive+0x26a>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001928:	f7ff fd01 	bl	800132e <I2C_WaitOnFlagUntilTimeout>
 800192c:	2800      	cmp	r0, #0
 800192e:	d1c3      	bne.n	80018b8 <HAL_I2C_Master_Receive+0x1b4>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001930:	6823      	ldr	r3, [r4, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001938:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800193a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	1c51      	adds	r1, r2, #1
 8001940:	6261      	str	r1, [r4, #36]	; 0x24
 8001942:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 8001944:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001946:	3b01      	subs	r3, #1
 8001948:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800194a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800194c:	3b01      	subs	r3, #1
 800194e:	b29b      	uxth	r3, r3
 8001950:	8563      	strh	r3, [r4, #42]	; 0x2a
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001952:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001954:	1c5a      	adds	r2, r3, #1
 8001956:	6262      	str	r2, [r4, #36]	; 0x24
 8001958:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800195a:	6912      	ldr	r2, [r2, #16]
 800195c:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800195e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001960:	3b01      	subs	r3, #1
 8001962:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001964:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001966:	3b01      	subs	r3, #1
 8001968:	b29b      	uxth	r3, r3
 800196a:	8563      	strh	r3, [r4, #42]	; 0x2a
 800196c:	e751      	b.n	8001812 <HAL_I2C_Master_Receive+0x10e>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800196e:	f7ff fcde 	bl	800132e <I2C_WaitOnFlagUntilTimeout>
 8001972:	4602      	mov	r2, r0
 8001974:	2800      	cmp	r0, #0
 8001976:	d19f      	bne.n	80018b8 <HAL_I2C_Master_Receive+0x1b4>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001978:	6823      	ldr	r3, [r4, #0]
 800197a:	6819      	ldr	r1, [r3, #0]
 800197c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001980:	6019      	str	r1, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001982:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	1c48      	adds	r0, r1, #1
 8001988:	6260      	str	r0, [r4, #36]	; 0x24
 800198a:	700b      	strb	r3, [r1, #0]
          hi2c->XferSize--;
 800198c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800198e:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 8001990:	3b01      	subs	r3, #1
 8001992:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001994:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001996:	3b01      	subs	r3, #1
 8001998:	b29b      	uxth	r3, r3
 800199a:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800199c:	4641      	mov	r1, r8
 800199e:	463b      	mov	r3, r7
 80019a0:	4620      	mov	r0, r4
 80019a2:	e7c1      	b.n	8001928 <HAL_I2C_Master_Receive+0x224>
 80019a4:	00100002 	.word	0x00100002
 80019a8:	00010002 	.word	0x00010002
 80019ac:	00010008 	.word	0x00010008
 80019b0:	00010004 	.word	0x00010004
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 80019b4:	4632      	mov	r2, r6
 80019b6:	4639      	mov	r1, r7
 80019b8:	4620      	mov	r0, r4
 80019ba:	f7ff fd0c 	bl	80013d6 <I2C_WaitOnRXNEFlagUntilTimeout>
 80019be:	2800      	cmp	r0, #0
 80019c0:	f47f af37 	bne.w	8001832 <HAL_I2C_Master_Receive+0x12e>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80019c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019c6:	1c5a      	adds	r2, r3, #1
 80019c8:	6262      	str	r2, [r4, #36]	; 0x24
 80019ca:	6822      	ldr	r2, [r4, #0]
 80019cc:	6912      	ldr	r2, [r2, #16]
 80019ce:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 80019d0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80019d2:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 80019d4:	3b01      	subs	r3, #1
 80019d6:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80019d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80019da:	3b01      	subs	r3, #1
 80019dc:	b29b      	uxth	r3, r3
 80019de:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80019e0:	6953      	ldr	r3, [r2, #20]
 80019e2:	075b      	lsls	r3, r3, #29
 80019e4:	f57f af15 	bpl.w	8001812 <HAL_I2C_Master_Receive+0x10e>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80019e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019ea:	1c59      	adds	r1, r3, #1
 80019ec:	6261      	str	r1, [r4, #36]	; 0x24
 80019ee:	e7b4      	b.n	800195a <HAL_I2C_Master_Receive+0x256>

080019f0 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019f0:	6803      	ldr	r3, [r0, #0]
{
 80019f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80019f4:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019f6:	07d8      	lsls	r0, r3, #31
 80019f8:	d43b      	bmi.n	8001a72 <HAL_RCC_OscConfig+0x82>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019fa:	6823      	ldr	r3, [r4, #0]
 80019fc:	0799      	lsls	r1, r3, #30
 80019fe:	f100 8086 	bmi.w	8001b0e <HAL_RCC_OscConfig+0x11e>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a02:	6823      	ldr	r3, [r4, #0]
 8001a04:	071e      	lsls	r6, r3, #28
 8001a06:	f100 80d1 	bmi.w	8001bac <HAL_RCC_OscConfig+0x1bc>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a0a:	6823      	ldr	r3, [r4, #0]
 8001a0c:	075d      	lsls	r5, r3, #29
 8001a0e:	d52a      	bpl.n	8001a66 <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a10:	2300      	movs	r3, #0
 8001a12:	9301      	str	r3, [sp, #4]
 8001a14:	4b8e      	ldr	r3, [pc, #568]	; (8001c50 <HAL_RCC_OscConfig+0x260>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001a16:	4d8f      	ldr	r5, [pc, #572]	; (8001c54 <HAL_RCC_OscConfig+0x264>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a1a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a1e:	641a      	str	r2, [r3, #64]	; 0x40
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a26:	9301      	str	r3, [sp, #4]
 8001a28:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001a2a:	682b      	ldr	r3, [r5, #0]
 8001a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a30:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8001a32:	f7ff fac3 	bl	8000fbc <HAL_GetTick>
 8001a36:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001a38:	682b      	ldr	r3, [r5, #0]
 8001a3a:	05da      	lsls	r2, r3, #23
 8001a3c:	f140 80d8 	bpl.w	8001bf0 <HAL_RCC_OscConfig+0x200>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a40:	68a3      	ldr	r3, [r4, #8]
 8001a42:	4d83      	ldr	r5, [pc, #524]	; (8001c50 <HAL_RCC_OscConfig+0x260>)
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	f040 80da 	bne.w	8001bfe <HAL_RCC_OscConfig+0x20e>
 8001a4a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	672b      	str	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a52:	f7ff fab3 	bl	8000fbc <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a56:	4d7e      	ldr	r5, [pc, #504]	; (8001c50 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 8001a58:	4606      	mov	r6, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a5a:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a5e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001a60:	079b      	lsls	r3, r3, #30
 8001a62:	f140 80ed 	bpl.w	8001c40 <HAL_RCC_OscConfig+0x250>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a66:	69a2      	ldr	r2, [r4, #24]
 8001a68:	2a00      	cmp	r2, #0
 8001a6a:	f040 80f9 	bne.w	8001c60 <HAL_RCC_OscConfig+0x270>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001a6e:	2000      	movs	r0, #0
 8001a70:	e015      	b.n	8001a9e <HAL_RCC_OscConfig+0xae>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a72:	4b77      	ldr	r3, [pc, #476]	; (8001c50 <HAL_RCC_OscConfig+0x260>)
 8001a74:	689a      	ldr	r2, [r3, #8]
 8001a76:	f002 020c 	and.w	r2, r2, #12
 8001a7a:	2a04      	cmp	r2, #4
 8001a7c:	d007      	beq.n	8001a8e <HAL_RCC_OscConfig+0x9e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a84:	2a08      	cmp	r2, #8
 8001a86:	d10c      	bne.n	8001aa2 <HAL_RCC_OscConfig+0xb2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	025a      	lsls	r2, r3, #9
 8001a8c:	d509      	bpl.n	8001aa2 <HAL_RCC_OscConfig+0xb2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a8e:	4b70      	ldr	r3, [pc, #448]	; (8001c50 <HAL_RCC_OscConfig+0x260>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	039b      	lsls	r3, r3, #14
 8001a94:	d5b1      	bpl.n	80019fa <HAL_RCC_OscConfig+0xa>
 8001a96:	6863      	ldr	r3, [r4, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1ae      	bne.n	80019fa <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 8001a9c:	2001      	movs	r0, #1
}
 8001a9e:	b003      	add	sp, #12
 8001aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aa2:	6863      	ldr	r3, [r4, #4]
 8001aa4:	4d6a      	ldr	r5, [pc, #424]	; (8001c50 <HAL_RCC_OscConfig+0x260>)
 8001aa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aaa:	d111      	bne.n	8001ad0 <HAL_RCC_OscConfig+0xe0>
 8001aac:	682b      	ldr	r3, [r5, #0]
 8001aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001ab4:	f7ff fa82 	bl	8000fbc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab8:	4d65      	ldr	r5, [pc, #404]	; (8001c50 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 8001aba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001abc:	682b      	ldr	r3, [r5, #0]
 8001abe:	039f      	lsls	r7, r3, #14
 8001ac0:	d49b      	bmi.n	80019fa <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ac2:	f7ff fa7b 	bl	8000fbc <HAL_GetTick>
 8001ac6:	1b80      	subs	r0, r0, r6
 8001ac8:	2864      	cmp	r0, #100	; 0x64
 8001aca:	d9f7      	bls.n	8001abc <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8001acc:	2003      	movs	r0, #3
 8001ace:	e7e6      	b.n	8001a9e <HAL_RCC_OscConfig+0xae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ad0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ad4:	d104      	bne.n	8001ae0 <HAL_RCC_OscConfig+0xf0>
 8001ad6:	682b      	ldr	r3, [r5, #0]
 8001ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001adc:	602b      	str	r3, [r5, #0]
 8001ade:	e7e5      	b.n	8001aac <HAL_RCC_OscConfig+0xbc>
 8001ae0:	682a      	ldr	r2, [r5, #0]
 8001ae2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ae6:	602a      	str	r2, [r5, #0]
 8001ae8:	682a      	ldr	r2, [r5, #0]
 8001aea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001aee:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1df      	bne.n	8001ab4 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8001af4:	f7ff fa62 	bl	8000fbc <HAL_GetTick>
 8001af8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001afa:	682b      	ldr	r3, [r5, #0]
 8001afc:	0398      	lsls	r0, r3, #14
 8001afe:	f57f af7c 	bpl.w	80019fa <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b02:	f7ff fa5b 	bl	8000fbc <HAL_GetTick>
 8001b06:	1b80      	subs	r0, r0, r6
 8001b08:	2864      	cmp	r0, #100	; 0x64
 8001b0a:	d9f6      	bls.n	8001afa <HAL_RCC_OscConfig+0x10a>
 8001b0c:	e7de      	b.n	8001acc <HAL_RCC_OscConfig+0xdc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b0e:	4b50      	ldr	r3, [pc, #320]	; (8001c50 <HAL_RCC_OscConfig+0x260>)
 8001b10:	689a      	ldr	r2, [r3, #8]
 8001b12:	f012 0f0c 	tst.w	r2, #12
 8001b16:	d007      	beq.n	8001b28 <HAL_RCC_OscConfig+0x138>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b18:	689a      	ldr	r2, [r3, #8]
 8001b1a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b1e:	2a08      	cmp	r2, #8
 8001b20:	d116      	bne.n	8001b50 <HAL_RCC_OscConfig+0x160>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	0259      	lsls	r1, r3, #9
 8001b26:	d413      	bmi.n	8001b50 <HAL_RCC_OscConfig+0x160>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b28:	4b49      	ldr	r3, [pc, #292]	; (8001c50 <HAL_RCC_OscConfig+0x260>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	0792      	lsls	r2, r2, #30
 8001b2e:	d502      	bpl.n	8001b36 <HAL_RCC_OscConfig+0x146>
 8001b30:	68e2      	ldr	r2, [r4, #12]
 8001b32:	2a01      	cmp	r2, #1
 8001b34:	d1b2      	bne.n	8001a9c <HAL_RCC_OscConfig+0xac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b36:	6818      	ldr	r0, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b38:	22f8      	movs	r2, #248	; 0xf8
 8001b3a:	fa92 f2a2 	rbit	r2, r2
 8001b3e:	fab2 f182 	clz	r1, r2
 8001b42:	6922      	ldr	r2, [r4, #16]
 8001b44:	408a      	lsls	r2, r1
 8001b46:	f020 01f8 	bic.w	r1, r0, #248	; 0xf8
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b4e:	e758      	b.n	8001a02 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b50:	68e2      	ldr	r2, [r4, #12]
 8001b52:	4b41      	ldr	r3, [pc, #260]	; (8001c58 <HAL_RCC_OscConfig+0x268>)
 8001b54:	b1da      	cbz	r2, 8001b8e <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_HSI_ENABLE();
 8001b56:	2201      	movs	r2, #1
 8001b58:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b5a:	f7ff fa2f 	bl	8000fbc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b5e:	4d3c      	ldr	r5, [pc, #240]	; (8001c50 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 8001b60:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b62:	682b      	ldr	r3, [r5, #0]
 8001b64:	079b      	lsls	r3, r3, #30
 8001b66:	d50c      	bpl.n	8001b82 <HAL_RCC_OscConfig+0x192>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b68:	6829      	ldr	r1, [r5, #0]
 8001b6a:	23f8      	movs	r3, #248	; 0xf8
 8001b6c:	fa93 f3a3 	rbit	r3, r3
 8001b70:	fab3 f283 	clz	r2, r3
 8001b74:	6923      	ldr	r3, [r4, #16]
 8001b76:	4093      	lsls	r3, r2
 8001b78:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	602b      	str	r3, [r5, #0]
 8001b80:	e73f      	b.n	8001a02 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b82:	f7ff fa1b 	bl	8000fbc <HAL_GetTick>
 8001b86:	1b80      	subs	r0, r0, r6
 8001b88:	2802      	cmp	r0, #2
 8001b8a:	d9ea      	bls.n	8001b62 <HAL_RCC_OscConfig+0x172>
 8001b8c:	e79e      	b.n	8001acc <HAL_RCC_OscConfig+0xdc>
        __HAL_RCC_HSI_DISABLE();
 8001b8e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b90:	f7ff fa14 	bl	8000fbc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b94:	4d2e      	ldr	r5, [pc, #184]	; (8001c50 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 8001b96:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b98:	682b      	ldr	r3, [r5, #0]
 8001b9a:	079f      	lsls	r7, r3, #30
 8001b9c:	f57f af31 	bpl.w	8001a02 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ba0:	f7ff fa0c 	bl	8000fbc <HAL_GetTick>
 8001ba4:	1b80      	subs	r0, r0, r6
 8001ba6:	2802      	cmp	r0, #2
 8001ba8:	d9f6      	bls.n	8001b98 <HAL_RCC_OscConfig+0x1a8>
 8001baa:	e78f      	b.n	8001acc <HAL_RCC_OscConfig+0xdc>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bac:	6962      	ldr	r2, [r4, #20]
 8001bae:	4b2b      	ldr	r3, [pc, #172]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	b17a      	cbz	r2, 8001bd2 <HAL_RCC_OscConfig+0x1e2>
      __HAL_RCC_LSI_ENABLE();
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001bb6:	f7ff fa01 	bl	8000fbc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bba:	4d25      	ldr	r5, [pc, #148]	; (8001c50 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 8001bbc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bbe:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001bc0:	0798      	lsls	r0, r3, #30
 8001bc2:	f53f af22 	bmi.w	8001a0a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bc6:	f7ff f9f9 	bl	8000fbc <HAL_GetTick>
 8001bca:	1b80      	subs	r0, r0, r6
 8001bcc:	2802      	cmp	r0, #2
 8001bce:	d9f6      	bls.n	8001bbe <HAL_RCC_OscConfig+0x1ce>
 8001bd0:	e77c      	b.n	8001acc <HAL_RCC_OscConfig+0xdc>
      __HAL_RCC_LSI_DISABLE();
 8001bd2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001bd4:	f7ff f9f2 	bl	8000fbc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd8:	4d1d      	ldr	r5, [pc, #116]	; (8001c50 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 8001bda:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bdc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001bde:	0799      	lsls	r1, r3, #30
 8001be0:	f57f af13 	bpl.w	8001a0a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001be4:	f7ff f9ea 	bl	8000fbc <HAL_GetTick>
 8001be8:	1b80      	subs	r0, r0, r6
 8001bea:	2802      	cmp	r0, #2
 8001bec:	d9f6      	bls.n	8001bdc <HAL_RCC_OscConfig+0x1ec>
 8001bee:	e76d      	b.n	8001acc <HAL_RCC_OscConfig+0xdc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001bf0:	f7ff f9e4 	bl	8000fbc <HAL_GetTick>
 8001bf4:	1b80      	subs	r0, r0, r6
 8001bf6:	2802      	cmp	r0, #2
 8001bf8:	f67f af1e 	bls.w	8001a38 <HAL_RCC_OscConfig+0x48>
 8001bfc:	e766      	b.n	8001acc <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bfe:	2b05      	cmp	r3, #5
 8001c00:	d104      	bne.n	8001c0c <HAL_RCC_OscConfig+0x21c>
 8001c02:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001c04:	f043 0304 	orr.w	r3, r3, #4
 8001c08:	672b      	str	r3, [r5, #112]	; 0x70
 8001c0a:	e71e      	b.n	8001a4a <HAL_RCC_OscConfig+0x5a>
 8001c0c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001c0e:	f022 0201 	bic.w	r2, r2, #1
 8001c12:	672a      	str	r2, [r5, #112]	; 0x70
 8001c14:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001c16:	f022 0204 	bic.w	r2, r2, #4
 8001c1a:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f47f af18 	bne.w	8001a52 <HAL_RCC_OscConfig+0x62>
      tickstart = HAL_GetTick();
 8001c22:	f7ff f9cb 	bl	8000fbc <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c26:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001c2a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c2c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001c2e:	0798      	lsls	r0, r3, #30
 8001c30:	f57f af19 	bpl.w	8001a66 <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c34:	f7ff f9c2 	bl	8000fbc <HAL_GetTick>
 8001c38:	1b80      	subs	r0, r0, r6
 8001c3a:	42b8      	cmp	r0, r7
 8001c3c:	d9f6      	bls.n	8001c2c <HAL_RCC_OscConfig+0x23c>
 8001c3e:	e745      	b.n	8001acc <HAL_RCC_OscConfig+0xdc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c40:	f7ff f9bc 	bl	8000fbc <HAL_GetTick>
 8001c44:	1b80      	subs	r0, r0, r6
 8001c46:	42b8      	cmp	r0, r7
 8001c48:	f67f af09 	bls.w	8001a5e <HAL_RCC_OscConfig+0x6e>
 8001c4c:	e73e      	b.n	8001acc <HAL_RCC_OscConfig+0xdc>
 8001c4e:	bf00      	nop
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40007000 	.word	0x40007000
 8001c58:	42470000 	.word	0x42470000
 8001c5c:	42470e80 	.word	0x42470e80
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c60:	4d2b      	ldr	r5, [pc, #172]	; (8001d10 <HAL_RCC_OscConfig+0x320>)
 8001c62:	68ab      	ldr	r3, [r5, #8]
 8001c64:	f003 030c 	and.w	r3, r3, #12
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	f43f af17 	beq.w	8001a9c <HAL_RCC_OscConfig+0xac>
 8001c6e:	4e29      	ldr	r6, [pc, #164]	; (8001d14 <HAL_RCC_OscConfig+0x324>)
 8001c70:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c72:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001c74:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c76:	d13e      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x306>
        tickstart = HAL_GetTick();
 8001c78:	f7ff f9a0 	bl	8000fbc <HAL_GetTick>
 8001c7c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c7e:	682b      	ldr	r3, [r5, #0]
 8001c80:	0199      	lsls	r1, r3, #6
 8001c82:	d432      	bmi.n	8001cea <HAL_RCC_OscConfig+0x2fa>
 8001c84:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8001c88:	fa97 f7a7 	rbit	r7, r7
 8001c8c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c90:	fab7 f787 	clz	r7, r7
 8001c94:	fa92 f2a2 	rbit	r2, r2
 8001c98:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8001c9c:	fab2 f082 	clz	r0, r2
 8001ca0:	fa91 f1a1 	rbit	r1, r1
 8001ca4:	6a22      	ldr	r2, [r4, #32]
 8001ca6:	69e3      	ldr	r3, [r4, #28]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001cac:	fa02 f707 	lsl.w	r7, r2, r7
 8001cb0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001cb2:	0852      	lsrs	r2, r2, #1
 8001cb4:	3a01      	subs	r2, #1
 8001cb6:	4082      	lsls	r2, r0
 8001cb8:	433b      	orrs	r3, r7
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cbe:	4c14      	ldr	r4, [pc, #80]	; (8001d10 <HAL_RCC_OscConfig+0x320>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cc0:	fab1 f181 	clz	r1, r1
 8001cc4:	fa02 f101 	lsl.w	r1, r2, r1
 8001cc8:	430b      	orrs	r3, r1
 8001cca:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001ccc:	2301      	movs	r3, #1
 8001cce:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001cd0:	f7ff f974 	bl	8000fbc <HAL_GetTick>
 8001cd4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cd6:	6823      	ldr	r3, [r4, #0]
 8001cd8:	019a      	lsls	r2, r3, #6
 8001cda:	f53f aec8 	bmi.w	8001a6e <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cde:	f7ff f96d 	bl	8000fbc <HAL_GetTick>
 8001ce2:	1b40      	subs	r0, r0, r5
 8001ce4:	2802      	cmp	r0, #2
 8001ce6:	d9f6      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x2e6>
 8001ce8:	e6f0      	b.n	8001acc <HAL_RCC_OscConfig+0xdc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cea:	f7ff f967 	bl	8000fbc <HAL_GetTick>
 8001cee:	1bc0      	subs	r0, r0, r7
 8001cf0:	2802      	cmp	r0, #2
 8001cf2:	d9c4      	bls.n	8001c7e <HAL_RCC_OscConfig+0x28e>
 8001cf4:	e6ea      	b.n	8001acc <HAL_RCC_OscConfig+0xdc>
        tickstart = HAL_GetTick();
 8001cf6:	f7ff f961 	bl	8000fbc <HAL_GetTick>
 8001cfa:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cfc:	682b      	ldr	r3, [r5, #0]
 8001cfe:	019b      	lsls	r3, r3, #6
 8001d00:	f57f aeb5 	bpl.w	8001a6e <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d04:	f7ff f95a 	bl	8000fbc <HAL_GetTick>
 8001d08:	1b00      	subs	r0, r0, r4
 8001d0a:	2802      	cmp	r0, #2
 8001d0c:	d9f6      	bls.n	8001cfc <HAL_RCC_OscConfig+0x30c>
 8001d0e:	e6dd      	b.n	8001acc <HAL_RCC_OscConfig+0xdc>
 8001d10:	40023800 	.word	0x40023800
 8001d14:	42470060 	.word	0x42470060

08001d18 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d18:	4a19      	ldr	r2, [pc, #100]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x68>)
 8001d1a:	6893      	ldr	r3, [r2, #8]
 8001d1c:	f003 030c 	and.w	r3, r3, #12
 8001d20:	2b04      	cmp	r3, #4
{
 8001d22:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d24:	d003      	beq.n	8001d2e <HAL_RCC_GetSysClockFreq+0x16>
 8001d26:	2b08      	cmp	r3, #8
 8001d28:	d003      	beq.n	8001d32 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d2a:	4816      	ldr	r0, [pc, #88]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001d2c:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8001d2e:	4816      	ldr	r0, [pc, #88]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x70>)
 8001d30:	bd10      	pop	{r4, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d32:	6851      	ldr	r1, [r2, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d34:	6853      	ldr	r3, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d36:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d3a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001d3e:	f647 74c0 	movw	r4, #32704	; 0x7fc0
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001d42:	6853      	ldr	r3, [r2, #4]
 8001d44:	fa94 f0a4 	rbit	r0, r4
 8001d48:	fab0 f080 	clz	r0, r0
 8001d4c:	ea03 0304 	and.w	r3, r3, r4
 8001d50:	fa23 f300 	lsr.w	r3, r3, r0
 8001d54:	bf14      	ite	ne
 8001d56:	480c      	ldrne	r0, [pc, #48]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8001d58:	480a      	ldreq	r0, [pc, #40]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001d5a:	fbb0 f0f1 	udiv	r0, r0, r1
 8001d5e:	4358      	muls	r0, r3
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8001d60:	4b07      	ldr	r3, [pc, #28]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x68>)
 8001d62:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	fa92 f2a2 	rbit	r2, r2
 8001d6c:	fab2 f282 	clz	r2, r2
 8001d70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d74:	40d3      	lsrs	r3, r2
 8001d76:	3301      	adds	r3, #1
 8001d78:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001d7a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d7e:	bd10      	pop	{r4, pc}
 8001d80:	40023800 	.word	0x40023800
 8001d84:	00f42400 	.word	0x00f42400
 8001d88:	017d7840 	.word	0x017d7840

08001d8c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001d8c:	4b56      	ldr	r3, [pc, #344]	; (8001ee8 <HAL_RCC_ClockConfig+0x15c>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	f002 020f 	and.w	r2, r2, #15
 8001d94:	428a      	cmp	r2, r1
{
 8001d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d9a:	4605      	mov	r5, r0
 8001d9c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001d9e:	d330      	bcc.n	8001e02 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001da0:	682a      	ldr	r2, [r5, #0]
 8001da2:	0794      	lsls	r4, r2, #30
 8001da4:	d437      	bmi.n	8001e16 <HAL_RCC_ClockConfig+0x8a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001da6:	07d0      	lsls	r0, r2, #31
 8001da8:	d43d      	bmi.n	8001e26 <HAL_RCC_ClockConfig+0x9a>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001daa:	4b4f      	ldr	r3, [pc, #316]	; (8001ee8 <HAL_RCC_ClockConfig+0x15c>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	f002 020f 	and.w	r2, r2, #15
 8001db2:	4296      	cmp	r6, r2
 8001db4:	f0c0 8088 	bcc.w	8001ec8 <HAL_RCC_ClockConfig+0x13c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db8:	682a      	ldr	r2, [r5, #0]
 8001dba:	0751      	lsls	r1, r2, #29
 8001dbc:	f100 808c 	bmi.w	8001ed8 <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dc0:	0713      	lsls	r3, r2, #28
 8001dc2:	d507      	bpl.n	8001dd4 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dc4:	4a49      	ldr	r2, [pc, #292]	; (8001eec <HAL_RCC_ClockConfig+0x160>)
 8001dc6:	6929      	ldr	r1, [r5, #16]
 8001dc8:	6893      	ldr	r3, [r2, #8]
 8001dca:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001dce:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001dd2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001dd4:	f7ff ffa0 	bl	8001d18 <HAL_RCC_GetSysClockFreq>
 8001dd8:	4b44      	ldr	r3, [pc, #272]	; (8001eec <HAL_RCC_ClockConfig+0x160>)
 8001dda:	22f0      	movs	r2, #240	; 0xf0
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	fa92 f2a2 	rbit	r2, r2
 8001de2:	fab2 f282 	clz	r2, r2
 8001de6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dea:	40d3      	lsrs	r3, r2
 8001dec:	4a40      	ldr	r2, [pc, #256]	; (8001ef0 <HAL_RCC_ClockConfig+0x164>)
 8001dee:	5cd3      	ldrb	r3, [r2, r3]
 8001df0:	40d8      	lsrs	r0, r3
 8001df2:	4b40      	ldr	r3, [pc, #256]	; (8001ef4 <HAL_RCC_ClockConfig+0x168>)
 8001df4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001df6:	2000      	movs	r0, #0
 8001df8:	f7ff f8aa 	bl	8000f50 <HAL_InitTick>
  return HAL_OK;
 8001dfc:	2000      	movs	r0, #0
}
 8001dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e02:	b2ca      	uxtb	r2, r1
 8001e04:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 030f 	and.w	r3, r3, #15
 8001e0c:	4299      	cmp	r1, r3
 8001e0e:	d0c7      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001e10:	2001      	movs	r0, #1
 8001e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e16:	4935      	ldr	r1, [pc, #212]	; (8001eec <HAL_RCC_ClockConfig+0x160>)
 8001e18:	68a8      	ldr	r0, [r5, #8]
 8001e1a:	688b      	ldr	r3, [r1, #8]
 8001e1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e20:	4303      	orrs	r3, r0
 8001e22:	608b      	str	r3, [r1, #8]
 8001e24:	e7bf      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e26:	686a      	ldr	r2, [r5, #4]
 8001e28:	4b30      	ldr	r3, [pc, #192]	; (8001eec <HAL_RCC_ClockConfig+0x160>)
 8001e2a:	2a01      	cmp	r2, #1
 8001e2c:	d11e      	bne.n	8001e6c <HAL_RCC_ClockConfig+0xe0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e34:	d0ec      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x84>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e36:	4c2d      	ldr	r4, [pc, #180]	; (8001eec <HAL_RCC_ClockConfig+0x160>)
 8001e38:	68a3      	ldr	r3, [r4, #8]
 8001e3a:	f023 0303 	bic.w	r3, r3, #3
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8001e42:	f7ff f8bb 	bl	8000fbc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e46:	686b      	ldr	r3, [r5, #4]
 8001e48:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8001e4a:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e4c:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e50:	d116      	bne.n	8001e80 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e52:	68a3      	ldr	r3, [r4, #8]
 8001e54:	f003 030c 	and.w	r3, r3, #12
 8001e58:	2b04      	cmp	r3, #4
 8001e5a:	d0a6      	beq.n	8001daa <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e5c:	f7ff f8ae 	bl	8000fbc <HAL_GetTick>
 8001e60:	1bc0      	subs	r0, r0, r7
 8001e62:	4540      	cmp	r0, r8
 8001e64:	d9f5      	bls.n	8001e52 <HAL_RCC_ClockConfig+0xc6>
          return HAL_TIMEOUT;
 8001e66:	2003      	movs	r0, #3
 8001e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8001e6c:	1e91      	subs	r1, r2, #2
 8001e6e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e70:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8001e72:	d802      	bhi.n	8001e7a <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e74:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001e78:	e7dc      	b.n	8001e34 <HAL_RCC_ClockConfig+0xa8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e7a:	f013 0f02 	tst.w	r3, #2
 8001e7e:	e7d9      	b.n	8001e34 <HAL_RCC_ClockConfig+0xa8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d10a      	bne.n	8001e9a <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e84:	68a3      	ldr	r3, [r4, #8]
 8001e86:	f003 030c 	and.w	r3, r3, #12
 8001e8a:	2b08      	cmp	r3, #8
 8001e8c:	d08d      	beq.n	8001daa <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e8e:	f7ff f895 	bl	8000fbc <HAL_GetTick>
 8001e92:	1bc0      	subs	r0, r0, r7
 8001e94:	4540      	cmp	r0, r8
 8001e96:	d9f5      	bls.n	8001e84 <HAL_RCC_ClockConfig+0xf8>
 8001e98:	e7e5      	b.n	8001e66 <HAL_RCC_ClockConfig+0xda>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8001e9a:	2b03      	cmp	r3, #3
 8001e9c:	d10f      	bne.n	8001ebe <HAL_RCC_ClockConfig+0x132>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8001e9e:	68a3      	ldr	r3, [r4, #8]
 8001ea0:	f003 030c 	and.w	r3, r3, #12
 8001ea4:	2b0c      	cmp	r3, #12
 8001ea6:	d080      	beq.n	8001daa <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ea8:	f7ff f888 	bl	8000fbc <HAL_GetTick>
 8001eac:	1bc0      	subs	r0, r0, r7
 8001eae:	4540      	cmp	r0, r8
 8001eb0:	d9f5      	bls.n	8001e9e <HAL_RCC_ClockConfig+0x112>
 8001eb2:	e7d8      	b.n	8001e66 <HAL_RCC_ClockConfig+0xda>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb4:	f7ff f882 	bl	8000fbc <HAL_GetTick>
 8001eb8:	1bc0      	subs	r0, r0, r7
 8001eba:	4540      	cmp	r0, r8
 8001ebc:	d8d3      	bhi.n	8001e66 <HAL_RCC_ClockConfig+0xda>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ebe:	68a3      	ldr	r3, [r4, #8]
 8001ec0:	f013 0f0c 	tst.w	r3, #12
 8001ec4:	d1f6      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0x128>
 8001ec6:	e770      	b.n	8001daa <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec8:	b2f2      	uxtb	r2, r6
 8001eca:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	429e      	cmp	r6, r3
 8001ed4:	d19c      	bne.n	8001e10 <HAL_RCC_ClockConfig+0x84>
 8001ed6:	e76f      	b.n	8001db8 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ed8:	4904      	ldr	r1, [pc, #16]	; (8001eec <HAL_RCC_ClockConfig+0x160>)
 8001eda:	68e8      	ldr	r0, [r5, #12]
 8001edc:	688b      	ldr	r3, [r1, #8]
 8001ede:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001ee2:	4303      	orrs	r3, r0
 8001ee4:	608b      	str	r3, [r1, #8]
 8001ee6:	e76b      	b.n	8001dc0 <HAL_RCC_ClockConfig+0x34>
 8001ee8:	40023c00 	.word	0x40023c00
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	08006642 	.word	0x08006642
 8001ef4:	20000000 	.word	0x20000000

08001ef8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001ef8:	4b01      	ldr	r3, [pc, #4]	; (8001f00 <HAL_RCC_GetHCLKFreq+0x8>)
 8001efa:	6818      	ldr	r0, [r3, #0]
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	20000000 	.word	0x20000000

08001f04 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8001f04:	4b08      	ldr	r3, [pc, #32]	; (8001f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f06:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	fa92 f2a2 	rbit	r2, r2
 8001f10:	fab2 f282 	clz	r2, r2
 8001f14:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001f18:	40d3      	lsrs	r3, r2
 8001f1a:	4a04      	ldr	r2, [pc, #16]	; (8001f2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f1c:	5cd3      	ldrb	r3, [r2, r3]
 8001f1e:	4a04      	ldr	r2, [pc, #16]	; (8001f30 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001f20:	6810      	ldr	r0, [r2, #0]
}
 8001f22:	40d8      	lsrs	r0, r3
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	08006652 	.word	0x08006652
 8001f30:	20000000 	.word	0x20000000

08001f34 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8001f34:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f36:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	fa92 f2a2 	rbit	r2, r2
 8001f40:	fab2 f282 	clz	r2, r2
 8001f44:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001f48:	40d3      	lsrs	r3, r2
 8001f4a:	4a04      	ldr	r2, [pc, #16]	; (8001f5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f4c:	5cd3      	ldrb	r3, [r2, r3]
 8001f4e:	4a04      	ldr	r2, [pc, #16]	; (8001f60 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001f50:	6810      	ldr	r0, [r2, #0]
} 
 8001f52:	40d8      	lsrs	r0, r3
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	08006652 	.word	0x08006652
 8001f60:	20000000 	.word	0x20000000

08001f64 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f64:	6a03      	ldr	r3, [r0, #32]
 8001f66:	f023 0301 	bic.w	r3, r3, #1
 8001f6a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f6c:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001f6e:	6842      	ldr	r2, [r0, #4]
{
 8001f70:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f72:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f74:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001f76:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001f7a:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001f7c:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001f7e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001f82:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001f84:	4c0c      	ldr	r4, [pc, #48]	; (8001fb8 <TIM_OC1_SetConfig+0x54>)
 8001f86:	42a0      	cmp	r0, r4
 8001f88:	d009      	beq.n	8001f9e <TIM_OC1_SetConfig+0x3a>
 8001f8a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001f8e:	42a0      	cmp	r0, r4
 8001f90:	d005      	beq.n	8001f9e <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f92:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f94:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001f96:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001f98:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001f9a:	6203      	str	r3, [r0, #32]
} 
 8001f9c:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8001f9e:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8001fa0:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001fa2:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001fa6:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001fa8:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001faa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001fae:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001fb0:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001fb4:	4322      	orrs	r2, r4
 8001fb6:	e7ec      	b.n	8001f92 <TIM_OC1_SetConfig+0x2e>
 8001fb8:	40010000 	.word	0x40010000

08001fbc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001fbc:	6a03      	ldr	r3, [r0, #32]
 8001fbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fc2:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fc4:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001fc6:	6842      	ldr	r2, [r0, #4]
{
 8001fc8:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001fca:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001fcc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8001fce:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001fd2:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001fd4:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001fd6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001fda:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001fde:	4c0e      	ldr	r4, [pc, #56]	; (8002018 <TIM_OC3_SetConfig+0x5c>)
 8001fe0:	42a0      	cmp	r0, r4
 8001fe2:	d009      	beq.n	8001ff8 <TIM_OC3_SetConfig+0x3c>
 8001fe4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001fe8:	42a0      	cmp	r0, r4
 8001fea:	d005      	beq.n	8001ff8 <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fec:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001fee:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001ff0:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001ff2:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ff4:	6203      	str	r3, [r0, #32]
}
 8001ff6:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001ff8:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001ffa:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001ffc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002000:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002004:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002006:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800200a:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 800200c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002010:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8002014:	e7ea      	b.n	8001fec <TIM_OC3_SetConfig+0x30>
 8002016:	bf00      	nop
 8002018:	40010000 	.word	0x40010000

0800201c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800201c:	6a03      	ldr	r3, [r0, #32]
 800201e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002022:	6203      	str	r3, [r0, #32]
{
 8002024:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002026:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002028:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800202a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800202c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800202e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002032:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002036:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002038:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800203c:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002040:	4d09      	ldr	r5, [pc, #36]	; (8002068 <TIM_OC4_SetConfig+0x4c>)
 8002042:	42a8      	cmp	r0, r5
 8002044:	d009      	beq.n	800205a <TIM_OC4_SetConfig+0x3e>
 8002046:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800204a:	42a8      	cmp	r0, r5
 800204c:	d005      	beq.n	800205a <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800204e:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002050:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002052:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8002054:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002056:	6204      	str	r4, [r0, #32]
}
 8002058:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800205a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800205c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002060:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8002064:	e7f3      	b.n	800204e <TIM_OC4_SetConfig+0x32>
 8002066:	bf00      	nop
 8002068:	40010000 	.word	0x40010000

0800206c <HAL_TIM_PWM_MspInit>:
 800206c:	4770      	bx	lr

0800206e <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800206e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002072:	2b01      	cmp	r3, #1
{
 8002074:	b570      	push	{r4, r5, r6, lr}
 8002076:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 800207a:	d01c      	beq.n	80020b6 <HAL_TIM_ConfigClockSource+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 800207c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 8002080:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8002082:	2201      	movs	r2, #1
 8002084:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 8002088:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800208a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800208e:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002092:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8002094:	680a      	ldr	r2, [r1, #0]
 8002096:	2a40      	cmp	r2, #64	; 0x40
 8002098:	d079      	beq.n	800218e <HAL_TIM_ConfigClockSource+0x120>
 800209a:	d819      	bhi.n	80020d0 <HAL_TIM_ConfigClockSource+0x62>
 800209c:	2a10      	cmp	r2, #16
 800209e:	f000 8093 	beq.w	80021c8 <HAL_TIM_ConfigClockSource+0x15a>
 80020a2:	d80a      	bhi.n	80020ba <HAL_TIM_ConfigClockSource+0x4c>
 80020a4:	2a00      	cmp	r2, #0
 80020a6:	f000 8089 	beq.w	80021bc <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 80020aa:	2301      	movs	r3, #1
 80020ac:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 80020b0:	2300      	movs	r3, #0
 80020b2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 80020b6:	4618      	mov	r0, r3
}
 80020b8:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80020ba:	2a20      	cmp	r2, #32
 80020bc:	f000 808a 	beq.w	80021d4 <HAL_TIM_ConfigClockSource+0x166>
 80020c0:	2a30      	cmp	r2, #48	; 0x30
 80020c2:	d1f2      	bne.n	80020aa <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80020c4:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80020c6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80020ca:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 80020ce:	e036      	b.n	800213e <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80020d0:	2a70      	cmp	r2, #112	; 0x70
 80020d2:	d036      	beq.n	8002142 <HAL_TIM_ConfigClockSource+0xd4>
 80020d4:	d81b      	bhi.n	800210e <HAL_TIM_ConfigClockSource+0xa0>
 80020d6:	2a50      	cmp	r2, #80	; 0x50
 80020d8:	d042      	beq.n	8002160 <HAL_TIM_ConfigClockSource+0xf2>
 80020da:	2a60      	cmp	r2, #96	; 0x60
 80020dc:	d1e5      	bne.n	80020aa <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020de:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80020e0:	684d      	ldr	r5, [r1, #4]
 80020e2:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020e4:	f024 0410 	bic.w	r4, r4, #16
 80020e8:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020ea:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80020ec:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80020ee:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80020f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80020f6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80020fa:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80020fe:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002100:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002102:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002104:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002108:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 800210c:	e017      	b.n	800213e <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800210e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002112:	d011      	beq.n	8002138 <HAL_TIM_ConfigClockSource+0xca>
 8002114:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002118:	d1c7      	bne.n	80020aa <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800211a:	688a      	ldr	r2, [r1, #8]
 800211c:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800211e:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002120:	68c9      	ldr	r1, [r1, #12]
 8002122:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002124:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002128:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800212c:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800212e:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002136:	e002      	b.n	800213e <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	e7b3      	b.n	80020aa <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002142:	688a      	ldr	r2, [r1, #8]
 8002144:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002146:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002148:	68c9      	ldr	r1, [r1, #12]
 800214a:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800214c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002150:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002154:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8002156:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002158:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800215a:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 800215e:	e7ee      	b.n	800213e <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002160:	684c      	ldr	r4, [r1, #4]
 8002162:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002164:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002166:	6a1d      	ldr	r5, [r3, #32]
 8002168:	f025 0501 	bic.w	r5, r5, #1
 800216c:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800216e:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002170:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002174:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002178:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800217c:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800217e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002180:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002182:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002184:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002188:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 800218c:	e7d7      	b.n	800213e <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800218e:	684c      	ldr	r4, [r1, #4]
 8002190:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002192:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002194:	6a1d      	ldr	r5, [r3, #32]
 8002196:	f025 0501 	bic.w	r5, r5, #1
 800219a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800219c:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800219e:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021a2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021a6:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80021aa:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80021ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021ae:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80021b0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80021b2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80021b6:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 80021ba:	e7c0      	b.n	800213e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80021bc:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80021be:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80021c2:	f042 0207 	orr.w	r2, r2, #7
 80021c6:	e7ba      	b.n	800213e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80021c8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80021ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80021ce:	f042 0217 	orr.w	r2, r2, #23
 80021d2:	e7b4      	b.n	800213e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80021d4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80021d6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80021da:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 80021de:	e7ae      	b.n	800213e <HAL_TIM_ConfigClockSource+0xd0>

080021e0 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80021e0:	4a2e      	ldr	r2, [pc, #184]	; (800229c <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 80021e2:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80021e4:	4290      	cmp	r0, r2
 80021e6:	d012      	beq.n	800220e <TIM_Base_SetConfig+0x2e>
 80021e8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80021ec:	d00f      	beq.n	800220e <TIM_Base_SetConfig+0x2e>
 80021ee:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80021f2:	4290      	cmp	r0, r2
 80021f4:	d00b      	beq.n	800220e <TIM_Base_SetConfig+0x2e>
 80021f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021fa:	4290      	cmp	r0, r2
 80021fc:	d007      	beq.n	800220e <TIM_Base_SetConfig+0x2e>
 80021fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002202:	4290      	cmp	r0, r2
 8002204:	d003      	beq.n	800220e <TIM_Base_SetConfig+0x2e>
 8002206:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800220a:	4290      	cmp	r0, r2
 800220c:	d11d      	bne.n	800224a <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 800220e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002214:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002216:	4a21      	ldr	r2, [pc, #132]	; (800229c <TIM_Base_SetConfig+0xbc>)
 8002218:	4290      	cmp	r0, r2
 800221a:	d104      	bne.n	8002226 <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800221c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800221e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002222:	4313      	orrs	r3, r2
 8002224:	e028      	b.n	8002278 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002226:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800222a:	d0f7      	beq.n	800221c <TIM_Base_SetConfig+0x3c>
 800222c:	4a1c      	ldr	r2, [pc, #112]	; (80022a0 <TIM_Base_SetConfig+0xc0>)
 800222e:	4290      	cmp	r0, r2
 8002230:	d0f4      	beq.n	800221c <TIM_Base_SetConfig+0x3c>
 8002232:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002236:	4290      	cmp	r0, r2
 8002238:	d0f0      	beq.n	800221c <TIM_Base_SetConfig+0x3c>
 800223a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800223e:	4290      	cmp	r0, r2
 8002240:	d0ec      	beq.n	800221c <TIM_Base_SetConfig+0x3c>
 8002242:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002246:	4290      	cmp	r0, r2
 8002248:	d0e8      	beq.n	800221c <TIM_Base_SetConfig+0x3c>
 800224a:	4a16      	ldr	r2, [pc, #88]	; (80022a4 <TIM_Base_SetConfig+0xc4>)
 800224c:	4290      	cmp	r0, r2
 800224e:	d0e5      	beq.n	800221c <TIM_Base_SetConfig+0x3c>
 8002250:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002254:	4290      	cmp	r0, r2
 8002256:	d0e1      	beq.n	800221c <TIM_Base_SetConfig+0x3c>
 8002258:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800225c:	4290      	cmp	r0, r2
 800225e:	d0dd      	beq.n	800221c <TIM_Base_SetConfig+0x3c>
 8002260:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002264:	4290      	cmp	r0, r2
 8002266:	d0d9      	beq.n	800221c <TIM_Base_SetConfig+0x3c>
 8002268:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800226c:	4290      	cmp	r0, r2
 800226e:	d0d5      	beq.n	800221c <TIM_Base_SetConfig+0x3c>
 8002270:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002274:	4290      	cmp	r0, r2
 8002276:	d0d1      	beq.n	800221c <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 8002278:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800227a:	688b      	ldr	r3, [r1, #8]
 800227c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800227e:	680b      	ldr	r3, [r1, #0]
 8002280:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002282:	4b06      	ldr	r3, [pc, #24]	; (800229c <TIM_Base_SetConfig+0xbc>)
 8002284:	4298      	cmp	r0, r3
 8002286:	d006      	beq.n	8002296 <TIM_Base_SetConfig+0xb6>
 8002288:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800228c:	4298      	cmp	r0, r3
 800228e:	d002      	beq.n	8002296 <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8002290:	2301      	movs	r3, #1
 8002292:	6143      	str	r3, [r0, #20]
}
 8002294:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002296:	690b      	ldr	r3, [r1, #16]
 8002298:	6303      	str	r3, [r0, #48]	; 0x30
 800229a:	e7f9      	b.n	8002290 <TIM_Base_SetConfig+0xb0>
 800229c:	40010000 	.word	0x40010000
 80022a0:	40000400 	.word	0x40000400
 80022a4:	40014000 	.word	0x40014000

080022a8 <HAL_TIM_Base_Init>:
{ 
 80022a8:	b510      	push	{r4, lr}
  if(htim == NULL)
 80022aa:	4604      	mov	r4, r0
 80022ac:	b1a0      	cbz	r0, 80022d8 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80022ae:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80022b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80022b6:	b91b      	cbnz	r3, 80022c0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80022b8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80022bc:	f000 fe8c 	bl	8002fd8 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80022c0:	2302      	movs	r3, #2
 80022c2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80022c6:	6820      	ldr	r0, [r4, #0]
 80022c8:	1d21      	adds	r1, r4, #4
 80022ca:	f7ff ff89 	bl	80021e0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80022ce:	2301      	movs	r3, #1
 80022d0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80022d4:	2000      	movs	r0, #0
 80022d6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80022d8:	2001      	movs	r0, #1
}
 80022da:	bd10      	pop	{r4, pc}

080022dc <HAL_TIM_PWM_Init>:
{
 80022dc:	b510      	push	{r4, lr}
  if(htim == NULL)
 80022de:	4604      	mov	r4, r0
 80022e0:	b1a0      	cbz	r0, 800230c <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80022e2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80022e6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80022ea:	b91b      	cbnz	r3, 80022f4 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80022ec:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 80022f0:	f7ff febc 	bl	800206c <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 80022f4:	2302      	movs	r3, #2
 80022f6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80022fa:	6820      	ldr	r0, [r4, #0]
 80022fc:	1d21      	adds	r1, r4, #4
 80022fe:	f7ff ff6f 	bl	80021e0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002302:	2301      	movs	r3, #1
 8002304:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8002308:	2000      	movs	r0, #0
 800230a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800230c:	2001      	movs	r0, #1
}  
 800230e:	bd10      	pop	{r4, pc}

08002310 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002310:	6a03      	ldr	r3, [r0, #32]
 8002312:	f023 0310 	bic.w	r3, r3, #16
 8002316:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002318:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 800231a:	6842      	ldr	r2, [r0, #4]
{
 800231c:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 800231e:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002320:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002322:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002326:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800232a:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800232c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002330:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002334:	4c0d      	ldr	r4, [pc, #52]	; (800236c <TIM_OC2_SetConfig+0x5c>)
 8002336:	42a0      	cmp	r0, r4
 8002338:	d009      	beq.n	800234e <TIM_OC2_SetConfig+0x3e>
 800233a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800233e:	42a0      	cmp	r0, r4
 8002340:	d005      	beq.n	800234e <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 8002342:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8002344:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002346:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002348:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800234a:	6203      	str	r3, [r0, #32]
}
 800234c:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800234e:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002350:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002352:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002356:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800235a:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800235c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002360:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8002362:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002366:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 800236a:	e7ea      	b.n	8002342 <TIM_OC2_SetConfig+0x32>
 800236c:	40010000 	.word	0x40010000

08002370 <HAL_TIM_PWM_ConfigChannel>:
{
 8002370:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002372:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002376:	2b01      	cmp	r3, #1
{
 8002378:	4604      	mov	r4, r0
 800237a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800237e:	d025      	beq.n	80023cc <HAL_TIM_PWM_ConfigChannel+0x5c>
 8002380:	2301      	movs	r3, #1
 8002382:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8002386:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 800238a:	2a0c      	cmp	r2, #12
 800238c:	d818      	bhi.n	80023c0 <HAL_TIM_PWM_ConfigChannel+0x50>
 800238e:	e8df f002 	tbb	[pc, r2]
 8002392:	1707      	.short	0x1707
 8002394:	171e1717 	.word	0x171e1717
 8002398:	172f1717 	.word	0x172f1717
 800239c:	1717      	.short	0x1717
 800239e:	40          	.byte	0x40
 800239f:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80023a0:	6820      	ldr	r0, [r4, #0]
 80023a2:	f7ff fddf 	bl	8001f64 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023a6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023a8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023aa:	699a      	ldr	r2, [r3, #24]
 80023ac:	f042 0208 	orr.w	r2, r2, #8
 80023b0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80023b2:	699a      	ldr	r2, [r3, #24]
 80023b4:	f022 0204 	bic.w	r2, r2, #4
 80023b8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023ba:	699a      	ldr	r2, [r3, #24]
 80023bc:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023be:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80023c0:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80023c2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80023c4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 80023c8:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 80023cc:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023ce:	6820      	ldr	r0, [r4, #0]
 80023d0:	f7ff ff9e 	bl	8002310 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023d4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023d6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023d8:	699a      	ldr	r2, [r3, #24]
 80023da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023e0:	699a      	ldr	r2, [r3, #24]
 80023e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023e8:	699a      	ldr	r2, [r3, #24]
 80023ea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80023ee:	e7e6      	b.n	80023be <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023f0:	6820      	ldr	r0, [r4, #0]
 80023f2:	f7ff fde3 	bl	8001fbc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023f6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80023f8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023fa:	69da      	ldr	r2, [r3, #28]
 80023fc:	f042 0208 	orr.w	r2, r2, #8
 8002400:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002402:	69da      	ldr	r2, [r3, #28]
 8002404:	f022 0204 	bic.w	r2, r2, #4
 8002408:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800240a:	69da      	ldr	r2, [r3, #28]
 800240c:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800240e:	61da      	str	r2, [r3, #28]
    break;
 8002410:	e7d6      	b.n	80023c0 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002412:	6820      	ldr	r0, [r4, #0]
 8002414:	f7ff fe02 	bl	800201c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002418:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800241a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800241c:	69da      	ldr	r2, [r3, #28]
 800241e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002422:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002424:	69da      	ldr	r2, [r3, #28]
 8002426:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800242a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800242c:	69da      	ldr	r2, [r3, #28]
 800242e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002432:	e7ec      	b.n	800240e <HAL_TIM_PWM_ConfigChannel+0x9e>

08002434 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8002434:	6a03      	ldr	r3, [r0, #32]
{
 8002436:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8002438:	2401      	movs	r4, #1
 800243a:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800243c:	ea23 0304 	bic.w	r3, r3, r4
 8002440:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002442:	6a03      	ldr	r3, [r0, #32]
 8002444:	408a      	lsls	r2, r1
 8002446:	431a      	orrs	r2, r3
 8002448:	6202      	str	r2, [r0, #32]
 800244a:	bd10      	pop	{r4, pc}

0800244c <HAL_TIM_PWM_Start>:
{
 800244c:	b510      	push	{r4, lr}
 800244e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002450:	2201      	movs	r2, #1
 8002452:	6800      	ldr	r0, [r0, #0]
 8002454:	f7ff ffee 	bl	8002434 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8002458:	6823      	ldr	r3, [r4, #0]
 800245a:	4a08      	ldr	r2, [pc, #32]	; (800247c <HAL_TIM_PWM_Start+0x30>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d003      	beq.n	8002468 <HAL_TIM_PWM_Start+0x1c>
 8002460:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002464:	4293      	cmp	r3, r2
 8002466:	d103      	bne.n	8002470 <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8002468:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800246a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800246e:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	f042 0201 	orr.w	r2, r2, #1
 8002476:	601a      	str	r2, [r3, #0]
} 
 8002478:	2000      	movs	r0, #0
 800247a:	bd10      	pop	{r4, pc}
 800247c:	40010000 	.word	0x40010000

08002480 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8002480:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002484:	2b01      	cmp	r3, #1
{
 8002486:	b510      	push	{r4, lr}
 8002488:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 800248c:	d018      	beq.n	80024c0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 800248e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002492:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8002494:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002496:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002498:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800249a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800249e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	4322      	orrs	r2, r4
 80024a4:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024ac:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	430a      	orrs	r2, r1
 80024b2:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 80024b4:	2301      	movs	r3, #1
 80024b6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80024ba:	2300      	movs	r3, #0
 80024bc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 80024c0:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 80024c2:	bd10      	pop	{r4, pc}

080024c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80024c4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d01f      	beq.n	800250c <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80024cc:	68cb      	ldr	r3, [r1, #12]
 80024ce:	688a      	ldr	r2, [r1, #8]
 80024d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024d4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80024d6:	684a      	ldr	r2, [r1, #4]
 80024d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024dc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80024de:	680a      	ldr	r2, [r1, #0]
 80024e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80024e4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80024e6:	690a      	ldr	r2, [r1, #16]
 80024e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024ec:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80024ee:	694a      	ldr	r2, [r1, #20]
 80024f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024f4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80024f6:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80024f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80024fc:	4313      	orrs	r3, r2
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80024fe:	6802      	ldr	r2, [r0, #0]
 8002500:	6453      	str	r3, [r2, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 8002502:	2300      	movs	r3, #0
 8002504:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8002508:	4618      	mov	r0, r3
 800250a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800250c:	2002      	movs	r0, #2
}
 800250e:	4770      	bx	lr

08002510 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8002514:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002516:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8002518:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800251a:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800251c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002520:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8002522:	6133      	str	r3, [r6, #16]
{
 8002524:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002526:	6883      	ldr	r3, [r0, #8]
 8002528:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 800252a:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800252c:	4303      	orrs	r3, r0
 800252e:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002530:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002534:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002536:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800253a:	430b      	orrs	r3, r1
 800253c:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800253e:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8002540:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8002542:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8002544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8002548:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800254a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800254e:	6173      	str	r3, [r6, #20]
 8002550:	4b7a      	ldr	r3, [pc, #488]	; (800273c <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002552:	d17c      	bne.n	800264e <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002554:	429e      	cmp	r6, r3
 8002556:	d003      	beq.n	8002560 <UART_SetConfig+0x50>
 8002558:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800255c:	429e      	cmp	r6, r3
 800255e:	d144      	bne.n	80025ea <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002560:	f7ff fce8 	bl	8001f34 <HAL_RCC_GetPCLK2Freq>
 8002564:	2519      	movs	r5, #25
 8002566:	fb05 f300 	mul.w	r3, r5, r0
 800256a:	6860      	ldr	r0, [r4, #4]
 800256c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002570:	0040      	lsls	r0, r0, #1
 8002572:	fbb3 f3f0 	udiv	r3, r3, r0
 8002576:	fbb3 f3f9 	udiv	r3, r3, r9
 800257a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800257e:	f7ff fcd9 	bl	8001f34 <HAL_RCC_GetPCLK2Freq>
 8002582:	6863      	ldr	r3, [r4, #4]
 8002584:	4368      	muls	r0, r5
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	fbb0 f7f3 	udiv	r7, r0, r3
 800258c:	f7ff fcd2 	bl	8001f34 <HAL_RCC_GetPCLK2Freq>
 8002590:	6863      	ldr	r3, [r4, #4]
 8002592:	4368      	muls	r0, r5
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	fbb0 f3f3 	udiv	r3, r0, r3
 800259a:	fbb3 f3f9 	udiv	r3, r3, r9
 800259e:	fb09 7313 	mls	r3, r9, r3, r7
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	3332      	adds	r3, #50	; 0x32
 80025a6:	fbb3 f3f9 	udiv	r3, r3, r9
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80025b0:	f7ff fcc0 	bl	8001f34 <HAL_RCC_GetPCLK2Freq>
 80025b4:	6862      	ldr	r2, [r4, #4]
 80025b6:	4368      	muls	r0, r5
 80025b8:	0052      	lsls	r2, r2, #1
 80025ba:	fbb0 faf2 	udiv	sl, r0, r2
 80025be:	f7ff fcb9 	bl	8001f34 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80025c2:	6863      	ldr	r3, [r4, #4]
 80025c4:	4368      	muls	r0, r5
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80025cc:	fbb3 f3f9 	udiv	r3, r3, r9
 80025d0:	fb09 a313 	mls	r3, r9, r3, sl
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	3332      	adds	r3, #50	; 0x32
 80025d8:	fbb3 f3f9 	udiv	r3, r3, r9
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80025e2:	443b      	add	r3, r7
 80025e4:	60b3      	str	r3, [r6, #8]
 80025e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80025ea:	f7ff fc8b 	bl	8001f04 <HAL_RCC_GetPCLK1Freq>
 80025ee:	2519      	movs	r5, #25
 80025f0:	fb05 f300 	mul.w	r3, r5, r0
 80025f4:	6860      	ldr	r0, [r4, #4]
 80025f6:	f04f 0964 	mov.w	r9, #100	; 0x64
 80025fa:	0040      	lsls	r0, r0, #1
 80025fc:	fbb3 f3f0 	udiv	r3, r3, r0
 8002600:	fbb3 f3f9 	udiv	r3, r3, r9
 8002604:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002608:	f7ff fc7c 	bl	8001f04 <HAL_RCC_GetPCLK1Freq>
 800260c:	6863      	ldr	r3, [r4, #4]
 800260e:	4368      	muls	r0, r5
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	fbb0 f7f3 	udiv	r7, r0, r3
 8002616:	f7ff fc75 	bl	8001f04 <HAL_RCC_GetPCLK1Freq>
 800261a:	6863      	ldr	r3, [r4, #4]
 800261c:	4368      	muls	r0, r5
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	fbb0 f3f3 	udiv	r3, r0, r3
 8002624:	fbb3 f3f9 	udiv	r3, r3, r9
 8002628:	fb09 7313 	mls	r3, r9, r3, r7
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	3332      	adds	r3, #50	; 0x32
 8002630:	fbb3 f3f9 	udiv	r3, r3, r9
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800263a:	f7ff fc63 	bl	8001f04 <HAL_RCC_GetPCLK1Freq>
 800263e:	6862      	ldr	r2, [r4, #4]
 8002640:	4368      	muls	r0, r5
 8002642:	0052      	lsls	r2, r2, #1
 8002644:	fbb0 faf2 	udiv	sl, r0, r2
 8002648:	f7ff fc5c 	bl	8001f04 <HAL_RCC_GetPCLK1Freq>
 800264c:	e7b9      	b.n	80025c2 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800264e:	429e      	cmp	r6, r3
 8002650:	d002      	beq.n	8002658 <UART_SetConfig+0x148>
 8002652:	4b3b      	ldr	r3, [pc, #236]	; (8002740 <UART_SetConfig+0x230>)
 8002654:	429e      	cmp	r6, r3
 8002656:	d140      	bne.n	80026da <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002658:	f7ff fc6c 	bl	8001f34 <HAL_RCC_GetPCLK2Freq>
 800265c:	6867      	ldr	r7, [r4, #4]
 800265e:	2519      	movs	r5, #25
 8002660:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002664:	fb05 f300 	mul.w	r3, r5, r0
 8002668:	00bf      	lsls	r7, r7, #2
 800266a:	fbb3 f3f7 	udiv	r3, r3, r7
 800266e:	fbb3 f3f9 	udiv	r3, r3, r9
 8002672:	011f      	lsls	r7, r3, #4
 8002674:	f7ff fc5e 	bl	8001f34 <HAL_RCC_GetPCLK2Freq>
 8002678:	6863      	ldr	r3, [r4, #4]
 800267a:	4368      	muls	r0, r5
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	fbb0 f8f3 	udiv	r8, r0, r3
 8002682:	f7ff fc57 	bl	8001f34 <HAL_RCC_GetPCLK2Freq>
 8002686:	6863      	ldr	r3, [r4, #4]
 8002688:	4368      	muls	r0, r5
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002690:	fbb3 f3f9 	udiv	r3, r3, r9
 8002694:	fb09 8313 	mls	r3, r9, r3, r8
 8002698:	011b      	lsls	r3, r3, #4
 800269a:	3332      	adds	r3, #50	; 0x32
 800269c:	fbb3 f3f9 	udiv	r3, r3, r9
 80026a0:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80026a4:	f7ff fc46 	bl	8001f34 <HAL_RCC_GetPCLK2Freq>
 80026a8:	6862      	ldr	r2, [r4, #4]
 80026aa:	4368      	muls	r0, r5
 80026ac:	0092      	lsls	r2, r2, #2
 80026ae:	fbb0 faf2 	udiv	sl, r0, r2
 80026b2:	f7ff fc3f 	bl	8001f34 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80026b6:	6863      	ldr	r3, [r4, #4]
 80026b8:	4368      	muls	r0, r5
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80026c0:	fbb3 f3f9 	udiv	r3, r3, r9
 80026c4:	fb09 a313 	mls	r3, r9, r3, sl
 80026c8:	011b      	lsls	r3, r3, #4
 80026ca:	3332      	adds	r3, #50	; 0x32
 80026cc:	fbb3 f3f9 	udiv	r3, r3, r9
 80026d0:	f003 030f 	and.w	r3, r3, #15
 80026d4:	ea43 0308 	orr.w	r3, r3, r8
 80026d8:	e783      	b.n	80025e2 <UART_SetConfig+0xd2>
 80026da:	f7ff fc13 	bl	8001f04 <HAL_RCC_GetPCLK1Freq>
 80026de:	6867      	ldr	r7, [r4, #4]
 80026e0:	2519      	movs	r5, #25
 80026e2:	f04f 0964 	mov.w	r9, #100	; 0x64
 80026e6:	fb05 f300 	mul.w	r3, r5, r0
 80026ea:	00bf      	lsls	r7, r7, #2
 80026ec:	fbb3 f3f7 	udiv	r3, r3, r7
 80026f0:	fbb3 f3f9 	udiv	r3, r3, r9
 80026f4:	011f      	lsls	r7, r3, #4
 80026f6:	f7ff fc05 	bl	8001f04 <HAL_RCC_GetPCLK1Freq>
 80026fa:	6863      	ldr	r3, [r4, #4]
 80026fc:	4368      	muls	r0, r5
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	fbb0 f8f3 	udiv	r8, r0, r3
 8002704:	f7ff fbfe 	bl	8001f04 <HAL_RCC_GetPCLK1Freq>
 8002708:	6863      	ldr	r3, [r4, #4]
 800270a:	4368      	muls	r0, r5
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002712:	fbb3 f3f9 	udiv	r3, r3, r9
 8002716:	fb09 8313 	mls	r3, r9, r3, r8
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	3332      	adds	r3, #50	; 0x32
 800271e:	fbb3 f3f9 	udiv	r3, r3, r9
 8002722:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002726:	f7ff fbed 	bl	8001f04 <HAL_RCC_GetPCLK1Freq>
 800272a:	6862      	ldr	r2, [r4, #4]
 800272c:	4368      	muls	r0, r5
 800272e:	0092      	lsls	r2, r2, #2
 8002730:	fbb0 faf2 	udiv	sl, r0, r2
 8002734:	f7ff fbe6 	bl	8001f04 <HAL_RCC_GetPCLK1Freq>
 8002738:	e7bd      	b.n	80026b6 <UART_SetConfig+0x1a6>
 800273a:	bf00      	nop
 800273c:	40011000 	.word	0x40011000
 8002740:	40011400 	.word	0x40011400

08002744 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002746:	4604      	mov	r4, r0
 8002748:	460e      	mov	r6, r1
 800274a:	4617      	mov	r7, r2
 800274c:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800274e:	6821      	ldr	r1, [r4, #0]
 8002750:	680b      	ldr	r3, [r1, #0]
 8002752:	ea36 0303 	bics.w	r3, r6, r3
 8002756:	d101      	bne.n	800275c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8002758:	2000      	movs	r0, #0
}
 800275a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 800275c:	1c6b      	adds	r3, r5, #1
 800275e:	d0f7      	beq.n	8002750 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002760:	b995      	cbnz	r5, 8002788 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002762:	6823      	ldr	r3, [r4, #0]
 8002764:	68da      	ldr	r2, [r3, #12]
 8002766:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800276a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800276c:	695a      	ldr	r2, [r3, #20]
 800276e:	f022 0201 	bic.w	r2, r2, #1
 8002772:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002774:	2320      	movs	r3, #32
 8002776:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800277a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800277e:	2300      	movs	r3, #0
 8002780:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8002784:	2003      	movs	r0, #3
 8002786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002788:	f7fe fc18 	bl	8000fbc <HAL_GetTick>
 800278c:	1bc0      	subs	r0, r0, r7
 800278e:	4285      	cmp	r5, r0
 8002790:	d2dd      	bcs.n	800274e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8002792:	e7e6      	b.n	8002762 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08002794 <HAL_UART_Init>:
{
 8002794:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002796:	4604      	mov	r4, r0
 8002798:	b340      	cbz	r0, 80027ec <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 800279a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800279e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80027a2:	b91b      	cbnz	r3, 80027ac <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80027a4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80027a8:	f000 fce4 	bl	8003174 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80027ac:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80027ae:	2324      	movs	r3, #36	; 0x24
 80027b0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80027b4:	68d3      	ldr	r3, [r2, #12]
 80027b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027ba:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80027bc:	4620      	mov	r0, r4
 80027be:	f7ff fea7 	bl	8002510 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027c2:	6823      	ldr	r3, [r4, #0]
 80027c4:	691a      	ldr	r2, [r3, #16]
 80027c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027ca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027cc:	695a      	ldr	r2, [r3, #20]
 80027ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027d2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027da:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027dc:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80027de:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027e0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80027e2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80027e6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80027ea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80027ec:	2001      	movs	r0, #1
}
 80027ee:	bd10      	pop	{r4, pc}

080027f0 <HAL_UART_Transmit>:
{
 80027f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027f4:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 80027f6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80027fa:	2b20      	cmp	r3, #32
{
 80027fc:	4604      	mov	r4, r0
 80027fe:	460d      	mov	r5, r1
 8002800:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 8002802:	d14f      	bne.n	80028a4 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 8002804:	2900      	cmp	r1, #0
 8002806:	d04a      	beq.n	800289e <HAL_UART_Transmit+0xae>
 8002808:	2a00      	cmp	r2, #0
 800280a:	d048      	beq.n	800289e <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 800280c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002810:	2b01      	cmp	r3, #1
 8002812:	d047      	beq.n	80028a4 <HAL_UART_Transmit+0xb4>
 8002814:	2301      	movs	r3, #1
 8002816:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800281a:	2300      	movs	r3, #0
 800281c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800281e:	2321      	movs	r3, #33	; 0x21
 8002820:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002824:	f7fe fbca 	bl	8000fbc <HAL_GetTick>
    huart->TxXferSize = Size;
 8002828:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 800282c:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800282e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8002832:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002834:	b29b      	uxth	r3, r3
 8002836:	b96b      	cbnz	r3, 8002854 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002838:	463b      	mov	r3, r7
 800283a:	4632      	mov	r2, r6
 800283c:	2140      	movs	r1, #64	; 0x40
 800283e:	4620      	mov	r0, r4
 8002840:	f7ff ff80 	bl	8002744 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002844:	b9b0      	cbnz	r0, 8002874 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 8002846:	2320      	movs	r3, #32
 8002848:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 800284c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8002850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8002854:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002856:	3b01      	subs	r3, #1
 8002858:	b29b      	uxth	r3, r3
 800285a:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800285c:	68a3      	ldr	r3, [r4, #8]
 800285e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002862:	4632      	mov	r2, r6
 8002864:	463b      	mov	r3, r7
 8002866:	f04f 0180 	mov.w	r1, #128	; 0x80
 800286a:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800286c:	d10e      	bne.n	800288c <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800286e:	f7ff ff69 	bl	8002744 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002872:	b110      	cbz	r0, 800287a <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8002874:	2003      	movs	r0, #3
 8002876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800287a:	882b      	ldrh	r3, [r5, #0]
 800287c:	6822      	ldr	r2, [r4, #0]
 800287e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002882:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002884:	6923      	ldr	r3, [r4, #16]
 8002886:	b943      	cbnz	r3, 800289a <HAL_UART_Transmit+0xaa>
          pData +=2U;
 8002888:	3502      	adds	r5, #2
 800288a:	e7d2      	b.n	8002832 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800288c:	f7ff ff5a 	bl	8002744 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002890:	2800      	cmp	r0, #0
 8002892:	d1ef      	bne.n	8002874 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002894:	6823      	ldr	r3, [r4, #0]
 8002896:	782a      	ldrb	r2, [r5, #0]
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	3501      	adds	r5, #1
 800289c:	e7c9      	b.n	8002832 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800289e:	2001      	movs	r0, #1
 80028a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80028a4:	2002      	movs	r0, #2
}
 80028a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080028ac <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80028ac:	b082      	sub	sp, #8

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80028ae:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <MX_GPIO_Init+0x34>)
 80028b0:	2100      	movs	r1, #0
 80028b2:	9100      	str	r1, [sp, #0]
 80028b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028b6:	f042 0210 	orr.w	r2, r2, #16
 80028ba:	631a      	str	r2, [r3, #48]	; 0x30
 80028bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028be:	f002 0210 	and.w	r2, r2, #16
 80028c2:	9200      	str	r2, [sp, #0]
 80028c4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028c6:	9101      	str	r1, [sp, #4]
 80028c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028ca:	f042 0202 	orr.w	r2, r2, #2
 80028ce:	631a      	str	r2, [r3, #48]	; 0x30
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	9301      	str	r3, [sp, #4]
 80028d8:	9b01      	ldr	r3, [sp, #4]

}
 80028da:	b002      	add	sp, #8
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	40023800 	.word	0x40023800

080028e4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80028e4:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 80028e6:	480d      	ldr	r0, [pc, #52]	; (800291c <MX_I2C1_Init+0x38>)
  hi2c1.Init.ClockSpeed = 400000;
 80028e8:	4b0d      	ldr	r3, [pc, #52]	; (8002920 <MX_I2C1_Init+0x3c>)
 80028ea:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8002928 <MX_I2C1_Init+0x44>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 400000;
 80028f2:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80028f6:	2300      	movs	r3, #0
 80028f8:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80028fa:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028fc:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028fe:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002900:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002902:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002904:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002906:	f7fe fdb9 	bl	800147c <HAL_I2C_Init>
 800290a:	b128      	cbz	r0, 8002918 <MX_I2C1_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 800290c:	2142      	movs	r1, #66	; 0x42
 800290e:	4805      	ldr	r0, [pc, #20]	; (8002924 <MX_I2C1_Init+0x40>)
  }

}
 8002910:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8002914:	f000 bafa 	b.w	8002f0c <_Error_Handler>
 8002918:	bd08      	pop	{r3, pc}
 800291a:	bf00      	nop
 800291c:	200006d0 	.word	0x200006d0
 8002920:	40005400 	.word	0x40005400
 8002924:	080065f8 	.word	0x080065f8
 8002928:	00061a80 	.word	0x00061a80

0800292c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800292c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 800292e:	6802      	ldr	r2, [r0, #0]
 8002930:	4b10      	ldr	r3, [pc, #64]	; (8002974 <HAL_I2C_MspInit+0x48>)
 8002932:	429a      	cmp	r2, r3
 8002934:	d11a      	bne.n	800296c <HAL_I2C_MspInit+0x40>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002936:	23c0      	movs	r3, #192	; 0xc0
 8002938:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800293a:	2312      	movs	r3, #18
 800293c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800293e:	2301      	movs	r3, #1
 8002940:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002942:	2303      	movs	r3, #3
 8002944:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002946:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002948:	eb0d 0103 	add.w	r1, sp, r3
 800294c:	480a      	ldr	r0, [pc, #40]	; (8002978 <HAL_I2C_MspInit+0x4c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800294e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002950:	f7fe fbb8 	bl	80010c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002954:	2300      	movs	r3, #0
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	4b08      	ldr	r3, [pc, #32]	; (800297c <HAL_I2C_MspInit+0x50>)
 800295a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800295c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002960:	641a      	str	r2, [r3, #64]	; 0x40
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800296c:	b007      	add	sp, #28
 800296e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002972:	bf00      	nop
 8002974:	40005400 	.word	0x40005400
 8002978:	40020400 	.word	0x40020400
 800297c:	40023800 	.word	0x40023800

08002980 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8002980:	b510      	push	{r4, lr}
 8002982:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002984:	2300      	movs	r3, #0
 8002986:	4a21      	ldr	r2, [pc, #132]	; (8002a0c <SystemClock_Config+0x8c>)
 8002988:	9301      	str	r3, [sp, #4]
 800298a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800298c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002990:	6411      	str	r1, [r2, #64]	; 0x40
 8002992:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002994:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002998:	9201      	str	r2, [sp, #4]
 800299a:	9a01      	ldr	r2, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800299c:	4a1c      	ldr	r2, [pc, #112]	; (8002a10 <SystemClock_Config+0x90>)
 800299e:	9302      	str	r3, [sp, #8]
 80029a0:	6811      	ldr	r1, [r2, #0]
 80029a2:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80029a6:	6011      	str	r1, [r2, #0]
 80029a8:	6812      	ldr	r2, [r2, #0]
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80029aa:	930e      	str	r3, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029ac:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80029b0:	9202      	str	r2, [sp, #8]
 80029b2:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029b4:	2202      	movs	r2, #2
 80029b6:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029b8:	2201      	movs	r2, #1
 80029ba:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029bc:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80029be:	2210      	movs	r2, #16
 80029c0:	920c      	str	r2, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029c2:	f7ff f815 	bl	80019f0 <HAL_RCC_OscConfig>
 80029c6:	4601      	mov	r1, r0
 80029c8:	b100      	cbz	r0, 80029cc <SystemClock_Config+0x4c>
 80029ca:	e7fe      	b.n	80029ca <SystemClock_Config+0x4a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029cc:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80029ce:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029d0:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029d2:	9006      	str	r0, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029d4:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80029d6:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029d8:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80029da:	f7ff f9d7 	bl	8001d8c <HAL_RCC_ClockConfig>
 80029de:	4604      	mov	r4, r0
 80029e0:	b100      	cbz	r0, 80029e4 <SystemClock_Config+0x64>
 80029e2:	e7fe      	b.n	80029e2 <SystemClock_Config+0x62>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80029e4:	f7ff fa88 	bl	8001ef8 <HAL_RCC_GetHCLKFreq>
 80029e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80029f0:	f7fe fb40 	bl	8001074 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80029f4:	2004      	movs	r0, #4
 80029f6:	f7fe fb53 	bl	80010a0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80029fa:	4622      	mov	r2, r4
 80029fc:	4621      	mov	r1, r4
 80029fe:	f04f 30ff 	mov.w	r0, #4294967295
 8002a02:	f7fe fb03 	bl	800100c <HAL_NVIC_SetPriority>
}
 8002a06:	b014      	add	sp, #80	; 0x50
 8002a08:	bd10      	pop	{r4, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	40007000 	.word	0x40007000
 8002a14:	00000000 	.word	0x00000000

08002a18 <main>:
{
 8002a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a1c:	ed2d 8b0a 	vpush	{d8-d12}
 8002a20:	b0a7      	sub	sp, #156	; 0x9c
  HAL_Init();
 8002a22:	f7fe faa9 	bl	8000f78 <HAL_Init>
 HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)MPU6050_AD,DatoEnviado,2,100);
 8002a26:	2564      	movs	r5, #100	; 0x64
  SystemClock_Config();
 8002a28:	f7ff ffaa 	bl	8002980 <SystemClock_Config>
  MX_GPIO_Init();
 8002a2c:	f7ff ff3e 	bl	80028ac <MX_GPIO_Init>
  MX_I2C1_Init();
 8002a30:	f7ff ff58 	bl	80028e4 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8002a34:	f000 fb7e 	bl	8003134 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8002a38:	f000 fb00 	bl	800303c <MX_TIM1_Init>
 DatoEnviado[0]=0x6B;//direccion del power managente
 8002a3c:	236b      	movs	r3, #107	; 0x6b
 8002a3e:	f88d 3020 	strb.w	r3, [sp, #32]
 DatoEnviado[1]=0x00;
 8002a42:	2400      	movs	r4, #0
 HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)MPU6050_AD,DatoEnviado,2,100);
 8002a44:	2302      	movs	r3, #2
 8002a46:	aa08      	add	r2, sp, #32
 8002a48:	21d0      	movs	r1, #208	; 0xd0
 8002a4a:	9500      	str	r5, [sp, #0]
 8002a4c:	48ec      	ldr	r0, [pc, #944]	; (8002e00 <main+0x3e8>)
 DatoEnviado[1]=0x00;
 8002a4e:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)MPU6050_AD,DatoEnviado,2,100);
 8002a52:	f7fe fd81 	bl	8001558 <HAL_I2C_Master_Transmit>
 DatoEnviado[0]=0x19;//dsample rate diviter
 8002a56:	2319      	movs	r3, #25
 8002a58:	f88d 3020 	strb.w	r3, [sp, #32]
 DatoEnviado[1]=0x07; //frecuancia a 1khz
 8002a5c:	2307      	movs	r3, #7
 HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)MPU6050_AD,DatoEnviado,2,100);
 8002a5e:	aa08      	add	r2, sp, #32
 DatoEnviado[1]=0x07; //frecuancia a 1khz
 8002a60:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)MPU6050_AD,DatoEnviado,2,100);
 8002a64:	21d0      	movs	r1, #208	; 0xd0
 8002a66:	2302      	movs	r3, #2
 8002a68:	9500      	str	r5, [sp, #0]
 8002a6a:	48e5      	ldr	r0, [pc, #916]	; (8002e00 <main+0x3e8>)
 float angulos[3]={0,0,0};
 8002a6c:	ed9f 8ae5 	vldr	s16, [pc, #916]	; 8002e04 <main+0x3ec>
 HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)MPU6050_AD,DatoEnviado,2,100);
 8002a70:	f7fe fd72 	bl	8001558 <HAL_I2C_Master_Transmit>
 HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8002a74:	4621      	mov	r1, r4
 8002a76:	48e4      	ldr	r0, [pc, #912]	; (8002e08 <main+0x3f0>)
 8002a78:	f7ff fce8 	bl	800244c <HAL_TIM_PWM_Start>
 HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8002a7c:	2104      	movs	r1, #4
 8002a7e:	48e2      	ldr	r0, [pc, #904]	; (8002e08 <main+0x3f0>)
 8002a80:	f7ff fce4 	bl	800244c <HAL_TIM_PWM_Start>
 HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8002a84:	2108      	movs	r1, #8
 8002a86:	48e0      	ldr	r0, [pc, #896]	; (8002e08 <main+0x3f0>)
 8002a88:	f7ff fce0 	bl	800244c <HAL_TIM_PWM_Start>
	  Ang[0]= 0.9*(Ang[0]+GX*0.01) + 0.1*AcANG[0];
 8002a8c:	f20f 3b50 	addw	fp, pc, #848	; 0x350
 8002a90:	e9db ab00 	ldrd	sl, fp, [fp]
 float  Ang[3]={0,0,0};
 8002a94:	eeb0 9a48 	vmov.f32	s18, s16
 8002a98:	eef0 9a48 	vmov.f32	s19, s16
 8002a9c:	eef0 8a48 	vmov.f32	s17, s16
	  DatoEnviado[0]=0x3B;//DIRECCION D
 8002aa0:	233b      	movs	r3, #59	; 0x3b
	  HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)MPU6050_AD,&DatoEnviado[0],1,100);
 8002aa2:	2464      	movs	r4, #100	; 0x64
	  DatoEnviado[0]=0x3B;//DIRECCION D
 8002aa4:	f88d 3020 	strb.w	r3, [sp, #32]
	  DatoEnviado[1]=0x00; //YA NO TENGO QUE ENVIAR EL SEGUNNDO DATO
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
	  HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)MPU6050_AD,&DatoEnviado[0],1,100);
 8002aae:	9400      	str	r4, [sp, #0]
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	aa08      	add	r2, sp, #32
 8002ab4:	21d0      	movs	r1, #208	; 0xd0
 8002ab6:	48d2      	ldr	r0, [pc, #840]	; (8002e00 <main+0x3e8>)
	  AX=(float)(((int16_t)(DatoRecibido[0]<<8|DatoRecibido[1]))/(float)1638);
 8002ab8:	ed9f bad4 	vldr	s22, [pc, #848]	; 8002e0c <main+0x3f4>
	  HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)MPU6050_AD,&DatoEnviado[0],1,100);
 8002abc:	f7fe fd4c 	bl	8001558 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c1,(uint16_t)MPU6050_AD,DatoRecibido,14,100);
 8002ac0:	9400      	str	r4, [sp, #0]
 8002ac2:	230e      	movs	r3, #14
 8002ac4:	aa09      	add	r2, sp, #36	; 0x24
 8002ac6:	21d0      	movs	r1, #208	; 0xd0
 8002ac8:	48cd      	ldr	r0, [pc, #820]	; (8002e00 <main+0x3e8>)
 8002aca:	f7fe fe1b 	bl	8001704 <HAL_I2C_Master_Receive>
	  T=(float)(((int16_t)(DatoRecibido[6]<<8|DatoRecibido[7]))/(float)340+(float)36.53);
 8002ace:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
 8002ad2:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8002ad6:	ed9f 7ace 	vldr	s14, [pc, #824]	; 8002e10 <main+0x3f8>
 8002ada:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002ade:	b21b      	sxth	r3, r3
 8002ae0:	ee07 3a90 	vmov	s15, r3
 8002ae4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	  GX=(float)(((int16_t)(DatoRecibido[8]<<8|DatoRecibido[9]))/(float)131);
 8002ae8:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8002aec:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
	  T=(float)(((int16_t)(DatoRecibido[6]<<8|DatoRecibido[7]))/(float)340+(float)36.53);
 8002af0:	ee87 aa87 	vdiv.f32	s20, s15, s14
	  GX=(float)(((int16_t)(DatoRecibido[8]<<8|DatoRecibido[9]))/(float)131);
 8002af4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002af8:	b21b      	sxth	r3, r3
	  GY=(float)(((int16_t)(DatoRecibido[10]<<8|DatoRecibido[11]))/(float)131);
 8002afa:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
	  T=(float)(((int16_t)(DatoRecibido[6]<<8|DatoRecibido[7]))/(float)340+(float)36.53);
 8002afe:	eddf 7ac5 	vldr	s15, [pc, #788]	; 8002e14 <main+0x3fc>
	  GX=(float)(((int16_t)(DatoRecibido[8]<<8|DatoRecibido[9]))/(float)131);
 8002b02:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 8002e18 <main+0x400>
	  T=(float)(((int16_t)(DatoRecibido[6]<<8|DatoRecibido[7]))/(float)340+(float)36.53);
 8002b06:	ee3a aa27 	vadd.f32	s20, s20, s15
	  GX=(float)(((int16_t)(DatoRecibido[8]<<8|DatoRecibido[9]))/(float)131);
 8002b0a:	ee07 3a90 	vmov	s15, r3
	  GY=(float)(((int16_t)(DatoRecibido[10]<<8|DatoRecibido[11]))/(float)131);
 8002b0e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
	  GX=(float)(((int16_t)(DatoRecibido[8]<<8|DatoRecibido[9]))/(float)131);
 8002b12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	  GY=(float)(((int16_t)(DatoRecibido[10]<<8|DatoRecibido[11]))/(float)131);
 8002b16:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002b1a:	b21b      	sxth	r3, r3
	  GX=(float)(((int16_t)(DatoRecibido[8]<<8|DatoRecibido[9]))/(float)131);
 8002b1c:	eec7 ca87 	vdiv.f32	s25, s15, s14
	  GZ=(float)(((int16_t)(DatoRecibido[12]<<8|DatoRecibido[13]))/(float)131);
 8002b20:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	  GY=(float)(((int16_t)(DatoRecibido[10]<<8|DatoRecibido[11]))/(float)131);
 8002b24:	ee07 3a90 	vmov	s15, r3
	  GZ=(float)(((int16_t)(DatoRecibido[12]<<8|DatoRecibido[13]))/(float)131);
 8002b28:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	  GY=(float)(((int16_t)(DatoRecibido[10]<<8|DatoRecibido[11]))/(float)131);
 8002b2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	  GZ=(float)(((int16_t)(DatoRecibido[12]<<8|DatoRecibido[13]))/(float)131);
 8002b30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002b34:	b21b      	sxth	r3, r3
	  AX=(float)(((int16_t)(DatoRecibido[0]<<8|DatoRecibido[1]))/(float)1638);
 8002b36:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
	  GY=(float)(((int16_t)(DatoRecibido[10]<<8|DatoRecibido[11]))/(float)131);
 8002b3a:	ee87 ca87 	vdiv.f32	s24, s15, s14
	  GZ=(float)(((int16_t)(DatoRecibido[12]<<8|DatoRecibido[13]))/(float)131);
 8002b3e:	ee07 3a90 	vmov	s15, r3
	  AX=(float)(((int16_t)(DatoRecibido[0]<<8|DatoRecibido[1]))/(float)1638);
 8002b42:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
	  GZ=(float)(((int16_t)(DatoRecibido[12]<<8|DatoRecibido[13]))/(float)131);
 8002b46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	  AX=(float)(((int16_t)(DatoRecibido[0]<<8|DatoRecibido[1]))/(float)1638);
 8002b4a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002b4e:	b21b      	sxth	r3, r3
	  GZ=(float)(((int16_t)(DatoRecibido[12]<<8|DatoRecibido[13]))/(float)131);
 8002b50:	eec7 aa87 	vdiv.f32	s21, s15, s14
	  AX=(float)(((int16_t)(DatoRecibido[0]<<8|DatoRecibido[1]))/(float)1638);
 8002b54:	ee07 3a90 	vmov	s15, r3
 8002b58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	  AcANG[0]=atan(AX/sqrt(pow(AY,2) + pow(AZ,2)))*RAD;
 8002b5c:	ee87 7a8b 	vdiv.f32	s14, s15, s22
 8002b60:	ee17 0a10 	vmov	r0, s14
 8002b64:	f7fd fcf0 	bl	8000548 <__aeabi_f2d>
	  AY=(float)(((int16_t)(DatoRecibido[2]<<8|DatoRecibido[3]))/(float)1638);
 8002b68:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8002b6c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8002b70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002b74:	b21b      	sxth	r3, r3
 8002b76:	ee07 3a90 	vmov	s15, r3
 8002b7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	  AcANG[0]=atan(AX/sqrt(pow(AY,2) + pow(AZ,2)))*RAD;
 8002b7e:	4680      	mov	r8, r0
 8002b80:	ee87 7a8b 	vdiv.f32	s14, s15, s22
 8002b84:	4689      	mov	r9, r1
 8002b86:	ee17 0a10 	vmov	r0, s14
 8002b8a:	f7fd fcdd 	bl	8000548 <__aeabi_f2d>
	  AZ=(float)(((int16_t)(DatoRecibido[4]<<8|DatoRecibido[5]))/(float)1638);
 8002b8e:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 8002b92:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 8002b96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002b9a:	b21b      	sxth	r3, r3
 8002b9c:	ee07 3a90 	vmov	s15, r3
 8002ba0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	  AcANG[0]=atan(AX/sqrt(pow(AY,2) + pow(AZ,2)))*RAD;
 8002ba4:	4604      	mov	r4, r0
 8002ba6:	ee87 7a8b 	vdiv.f32	s14, s15, s22
 8002baa:	460d      	mov	r5, r1
 8002bac:	ee17 0a10 	vmov	r0, s14
 8002bb0:	f7fd fcca 	bl	8000548 <__aeabi_f2d>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	f7fd fd1a 	bl	80005f0 <__aeabi_dmul>
 8002bbc:	4622      	mov	r2, r4
 8002bbe:	4606      	mov	r6, r0
 8002bc0:	460f      	mov	r7, r1
 8002bc2:	462b      	mov	r3, r5
 8002bc4:	4620      	mov	r0, r4
 8002bc6:	4629      	mov	r1, r5
 8002bc8:	f7fd fd12 	bl	80005f0 <__aeabi_dmul>
 8002bcc:	4632      	mov	r2, r6
 8002bce:	463b      	mov	r3, r7
 8002bd0:	f7fd fb5c 	bl	800028c <__adddf3>
 8002bd4:	ec41 0b10 	vmov	d0, r0, r1
 8002bd8:	f003 fbe2 	bl	80063a0 <sqrt>
 8002bdc:	4640      	mov	r0, r8
 8002bde:	ec53 2b10 	vmov	r2, r3, d0
 8002be2:	4649      	mov	r1, r9
 8002be4:	f7fd fe2e 	bl	8000844 <__aeabi_ddiv>
 8002be8:	ec41 0b10 	vmov	d0, r0, r1
 8002bec:	f003 fa28 	bl	8006040 <atan>
	  AcANG[1]=atan(AY/sqrt(pow(AX,2) + pow(AZ,2)))*RAD;
 8002bf0:	4642      	mov	r2, r8
 8002bf2:	464b      	mov	r3, r9
 8002bf4:	4640      	mov	r0, r8
 8002bf6:	4649      	mov	r1, r9
	  AcANG[0]=atan(AX/sqrt(pow(AY,2) + pow(AZ,2)))*RAD;
 8002bf8:	eeb0 ba40 	vmov.f32	s22, s0
 8002bfc:	eef0 ba60 	vmov.f32	s23, s1
	  AcANG[1]=atan(AY/sqrt(pow(AX,2) + pow(AZ,2)))*RAD;
 8002c00:	f7fd fcf6 	bl	80005f0 <__aeabi_dmul>
 8002c04:	4632      	mov	r2, r6
 8002c06:	463b      	mov	r3, r7
 8002c08:	f7fd fb40 	bl	800028c <__adddf3>
 8002c0c:	ec41 0b10 	vmov	d0, r0, r1
 8002c10:	f003 fbc6 	bl	80063a0 <sqrt>
 8002c14:	4620      	mov	r0, r4
 8002c16:	ec53 2b10 	vmov	r2, r3, d0
 8002c1a:	4629      	mov	r1, r5
 8002c1c:	f7fd fe12 	bl	8000844 <__aeabi_ddiv>
 8002c20:	ec41 0b10 	vmov	d0, r0, r1
 8002c24:	f003 fa0c 	bl	8006040 <atan>
	  Ang[0]= 0.9*(Ang[0]+GX*0.01) + 0.1*AcANG[0];
 8002c28:	ee1c 0a90 	vmov	r0, s25
	  AcANG[1]=atan(AY/sqrt(pow(AX,2) + pow(AZ,2)))*RAD;
 8002c2c:	ed8d 0b06 	vstr	d0, [sp, #24]
	  Ang[0]= 0.9*(Ang[0]+GX*0.01) + 0.1*AcANG[0];
 8002c30:	f7fd fc8a 	bl	8000548 <__aeabi_f2d>
 8002c34:	4652      	mov	r2, sl
 8002c36:	465b      	mov	r3, fp
 8002c38:	f7fd fcda 	bl	80005f0 <__aeabi_dmul>
 8002c3c:	4604      	mov	r4, r0
 8002c3e:	ee18 0a90 	vmov	r0, s17
 8002c42:	460d      	mov	r5, r1
 8002c44:	f7fd fc80 	bl	8000548 <__aeabi_f2d>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4620      	mov	r0, r4
 8002c4e:	4629      	mov	r1, r5
 8002c50:	f7fd fb1c 	bl	800028c <__adddf3>
 8002c54:	a364      	add	r3, pc, #400	; (adr r3, 8002de8 <main+0x3d0>)
 8002c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5a:	f7fd fcc9 	bl	80005f0 <__aeabi_dmul>
	  AcANG[0]=atan(AX/sqrt(pow(AY,2) + pow(AZ,2)))*RAD;
 8002c5e:	2200      	movs	r2, #0
	  Ang[0]= 0.9*(Ang[0]+GX*0.01) + 0.1*AcANG[0];
 8002c60:	4604      	mov	r4, r0
 8002c62:	460d      	mov	r5, r1
	  AcANG[0]=atan(AX/sqrt(pow(AY,2) + pow(AZ,2)))*RAD;
 8002c64:	4b6d      	ldr	r3, [pc, #436]	; (8002e1c <main+0x404>)
 8002c66:	ec51 0b1b 	vmov	r0, r1, d11
 8002c6a:	f7fd fcc1 	bl	80005f0 <__aeabi_dmul>
 8002c6e:	a360      	add	r3, pc, #384	; (adr r3, 8002df0 <main+0x3d8>)
 8002c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c74:	f7fd fde6 	bl	8000844 <__aeabi_ddiv>
 8002c78:	f7fd ff92 	bl	8000ba0 <__aeabi_d2f>
	  Ang[0]= 0.9*(Ang[0]+GX*0.01) + 0.1*AcANG[0];
 8002c7c:	f7fd fc64 	bl	8000548 <__aeabi_f2d>
 8002c80:	a35d      	add	r3, pc, #372	; (adr r3, 8002df8 <main+0x3e0>)
 8002c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c86:	f7fd fcb3 	bl	80005f0 <__aeabi_dmul>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	4620      	mov	r0, r4
 8002c90:	4629      	mov	r1, r5
 8002c92:	f7fd fafb 	bl	800028c <__adddf3>
 8002c96:	f7fd ff83 	bl	8000ba0 <__aeabi_d2f>
 8002c9a:	ee08 0a90 	vmov	s17, r0
	  Ang[1]= 0.9*(Ang[1]+GY*0.01) + 0.1*AcANG[1];
 8002c9e:	ee1c 0a10 	vmov	r0, s24
 8002ca2:	f7fd fc51 	bl	8000548 <__aeabi_f2d>
 8002ca6:	4652      	mov	r2, sl
 8002ca8:	465b      	mov	r3, fp
 8002caa:	f7fd fca1 	bl	80005f0 <__aeabi_dmul>
 8002cae:	4604      	mov	r4, r0
 8002cb0:	ee19 0a90 	vmov	r0, s19
 8002cb4:	460d      	mov	r5, r1
 8002cb6:	f7fd fc47 	bl	8000548 <__aeabi_f2d>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	4620      	mov	r0, r4
 8002cc0:	4629      	mov	r1, r5
 8002cc2:	f7fd fae3 	bl	800028c <__adddf3>
 8002cc6:	a348      	add	r3, pc, #288	; (adr r3, 8002de8 <main+0x3d0>)
 8002cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ccc:	f7fd fc90 	bl	80005f0 <__aeabi_dmul>
	  AcANG[1]=atan(AY/sqrt(pow(AX,2) + pow(AZ,2)))*RAD;
 8002cd0:	ed9d 0b06 	vldr	d0, [sp, #24]
	  Ang[1]= 0.9*(Ang[1]+GY*0.01) + 0.1*AcANG[1];
 8002cd4:	4604      	mov	r4, r0
 8002cd6:	460d      	mov	r5, r1
	  AcANG[1]=atan(AY/sqrt(pow(AX,2) + pow(AZ,2)))*RAD;
 8002cd8:	2200      	movs	r2, #0
 8002cda:	ec51 0b10 	vmov	r0, r1, d0
 8002cde:	4b4f      	ldr	r3, [pc, #316]	; (8002e1c <main+0x404>)
 8002ce0:	f7fd fc86 	bl	80005f0 <__aeabi_dmul>
 8002ce4:	a342      	add	r3, pc, #264	; (adr r3, 8002df0 <main+0x3d8>)
 8002ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cea:	f7fd fdab 	bl	8000844 <__aeabi_ddiv>
 8002cee:	f7fd ff57 	bl	8000ba0 <__aeabi_d2f>
	  Ang[1]= 0.9*(Ang[1]+GY*0.01) + 0.1*AcANG[1];
 8002cf2:	f7fd fc29 	bl	8000548 <__aeabi_f2d>
 8002cf6:	a340      	add	r3, pc, #256	; (adr r3, 8002df8 <main+0x3e0>)
 8002cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfc:	f7fd fc78 	bl	80005f0 <__aeabi_dmul>
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	4620      	mov	r0, r4
 8002d06:	4629      	mov	r1, r5
 8002d08:	f7fd fac0 	bl	800028c <__adddf3>
 8002d0c:	f7fd ff48 	bl	8000ba0 <__aeabi_d2f>
 8002d10:	ee09 0a90 	vmov	s19, r0
	  Ang[2]= Ang[2]+GZ*0.01;
 8002d14:	ee1a 0a90 	vmov	r0, s21
 8002d18:	f7fd fc16 	bl	8000548 <__aeabi_f2d>
 8002d1c:	4652      	mov	r2, sl
 8002d1e:	465b      	mov	r3, fp
 8002d20:	f7fd fc66 	bl	80005f0 <__aeabi_dmul>
 8002d24:	4604      	mov	r4, r0
 8002d26:	ee19 0a10 	vmov	r0, s18
 8002d2a:	460d      	mov	r5, r1
 8002d2c:	f7fd fc0c 	bl	8000548 <__aeabi_f2d>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	4620      	mov	r0, r4
 8002d36:	4629      	mov	r1, r5
 8002d38:	f7fd faa8 	bl	800028c <__adddf3>
 8002d3c:	f7fd ff30 	bl	8000ba0 <__aeabi_d2f>
	  if(Ang[0]>=0&&Ang[0]<90){
 8002d40:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8002d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	  Ang[2]= Ang[2]+GZ*0.01;
 8002d48:	ee09 0a10 	vmov	s18, r0
	  if(Ang[0]>=0&&Ang[0]<90){
 8002d4c:	f2c0 8099 	blt.w	8002e82 <main+0x46a>
 8002d50:	eddf 7a33 	vldr	s15, [pc, #204]	; 8002e20 <main+0x408>
 8002d54:	eef4 8ae7 	vcmpe.f32	s17, s15
 8002d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d5c:	f140 8091 	bpl.w	8002e82 <main+0x46a>
		  angulos[0]=Ang[0]+45+90;
 8002d60:	ed9f 8a30 	vldr	s16, [pc, #192]	; 8002e24 <main+0x40c>
 8002d64:	ee38 8a88 	vadd.f32	s16, s17, s16
 8002d68:	ee38 8a27 	vadd.f32	s16, s16, s15
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,angulos[0]);
 8002d6c:	4b26      	ldr	r3, [pc, #152]	; (8002e08 <main+0x3f0>)
 8002d6e:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	  if(Ang[1]>=0&&Ang[1]<90){
 8002d78:	eef5 9ac0 	vcmpe.f32	s19, #0.0
 8002d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d80:	f2c0 8092 	blt.w	8002ea8 <main+0x490>
 8002d84:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002e20 <main+0x408>
 8002d88:	eef4 9ac7 	vcmpe.f32	s19, s14
 8002d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d90:	f140 808a 	bpl.w	8002ea8 <main+0x490>
			  angulos[1]=Ang[1]+45+90;
 8002d94:	eddf 7a23 	vldr	s15, [pc, #140]	; 8002e24 <main+0x40c>
			 __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,angulos[1]);
 8002d98:	4b1b      	ldr	r3, [pc, #108]	; (8002e08 <main+0x3f0>)
			  angulos[1]=Ang[1]+45+90;
 8002d9a:	ee79 7aa7 	vadd.f32	s15, s19, s15
			 __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,angulos[1]);
 8002d9e:	681b      	ldr	r3, [r3, #0]
			  angulos[1]=Ang[1]+45+90;
 8002da0:	ee77 7a87 	vadd.f32	s15, s15, s14
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,angulos[1]);
 8002da4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002da8:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	  if(Ang[2]>=0&&Ang[2]<90){
 8002dac:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8002db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db4:	f2c0 808d 	blt.w	8002ed2 <main+0x4ba>
 8002db8:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002e20 <main+0x408>
 8002dbc:	eeb4 9ac7 	vcmpe.f32	s18, s14
 8002dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc4:	f140 8085 	bpl.w	8002ed2 <main+0x4ba>
			  angulos[2]=Ang[2]+45+90;
 8002dc8:	eddf 7a16 	vldr	s15, [pc, #88]	; 8002e24 <main+0x40c>
			 __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,angulos[2]);
 8002dcc:	4b0e      	ldr	r3, [pc, #56]	; (8002e08 <main+0x3f0>)
			  angulos[2]=Ang[2]+45+90;
 8002dce:	ee79 7a27 	vadd.f32	s15, s18, s15
			 __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,angulos[2]);
 8002dd2:	681b      	ldr	r3, [r3, #0]
			  angulos[2]=Ang[2]+45+90;
 8002dd4:	ee77 7a87 	vadd.f32	s15, s15, s14
			 __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,angulos[2]);
 8002dd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ddc:	e024      	b.n	8002e28 <main+0x410>
 8002dde:	bf00      	nop
 8002de0:	47ae147b 	.word	0x47ae147b
 8002de4:	3f847ae1 	.word	0x3f847ae1
 8002de8:	cccccccd 	.word	0xcccccccd
 8002dec:	3feccccc 	.word	0x3feccccc
 8002df0:	51eb851f 	.word	0x51eb851f
 8002df4:	40091eb8 	.word	0x40091eb8
 8002df8:	9999999a 	.word	0x9999999a
 8002dfc:	3fb99999 	.word	0x3fb99999
 8002e00:	200006d0 	.word	0x200006d0
 8002e04:	00000000 	.word	0x00000000
 8002e08:	20000724 	.word	0x20000724
 8002e0c:	44ccc000 	.word	0x44ccc000
 8002e10:	43aa0000 	.word	0x43aa0000
 8002e14:	42121eb8 	.word	0x42121eb8
 8002e18:	43030000 	.word	0x43030000
 8002e1c:	40668000 	.word	0x40668000
 8002e20:	42b40000 	.word	0x42b40000
 8002e24:	42340000 	.word	0x42340000
 8002e28:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	  sprintf(bufer, "Temp=%.2f\n\r,Angulo_X=%.2f\n\r,Angulo_Y=%.2f\n\r,Angulo_Z=%.2f\n\r\n",T,Ang[0],Ang[1],Ang[2]);
 8002e2c:	ee1a 0a10 	vmov	r0, s20
 8002e30:	f7fd fb8a 	bl	8000548 <__aeabi_f2d>
 8002e34:	4604      	mov	r4, r0
 8002e36:	ee19 0a10 	vmov	r0, s18
 8002e3a:	460d      	mov	r5, r1
 8002e3c:	f7fd fb84 	bl	8000548 <__aeabi_f2d>
 8002e40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002e44:	ee19 0a90 	vmov	r0, s19
 8002e48:	f7fd fb7e 	bl	8000548 <__aeabi_f2d>
 8002e4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002e50:	ee18 0a90 	vmov	r0, s17
 8002e54:	f7fd fb78 	bl	8000548 <__aeabi_f2d>
 8002e58:	4622      	mov	r2, r4
 8002e5a:	e9cd 0100 	strd	r0, r1, [sp]
 8002e5e:	462b      	mov	r3, r5
 8002e60:	4925      	ldr	r1, [pc, #148]	; (8002ef8 <main+0x4e0>)
 8002e62:	a80d      	add	r0, sp, #52	; 0x34
 8002e64:	f000 f9fe 	bl	8003264 <sprintf>
	  HAL_UART_Transmit(&huart3,(uint8_t*)bufer,(uint16_t)strlen(bufer),(uint32_t)100);
 8002e68:	a80d      	add	r0, sp, #52	; 0x34
 8002e6a:	f7fd f9b1 	bl	80001d0 <strlen>
 8002e6e:	2364      	movs	r3, #100	; 0x64
 8002e70:	b282      	uxth	r2, r0
 8002e72:	a90d      	add	r1, sp, #52	; 0x34
 8002e74:	4821      	ldr	r0, [pc, #132]	; (8002efc <main+0x4e4>)
 8002e76:	f7ff fcbb 	bl	80027f0 <HAL_UART_Transmit>
	  HAL_Delay(10);
 8002e7a:	200a      	movs	r0, #10
 8002e7c:	f7fe f8a4 	bl	8000fc8 <HAL_Delay>
	  DatoEnviado[0]=0x3B;//DIRECCION D
 8002e80:	e60e      	b.n	8002aa0 <main+0x88>
	  else if(Ang[0]<0&&Ang[0]>-90){
 8002e82:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8002e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e8a:	f57f af75 	bpl.w	8002d78 <main+0x360>
 8002e8e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8002f00 <main+0x4e8>
 8002e92:	eef4 8ae7 	vcmpe.f32	s17, s15
 8002e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e9a:	f77f af6d 	ble.w	8002d78 <main+0x360>
		  angulos[0]= Ang[0]*(-1)+45;
 8002e9e:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8002f04 <main+0x4ec>
 8002ea2:	ee38 8a68 	vsub.f32	s16, s16, s17
 8002ea6:	e761      	b.n	8002d6c <main+0x354>
		  else if(Ang[1]<0&&Ang[2]>-90){
 8002ea8:	eef5 9ac0 	vcmpe.f32	s19, #0.0
 8002eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb0:	f57f af7c 	bpl.w	8002dac <main+0x394>
 8002eb4:	eddf 7a12 	vldr	s15, [pc, #72]	; 8002f00 <main+0x4e8>
 8002eb8:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8002ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec0:	f77f af74 	ble.w	8002dac <main+0x394>
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,angulos[1]);
 8002ec4:	4b10      	ldr	r3, [pc, #64]	; (8002f08 <main+0x4f0>)
			  angulos[1]= Ang[1]*(-1)+45;
 8002ec6:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8002f04 <main+0x4ec>
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,angulos[1]);
 8002eca:	681b      	ldr	r3, [r3, #0]
			  angulos[1]= Ang[1]*(-1)+45;
 8002ecc:	ee77 7ae9 	vsub.f32	s15, s15, s19
 8002ed0:	e768      	b.n	8002da4 <main+0x38c>
		  else if(Ang[2]<0&&Ang[2]>-90){
 8002ed2:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8002ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eda:	d5a7      	bpl.n	8002e2c <main+0x414>
 8002edc:	eddf 7a08 	vldr	s15, [pc, #32]	; 8002f00 <main+0x4e8>
 8002ee0:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8002ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee8:	dda0      	ble.n	8002e2c <main+0x414>
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,angulos[0]);
 8002eea:	4b07      	ldr	r3, [pc, #28]	; (8002f08 <main+0x4f0>)
 8002eec:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
 8002ef6:	e799      	b.n	8002e2c <main+0x414>
 8002ef8:	08006605 	.word	0x08006605
 8002efc:	20000760 	.word	0x20000760
 8002f00:	c2b40000 	.word	0xc2b40000
 8002f04:	42340000 	.word	0x42340000
 8002f08:	20000724 	.word	0x20000724

08002f0c <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8002f0c:	e7fe      	b.n	8002f0c <_Error_Handler>

08002f0e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f0e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f10:	2003      	movs	r0, #3
 8002f12:	f7fe f869 	bl	8000fe8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002f16:	2200      	movs	r2, #0
 8002f18:	4611      	mov	r1, r2
 8002f1a:	f06f 000b 	mvn.w	r0, #11
 8002f1e:	f7fe f875 	bl	800100c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002f22:	2200      	movs	r2, #0
 8002f24:	4611      	mov	r1, r2
 8002f26:	f06f 000a 	mvn.w	r0, #10
 8002f2a:	f7fe f86f 	bl	800100c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002f2e:	2200      	movs	r2, #0
 8002f30:	4611      	mov	r1, r2
 8002f32:	f06f 0009 	mvn.w	r0, #9
 8002f36:	f7fe f869 	bl	800100c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	4611      	mov	r1, r2
 8002f3e:	f06f 0004 	mvn.w	r0, #4
 8002f42:	f7fe f863 	bl	800100c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002f46:	2200      	movs	r2, #0
 8002f48:	4611      	mov	r1, r2
 8002f4a:	f06f 0003 	mvn.w	r0, #3
 8002f4e:	f7fe f85d 	bl	800100c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002f52:	2200      	movs	r2, #0
 8002f54:	4611      	mov	r1, r2
 8002f56:	f06f 0001 	mvn.w	r0, #1
 8002f5a:	f7fe f857 	bl	800100c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002f5e:	2200      	movs	r2, #0
 8002f60:	4611      	mov	r1, r2
 8002f62:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002f6a:	f7fe b84f 	b.w	800100c <HAL_NVIC_SetPriority>

08002f6e <NMI_Handler>:
 8002f6e:	4770      	bx	lr

08002f70 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002f70:	e7fe      	b.n	8002f70 <HardFault_Handler>

08002f72 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002f72:	e7fe      	b.n	8002f72 <MemManage_Handler>

08002f74 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002f74:	e7fe      	b.n	8002f74 <BusFault_Handler>

08002f76 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002f76:	e7fe      	b.n	8002f76 <UsageFault_Handler>

08002f78 <SVC_Handler>:
 8002f78:	4770      	bx	lr

08002f7a <DebugMon_Handler>:
 8002f7a:	4770      	bx	lr

08002f7c <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002f7c:	4770      	bx	lr

08002f7e <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002f7e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f80:	f7fe f814 	bl	8000fac <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002f88:	f7fe b897 	b.w	80010ba <HAL_SYSTICK_IRQHandler>

08002f8c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f8c:	490f      	ldr	r1, [pc, #60]	; (8002fcc <SystemInit+0x40>)
 8002f8e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002f92:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002f9a:	4b0d      	ldr	r3, [pc, #52]	; (8002fd0 <SystemInit+0x44>)
 8002f9c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002f9e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002fa0:	f042 0201 	orr.w	r2, r2, #1
 8002fa4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002fa6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002fae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002fb2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002fb4:	4a07      	ldr	r2, [pc, #28]	; (8002fd4 <SystemInit+0x48>)
 8002fb6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002fbe:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002fc0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002fc2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002fc6:	608b      	str	r3, [r1, #8]
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	e000ed00 	.word	0xe000ed00
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	24003010 	.word	0x24003010

08002fd8 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 8002fd8:	6802      	ldr	r2, [r0, #0]
 8002fda:	4b09      	ldr	r3, [pc, #36]	; (8003000 <HAL_TIM_Base_MspInit+0x28>)
 8002fdc:	429a      	cmp	r2, r3
{
 8002fde:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM1)
 8002fe0:	d10b      	bne.n	8002ffa <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	9301      	str	r3, [sp, #4]
 8002fe6:	4b07      	ldr	r3, [pc, #28]	; (8003004 <HAL_TIM_Base_MspInit+0x2c>)
 8002fe8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fea:	f042 0201 	orr.w	r2, r2, #1
 8002fee:	645a      	str	r2, [r3, #68]	; 0x44
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	9301      	str	r3, [sp, #4]
 8002ff8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002ffa:	b002      	add	sp, #8
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	40010000 	.word	0x40010000
 8003004:	40023800 	.word	0x40023800

08003008 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003008:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM1)
 800300a:	6802      	ldr	r2, [r0, #0]
 800300c:	4b09      	ldr	r3, [pc, #36]	; (8003034 <HAL_TIM_MspPostInit+0x2c>)
 800300e:	429a      	cmp	r2, r3
 8003010:	d10d      	bne.n	800302e <HAL_TIM_MspPostInit+0x26>
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8003012:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8003016:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003018:	2302      	movs	r3, #2
 800301a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301c:	2300      	movs	r3, #0
 800301e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003020:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003022:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003024:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003026:	4804      	ldr	r0, [pc, #16]	; (8003038 <HAL_TIM_MspPostInit+0x30>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003028:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800302a:	f7fe f84b 	bl	80010c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800302e:	b007      	add	sp, #28
 8003030:	f85d fb04 	ldr.w	pc, [sp], #4
 8003034:	40010000 	.word	0x40010000
 8003038:	40021000 	.word	0x40021000

0800303c <MX_TIM1_Init>:
{
 800303c:	b500      	push	{lr}
  htim1.Instance = TIM1;
 800303e:	483a      	ldr	r0, [pc, #232]	; (8003128 <MX_TIM1_Init+0xec>)
  htim1.Init.Prescaler = 177;
 8003040:	493a      	ldr	r1, [pc, #232]	; (800312c <MX_TIM1_Init+0xf0>)
 8003042:	23b1      	movs	r3, #177	; 0xb1
{
 8003044:	b095      	sub	sp, #84	; 0x54
  htim1.Init.Prescaler = 177;
 8003046:	e880 000a 	stmia.w	r0, {r1, r3}
  htim1.Init.Period = 1800;
 800304a:	f44f 62e1 	mov.w	r2, #1800	; 0x708
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800304e:	2300      	movs	r3, #0
 8003050:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 1800;
 8003052:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003054:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8003056:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003058:	f7ff f926 	bl	80022a8 <HAL_TIM_Base_Init>
 800305c:	b118      	cbz	r0, 8003066 <MX_TIM1_Init+0x2a>
    _Error_Handler(__FILE__, __LINE__);
 800305e:	2141      	movs	r1, #65	; 0x41
 8003060:	4833      	ldr	r0, [pc, #204]	; (8003130 <MX_TIM1_Init+0xf4>)
 8003062:	f7ff ff53 	bl	8002f0c <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003066:	a914      	add	r1, sp, #80	; 0x50
 8003068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800306c:	f841 3d48 	str.w	r3, [r1, #-72]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003070:	482d      	ldr	r0, [pc, #180]	; (8003128 <MX_TIM1_Init+0xec>)
 8003072:	f7fe fffc 	bl	800206e <HAL_TIM_ConfigClockSource>
 8003076:	b118      	cbz	r0, 8003080 <MX_TIM1_Init+0x44>
    _Error_Handler(__FILE__, __LINE__);
 8003078:	2147      	movs	r1, #71	; 0x47
 800307a:	482d      	ldr	r0, [pc, #180]	; (8003130 <MX_TIM1_Init+0xf4>)
 800307c:	f7ff ff46 	bl	8002f0c <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003080:	4829      	ldr	r0, [pc, #164]	; (8003128 <MX_TIM1_Init+0xec>)
 8003082:	f7ff f92b 	bl	80022dc <HAL_TIM_PWM_Init>
 8003086:	b118      	cbz	r0, 8003090 <MX_TIM1_Init+0x54>
    _Error_Handler(__FILE__, __LINE__);
 8003088:	214c      	movs	r1, #76	; 0x4c
 800308a:	4829      	ldr	r0, [pc, #164]	; (8003130 <MX_TIM1_Init+0xf4>)
 800308c:	f7ff ff3e 	bl	8002f0c <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003090:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003092:	4669      	mov	r1, sp
 8003094:	4824      	ldr	r0, [pc, #144]	; (8003128 <MX_TIM1_Init+0xec>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003096:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003098:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800309a:	f7ff f9f1 	bl	8002480 <HAL_TIMEx_MasterConfigSynchronization>
 800309e:	b118      	cbz	r0, 80030a8 <MX_TIM1_Init+0x6c>
    _Error_Handler(__FILE__, __LINE__);
 80030a0:	2153      	movs	r1, #83	; 0x53
 80030a2:	4823      	ldr	r0, [pc, #140]	; (8003130 <MX_TIM1_Init+0xf4>)
 80030a4:	f7ff ff32 	bl	8002f0c <_Error_Handler>
  sConfigOC.Pulse = 0;
 80030a8:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030aa:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030ac:	a906      	add	r1, sp, #24
 80030ae:	481e      	ldr	r0, [pc, #120]	; (8003128 <MX_TIM1_Init+0xec>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030b0:	9306      	str	r3, [sp, #24]
  sConfigOC.Pulse = 0;
 80030b2:	9207      	str	r2, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030b4:	9208      	str	r2, [sp, #32]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80030b6:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030b8:	920a      	str	r2, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80030ba:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80030bc:	920c      	str	r2, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030be:	f7ff f957 	bl	8002370 <HAL_TIM_PWM_ConfigChannel>
 80030c2:	b118      	cbz	r0, 80030cc <MX_TIM1_Init+0x90>
    _Error_Handler(__FILE__, __LINE__);
 80030c4:	215f      	movs	r1, #95	; 0x5f
 80030c6:	481a      	ldr	r0, [pc, #104]	; (8003130 <MX_TIM1_Init+0xf4>)
 80030c8:	f7ff ff20 	bl	8002f0c <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80030cc:	2204      	movs	r2, #4
 80030ce:	a906      	add	r1, sp, #24
 80030d0:	4815      	ldr	r0, [pc, #84]	; (8003128 <MX_TIM1_Init+0xec>)
 80030d2:	f7ff f94d 	bl	8002370 <HAL_TIM_PWM_ConfigChannel>
 80030d6:	b118      	cbz	r0, 80030e0 <MX_TIM1_Init+0xa4>
    _Error_Handler(__FILE__, __LINE__);
 80030d8:	2164      	movs	r1, #100	; 0x64
 80030da:	4815      	ldr	r0, [pc, #84]	; (8003130 <MX_TIM1_Init+0xf4>)
 80030dc:	f7ff ff16 	bl	8002f0c <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80030e0:	2208      	movs	r2, #8
 80030e2:	a906      	add	r1, sp, #24
 80030e4:	4810      	ldr	r0, [pc, #64]	; (8003128 <MX_TIM1_Init+0xec>)
 80030e6:	f7ff f943 	bl	8002370 <HAL_TIM_PWM_ConfigChannel>
 80030ea:	b118      	cbz	r0, 80030f4 <MX_TIM1_Init+0xb8>
    _Error_Handler(__FILE__, __LINE__);
 80030ec:	2169      	movs	r1, #105	; 0x69
 80030ee:	4810      	ldr	r0, [pc, #64]	; (8003130 <MX_TIM1_Init+0xf4>)
 80030f0:	f7ff ff0c 	bl	8002f0c <_Error_Handler>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80030f4:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80030f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80030fa:	a90d      	add	r1, sp, #52	; 0x34
 80030fc:	480a      	ldr	r0, [pc, #40]	; (8003128 <MX_TIM1_Init+0xec>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80030fe:	930d      	str	r3, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003100:	930e      	str	r3, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003102:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.DeadTime = 0;
 8003104:	9310      	str	r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003106:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003108:	9212      	str	r2, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800310a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800310c:	f7ff f9da 	bl	80024c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003110:	b118      	cbz	r0, 800311a <MX_TIM1_Init+0xde>
    _Error_Handler(__FILE__, __LINE__);
 8003112:	2175      	movs	r1, #117	; 0x75
 8003114:	4806      	ldr	r0, [pc, #24]	; (8003130 <MX_TIM1_Init+0xf4>)
 8003116:	f7ff fef9 	bl	8002f0c <_Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 800311a:	4803      	ldr	r0, [pc, #12]	; (8003128 <MX_TIM1_Init+0xec>)
 800311c:	f7ff ff74 	bl	8003008 <HAL_TIM_MspPostInit>
}
 8003120:	b015      	add	sp, #84	; 0x54
 8003122:	f85d fb04 	ldr.w	pc, [sp], #4
 8003126:	bf00      	nop
 8003128:	20000724 	.word	0x20000724
 800312c:	40010000 	.word	0x40010000
 8003130:	0800665a 	.word	0x0800665a

08003134 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003134:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 8003136:	480c      	ldr	r0, [pc, #48]	; (8003168 <MX_USART3_UART_Init+0x34>)
  huart3.Init.BaudRate = 115200;
 8003138:	4b0c      	ldr	r3, [pc, #48]	; (800316c <MX_USART3_UART_Init+0x38>)
 800313a:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 800313e:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003142:	220c      	movs	r2, #12
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003144:	2300      	movs	r3, #0
 8003146:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003148:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800314a:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800314c:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800314e:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003150:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003152:	f7ff fb1f 	bl	8002794 <HAL_UART_Init>
 8003156:	b128      	cbz	r0, 8003164 <MX_USART3_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003158:	2142      	movs	r1, #66	; 0x42
 800315a:	4805      	ldr	r0, [pc, #20]	; (8003170 <MX_USART3_UART_Init+0x3c>)
  }

}
 800315c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8003160:	f7ff bed4 	b.w	8002f0c <_Error_Handler>
 8003164:	bd08      	pop	{r3, pc}
 8003166:	bf00      	nop
 8003168:	20000760 	.word	0x20000760
 800316c:	40004800 	.word	0x40004800
 8003170:	08006667 	.word	0x08006667

08003174 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003174:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART3)
 8003176:	6802      	ldr	r2, [r0, #0]
 8003178:	4b10      	ldr	r3, [pc, #64]	; (80031bc <HAL_UART_MspInit+0x48>)
 800317a:	429a      	cmp	r2, r3
 800317c:	d11a      	bne.n	80031b4 <HAL_UART_MspInit+0x40>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800317e:	2300      	movs	r3, #0
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	4b0f      	ldr	r3, [pc, #60]	; (80031c0 <HAL_UART_MspInit+0x4c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003184:	480f      	ldr	r0, [pc, #60]	; (80031c4 <HAL_UART_MspInit+0x50>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8003186:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003188:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800318c:	641a      	str	r2, [r3, #64]	; 0x40
 800318e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003190:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003198:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800319c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319e:	2302      	movs	r3, #2
 80031a0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031a2:	2301      	movs	r3, #1
 80031a4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031a6:	2303      	movs	r3, #3
 80031a8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031aa:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80031ac:	2307      	movs	r3, #7
 80031ae:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031b0:	f7fd ff88 	bl	80010c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80031b4:	b007      	add	sp, #28
 80031b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80031ba:	bf00      	nop
 80031bc:	40004800 	.word	0x40004800
 80031c0:	40023800 	.word	0x40023800
 80031c4:	40020400 	.word	0x40020400

080031c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80031c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003200 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80031cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80031ce:	e003      	b.n	80031d8 <LoopCopyDataInit>

080031d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80031d0:	4b0c      	ldr	r3, [pc, #48]	; (8003204 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80031d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80031d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80031d6:	3104      	adds	r1, #4

080031d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80031d8:	480b      	ldr	r0, [pc, #44]	; (8003208 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80031da:	4b0c      	ldr	r3, [pc, #48]	; (800320c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80031dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80031de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80031e0:	d3f6      	bcc.n	80031d0 <CopyDataInit>
  ldr  r2, =_sbss
 80031e2:	4a0b      	ldr	r2, [pc, #44]	; (8003210 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80031e4:	e002      	b.n	80031ec <LoopFillZerobss>

080031e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80031e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80031e8:	f842 3b04 	str.w	r3, [r2], #4

080031ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80031ec:	4b09      	ldr	r3, [pc, #36]	; (8003214 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80031ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80031f0:	d3f9      	bcc.n	80031e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80031f2:	f7ff fecb 	bl	8002f8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031f6:	f000 f811 	bl	800321c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031fa:	f7ff fc0d 	bl	8002a18 <main>
  bx  lr    
 80031fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003200:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003204:	08006938 	.word	0x08006938
  ldr  r0, =_sdata
 8003208:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800320c:	20000678 	.word	0x20000678
  ldr  r2, =_sbss
 8003210:	20000678 	.word	0x20000678
  ldr  r3, = _ebss
 8003214:	200007b0 	.word	0x200007b0

08003218 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003218:	e7fe      	b.n	8003218 <ADC_IRQHandler>
	...

0800321c <__libc_init_array>:
 800321c:	b570      	push	{r4, r5, r6, lr}
 800321e:	4e0d      	ldr	r6, [pc, #52]	; (8003254 <__libc_init_array+0x38>)
 8003220:	4c0d      	ldr	r4, [pc, #52]	; (8003258 <__libc_init_array+0x3c>)
 8003222:	1ba4      	subs	r4, r4, r6
 8003224:	10a4      	asrs	r4, r4, #2
 8003226:	2500      	movs	r5, #0
 8003228:	42a5      	cmp	r5, r4
 800322a:	d109      	bne.n	8003240 <__libc_init_array+0x24>
 800322c:	4e0b      	ldr	r6, [pc, #44]	; (800325c <__libc_init_array+0x40>)
 800322e:	4c0c      	ldr	r4, [pc, #48]	; (8003260 <__libc_init_array+0x44>)
 8003230:	f003 f9d6 	bl	80065e0 <_init>
 8003234:	1ba4      	subs	r4, r4, r6
 8003236:	10a4      	asrs	r4, r4, #2
 8003238:	2500      	movs	r5, #0
 800323a:	42a5      	cmp	r5, r4
 800323c:	d105      	bne.n	800324a <__libc_init_array+0x2e>
 800323e:	bd70      	pop	{r4, r5, r6, pc}
 8003240:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003244:	4798      	blx	r3
 8003246:	3501      	adds	r5, #1
 8003248:	e7ee      	b.n	8003228 <__libc_init_array+0xc>
 800324a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800324e:	4798      	blx	r3
 8003250:	3501      	adds	r5, #1
 8003252:	e7f2      	b.n	800323a <__libc_init_array+0x1e>
 8003254:	08006930 	.word	0x08006930
 8003258:	08006930 	.word	0x08006930
 800325c:	08006930 	.word	0x08006930
 8003260:	08006934 	.word	0x08006934

08003264 <sprintf>:
 8003264:	b40e      	push	{r1, r2, r3}
 8003266:	b500      	push	{lr}
 8003268:	b09c      	sub	sp, #112	; 0x70
 800326a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800326e:	ab1d      	add	r3, sp, #116	; 0x74
 8003270:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003274:	9002      	str	r0, [sp, #8]
 8003276:	9006      	str	r0, [sp, #24]
 8003278:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800327c:	480a      	ldr	r0, [pc, #40]	; (80032a8 <sprintf+0x44>)
 800327e:	9104      	str	r1, [sp, #16]
 8003280:	9107      	str	r1, [sp, #28]
 8003282:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003286:	f853 2b04 	ldr.w	r2, [r3], #4
 800328a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800328e:	6800      	ldr	r0, [r0, #0]
 8003290:	9301      	str	r3, [sp, #4]
 8003292:	a902      	add	r1, sp, #8
 8003294:	f000 f80c 	bl	80032b0 <_svfprintf_r>
 8003298:	9b02      	ldr	r3, [sp, #8]
 800329a:	2200      	movs	r2, #0
 800329c:	701a      	strb	r2, [r3, #0]
 800329e:	b01c      	add	sp, #112	; 0x70
 80032a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80032a4:	b003      	add	sp, #12
 80032a6:	4770      	bx	lr
 80032a8:	20000004 	.word	0x20000004
 80032ac:	00000000 	.word	0x00000000

080032b0 <_svfprintf_r>:
 80032b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032b4:	b0bd      	sub	sp, #244	; 0xf4
 80032b6:	468a      	mov	sl, r1
 80032b8:	4615      	mov	r5, r2
 80032ba:	461f      	mov	r7, r3
 80032bc:	4683      	mov	fp, r0
 80032be:	f001 fe25 	bl	8004f0c <_localeconv_r>
 80032c2:	6803      	ldr	r3, [r0, #0]
 80032c4:	930d      	str	r3, [sp, #52]	; 0x34
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fc ff82 	bl	80001d0 <strlen>
 80032cc:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80032d0:	9008      	str	r0, [sp, #32]
 80032d2:	061b      	lsls	r3, r3, #24
 80032d4:	d518      	bpl.n	8003308 <_svfprintf_r+0x58>
 80032d6:	f8da 3010 	ldr.w	r3, [sl, #16]
 80032da:	b9ab      	cbnz	r3, 8003308 <_svfprintf_r+0x58>
 80032dc:	2140      	movs	r1, #64	; 0x40
 80032de:	4658      	mov	r0, fp
 80032e0:	f001 fe2a 	bl	8004f38 <_malloc_r>
 80032e4:	f8ca 0000 	str.w	r0, [sl]
 80032e8:	f8ca 0010 	str.w	r0, [sl, #16]
 80032ec:	b948      	cbnz	r0, 8003302 <_svfprintf_r+0x52>
 80032ee:	230c      	movs	r3, #12
 80032f0:	f8cb 3000 	str.w	r3, [fp]
 80032f4:	f04f 33ff 	mov.w	r3, #4294967295
 80032f8:	9309      	str	r3, [sp, #36]	; 0x24
 80032fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80032fc:	b03d      	add	sp, #244	; 0xf4
 80032fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003302:	2340      	movs	r3, #64	; 0x40
 8003304:	f8ca 3014 	str.w	r3, [sl, #20]
 8003308:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8003570 <_svfprintf_r+0x2c0>
 800330c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003310:	2300      	movs	r3, #0
 8003312:	ac2c      	add	r4, sp, #176	; 0xb0
 8003314:	941f      	str	r4, [sp, #124]	; 0x7c
 8003316:	9321      	str	r3, [sp, #132]	; 0x84
 8003318:	9320      	str	r3, [sp, #128]	; 0x80
 800331a:	9505      	str	r5, [sp, #20]
 800331c:	9303      	str	r3, [sp, #12]
 800331e:	9311      	str	r3, [sp, #68]	; 0x44
 8003320:	9310      	str	r3, [sp, #64]	; 0x40
 8003322:	9309      	str	r3, [sp, #36]	; 0x24
 8003324:	9d05      	ldr	r5, [sp, #20]
 8003326:	462b      	mov	r3, r5
 8003328:	f813 2b01 	ldrb.w	r2, [r3], #1
 800332c:	b112      	cbz	r2, 8003334 <_svfprintf_r+0x84>
 800332e:	2a25      	cmp	r2, #37	; 0x25
 8003330:	f040 8083 	bne.w	800343a <_svfprintf_r+0x18a>
 8003334:	9b05      	ldr	r3, [sp, #20]
 8003336:	1aee      	subs	r6, r5, r3
 8003338:	d00d      	beq.n	8003356 <_svfprintf_r+0xa6>
 800333a:	e884 0048 	stmia.w	r4, {r3, r6}
 800333e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003340:	4433      	add	r3, r6
 8003342:	9321      	str	r3, [sp, #132]	; 0x84
 8003344:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003346:	3301      	adds	r3, #1
 8003348:	2b07      	cmp	r3, #7
 800334a:	9320      	str	r3, [sp, #128]	; 0x80
 800334c:	dc77      	bgt.n	800343e <_svfprintf_r+0x18e>
 800334e:	3408      	adds	r4, #8
 8003350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003352:	4433      	add	r3, r6
 8003354:	9309      	str	r3, [sp, #36]	; 0x24
 8003356:	782b      	ldrb	r3, [r5, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 8729 	beq.w	80041b0 <_svfprintf_r+0xf00>
 800335e:	2300      	movs	r3, #0
 8003360:	1c69      	adds	r1, r5, #1
 8003362:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8003366:	461a      	mov	r2, r3
 8003368:	f04f 39ff 	mov.w	r9, #4294967295
 800336c:	930a      	str	r3, [sp, #40]	; 0x28
 800336e:	461d      	mov	r5, r3
 8003370:	200a      	movs	r0, #10
 8003372:	1c4e      	adds	r6, r1, #1
 8003374:	7809      	ldrb	r1, [r1, #0]
 8003376:	9605      	str	r6, [sp, #20]
 8003378:	9102      	str	r1, [sp, #8]
 800337a:	9902      	ldr	r1, [sp, #8]
 800337c:	3920      	subs	r1, #32
 800337e:	2958      	cmp	r1, #88	; 0x58
 8003380:	f200 8418 	bhi.w	8003bb4 <_svfprintf_r+0x904>
 8003384:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003388:	041600a6 	.word	0x041600a6
 800338c:	00ab0416 	.word	0x00ab0416
 8003390:	04160416 	.word	0x04160416
 8003394:	04160416 	.word	0x04160416
 8003398:	04160416 	.word	0x04160416
 800339c:	006500ae 	.word	0x006500ae
 80033a0:	00b70416 	.word	0x00b70416
 80033a4:	041600ba 	.word	0x041600ba
 80033a8:	00da00d7 	.word	0x00da00d7
 80033ac:	00da00da 	.word	0x00da00da
 80033b0:	00da00da 	.word	0x00da00da
 80033b4:	00da00da 	.word	0x00da00da
 80033b8:	00da00da 	.word	0x00da00da
 80033bc:	04160416 	.word	0x04160416
 80033c0:	04160416 	.word	0x04160416
 80033c4:	04160416 	.word	0x04160416
 80033c8:	04160416 	.word	0x04160416
 80033cc:	04160416 	.word	0x04160416
 80033d0:	012b0115 	.word	0x012b0115
 80033d4:	012b0416 	.word	0x012b0416
 80033d8:	04160416 	.word	0x04160416
 80033dc:	04160416 	.word	0x04160416
 80033e0:	041600ed 	.word	0x041600ed
 80033e4:	03400416 	.word	0x03400416
 80033e8:	04160416 	.word	0x04160416
 80033ec:	04160416 	.word	0x04160416
 80033f0:	03a80416 	.word	0x03a80416
 80033f4:	04160416 	.word	0x04160416
 80033f8:	04160086 	.word	0x04160086
 80033fc:	04160416 	.word	0x04160416
 8003400:	04160416 	.word	0x04160416
 8003404:	04160416 	.word	0x04160416
 8003408:	04160416 	.word	0x04160416
 800340c:	01070416 	.word	0x01070416
 8003410:	012b006b 	.word	0x012b006b
 8003414:	012b012b 	.word	0x012b012b
 8003418:	006b00f0 	.word	0x006b00f0
 800341c:	04160416 	.word	0x04160416
 8003420:	041600fa 	.word	0x041600fa
 8003424:	03420322 	.word	0x03420322
 8003428:	01010376 	.word	0x01010376
 800342c:	03870416 	.word	0x03870416
 8003430:	03aa0416 	.word	0x03aa0416
 8003434:	04160416 	.word	0x04160416
 8003438:	03c2      	.short	0x03c2
 800343a:	461d      	mov	r5, r3
 800343c:	e773      	b.n	8003326 <_svfprintf_r+0x76>
 800343e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003440:	4651      	mov	r1, sl
 8003442:	4658      	mov	r0, fp
 8003444:	f002 fa7e 	bl	8005944 <__ssprint_r>
 8003448:	2800      	cmp	r0, #0
 800344a:	f040 8692 	bne.w	8004172 <_svfprintf_r+0xec2>
 800344e:	ac2c      	add	r4, sp, #176	; 0xb0
 8003450:	e77e      	b.n	8003350 <_svfprintf_r+0xa0>
 8003452:	2301      	movs	r3, #1
 8003454:	222b      	movs	r2, #43	; 0x2b
 8003456:	9905      	ldr	r1, [sp, #20]
 8003458:	e78b      	b.n	8003372 <_svfprintf_r+0xc2>
 800345a:	460f      	mov	r7, r1
 800345c:	e7fb      	b.n	8003456 <_svfprintf_r+0x1a6>
 800345e:	b10b      	cbz	r3, 8003464 <_svfprintf_r+0x1b4>
 8003460:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003464:	06ae      	lsls	r6, r5, #26
 8003466:	f140 80aa 	bpl.w	80035be <_svfprintf_r+0x30e>
 800346a:	3707      	adds	r7, #7
 800346c:	f027 0707 	bic.w	r7, r7, #7
 8003470:	f107 0308 	add.w	r3, r7, #8
 8003474:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003478:	9304      	str	r3, [sp, #16]
 800347a:	2e00      	cmp	r6, #0
 800347c:	f177 0300 	sbcs.w	r3, r7, #0
 8003480:	da06      	bge.n	8003490 <_svfprintf_r+0x1e0>
 8003482:	4276      	negs	r6, r6
 8003484:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8003488:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800348c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8003490:	2301      	movs	r3, #1
 8003492:	e2ca      	b.n	8003a2a <_svfprintf_r+0x77a>
 8003494:	b10b      	cbz	r3, 800349a <_svfprintf_r+0x1ea>
 8003496:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800349a:	4b37      	ldr	r3, [pc, #220]	; (8003578 <_svfprintf_r+0x2c8>)
 800349c:	9311      	str	r3, [sp, #68]	; 0x44
 800349e:	06ab      	lsls	r3, r5, #26
 80034a0:	f140 8339 	bpl.w	8003b16 <_svfprintf_r+0x866>
 80034a4:	3707      	adds	r7, #7
 80034a6:	f027 0707 	bic.w	r7, r7, #7
 80034aa:	f107 0308 	add.w	r3, r7, #8
 80034ae:	e9d7 6700 	ldrd	r6, r7, [r7]
 80034b2:	9304      	str	r3, [sp, #16]
 80034b4:	07e8      	lsls	r0, r5, #31
 80034b6:	d50b      	bpl.n	80034d0 <_svfprintf_r+0x220>
 80034b8:	ea56 0307 	orrs.w	r3, r6, r7
 80034bc:	d008      	beq.n	80034d0 <_svfprintf_r+0x220>
 80034be:	2330      	movs	r3, #48	; 0x30
 80034c0:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80034c4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80034c8:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 80034cc:	f045 0502 	orr.w	r5, r5, #2
 80034d0:	2302      	movs	r3, #2
 80034d2:	e2a7      	b.n	8003a24 <_svfprintf_r+0x774>
 80034d4:	2a00      	cmp	r2, #0
 80034d6:	d1be      	bne.n	8003456 <_svfprintf_r+0x1a6>
 80034d8:	2301      	movs	r3, #1
 80034da:	2220      	movs	r2, #32
 80034dc:	e7bb      	b.n	8003456 <_svfprintf_r+0x1a6>
 80034de:	f045 0501 	orr.w	r5, r5, #1
 80034e2:	e7b8      	b.n	8003456 <_svfprintf_r+0x1a6>
 80034e4:	683e      	ldr	r6, [r7, #0]
 80034e6:	960a      	str	r6, [sp, #40]	; 0x28
 80034e8:	2e00      	cmp	r6, #0
 80034ea:	f107 0104 	add.w	r1, r7, #4
 80034ee:	dab4      	bge.n	800345a <_svfprintf_r+0x1aa>
 80034f0:	4276      	negs	r6, r6
 80034f2:	960a      	str	r6, [sp, #40]	; 0x28
 80034f4:	460f      	mov	r7, r1
 80034f6:	f045 0504 	orr.w	r5, r5, #4
 80034fa:	e7ac      	b.n	8003456 <_svfprintf_r+0x1a6>
 80034fc:	9905      	ldr	r1, [sp, #20]
 80034fe:	1c4e      	adds	r6, r1, #1
 8003500:	7809      	ldrb	r1, [r1, #0]
 8003502:	9102      	str	r1, [sp, #8]
 8003504:	292a      	cmp	r1, #42	; 0x2a
 8003506:	d010      	beq.n	800352a <_svfprintf_r+0x27a>
 8003508:	f04f 0900 	mov.w	r9, #0
 800350c:	9605      	str	r6, [sp, #20]
 800350e:	9902      	ldr	r1, [sp, #8]
 8003510:	3930      	subs	r1, #48	; 0x30
 8003512:	2909      	cmp	r1, #9
 8003514:	f63f af31 	bhi.w	800337a <_svfprintf_r+0xca>
 8003518:	fb00 1909 	mla	r9, r0, r9, r1
 800351c:	9905      	ldr	r1, [sp, #20]
 800351e:	460e      	mov	r6, r1
 8003520:	f816 1b01 	ldrb.w	r1, [r6], #1
 8003524:	9102      	str	r1, [sp, #8]
 8003526:	9605      	str	r6, [sp, #20]
 8003528:	e7f1      	b.n	800350e <_svfprintf_r+0x25e>
 800352a:	6839      	ldr	r1, [r7, #0]
 800352c:	9605      	str	r6, [sp, #20]
 800352e:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 8003532:	3704      	adds	r7, #4
 8003534:	e78f      	b.n	8003456 <_svfprintf_r+0x1a6>
 8003536:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800353a:	e78c      	b.n	8003456 <_svfprintf_r+0x1a6>
 800353c:	2100      	movs	r1, #0
 800353e:	910a      	str	r1, [sp, #40]	; 0x28
 8003540:	9902      	ldr	r1, [sp, #8]
 8003542:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8003544:	3930      	subs	r1, #48	; 0x30
 8003546:	fb00 1106 	mla	r1, r0, r6, r1
 800354a:	910a      	str	r1, [sp, #40]	; 0x28
 800354c:	9905      	ldr	r1, [sp, #20]
 800354e:	460e      	mov	r6, r1
 8003550:	f816 1b01 	ldrb.w	r1, [r6], #1
 8003554:	9102      	str	r1, [sp, #8]
 8003556:	9902      	ldr	r1, [sp, #8]
 8003558:	9605      	str	r6, [sp, #20]
 800355a:	3930      	subs	r1, #48	; 0x30
 800355c:	2909      	cmp	r1, #9
 800355e:	d9ef      	bls.n	8003540 <_svfprintf_r+0x290>
 8003560:	e70b      	b.n	800337a <_svfprintf_r+0xca>
 8003562:	f045 0508 	orr.w	r5, r5, #8
 8003566:	e776      	b.n	8003456 <_svfprintf_r+0x1a6>
 8003568:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 800356c:	e773      	b.n	8003456 <_svfprintf_r+0x1a6>
 800356e:	bf00      	nop
	...
 8003578:	08006686 	.word	0x08006686
 800357c:	9905      	ldr	r1, [sp, #20]
 800357e:	7809      	ldrb	r1, [r1, #0]
 8003580:	296c      	cmp	r1, #108	; 0x6c
 8003582:	d105      	bne.n	8003590 <_svfprintf_r+0x2e0>
 8003584:	9905      	ldr	r1, [sp, #20]
 8003586:	3101      	adds	r1, #1
 8003588:	9105      	str	r1, [sp, #20]
 800358a:	f045 0520 	orr.w	r5, r5, #32
 800358e:	e762      	b.n	8003456 <_svfprintf_r+0x1a6>
 8003590:	f045 0510 	orr.w	r5, r5, #16
 8003594:	e75f      	b.n	8003456 <_svfprintf_r+0x1a6>
 8003596:	1d3b      	adds	r3, r7, #4
 8003598:	9304      	str	r3, [sp, #16]
 800359a:	2600      	movs	r6, #0
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 80035a2:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80035a6:	f04f 0901 	mov.w	r9, #1
 80035aa:	4637      	mov	r7, r6
 80035ac:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 80035b0:	e11b      	b.n	80037ea <_svfprintf_r+0x53a>
 80035b2:	b10b      	cbz	r3, 80035b8 <_svfprintf_r+0x308>
 80035b4:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80035b8:	f045 0510 	orr.w	r5, r5, #16
 80035bc:	e752      	b.n	8003464 <_svfprintf_r+0x1b4>
 80035be:	f015 0f10 	tst.w	r5, #16
 80035c2:	f107 0304 	add.w	r3, r7, #4
 80035c6:	d003      	beq.n	80035d0 <_svfprintf_r+0x320>
 80035c8:	683e      	ldr	r6, [r7, #0]
 80035ca:	9304      	str	r3, [sp, #16]
 80035cc:	17f7      	asrs	r7, r6, #31
 80035ce:	e754      	b.n	800347a <_svfprintf_r+0x1ca>
 80035d0:	683e      	ldr	r6, [r7, #0]
 80035d2:	9304      	str	r3, [sp, #16]
 80035d4:	f015 0f40 	tst.w	r5, #64	; 0x40
 80035d8:	bf18      	it	ne
 80035da:	b236      	sxthne	r6, r6
 80035dc:	e7f6      	b.n	80035cc <_svfprintf_r+0x31c>
 80035de:	b10b      	cbz	r3, 80035e4 <_svfprintf_r+0x334>
 80035e0:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80035e4:	3707      	adds	r7, #7
 80035e6:	f027 0707 	bic.w	r7, r7, #7
 80035ea:	f107 0308 	add.w	r3, r7, #8
 80035ee:	9304      	str	r3, [sp, #16]
 80035f0:	ed97 7b00 	vldr	d7, [r7]
 80035f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80035f8:	9b06      	ldr	r3, [sp, #24]
 80035fa:	9312      	str	r3, [sp, #72]	; 0x48
 80035fc:	9b07      	ldr	r3, [sp, #28]
 80035fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003602:	9313      	str	r3, [sp, #76]	; 0x4c
 8003604:	f04f 32ff 	mov.w	r2, #4294967295
 8003608:	4b4a      	ldr	r3, [pc, #296]	; (8003734 <_svfprintf_r+0x484>)
 800360a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800360e:	f7fd fa89 	bl	8000b24 <__aeabi_dcmpun>
 8003612:	2800      	cmp	r0, #0
 8003614:	f040 85d5 	bne.w	80041c2 <_svfprintf_r+0xf12>
 8003618:	f04f 32ff 	mov.w	r2, #4294967295
 800361c:	4b45      	ldr	r3, [pc, #276]	; (8003734 <_svfprintf_r+0x484>)
 800361e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8003622:	f7fd fa61 	bl	8000ae8 <__aeabi_dcmple>
 8003626:	2800      	cmp	r0, #0
 8003628:	f040 85cb 	bne.w	80041c2 <_svfprintf_r+0xf12>
 800362c:	2200      	movs	r2, #0
 800362e:	2300      	movs	r3, #0
 8003630:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003634:	f7fd fa4e 	bl	8000ad4 <__aeabi_dcmplt>
 8003638:	b110      	cbz	r0, 8003640 <_svfprintf_r+0x390>
 800363a:	232d      	movs	r3, #45	; 0x2d
 800363c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8003640:	4b3d      	ldr	r3, [pc, #244]	; (8003738 <_svfprintf_r+0x488>)
 8003642:	4a3e      	ldr	r2, [pc, #248]	; (800373c <_svfprintf_r+0x48c>)
 8003644:	9902      	ldr	r1, [sp, #8]
 8003646:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800364a:	2947      	cmp	r1, #71	; 0x47
 800364c:	bfcc      	ite	gt
 800364e:	4690      	movgt	r8, r2
 8003650:	4698      	movle	r8, r3
 8003652:	f04f 0903 	mov.w	r9, #3
 8003656:	2600      	movs	r6, #0
 8003658:	4637      	mov	r7, r6
 800365a:	e0c6      	b.n	80037ea <_svfprintf_r+0x53a>
 800365c:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003660:	d022      	beq.n	80036a8 <_svfprintf_r+0x3f8>
 8003662:	9b02      	ldr	r3, [sp, #8]
 8003664:	f023 0320 	bic.w	r3, r3, #32
 8003668:	2b47      	cmp	r3, #71	; 0x47
 800366a:	d104      	bne.n	8003676 <_svfprintf_r+0x3c6>
 800366c:	f1b9 0f00 	cmp.w	r9, #0
 8003670:	bf08      	it	eq
 8003672:	f04f 0901 	moveq.w	r9, #1
 8003676:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800367a:	930c      	str	r3, [sp, #48]	; 0x30
 800367c:	9b07      	ldr	r3, [sp, #28]
 800367e:	2b00      	cmp	r3, #0
 8003680:	da15      	bge.n	80036ae <_svfprintf_r+0x3fe>
 8003682:	9b06      	ldr	r3, [sp, #24]
 8003684:	930e      	str	r3, [sp, #56]	; 0x38
 8003686:	9b07      	ldr	r3, [sp, #28]
 8003688:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800368c:	930f      	str	r3, [sp, #60]	; 0x3c
 800368e:	232d      	movs	r3, #45	; 0x2d
 8003690:	930b      	str	r3, [sp, #44]	; 0x2c
 8003692:	9b02      	ldr	r3, [sp, #8]
 8003694:	f023 0720 	bic.w	r7, r3, #32
 8003698:	2f46      	cmp	r7, #70	; 0x46
 800369a:	d00e      	beq.n	80036ba <_svfprintf_r+0x40a>
 800369c:	2f45      	cmp	r7, #69	; 0x45
 800369e:	d146      	bne.n	800372e <_svfprintf_r+0x47e>
 80036a0:	f109 0601 	add.w	r6, r9, #1
 80036a4:	2102      	movs	r1, #2
 80036a6:	e00a      	b.n	80036be <_svfprintf_r+0x40e>
 80036a8:	f04f 0906 	mov.w	r9, #6
 80036ac:	e7e3      	b.n	8003676 <_svfprintf_r+0x3c6>
 80036ae:	ed9d 7b06 	vldr	d7, [sp, #24]
 80036b2:	2300      	movs	r3, #0
 80036b4:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80036b8:	e7ea      	b.n	8003690 <_svfprintf_r+0x3e0>
 80036ba:	464e      	mov	r6, r9
 80036bc:	2103      	movs	r1, #3
 80036be:	ab1d      	add	r3, sp, #116	; 0x74
 80036c0:	9301      	str	r3, [sp, #4]
 80036c2:	ab1a      	add	r3, sp, #104	; 0x68
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	4632      	mov	r2, r6
 80036c8:	ab19      	add	r3, sp, #100	; 0x64
 80036ca:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 80036ce:	4658      	mov	r0, fp
 80036d0:	f000 fe4e 	bl	8004370 <_dtoa_r>
 80036d4:	2f47      	cmp	r7, #71	; 0x47
 80036d6:	4680      	mov	r8, r0
 80036d8:	d102      	bne.n	80036e0 <_svfprintf_r+0x430>
 80036da:	07e8      	lsls	r0, r5, #31
 80036dc:	f140 857e 	bpl.w	80041dc <_svfprintf_r+0xf2c>
 80036e0:	eb08 0306 	add.w	r3, r8, r6
 80036e4:	2f46      	cmp	r7, #70	; 0x46
 80036e6:	9303      	str	r3, [sp, #12]
 80036e8:	d111      	bne.n	800370e <_svfprintf_r+0x45e>
 80036ea:	f898 3000 	ldrb.w	r3, [r8]
 80036ee:	2b30      	cmp	r3, #48	; 0x30
 80036f0:	d109      	bne.n	8003706 <_svfprintf_r+0x456>
 80036f2:	2200      	movs	r2, #0
 80036f4:	2300      	movs	r3, #0
 80036f6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80036fa:	f7fd f9e1 	bl	8000ac0 <__aeabi_dcmpeq>
 80036fe:	b910      	cbnz	r0, 8003706 <_svfprintf_r+0x456>
 8003700:	f1c6 0601 	rsb	r6, r6, #1
 8003704:	9619      	str	r6, [sp, #100]	; 0x64
 8003706:	9a03      	ldr	r2, [sp, #12]
 8003708:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800370a:	441a      	add	r2, r3
 800370c:	9203      	str	r2, [sp, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	2300      	movs	r3, #0
 8003712:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003716:	f7fd f9d3 	bl	8000ac0 <__aeabi_dcmpeq>
 800371a:	b988      	cbnz	r0, 8003740 <_svfprintf_r+0x490>
 800371c:	2230      	movs	r2, #48	; 0x30
 800371e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003720:	9903      	ldr	r1, [sp, #12]
 8003722:	4299      	cmp	r1, r3
 8003724:	d90e      	bls.n	8003744 <_svfprintf_r+0x494>
 8003726:	1c59      	adds	r1, r3, #1
 8003728:	911d      	str	r1, [sp, #116]	; 0x74
 800372a:	701a      	strb	r2, [r3, #0]
 800372c:	e7f7      	b.n	800371e <_svfprintf_r+0x46e>
 800372e:	464e      	mov	r6, r9
 8003730:	e7b8      	b.n	80036a4 <_svfprintf_r+0x3f4>
 8003732:	bf00      	nop
 8003734:	7fefffff 	.word	0x7fefffff
 8003738:	08006676 	.word	0x08006676
 800373c:	0800667a 	.word	0x0800667a
 8003740:	9b03      	ldr	r3, [sp, #12]
 8003742:	931d      	str	r3, [sp, #116]	; 0x74
 8003744:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003746:	2f47      	cmp	r7, #71	; 0x47
 8003748:	eba3 0308 	sub.w	r3, r3, r8
 800374c:	9303      	str	r3, [sp, #12]
 800374e:	f040 80fa 	bne.w	8003946 <_svfprintf_r+0x696>
 8003752:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003754:	1cd9      	adds	r1, r3, #3
 8003756:	db02      	blt.n	800375e <_svfprintf_r+0x4ae>
 8003758:	4599      	cmp	r9, r3
 800375a:	f280 8120 	bge.w	800399e <_svfprintf_r+0x6ee>
 800375e:	9b02      	ldr	r3, [sp, #8]
 8003760:	3b02      	subs	r3, #2
 8003762:	9302      	str	r3, [sp, #8]
 8003764:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003766:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800376a:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 800376e:	1e53      	subs	r3, r2, #1
 8003770:	2b00      	cmp	r3, #0
 8003772:	9319      	str	r3, [sp, #100]	; 0x64
 8003774:	bfb6      	itet	lt
 8003776:	f1c2 0301 	rsblt	r3, r2, #1
 800377a:	222b      	movge	r2, #43	; 0x2b
 800377c:	222d      	movlt	r2, #45	; 0x2d
 800377e:	2b09      	cmp	r3, #9
 8003780:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8003784:	f340 80fb 	ble.w	800397e <_svfprintf_r+0x6ce>
 8003788:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800378c:	260a      	movs	r6, #10
 800378e:	fb93 f0f6 	sdiv	r0, r3, r6
 8003792:	fb06 3310 	mls	r3, r6, r0, r3
 8003796:	3330      	adds	r3, #48	; 0x30
 8003798:	2809      	cmp	r0, #9
 800379a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800379e:	f102 31ff 	add.w	r1, r2, #4294967295
 80037a2:	4603      	mov	r3, r0
 80037a4:	f300 80e4 	bgt.w	8003970 <_svfprintf_r+0x6c0>
 80037a8:	3330      	adds	r3, #48	; 0x30
 80037aa:	f801 3c01 	strb.w	r3, [r1, #-1]
 80037ae:	3a02      	subs	r2, #2
 80037b0:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 80037b4:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 80037b8:	4282      	cmp	r2, r0
 80037ba:	4619      	mov	r1, r3
 80037bc:	f0c0 80da 	bcc.w	8003974 <_svfprintf_r+0x6c4>
 80037c0:	9a03      	ldr	r2, [sp, #12]
 80037c2:	ab1b      	add	r3, sp, #108	; 0x6c
 80037c4:	1acb      	subs	r3, r1, r3
 80037c6:	2a01      	cmp	r2, #1
 80037c8:	9310      	str	r3, [sp, #64]	; 0x40
 80037ca:	eb03 0902 	add.w	r9, r3, r2
 80037ce:	dc02      	bgt.n	80037d6 <_svfprintf_r+0x526>
 80037d0:	f015 0701 	ands.w	r7, r5, #1
 80037d4:	d002      	beq.n	80037dc <_svfprintf_r+0x52c>
 80037d6:	9b08      	ldr	r3, [sp, #32]
 80037d8:	2700      	movs	r7, #0
 80037da:	4499      	add	r9, r3
 80037dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80037de:	b113      	cbz	r3, 80037e6 <_svfprintf_r+0x536>
 80037e0:	232d      	movs	r3, #45	; 0x2d
 80037e2:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80037e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80037e8:	2600      	movs	r6, #0
 80037ea:	454e      	cmp	r6, r9
 80037ec:	4633      	mov	r3, r6
 80037ee:	bfb8      	it	lt
 80037f0:	464b      	movlt	r3, r9
 80037f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80037f4:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 80037f8:	b113      	cbz	r3, 8003800 <_svfprintf_r+0x550>
 80037fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80037fc:	3301      	adds	r3, #1
 80037fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8003800:	f015 0302 	ands.w	r3, r5, #2
 8003804:	9314      	str	r3, [sp, #80]	; 0x50
 8003806:	bf1e      	ittt	ne
 8003808:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 800380a:	3302      	addne	r3, #2
 800380c:	930b      	strne	r3, [sp, #44]	; 0x2c
 800380e:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8003812:	9315      	str	r3, [sp, #84]	; 0x54
 8003814:	d118      	bne.n	8003848 <_svfprintf_r+0x598>
 8003816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003818:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800381a:	1a9b      	subs	r3, r3, r2
 800381c:	2b00      	cmp	r3, #0
 800381e:	930c      	str	r3, [sp, #48]	; 0x30
 8003820:	dd12      	ble.n	8003848 <_svfprintf_r+0x598>
 8003822:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003824:	2b10      	cmp	r3, #16
 8003826:	4ba9      	ldr	r3, [pc, #676]	; (8003acc <_svfprintf_r+0x81c>)
 8003828:	6023      	str	r3, [r4, #0]
 800382a:	f300 81d5 	bgt.w	8003bd8 <_svfprintf_r+0x928>
 800382e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003830:	6063      	str	r3, [r4, #4]
 8003832:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003834:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003836:	4413      	add	r3, r2
 8003838:	9321      	str	r3, [sp, #132]	; 0x84
 800383a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800383c:	3301      	adds	r3, #1
 800383e:	2b07      	cmp	r3, #7
 8003840:	9320      	str	r3, [sp, #128]	; 0x80
 8003842:	f300 81e2 	bgt.w	8003c0a <_svfprintf_r+0x95a>
 8003846:	3408      	adds	r4, #8
 8003848:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800384c:	b173      	cbz	r3, 800386c <_svfprintf_r+0x5bc>
 800384e:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8003852:	6023      	str	r3, [r4, #0]
 8003854:	2301      	movs	r3, #1
 8003856:	6063      	str	r3, [r4, #4]
 8003858:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800385a:	3301      	adds	r3, #1
 800385c:	9321      	str	r3, [sp, #132]	; 0x84
 800385e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003860:	3301      	adds	r3, #1
 8003862:	2b07      	cmp	r3, #7
 8003864:	9320      	str	r3, [sp, #128]	; 0x80
 8003866:	f300 81da 	bgt.w	8003c1e <_svfprintf_r+0x96e>
 800386a:	3408      	adds	r4, #8
 800386c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800386e:	b16b      	cbz	r3, 800388c <_svfprintf_r+0x5dc>
 8003870:	ab18      	add	r3, sp, #96	; 0x60
 8003872:	6023      	str	r3, [r4, #0]
 8003874:	2302      	movs	r3, #2
 8003876:	6063      	str	r3, [r4, #4]
 8003878:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800387a:	3302      	adds	r3, #2
 800387c:	9321      	str	r3, [sp, #132]	; 0x84
 800387e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003880:	3301      	adds	r3, #1
 8003882:	2b07      	cmp	r3, #7
 8003884:	9320      	str	r3, [sp, #128]	; 0x80
 8003886:	f300 81d4 	bgt.w	8003c32 <_svfprintf_r+0x982>
 800388a:	3408      	adds	r4, #8
 800388c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800388e:	2b80      	cmp	r3, #128	; 0x80
 8003890:	d114      	bne.n	80038bc <_svfprintf_r+0x60c>
 8003892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003894:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003896:	1a9b      	subs	r3, r3, r2
 8003898:	2b00      	cmp	r3, #0
 800389a:	dd0f      	ble.n	80038bc <_svfprintf_r+0x60c>
 800389c:	4a8c      	ldr	r2, [pc, #560]	; (8003ad0 <_svfprintf_r+0x820>)
 800389e:	6022      	str	r2, [r4, #0]
 80038a0:	2b10      	cmp	r3, #16
 80038a2:	f300 81d0 	bgt.w	8003c46 <_svfprintf_r+0x996>
 80038a6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80038a8:	6063      	str	r3, [r4, #4]
 80038aa:	4413      	add	r3, r2
 80038ac:	9321      	str	r3, [sp, #132]	; 0x84
 80038ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80038b0:	3301      	adds	r3, #1
 80038b2:	2b07      	cmp	r3, #7
 80038b4:	9320      	str	r3, [sp, #128]	; 0x80
 80038b6:	f300 81df 	bgt.w	8003c78 <_svfprintf_r+0x9c8>
 80038ba:	3408      	adds	r4, #8
 80038bc:	eba6 0609 	sub.w	r6, r6, r9
 80038c0:	2e00      	cmp	r6, #0
 80038c2:	dd0f      	ble.n	80038e4 <_svfprintf_r+0x634>
 80038c4:	4b82      	ldr	r3, [pc, #520]	; (8003ad0 <_svfprintf_r+0x820>)
 80038c6:	6023      	str	r3, [r4, #0]
 80038c8:	2e10      	cmp	r6, #16
 80038ca:	f300 81df 	bgt.w	8003c8c <_svfprintf_r+0x9dc>
 80038ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80038d0:	9821      	ldr	r0, [sp, #132]	; 0x84
 80038d2:	6066      	str	r6, [r4, #4]
 80038d4:	3301      	adds	r3, #1
 80038d6:	4406      	add	r6, r0
 80038d8:	2b07      	cmp	r3, #7
 80038da:	9621      	str	r6, [sp, #132]	; 0x84
 80038dc:	9320      	str	r3, [sp, #128]	; 0x80
 80038de:	f300 81ec 	bgt.w	8003cba <_svfprintf_r+0xa0a>
 80038e2:	3408      	adds	r4, #8
 80038e4:	05eb      	lsls	r3, r5, #23
 80038e6:	f100 81f2 	bmi.w	8003cce <_svfprintf_r+0xa1e>
 80038ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80038ec:	e884 0300 	stmia.w	r4, {r8, r9}
 80038f0:	444b      	add	r3, r9
 80038f2:	9321      	str	r3, [sp, #132]	; 0x84
 80038f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80038f6:	3301      	adds	r3, #1
 80038f8:	2b07      	cmp	r3, #7
 80038fa:	9320      	str	r3, [sp, #128]	; 0x80
 80038fc:	f340 8419 	ble.w	8004132 <_svfprintf_r+0xe82>
 8003900:	aa1f      	add	r2, sp, #124	; 0x7c
 8003902:	4651      	mov	r1, sl
 8003904:	4658      	mov	r0, fp
 8003906:	f002 f81d 	bl	8005944 <__ssprint_r>
 800390a:	2800      	cmp	r0, #0
 800390c:	f040 8431 	bne.w	8004172 <_svfprintf_r+0xec2>
 8003910:	ac2c      	add	r4, sp, #176	; 0xb0
 8003912:	076b      	lsls	r3, r5, #29
 8003914:	f100 8410 	bmi.w	8004138 <_svfprintf_r+0xe88>
 8003918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800391a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800391c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800391e:	428a      	cmp	r2, r1
 8003920:	bfac      	ite	ge
 8003922:	189b      	addge	r3, r3, r2
 8003924:	185b      	addlt	r3, r3, r1
 8003926:	9309      	str	r3, [sp, #36]	; 0x24
 8003928:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800392a:	b13b      	cbz	r3, 800393c <_svfprintf_r+0x68c>
 800392c:	aa1f      	add	r2, sp, #124	; 0x7c
 800392e:	4651      	mov	r1, sl
 8003930:	4658      	mov	r0, fp
 8003932:	f002 f807 	bl	8005944 <__ssprint_r>
 8003936:	2800      	cmp	r0, #0
 8003938:	f040 841b 	bne.w	8004172 <_svfprintf_r+0xec2>
 800393c:	2300      	movs	r3, #0
 800393e:	9320      	str	r3, [sp, #128]	; 0x80
 8003940:	9f04      	ldr	r7, [sp, #16]
 8003942:	ac2c      	add	r4, sp, #176	; 0xb0
 8003944:	e4ee      	b.n	8003324 <_svfprintf_r+0x74>
 8003946:	9b02      	ldr	r3, [sp, #8]
 8003948:	2b65      	cmp	r3, #101	; 0x65
 800394a:	f77f af0b 	ble.w	8003764 <_svfprintf_r+0x4b4>
 800394e:	9b02      	ldr	r3, [sp, #8]
 8003950:	2b66      	cmp	r3, #102	; 0x66
 8003952:	d124      	bne.n	800399e <_svfprintf_r+0x6ee>
 8003954:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003956:	2b00      	cmp	r3, #0
 8003958:	dd19      	ble.n	800398e <_svfprintf_r+0x6de>
 800395a:	f1b9 0f00 	cmp.w	r9, #0
 800395e:	d101      	bne.n	8003964 <_svfprintf_r+0x6b4>
 8003960:	07ea      	lsls	r2, r5, #31
 8003962:	d502      	bpl.n	800396a <_svfprintf_r+0x6ba>
 8003964:	9a08      	ldr	r2, [sp, #32]
 8003966:	4413      	add	r3, r2
 8003968:	444b      	add	r3, r9
 800396a:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800396c:	4699      	mov	r9, r3
 800396e:	e735      	b.n	80037dc <_svfprintf_r+0x52c>
 8003970:	460a      	mov	r2, r1
 8003972:	e70c      	b.n	800378e <_svfprintf_r+0x4de>
 8003974:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003978:	f803 1b01 	strb.w	r1, [r3], #1
 800397c:	e71c      	b.n	80037b8 <_svfprintf_r+0x508>
 800397e:	2230      	movs	r2, #48	; 0x30
 8003980:	4413      	add	r3, r2
 8003982:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8003986:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800398a:	a91c      	add	r1, sp, #112	; 0x70
 800398c:	e718      	b.n	80037c0 <_svfprintf_r+0x510>
 800398e:	f1b9 0f00 	cmp.w	r9, #0
 8003992:	d101      	bne.n	8003998 <_svfprintf_r+0x6e8>
 8003994:	07eb      	lsls	r3, r5, #31
 8003996:	d515      	bpl.n	80039c4 <_svfprintf_r+0x714>
 8003998:	9b08      	ldr	r3, [sp, #32]
 800399a:	3301      	adds	r3, #1
 800399c:	e7e4      	b.n	8003968 <_svfprintf_r+0x6b8>
 800399e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80039a0:	9b03      	ldr	r3, [sp, #12]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	db06      	blt.n	80039b4 <_svfprintf_r+0x704>
 80039a6:	07ef      	lsls	r7, r5, #31
 80039a8:	d50e      	bpl.n	80039c8 <_svfprintf_r+0x718>
 80039aa:	9b08      	ldr	r3, [sp, #32]
 80039ac:	4413      	add	r3, r2
 80039ae:	2267      	movs	r2, #103	; 0x67
 80039b0:	9202      	str	r2, [sp, #8]
 80039b2:	e7da      	b.n	800396a <_svfprintf_r+0x6ba>
 80039b4:	9b03      	ldr	r3, [sp, #12]
 80039b6:	9908      	ldr	r1, [sp, #32]
 80039b8:	2a00      	cmp	r2, #0
 80039ba:	440b      	add	r3, r1
 80039bc:	dcf7      	bgt.n	80039ae <_svfprintf_r+0x6fe>
 80039be:	f1c2 0201 	rsb	r2, r2, #1
 80039c2:	e7f3      	b.n	80039ac <_svfprintf_r+0x6fc>
 80039c4:	2301      	movs	r3, #1
 80039c6:	e7d0      	b.n	800396a <_svfprintf_r+0x6ba>
 80039c8:	4613      	mov	r3, r2
 80039ca:	e7f0      	b.n	80039ae <_svfprintf_r+0x6fe>
 80039cc:	b10b      	cbz	r3, 80039d2 <_svfprintf_r+0x722>
 80039ce:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80039d2:	f015 0f20 	tst.w	r5, #32
 80039d6:	f107 0304 	add.w	r3, r7, #4
 80039da:	d008      	beq.n	80039ee <_svfprintf_r+0x73e>
 80039dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	17ce      	asrs	r6, r1, #31
 80039e2:	4608      	mov	r0, r1
 80039e4:	4631      	mov	r1, r6
 80039e6:	e9c2 0100 	strd	r0, r1, [r2]
 80039ea:	461f      	mov	r7, r3
 80039ec:	e49a      	b.n	8003324 <_svfprintf_r+0x74>
 80039ee:	06ee      	lsls	r6, r5, #27
 80039f0:	d503      	bpl.n	80039fa <_svfprintf_r+0x74a>
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80039f6:	6011      	str	r1, [r2, #0]
 80039f8:	e7f7      	b.n	80039ea <_svfprintf_r+0x73a>
 80039fa:	0668      	lsls	r0, r5, #25
 80039fc:	d5f9      	bpl.n	80039f2 <_svfprintf_r+0x742>
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8003a04:	8011      	strh	r1, [r2, #0]
 8003a06:	e7f0      	b.n	80039ea <_svfprintf_r+0x73a>
 8003a08:	f045 0510 	orr.w	r5, r5, #16
 8003a0c:	f015 0320 	ands.w	r3, r5, #32
 8003a10:	d022      	beq.n	8003a58 <_svfprintf_r+0x7a8>
 8003a12:	3707      	adds	r7, #7
 8003a14:	f027 0707 	bic.w	r7, r7, #7
 8003a18:	f107 0308 	add.w	r3, r7, #8
 8003a1c:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003a20:	9304      	str	r3, [sp, #16]
 8003a22:	2300      	movs	r3, #0
 8003a24:	2200      	movs	r2, #0
 8003a26:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003a2a:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003a2e:	f000 83db 	beq.w	80041e8 <_svfprintf_r+0xf38>
 8003a32:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 8003a36:	920b      	str	r2, [sp, #44]	; 0x2c
 8003a38:	ea56 0207 	orrs.w	r2, r6, r7
 8003a3c:	f040 83d9 	bne.w	80041f2 <_svfprintf_r+0xf42>
 8003a40:	f1b9 0f00 	cmp.w	r9, #0
 8003a44:	f000 80aa 	beq.w	8003b9c <_svfprintf_r+0x8ec>
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d076      	beq.n	8003b3a <_svfprintf_r+0x88a>
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	f000 8091 	beq.w	8003b74 <_svfprintf_r+0x8c4>
 8003a52:	2600      	movs	r6, #0
 8003a54:	2700      	movs	r7, #0
 8003a56:	e3d2      	b.n	80041fe <_svfprintf_r+0xf4e>
 8003a58:	1d3a      	adds	r2, r7, #4
 8003a5a:	f015 0110 	ands.w	r1, r5, #16
 8003a5e:	9204      	str	r2, [sp, #16]
 8003a60:	d002      	beq.n	8003a68 <_svfprintf_r+0x7b8>
 8003a62:	683e      	ldr	r6, [r7, #0]
 8003a64:	2700      	movs	r7, #0
 8003a66:	e7dd      	b.n	8003a24 <_svfprintf_r+0x774>
 8003a68:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8003a6c:	d0f9      	beq.n	8003a62 <_svfprintf_r+0x7b2>
 8003a6e:	883e      	ldrh	r6, [r7, #0]
 8003a70:	2700      	movs	r7, #0
 8003a72:	e7d6      	b.n	8003a22 <_svfprintf_r+0x772>
 8003a74:	1d3b      	adds	r3, r7, #4
 8003a76:	9304      	str	r3, [sp, #16]
 8003a78:	2330      	movs	r3, #48	; 0x30
 8003a7a:	2278      	movs	r2, #120	; 0x78
 8003a7c:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8003a80:	4b14      	ldr	r3, [pc, #80]	; (8003ad4 <_svfprintf_r+0x824>)
 8003a82:	683e      	ldr	r6, [r7, #0]
 8003a84:	9311      	str	r3, [sp, #68]	; 0x44
 8003a86:	2700      	movs	r7, #0
 8003a88:	f045 0502 	orr.w	r5, r5, #2
 8003a8c:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8003a90:	2302      	movs	r3, #2
 8003a92:	9202      	str	r2, [sp, #8]
 8003a94:	e7c6      	b.n	8003a24 <_svfprintf_r+0x774>
 8003a96:	1d3b      	adds	r3, r7, #4
 8003a98:	2600      	movs	r6, #0
 8003a9a:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003a9e:	9304      	str	r3, [sp, #16]
 8003aa0:	f8d7 8000 	ldr.w	r8, [r7]
 8003aa4:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8003aa8:	d00a      	beq.n	8003ac0 <_svfprintf_r+0x810>
 8003aaa:	464a      	mov	r2, r9
 8003aac:	4631      	mov	r1, r6
 8003aae:	4640      	mov	r0, r8
 8003ab0:	f7fc fb96 	bl	80001e0 <memchr>
 8003ab4:	2800      	cmp	r0, #0
 8003ab6:	f000 808d 	beq.w	8003bd4 <_svfprintf_r+0x924>
 8003aba:	eba0 0908 	sub.w	r9, r0, r8
 8003abe:	e5cb      	b.n	8003658 <_svfprintf_r+0x3a8>
 8003ac0:	4640      	mov	r0, r8
 8003ac2:	f7fc fb85 	bl	80001d0 <strlen>
 8003ac6:	4681      	mov	r9, r0
 8003ac8:	e5c6      	b.n	8003658 <_svfprintf_r+0x3a8>
 8003aca:	bf00      	nop
 8003acc:	080066aa 	.word	0x080066aa
 8003ad0:	080066ba 	.word	0x080066ba
 8003ad4:	08006697 	.word	0x08006697
 8003ad8:	f045 0510 	orr.w	r5, r5, #16
 8003adc:	06a9      	lsls	r1, r5, #26
 8003ade:	d509      	bpl.n	8003af4 <_svfprintf_r+0x844>
 8003ae0:	3707      	adds	r7, #7
 8003ae2:	f027 0707 	bic.w	r7, r7, #7
 8003ae6:	f107 0308 	add.w	r3, r7, #8
 8003aea:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003aee:	9304      	str	r3, [sp, #16]
 8003af0:	2301      	movs	r3, #1
 8003af2:	e797      	b.n	8003a24 <_svfprintf_r+0x774>
 8003af4:	1d3b      	adds	r3, r7, #4
 8003af6:	f015 0f10 	tst.w	r5, #16
 8003afa:	9304      	str	r3, [sp, #16]
 8003afc:	d001      	beq.n	8003b02 <_svfprintf_r+0x852>
 8003afe:	683e      	ldr	r6, [r7, #0]
 8003b00:	e002      	b.n	8003b08 <_svfprintf_r+0x858>
 8003b02:	066a      	lsls	r2, r5, #25
 8003b04:	d5fb      	bpl.n	8003afe <_svfprintf_r+0x84e>
 8003b06:	883e      	ldrh	r6, [r7, #0]
 8003b08:	2700      	movs	r7, #0
 8003b0a:	e7f1      	b.n	8003af0 <_svfprintf_r+0x840>
 8003b0c:	b10b      	cbz	r3, 8003b12 <_svfprintf_r+0x862>
 8003b0e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003b12:	4ba3      	ldr	r3, [pc, #652]	; (8003da0 <_svfprintf_r+0xaf0>)
 8003b14:	e4c2      	b.n	800349c <_svfprintf_r+0x1ec>
 8003b16:	1d3b      	adds	r3, r7, #4
 8003b18:	f015 0f10 	tst.w	r5, #16
 8003b1c:	9304      	str	r3, [sp, #16]
 8003b1e:	d001      	beq.n	8003b24 <_svfprintf_r+0x874>
 8003b20:	683e      	ldr	r6, [r7, #0]
 8003b22:	e002      	b.n	8003b2a <_svfprintf_r+0x87a>
 8003b24:	066e      	lsls	r6, r5, #25
 8003b26:	d5fb      	bpl.n	8003b20 <_svfprintf_r+0x870>
 8003b28:	883e      	ldrh	r6, [r7, #0]
 8003b2a:	2700      	movs	r7, #0
 8003b2c:	e4c2      	b.n	80034b4 <_svfprintf_r+0x204>
 8003b2e:	4643      	mov	r3, r8
 8003b30:	e366      	b.n	8004200 <_svfprintf_r+0xf50>
 8003b32:	2f00      	cmp	r7, #0
 8003b34:	bf08      	it	eq
 8003b36:	2e0a      	cmpeq	r6, #10
 8003b38:	d205      	bcs.n	8003b46 <_svfprintf_r+0x896>
 8003b3a:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8003b3e:	3630      	adds	r6, #48	; 0x30
 8003b40:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8003b44:	e377      	b.n	8004236 <_svfprintf_r+0xf86>
 8003b46:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8003b4a:	4630      	mov	r0, r6
 8003b4c:	4639      	mov	r1, r7
 8003b4e:	220a      	movs	r2, #10
 8003b50:	2300      	movs	r3, #0
 8003b52:	f7fd f875 	bl	8000c40 <__aeabi_uldivmod>
 8003b56:	3230      	adds	r2, #48	; 0x30
 8003b58:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	4630      	mov	r0, r6
 8003b60:	4639      	mov	r1, r7
 8003b62:	220a      	movs	r2, #10
 8003b64:	f7fd f86c 	bl	8000c40 <__aeabi_uldivmod>
 8003b68:	4606      	mov	r6, r0
 8003b6a:	460f      	mov	r7, r1
 8003b6c:	ea56 0307 	orrs.w	r3, r6, r7
 8003b70:	d1eb      	bne.n	8003b4a <_svfprintf_r+0x89a>
 8003b72:	e360      	b.n	8004236 <_svfprintf_r+0xf86>
 8003b74:	2600      	movs	r6, #0
 8003b76:	2700      	movs	r7, #0
 8003b78:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8003b7c:	f006 030f 	and.w	r3, r6, #15
 8003b80:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003b82:	5cd3      	ldrb	r3, [r2, r3]
 8003b84:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8003b88:	0933      	lsrs	r3, r6, #4
 8003b8a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8003b8e:	093a      	lsrs	r2, r7, #4
 8003b90:	461e      	mov	r6, r3
 8003b92:	4617      	mov	r7, r2
 8003b94:	ea56 0307 	orrs.w	r3, r6, r7
 8003b98:	d1f0      	bne.n	8003b7c <_svfprintf_r+0x8cc>
 8003b9a:	e34c      	b.n	8004236 <_svfprintf_r+0xf86>
 8003b9c:	b93b      	cbnz	r3, 8003bae <_svfprintf_r+0x8fe>
 8003b9e:	07ea      	lsls	r2, r5, #31
 8003ba0:	d505      	bpl.n	8003bae <_svfprintf_r+0x8fe>
 8003ba2:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8003ba6:	2330      	movs	r3, #48	; 0x30
 8003ba8:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8003bac:	e343      	b.n	8004236 <_svfprintf_r+0xf86>
 8003bae:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8003bb2:	e340      	b.n	8004236 <_svfprintf_r+0xf86>
 8003bb4:	b10b      	cbz	r3, 8003bba <_svfprintf_r+0x90a>
 8003bb6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003bba:	9b02      	ldr	r3, [sp, #8]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 82f7 	beq.w	80041b0 <_svfprintf_r+0xf00>
 8003bc2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003bc6:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8003bca:	2600      	movs	r6, #0
 8003bcc:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8003bd0:	9704      	str	r7, [sp, #16]
 8003bd2:	e4e8      	b.n	80035a6 <_svfprintf_r+0x2f6>
 8003bd4:	4606      	mov	r6, r0
 8003bd6:	e53f      	b.n	8003658 <_svfprintf_r+0x3a8>
 8003bd8:	2310      	movs	r3, #16
 8003bda:	6063      	str	r3, [r4, #4]
 8003bdc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003bde:	3310      	adds	r3, #16
 8003be0:	9321      	str	r3, [sp, #132]	; 0x84
 8003be2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003be4:	3301      	adds	r3, #1
 8003be6:	2b07      	cmp	r3, #7
 8003be8:	9320      	str	r3, [sp, #128]	; 0x80
 8003bea:	dc04      	bgt.n	8003bf6 <_svfprintf_r+0x946>
 8003bec:	3408      	adds	r4, #8
 8003bee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003bf0:	3b10      	subs	r3, #16
 8003bf2:	930c      	str	r3, [sp, #48]	; 0x30
 8003bf4:	e615      	b.n	8003822 <_svfprintf_r+0x572>
 8003bf6:	aa1f      	add	r2, sp, #124	; 0x7c
 8003bf8:	4651      	mov	r1, sl
 8003bfa:	4658      	mov	r0, fp
 8003bfc:	f001 fea2 	bl	8005944 <__ssprint_r>
 8003c00:	2800      	cmp	r0, #0
 8003c02:	f040 82b6 	bne.w	8004172 <_svfprintf_r+0xec2>
 8003c06:	ac2c      	add	r4, sp, #176	; 0xb0
 8003c08:	e7f1      	b.n	8003bee <_svfprintf_r+0x93e>
 8003c0a:	aa1f      	add	r2, sp, #124	; 0x7c
 8003c0c:	4651      	mov	r1, sl
 8003c0e:	4658      	mov	r0, fp
 8003c10:	f001 fe98 	bl	8005944 <__ssprint_r>
 8003c14:	2800      	cmp	r0, #0
 8003c16:	f040 82ac 	bne.w	8004172 <_svfprintf_r+0xec2>
 8003c1a:	ac2c      	add	r4, sp, #176	; 0xb0
 8003c1c:	e614      	b.n	8003848 <_svfprintf_r+0x598>
 8003c1e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003c20:	4651      	mov	r1, sl
 8003c22:	4658      	mov	r0, fp
 8003c24:	f001 fe8e 	bl	8005944 <__ssprint_r>
 8003c28:	2800      	cmp	r0, #0
 8003c2a:	f040 82a2 	bne.w	8004172 <_svfprintf_r+0xec2>
 8003c2e:	ac2c      	add	r4, sp, #176	; 0xb0
 8003c30:	e61c      	b.n	800386c <_svfprintf_r+0x5bc>
 8003c32:	aa1f      	add	r2, sp, #124	; 0x7c
 8003c34:	4651      	mov	r1, sl
 8003c36:	4658      	mov	r0, fp
 8003c38:	f001 fe84 	bl	8005944 <__ssprint_r>
 8003c3c:	2800      	cmp	r0, #0
 8003c3e:	f040 8298 	bne.w	8004172 <_svfprintf_r+0xec2>
 8003c42:	ac2c      	add	r4, sp, #176	; 0xb0
 8003c44:	e622      	b.n	800388c <_svfprintf_r+0x5dc>
 8003c46:	2210      	movs	r2, #16
 8003c48:	6062      	str	r2, [r4, #4]
 8003c4a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003c4c:	3210      	adds	r2, #16
 8003c4e:	9221      	str	r2, [sp, #132]	; 0x84
 8003c50:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003c52:	3201      	adds	r2, #1
 8003c54:	2a07      	cmp	r2, #7
 8003c56:	9220      	str	r2, [sp, #128]	; 0x80
 8003c58:	dc02      	bgt.n	8003c60 <_svfprintf_r+0x9b0>
 8003c5a:	3408      	adds	r4, #8
 8003c5c:	3b10      	subs	r3, #16
 8003c5e:	e61d      	b.n	800389c <_svfprintf_r+0x5ec>
 8003c60:	aa1f      	add	r2, sp, #124	; 0x7c
 8003c62:	4651      	mov	r1, sl
 8003c64:	4658      	mov	r0, fp
 8003c66:	930c      	str	r3, [sp, #48]	; 0x30
 8003c68:	f001 fe6c 	bl	8005944 <__ssprint_r>
 8003c6c:	2800      	cmp	r0, #0
 8003c6e:	f040 8280 	bne.w	8004172 <_svfprintf_r+0xec2>
 8003c72:	ac2c      	add	r4, sp, #176	; 0xb0
 8003c74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003c76:	e7f1      	b.n	8003c5c <_svfprintf_r+0x9ac>
 8003c78:	aa1f      	add	r2, sp, #124	; 0x7c
 8003c7a:	4651      	mov	r1, sl
 8003c7c:	4658      	mov	r0, fp
 8003c7e:	f001 fe61 	bl	8005944 <__ssprint_r>
 8003c82:	2800      	cmp	r0, #0
 8003c84:	f040 8275 	bne.w	8004172 <_svfprintf_r+0xec2>
 8003c88:	ac2c      	add	r4, sp, #176	; 0xb0
 8003c8a:	e617      	b.n	80038bc <_svfprintf_r+0x60c>
 8003c8c:	2310      	movs	r3, #16
 8003c8e:	6063      	str	r3, [r4, #4]
 8003c90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003c92:	3310      	adds	r3, #16
 8003c94:	9321      	str	r3, [sp, #132]	; 0x84
 8003c96:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003c98:	3301      	adds	r3, #1
 8003c9a:	2b07      	cmp	r3, #7
 8003c9c:	9320      	str	r3, [sp, #128]	; 0x80
 8003c9e:	dc02      	bgt.n	8003ca6 <_svfprintf_r+0x9f6>
 8003ca0:	3408      	adds	r4, #8
 8003ca2:	3e10      	subs	r6, #16
 8003ca4:	e60e      	b.n	80038c4 <_svfprintf_r+0x614>
 8003ca6:	aa1f      	add	r2, sp, #124	; 0x7c
 8003ca8:	4651      	mov	r1, sl
 8003caa:	4658      	mov	r0, fp
 8003cac:	f001 fe4a 	bl	8005944 <__ssprint_r>
 8003cb0:	2800      	cmp	r0, #0
 8003cb2:	f040 825e 	bne.w	8004172 <_svfprintf_r+0xec2>
 8003cb6:	ac2c      	add	r4, sp, #176	; 0xb0
 8003cb8:	e7f3      	b.n	8003ca2 <_svfprintf_r+0x9f2>
 8003cba:	aa1f      	add	r2, sp, #124	; 0x7c
 8003cbc:	4651      	mov	r1, sl
 8003cbe:	4658      	mov	r0, fp
 8003cc0:	f001 fe40 	bl	8005944 <__ssprint_r>
 8003cc4:	2800      	cmp	r0, #0
 8003cc6:	f040 8254 	bne.w	8004172 <_svfprintf_r+0xec2>
 8003cca:	ac2c      	add	r4, sp, #176	; 0xb0
 8003ccc:	e60a      	b.n	80038e4 <_svfprintf_r+0x634>
 8003cce:	9b02      	ldr	r3, [sp, #8]
 8003cd0:	2b65      	cmp	r3, #101	; 0x65
 8003cd2:	f340 81a9 	ble.w	8004028 <_svfprintf_r+0xd78>
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	2300      	movs	r3, #0
 8003cda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003cde:	f7fc feef 	bl	8000ac0 <__aeabi_dcmpeq>
 8003ce2:	2800      	cmp	r0, #0
 8003ce4:	d062      	beq.n	8003dac <_svfprintf_r+0xafc>
 8003ce6:	4b2f      	ldr	r3, [pc, #188]	; (8003da4 <_svfprintf_r+0xaf4>)
 8003ce8:	6023      	str	r3, [r4, #0]
 8003cea:	2301      	movs	r3, #1
 8003cec:	6063      	str	r3, [r4, #4]
 8003cee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	9321      	str	r3, [sp, #132]	; 0x84
 8003cf4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	2b07      	cmp	r3, #7
 8003cfa:	9320      	str	r3, [sp, #128]	; 0x80
 8003cfc:	dc25      	bgt.n	8003d4a <_svfprintf_r+0xa9a>
 8003cfe:	3408      	adds	r4, #8
 8003d00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003d02:	9a03      	ldr	r2, [sp, #12]
 8003d04:	4293      	cmp	r3, r2
 8003d06:	db02      	blt.n	8003d0e <_svfprintf_r+0xa5e>
 8003d08:	07ee      	lsls	r6, r5, #31
 8003d0a:	f57f ae02 	bpl.w	8003912 <_svfprintf_r+0x662>
 8003d0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d10:	6023      	str	r3, [r4, #0]
 8003d12:	9b08      	ldr	r3, [sp, #32]
 8003d14:	6063      	str	r3, [r4, #4]
 8003d16:	9a08      	ldr	r2, [sp, #32]
 8003d18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d1a:	4413      	add	r3, r2
 8003d1c:	9321      	str	r3, [sp, #132]	; 0x84
 8003d1e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003d20:	3301      	adds	r3, #1
 8003d22:	2b07      	cmp	r3, #7
 8003d24:	9320      	str	r3, [sp, #128]	; 0x80
 8003d26:	dc1a      	bgt.n	8003d5e <_svfprintf_r+0xaae>
 8003d28:	3408      	adds	r4, #8
 8003d2a:	9b03      	ldr	r3, [sp, #12]
 8003d2c:	1e5e      	subs	r6, r3, #1
 8003d2e:	2e00      	cmp	r6, #0
 8003d30:	f77f adef 	ble.w	8003912 <_svfprintf_r+0x662>
 8003d34:	4f1c      	ldr	r7, [pc, #112]	; (8003da8 <_svfprintf_r+0xaf8>)
 8003d36:	f04f 0810 	mov.w	r8, #16
 8003d3a:	2e10      	cmp	r6, #16
 8003d3c:	6027      	str	r7, [r4, #0]
 8003d3e:	dc18      	bgt.n	8003d72 <_svfprintf_r+0xac2>
 8003d40:	6066      	str	r6, [r4, #4]
 8003d42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d44:	441e      	add	r6, r3
 8003d46:	9621      	str	r6, [sp, #132]	; 0x84
 8003d48:	e5d4      	b.n	80038f4 <_svfprintf_r+0x644>
 8003d4a:	aa1f      	add	r2, sp, #124	; 0x7c
 8003d4c:	4651      	mov	r1, sl
 8003d4e:	4658      	mov	r0, fp
 8003d50:	f001 fdf8 	bl	8005944 <__ssprint_r>
 8003d54:	2800      	cmp	r0, #0
 8003d56:	f040 820c 	bne.w	8004172 <_svfprintf_r+0xec2>
 8003d5a:	ac2c      	add	r4, sp, #176	; 0xb0
 8003d5c:	e7d0      	b.n	8003d00 <_svfprintf_r+0xa50>
 8003d5e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003d60:	4651      	mov	r1, sl
 8003d62:	4658      	mov	r0, fp
 8003d64:	f001 fdee 	bl	8005944 <__ssprint_r>
 8003d68:	2800      	cmp	r0, #0
 8003d6a:	f040 8202 	bne.w	8004172 <_svfprintf_r+0xec2>
 8003d6e:	ac2c      	add	r4, sp, #176	; 0xb0
 8003d70:	e7db      	b.n	8003d2a <_svfprintf_r+0xa7a>
 8003d72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d74:	f8c4 8004 	str.w	r8, [r4, #4]
 8003d78:	3310      	adds	r3, #16
 8003d7a:	9321      	str	r3, [sp, #132]	; 0x84
 8003d7c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003d7e:	3301      	adds	r3, #1
 8003d80:	2b07      	cmp	r3, #7
 8003d82:	9320      	str	r3, [sp, #128]	; 0x80
 8003d84:	dc02      	bgt.n	8003d8c <_svfprintf_r+0xadc>
 8003d86:	3408      	adds	r4, #8
 8003d88:	3e10      	subs	r6, #16
 8003d8a:	e7d6      	b.n	8003d3a <_svfprintf_r+0xa8a>
 8003d8c:	aa1f      	add	r2, sp, #124	; 0x7c
 8003d8e:	4651      	mov	r1, sl
 8003d90:	4658      	mov	r0, fp
 8003d92:	f001 fdd7 	bl	8005944 <__ssprint_r>
 8003d96:	2800      	cmp	r0, #0
 8003d98:	f040 81eb 	bne.w	8004172 <_svfprintf_r+0xec2>
 8003d9c:	ac2c      	add	r4, sp, #176	; 0xb0
 8003d9e:	e7f3      	b.n	8003d88 <_svfprintf_r+0xad8>
 8003da0:	08006697 	.word	0x08006697
 8003da4:	080066a8 	.word	0x080066a8
 8003da8:	080066ba 	.word	0x080066ba
 8003dac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	dc7a      	bgt.n	8003ea8 <_svfprintf_r+0xbf8>
 8003db2:	4b9b      	ldr	r3, [pc, #620]	; (8004020 <_svfprintf_r+0xd70>)
 8003db4:	6023      	str	r3, [r4, #0]
 8003db6:	2301      	movs	r3, #1
 8003db8:	6063      	str	r3, [r4, #4]
 8003dba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	9321      	str	r3, [sp, #132]	; 0x84
 8003dc0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	2b07      	cmp	r3, #7
 8003dc6:	9320      	str	r3, [sp, #128]	; 0x80
 8003dc8:	dc44      	bgt.n	8003e54 <_svfprintf_r+0xba4>
 8003dca:	3408      	adds	r4, #8
 8003dcc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003dce:	b923      	cbnz	r3, 8003dda <_svfprintf_r+0xb2a>
 8003dd0:	9b03      	ldr	r3, [sp, #12]
 8003dd2:	b913      	cbnz	r3, 8003dda <_svfprintf_r+0xb2a>
 8003dd4:	07e8      	lsls	r0, r5, #31
 8003dd6:	f57f ad9c 	bpl.w	8003912 <_svfprintf_r+0x662>
 8003dda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ddc:	6023      	str	r3, [r4, #0]
 8003dde:	9b08      	ldr	r3, [sp, #32]
 8003de0:	6063      	str	r3, [r4, #4]
 8003de2:	9a08      	ldr	r2, [sp, #32]
 8003de4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003de6:	4413      	add	r3, r2
 8003de8:	9321      	str	r3, [sp, #132]	; 0x84
 8003dea:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003dec:	3301      	adds	r3, #1
 8003dee:	2b07      	cmp	r3, #7
 8003df0:	9320      	str	r3, [sp, #128]	; 0x80
 8003df2:	dc39      	bgt.n	8003e68 <_svfprintf_r+0xbb8>
 8003df4:	f104 0308 	add.w	r3, r4, #8
 8003df8:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8003dfa:	2e00      	cmp	r6, #0
 8003dfc:	da19      	bge.n	8003e32 <_svfprintf_r+0xb82>
 8003dfe:	4f89      	ldr	r7, [pc, #548]	; (8004024 <_svfprintf_r+0xd74>)
 8003e00:	4276      	negs	r6, r6
 8003e02:	2410      	movs	r4, #16
 8003e04:	2e10      	cmp	r6, #16
 8003e06:	601f      	str	r7, [r3, #0]
 8003e08:	dc38      	bgt.n	8003e7c <_svfprintf_r+0xbcc>
 8003e0a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003e0c:	605e      	str	r6, [r3, #4]
 8003e0e:	4416      	add	r6, r2
 8003e10:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003e12:	9621      	str	r6, [sp, #132]	; 0x84
 8003e14:	3201      	adds	r2, #1
 8003e16:	2a07      	cmp	r2, #7
 8003e18:	f103 0308 	add.w	r3, r3, #8
 8003e1c:	9220      	str	r2, [sp, #128]	; 0x80
 8003e1e:	dd08      	ble.n	8003e32 <_svfprintf_r+0xb82>
 8003e20:	aa1f      	add	r2, sp, #124	; 0x7c
 8003e22:	4651      	mov	r1, sl
 8003e24:	4658      	mov	r0, fp
 8003e26:	f001 fd8d 	bl	8005944 <__ssprint_r>
 8003e2a:	2800      	cmp	r0, #0
 8003e2c:	f040 81a1 	bne.w	8004172 <_svfprintf_r+0xec2>
 8003e30:	ab2c      	add	r3, sp, #176	; 0xb0
 8003e32:	9a03      	ldr	r2, [sp, #12]
 8003e34:	605a      	str	r2, [r3, #4]
 8003e36:	9903      	ldr	r1, [sp, #12]
 8003e38:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003e3a:	f8c3 8000 	str.w	r8, [r3]
 8003e3e:	440a      	add	r2, r1
 8003e40:	9221      	str	r2, [sp, #132]	; 0x84
 8003e42:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003e44:	3201      	adds	r2, #1
 8003e46:	2a07      	cmp	r2, #7
 8003e48:	9220      	str	r2, [sp, #128]	; 0x80
 8003e4a:	f73f ad59 	bgt.w	8003900 <_svfprintf_r+0x650>
 8003e4e:	f103 0408 	add.w	r4, r3, #8
 8003e52:	e55e      	b.n	8003912 <_svfprintf_r+0x662>
 8003e54:	aa1f      	add	r2, sp, #124	; 0x7c
 8003e56:	4651      	mov	r1, sl
 8003e58:	4658      	mov	r0, fp
 8003e5a:	f001 fd73 	bl	8005944 <__ssprint_r>
 8003e5e:	2800      	cmp	r0, #0
 8003e60:	f040 8187 	bne.w	8004172 <_svfprintf_r+0xec2>
 8003e64:	ac2c      	add	r4, sp, #176	; 0xb0
 8003e66:	e7b1      	b.n	8003dcc <_svfprintf_r+0xb1c>
 8003e68:	aa1f      	add	r2, sp, #124	; 0x7c
 8003e6a:	4651      	mov	r1, sl
 8003e6c:	4658      	mov	r0, fp
 8003e6e:	f001 fd69 	bl	8005944 <__ssprint_r>
 8003e72:	2800      	cmp	r0, #0
 8003e74:	f040 817d 	bne.w	8004172 <_svfprintf_r+0xec2>
 8003e78:	ab2c      	add	r3, sp, #176	; 0xb0
 8003e7a:	e7bd      	b.n	8003df8 <_svfprintf_r+0xb48>
 8003e7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003e7e:	605c      	str	r4, [r3, #4]
 8003e80:	3210      	adds	r2, #16
 8003e82:	9221      	str	r2, [sp, #132]	; 0x84
 8003e84:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003e86:	3201      	adds	r2, #1
 8003e88:	2a07      	cmp	r2, #7
 8003e8a:	9220      	str	r2, [sp, #128]	; 0x80
 8003e8c:	dc02      	bgt.n	8003e94 <_svfprintf_r+0xbe4>
 8003e8e:	3308      	adds	r3, #8
 8003e90:	3e10      	subs	r6, #16
 8003e92:	e7b7      	b.n	8003e04 <_svfprintf_r+0xb54>
 8003e94:	aa1f      	add	r2, sp, #124	; 0x7c
 8003e96:	4651      	mov	r1, sl
 8003e98:	4658      	mov	r0, fp
 8003e9a:	f001 fd53 	bl	8005944 <__ssprint_r>
 8003e9e:	2800      	cmp	r0, #0
 8003ea0:	f040 8167 	bne.w	8004172 <_svfprintf_r+0xec2>
 8003ea4:	ab2c      	add	r3, sp, #176	; 0xb0
 8003ea6:	e7f3      	b.n	8003e90 <_svfprintf_r+0xbe0>
 8003ea8:	9b03      	ldr	r3, [sp, #12]
 8003eaa:	42bb      	cmp	r3, r7
 8003eac:	bfa8      	it	ge
 8003eae:	463b      	movge	r3, r7
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	461e      	mov	r6, r3
 8003eb4:	dd0b      	ble.n	8003ece <_svfprintf_r+0xc1e>
 8003eb6:	6063      	str	r3, [r4, #4]
 8003eb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003eba:	f8c4 8000 	str.w	r8, [r4]
 8003ebe:	4433      	add	r3, r6
 8003ec0:	9321      	str	r3, [sp, #132]	; 0x84
 8003ec2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	2b07      	cmp	r3, #7
 8003ec8:	9320      	str	r3, [sp, #128]	; 0x80
 8003eca:	dc5f      	bgt.n	8003f8c <_svfprintf_r+0xcdc>
 8003ecc:	3408      	adds	r4, #8
 8003ece:	2e00      	cmp	r6, #0
 8003ed0:	bfac      	ite	ge
 8003ed2:	1bbe      	subge	r6, r7, r6
 8003ed4:	463e      	movlt	r6, r7
 8003ed6:	2e00      	cmp	r6, #0
 8003ed8:	dd0f      	ble.n	8003efa <_svfprintf_r+0xc4a>
 8003eda:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8004024 <_svfprintf_r+0xd74>
 8003ede:	f8c4 9000 	str.w	r9, [r4]
 8003ee2:	2e10      	cmp	r6, #16
 8003ee4:	dc5c      	bgt.n	8003fa0 <_svfprintf_r+0xcf0>
 8003ee6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003ee8:	6066      	str	r6, [r4, #4]
 8003eea:	441e      	add	r6, r3
 8003eec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003eee:	9621      	str	r6, [sp, #132]	; 0x84
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	2b07      	cmp	r3, #7
 8003ef4:	9320      	str	r3, [sp, #128]	; 0x80
 8003ef6:	dc6a      	bgt.n	8003fce <_svfprintf_r+0xd1e>
 8003ef8:	3408      	adds	r4, #8
 8003efa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003efc:	9a03      	ldr	r2, [sp, #12]
 8003efe:	4293      	cmp	r3, r2
 8003f00:	db01      	blt.n	8003f06 <_svfprintf_r+0xc56>
 8003f02:	07e9      	lsls	r1, r5, #31
 8003f04:	d50d      	bpl.n	8003f22 <_svfprintf_r+0xc72>
 8003f06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f08:	6023      	str	r3, [r4, #0]
 8003f0a:	9b08      	ldr	r3, [sp, #32]
 8003f0c:	6063      	str	r3, [r4, #4]
 8003f0e:	9a08      	ldr	r2, [sp, #32]
 8003f10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f12:	4413      	add	r3, r2
 8003f14:	9321      	str	r3, [sp, #132]	; 0x84
 8003f16:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003f18:	3301      	adds	r3, #1
 8003f1a:	2b07      	cmp	r3, #7
 8003f1c:	9320      	str	r3, [sp, #128]	; 0x80
 8003f1e:	dc60      	bgt.n	8003fe2 <_svfprintf_r+0xd32>
 8003f20:	3408      	adds	r4, #8
 8003f22:	9b03      	ldr	r3, [sp, #12]
 8003f24:	9a03      	ldr	r2, [sp, #12]
 8003f26:	1bde      	subs	r6, r3, r7
 8003f28:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	429e      	cmp	r6, r3
 8003f2e:	bfa8      	it	ge
 8003f30:	461e      	movge	r6, r3
 8003f32:	2e00      	cmp	r6, #0
 8003f34:	dd0b      	ble.n	8003f4e <_svfprintf_r+0xc9e>
 8003f36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f38:	6066      	str	r6, [r4, #4]
 8003f3a:	4433      	add	r3, r6
 8003f3c:	9321      	str	r3, [sp, #132]	; 0x84
 8003f3e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003f40:	3301      	adds	r3, #1
 8003f42:	4447      	add	r7, r8
 8003f44:	2b07      	cmp	r3, #7
 8003f46:	6027      	str	r7, [r4, #0]
 8003f48:	9320      	str	r3, [sp, #128]	; 0x80
 8003f4a:	dc54      	bgt.n	8003ff6 <_svfprintf_r+0xd46>
 8003f4c:	3408      	adds	r4, #8
 8003f4e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003f50:	9a03      	ldr	r2, [sp, #12]
 8003f52:	2e00      	cmp	r6, #0
 8003f54:	eba2 0303 	sub.w	r3, r2, r3
 8003f58:	bfac      	ite	ge
 8003f5a:	1b9e      	subge	r6, r3, r6
 8003f5c:	461e      	movlt	r6, r3
 8003f5e:	2e00      	cmp	r6, #0
 8003f60:	f77f acd7 	ble.w	8003912 <_svfprintf_r+0x662>
 8003f64:	4f2f      	ldr	r7, [pc, #188]	; (8004024 <_svfprintf_r+0xd74>)
 8003f66:	f04f 0810 	mov.w	r8, #16
 8003f6a:	2e10      	cmp	r6, #16
 8003f6c:	6027      	str	r7, [r4, #0]
 8003f6e:	f77f aee7 	ble.w	8003d40 <_svfprintf_r+0xa90>
 8003f72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f74:	f8c4 8004 	str.w	r8, [r4, #4]
 8003f78:	3310      	adds	r3, #16
 8003f7a:	9321      	str	r3, [sp, #132]	; 0x84
 8003f7c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003f7e:	3301      	adds	r3, #1
 8003f80:	2b07      	cmp	r3, #7
 8003f82:	9320      	str	r3, [sp, #128]	; 0x80
 8003f84:	dc41      	bgt.n	800400a <_svfprintf_r+0xd5a>
 8003f86:	3408      	adds	r4, #8
 8003f88:	3e10      	subs	r6, #16
 8003f8a:	e7ee      	b.n	8003f6a <_svfprintf_r+0xcba>
 8003f8c:	aa1f      	add	r2, sp, #124	; 0x7c
 8003f8e:	4651      	mov	r1, sl
 8003f90:	4658      	mov	r0, fp
 8003f92:	f001 fcd7 	bl	8005944 <__ssprint_r>
 8003f96:	2800      	cmp	r0, #0
 8003f98:	f040 80eb 	bne.w	8004172 <_svfprintf_r+0xec2>
 8003f9c:	ac2c      	add	r4, sp, #176	; 0xb0
 8003f9e:	e796      	b.n	8003ece <_svfprintf_r+0xc1e>
 8003fa0:	2310      	movs	r3, #16
 8003fa2:	6063      	str	r3, [r4, #4]
 8003fa4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003fa6:	3310      	adds	r3, #16
 8003fa8:	9321      	str	r3, [sp, #132]	; 0x84
 8003faa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003fac:	3301      	adds	r3, #1
 8003fae:	2b07      	cmp	r3, #7
 8003fb0:	9320      	str	r3, [sp, #128]	; 0x80
 8003fb2:	dc02      	bgt.n	8003fba <_svfprintf_r+0xd0a>
 8003fb4:	3408      	adds	r4, #8
 8003fb6:	3e10      	subs	r6, #16
 8003fb8:	e791      	b.n	8003ede <_svfprintf_r+0xc2e>
 8003fba:	aa1f      	add	r2, sp, #124	; 0x7c
 8003fbc:	4651      	mov	r1, sl
 8003fbe:	4658      	mov	r0, fp
 8003fc0:	f001 fcc0 	bl	8005944 <__ssprint_r>
 8003fc4:	2800      	cmp	r0, #0
 8003fc6:	f040 80d4 	bne.w	8004172 <_svfprintf_r+0xec2>
 8003fca:	ac2c      	add	r4, sp, #176	; 0xb0
 8003fcc:	e7f3      	b.n	8003fb6 <_svfprintf_r+0xd06>
 8003fce:	aa1f      	add	r2, sp, #124	; 0x7c
 8003fd0:	4651      	mov	r1, sl
 8003fd2:	4658      	mov	r0, fp
 8003fd4:	f001 fcb6 	bl	8005944 <__ssprint_r>
 8003fd8:	2800      	cmp	r0, #0
 8003fda:	f040 80ca 	bne.w	8004172 <_svfprintf_r+0xec2>
 8003fde:	ac2c      	add	r4, sp, #176	; 0xb0
 8003fe0:	e78b      	b.n	8003efa <_svfprintf_r+0xc4a>
 8003fe2:	aa1f      	add	r2, sp, #124	; 0x7c
 8003fe4:	4651      	mov	r1, sl
 8003fe6:	4658      	mov	r0, fp
 8003fe8:	f001 fcac 	bl	8005944 <__ssprint_r>
 8003fec:	2800      	cmp	r0, #0
 8003fee:	f040 80c0 	bne.w	8004172 <_svfprintf_r+0xec2>
 8003ff2:	ac2c      	add	r4, sp, #176	; 0xb0
 8003ff4:	e795      	b.n	8003f22 <_svfprintf_r+0xc72>
 8003ff6:	aa1f      	add	r2, sp, #124	; 0x7c
 8003ff8:	4651      	mov	r1, sl
 8003ffa:	4658      	mov	r0, fp
 8003ffc:	f001 fca2 	bl	8005944 <__ssprint_r>
 8004000:	2800      	cmp	r0, #0
 8004002:	f040 80b6 	bne.w	8004172 <_svfprintf_r+0xec2>
 8004006:	ac2c      	add	r4, sp, #176	; 0xb0
 8004008:	e7a1      	b.n	8003f4e <_svfprintf_r+0xc9e>
 800400a:	aa1f      	add	r2, sp, #124	; 0x7c
 800400c:	4651      	mov	r1, sl
 800400e:	4658      	mov	r0, fp
 8004010:	f001 fc98 	bl	8005944 <__ssprint_r>
 8004014:	2800      	cmp	r0, #0
 8004016:	f040 80ac 	bne.w	8004172 <_svfprintf_r+0xec2>
 800401a:	ac2c      	add	r4, sp, #176	; 0xb0
 800401c:	e7b4      	b.n	8003f88 <_svfprintf_r+0xcd8>
 800401e:	bf00      	nop
 8004020:	080066a8 	.word	0x080066a8
 8004024:	080066ba 	.word	0x080066ba
 8004028:	9b03      	ldr	r3, [sp, #12]
 800402a:	2b01      	cmp	r3, #1
 800402c:	dc01      	bgt.n	8004032 <_svfprintf_r+0xd82>
 800402e:	07ea      	lsls	r2, r5, #31
 8004030:	d576      	bpl.n	8004120 <_svfprintf_r+0xe70>
 8004032:	2301      	movs	r3, #1
 8004034:	6063      	str	r3, [r4, #4]
 8004036:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004038:	f8c4 8000 	str.w	r8, [r4]
 800403c:	3301      	adds	r3, #1
 800403e:	9321      	str	r3, [sp, #132]	; 0x84
 8004040:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004042:	3301      	adds	r3, #1
 8004044:	2b07      	cmp	r3, #7
 8004046:	9320      	str	r3, [sp, #128]	; 0x80
 8004048:	dc36      	bgt.n	80040b8 <_svfprintf_r+0xe08>
 800404a:	3408      	adds	r4, #8
 800404c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800404e:	6023      	str	r3, [r4, #0]
 8004050:	9b08      	ldr	r3, [sp, #32]
 8004052:	6063      	str	r3, [r4, #4]
 8004054:	9a08      	ldr	r2, [sp, #32]
 8004056:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004058:	4413      	add	r3, r2
 800405a:	9321      	str	r3, [sp, #132]	; 0x84
 800405c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800405e:	3301      	adds	r3, #1
 8004060:	2b07      	cmp	r3, #7
 8004062:	9320      	str	r3, [sp, #128]	; 0x80
 8004064:	dc31      	bgt.n	80040ca <_svfprintf_r+0xe1a>
 8004066:	3408      	adds	r4, #8
 8004068:	2300      	movs	r3, #0
 800406a:	2200      	movs	r2, #0
 800406c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004070:	f7fc fd26 	bl	8000ac0 <__aeabi_dcmpeq>
 8004074:	9b03      	ldr	r3, [sp, #12]
 8004076:	1e5e      	subs	r6, r3, #1
 8004078:	2800      	cmp	r0, #0
 800407a:	d12f      	bne.n	80040dc <_svfprintf_r+0xe2c>
 800407c:	f108 0301 	add.w	r3, r8, #1
 8004080:	e884 0048 	stmia.w	r4, {r3, r6}
 8004084:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004086:	9a03      	ldr	r2, [sp, #12]
 8004088:	3b01      	subs	r3, #1
 800408a:	4413      	add	r3, r2
 800408c:	9321      	str	r3, [sp, #132]	; 0x84
 800408e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004090:	3301      	adds	r3, #1
 8004092:	2b07      	cmp	r3, #7
 8004094:	9320      	str	r3, [sp, #128]	; 0x80
 8004096:	dd4a      	ble.n	800412e <_svfprintf_r+0xe7e>
 8004098:	aa1f      	add	r2, sp, #124	; 0x7c
 800409a:	4651      	mov	r1, sl
 800409c:	4658      	mov	r0, fp
 800409e:	f001 fc51 	bl	8005944 <__ssprint_r>
 80040a2:	2800      	cmp	r0, #0
 80040a4:	d165      	bne.n	8004172 <_svfprintf_r+0xec2>
 80040a6:	ac2c      	add	r4, sp, #176	; 0xb0
 80040a8:	ab1b      	add	r3, sp, #108	; 0x6c
 80040aa:	6023      	str	r3, [r4, #0]
 80040ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80040ae:	6063      	str	r3, [r4, #4]
 80040b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80040b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80040b4:	4413      	add	r3, r2
 80040b6:	e41c      	b.n	80038f2 <_svfprintf_r+0x642>
 80040b8:	aa1f      	add	r2, sp, #124	; 0x7c
 80040ba:	4651      	mov	r1, sl
 80040bc:	4658      	mov	r0, fp
 80040be:	f001 fc41 	bl	8005944 <__ssprint_r>
 80040c2:	2800      	cmp	r0, #0
 80040c4:	d155      	bne.n	8004172 <_svfprintf_r+0xec2>
 80040c6:	ac2c      	add	r4, sp, #176	; 0xb0
 80040c8:	e7c0      	b.n	800404c <_svfprintf_r+0xd9c>
 80040ca:	aa1f      	add	r2, sp, #124	; 0x7c
 80040cc:	4651      	mov	r1, sl
 80040ce:	4658      	mov	r0, fp
 80040d0:	f001 fc38 	bl	8005944 <__ssprint_r>
 80040d4:	2800      	cmp	r0, #0
 80040d6:	d14c      	bne.n	8004172 <_svfprintf_r+0xec2>
 80040d8:	ac2c      	add	r4, sp, #176	; 0xb0
 80040da:	e7c5      	b.n	8004068 <_svfprintf_r+0xdb8>
 80040dc:	2e00      	cmp	r6, #0
 80040de:	dde3      	ble.n	80040a8 <_svfprintf_r+0xdf8>
 80040e0:	4f59      	ldr	r7, [pc, #356]	; (8004248 <_svfprintf_r+0xf98>)
 80040e2:	f04f 0810 	mov.w	r8, #16
 80040e6:	2e10      	cmp	r6, #16
 80040e8:	6027      	str	r7, [r4, #0]
 80040ea:	dc04      	bgt.n	80040f6 <_svfprintf_r+0xe46>
 80040ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80040ee:	6066      	str	r6, [r4, #4]
 80040f0:	441e      	add	r6, r3
 80040f2:	9621      	str	r6, [sp, #132]	; 0x84
 80040f4:	e7cb      	b.n	800408e <_svfprintf_r+0xdde>
 80040f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80040f8:	f8c4 8004 	str.w	r8, [r4, #4]
 80040fc:	3310      	adds	r3, #16
 80040fe:	9321      	str	r3, [sp, #132]	; 0x84
 8004100:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004102:	3301      	adds	r3, #1
 8004104:	2b07      	cmp	r3, #7
 8004106:	9320      	str	r3, [sp, #128]	; 0x80
 8004108:	dc02      	bgt.n	8004110 <_svfprintf_r+0xe60>
 800410a:	3408      	adds	r4, #8
 800410c:	3e10      	subs	r6, #16
 800410e:	e7ea      	b.n	80040e6 <_svfprintf_r+0xe36>
 8004110:	aa1f      	add	r2, sp, #124	; 0x7c
 8004112:	4651      	mov	r1, sl
 8004114:	4658      	mov	r0, fp
 8004116:	f001 fc15 	bl	8005944 <__ssprint_r>
 800411a:	bb50      	cbnz	r0, 8004172 <_svfprintf_r+0xec2>
 800411c:	ac2c      	add	r4, sp, #176	; 0xb0
 800411e:	e7f5      	b.n	800410c <_svfprintf_r+0xe5c>
 8004120:	2301      	movs	r3, #1
 8004122:	6063      	str	r3, [r4, #4]
 8004124:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004126:	f8c4 8000 	str.w	r8, [r4]
 800412a:	3301      	adds	r3, #1
 800412c:	e7ae      	b.n	800408c <_svfprintf_r+0xddc>
 800412e:	3408      	adds	r4, #8
 8004130:	e7ba      	b.n	80040a8 <_svfprintf_r+0xdf8>
 8004132:	3408      	adds	r4, #8
 8004134:	f7ff bbed 	b.w	8003912 <_svfprintf_r+0x662>
 8004138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800413a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800413c:	1a9d      	subs	r5, r3, r2
 800413e:	2d00      	cmp	r5, #0
 8004140:	f77f abea 	ble.w	8003918 <_svfprintf_r+0x668>
 8004144:	2610      	movs	r6, #16
 8004146:	4b41      	ldr	r3, [pc, #260]	; (800424c <_svfprintf_r+0xf9c>)
 8004148:	6023      	str	r3, [r4, #0]
 800414a:	2d10      	cmp	r5, #16
 800414c:	dc1b      	bgt.n	8004186 <_svfprintf_r+0xed6>
 800414e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004150:	6065      	str	r5, [r4, #4]
 8004152:	441d      	add	r5, r3
 8004154:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004156:	9521      	str	r5, [sp, #132]	; 0x84
 8004158:	3301      	adds	r3, #1
 800415a:	2b07      	cmp	r3, #7
 800415c:	9320      	str	r3, [sp, #128]	; 0x80
 800415e:	f77f abdb 	ble.w	8003918 <_svfprintf_r+0x668>
 8004162:	aa1f      	add	r2, sp, #124	; 0x7c
 8004164:	4651      	mov	r1, sl
 8004166:	4658      	mov	r0, fp
 8004168:	f001 fbec 	bl	8005944 <__ssprint_r>
 800416c:	2800      	cmp	r0, #0
 800416e:	f43f abd3 	beq.w	8003918 <_svfprintf_r+0x668>
 8004172:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8004176:	f013 0f40 	tst.w	r3, #64	; 0x40
 800417a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800417c:	bf18      	it	ne
 800417e:	f04f 33ff 	movne.w	r3, #4294967295
 8004182:	f7ff b8b9 	b.w	80032f8 <_svfprintf_r+0x48>
 8004186:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004188:	6066      	str	r6, [r4, #4]
 800418a:	3310      	adds	r3, #16
 800418c:	9321      	str	r3, [sp, #132]	; 0x84
 800418e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004190:	3301      	adds	r3, #1
 8004192:	2b07      	cmp	r3, #7
 8004194:	9320      	str	r3, [sp, #128]	; 0x80
 8004196:	dc02      	bgt.n	800419e <_svfprintf_r+0xeee>
 8004198:	3408      	adds	r4, #8
 800419a:	3d10      	subs	r5, #16
 800419c:	e7d3      	b.n	8004146 <_svfprintf_r+0xe96>
 800419e:	aa1f      	add	r2, sp, #124	; 0x7c
 80041a0:	4651      	mov	r1, sl
 80041a2:	4658      	mov	r0, fp
 80041a4:	f001 fbce 	bl	8005944 <__ssprint_r>
 80041a8:	2800      	cmp	r0, #0
 80041aa:	d1e2      	bne.n	8004172 <_svfprintf_r+0xec2>
 80041ac:	ac2c      	add	r4, sp, #176	; 0xb0
 80041ae:	e7f4      	b.n	800419a <_svfprintf_r+0xeea>
 80041b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d0dd      	beq.n	8004172 <_svfprintf_r+0xec2>
 80041b6:	aa1f      	add	r2, sp, #124	; 0x7c
 80041b8:	4651      	mov	r1, sl
 80041ba:	4658      	mov	r0, fp
 80041bc:	f001 fbc2 	bl	8005944 <__ssprint_r>
 80041c0:	e7d7      	b.n	8004172 <_svfprintf_r+0xec2>
 80041c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80041c6:	4610      	mov	r0, r2
 80041c8:	4619      	mov	r1, r3
 80041ca:	f7fc fcab 	bl	8000b24 <__aeabi_dcmpun>
 80041ce:	2800      	cmp	r0, #0
 80041d0:	f43f aa44 	beq.w	800365c <_svfprintf_r+0x3ac>
 80041d4:	4b1e      	ldr	r3, [pc, #120]	; (8004250 <_svfprintf_r+0xfa0>)
 80041d6:	4a1f      	ldr	r2, [pc, #124]	; (8004254 <_svfprintf_r+0xfa4>)
 80041d8:	f7ff ba34 	b.w	8003644 <_svfprintf_r+0x394>
 80041dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80041de:	eba3 0308 	sub.w	r3, r3, r8
 80041e2:	9303      	str	r3, [sp, #12]
 80041e4:	f7ff bab5 	b.w	8003752 <_svfprintf_r+0x4a2>
 80041e8:	ea56 0207 	orrs.w	r2, r6, r7
 80041ec:	950b      	str	r5, [sp, #44]	; 0x2c
 80041ee:	f43f ac2b 	beq.w	8003a48 <_svfprintf_r+0x798>
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	f43f ac9d 	beq.w	8003b32 <_svfprintf_r+0x882>
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	f43f acbd 	beq.w	8003b78 <_svfprintf_r+0x8c8>
 80041fe:	ab2c      	add	r3, sp, #176	; 0xb0
 8004200:	08f1      	lsrs	r1, r6, #3
 8004202:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8004206:	08f8      	lsrs	r0, r7, #3
 8004208:	f006 0207 	and.w	r2, r6, #7
 800420c:	4607      	mov	r7, r0
 800420e:	460e      	mov	r6, r1
 8004210:	3230      	adds	r2, #48	; 0x30
 8004212:	ea56 0107 	orrs.w	r1, r6, r7
 8004216:	f103 38ff 	add.w	r8, r3, #4294967295
 800421a:	f803 2c01 	strb.w	r2, [r3, #-1]
 800421e:	f47f ac86 	bne.w	8003b2e <_svfprintf_r+0x87e>
 8004222:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004224:	07c9      	lsls	r1, r1, #31
 8004226:	d506      	bpl.n	8004236 <_svfprintf_r+0xf86>
 8004228:	2a30      	cmp	r2, #48	; 0x30
 800422a:	d004      	beq.n	8004236 <_svfprintf_r+0xf86>
 800422c:	2230      	movs	r2, #48	; 0x30
 800422e:	f808 2c01 	strb.w	r2, [r8, #-1]
 8004232:	f1a3 0802 	sub.w	r8, r3, #2
 8004236:	464e      	mov	r6, r9
 8004238:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 800423c:	eba9 0908 	sub.w	r9, r9, r8
 8004240:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004242:	2700      	movs	r7, #0
 8004244:	f7ff bad1 	b.w	80037ea <_svfprintf_r+0x53a>
 8004248:	080066ba 	.word	0x080066ba
 800424c:	080066aa 	.word	0x080066aa
 8004250:	0800667e 	.word	0x0800667e
 8004254:	08006682 	.word	0x08006682

08004258 <quorem>:
 8004258:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800425c:	6903      	ldr	r3, [r0, #16]
 800425e:	690c      	ldr	r4, [r1, #16]
 8004260:	429c      	cmp	r4, r3
 8004262:	4680      	mov	r8, r0
 8004264:	f300 8082 	bgt.w	800436c <quorem+0x114>
 8004268:	3c01      	subs	r4, #1
 800426a:	f101 0714 	add.w	r7, r1, #20
 800426e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8004272:	f100 0614 	add.w	r6, r0, #20
 8004276:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800427a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800427e:	eb06 030e 	add.w	r3, r6, lr
 8004282:	3501      	adds	r5, #1
 8004284:	eb07 090e 	add.w	r9, r7, lr
 8004288:	9301      	str	r3, [sp, #4]
 800428a:	fbb0 f5f5 	udiv	r5, r0, r5
 800428e:	b395      	cbz	r5, 80042f6 <quorem+0x9e>
 8004290:	f04f 0a00 	mov.w	sl, #0
 8004294:	4638      	mov	r0, r7
 8004296:	46b4      	mov	ip, r6
 8004298:	46d3      	mov	fp, sl
 800429a:	f850 2b04 	ldr.w	r2, [r0], #4
 800429e:	b293      	uxth	r3, r2
 80042a0:	fb05 a303 	mla	r3, r5, r3, sl
 80042a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	ebab 0303 	sub.w	r3, fp, r3
 80042ae:	0c12      	lsrs	r2, r2, #16
 80042b0:	f8bc b000 	ldrh.w	fp, [ip]
 80042b4:	fb05 a202 	mla	r2, r5, r2, sl
 80042b8:	fa13 f38b 	uxtah	r3, r3, fp
 80042bc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80042c0:	fa1f fb82 	uxth.w	fp, r2
 80042c4:	f8dc 2000 	ldr.w	r2, [ip]
 80042c8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80042cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80042d6:	4581      	cmp	r9, r0
 80042d8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80042dc:	f84c 3b04 	str.w	r3, [ip], #4
 80042e0:	d2db      	bcs.n	800429a <quorem+0x42>
 80042e2:	f856 300e 	ldr.w	r3, [r6, lr]
 80042e6:	b933      	cbnz	r3, 80042f6 <quorem+0x9e>
 80042e8:	9b01      	ldr	r3, [sp, #4]
 80042ea:	3b04      	subs	r3, #4
 80042ec:	429e      	cmp	r6, r3
 80042ee:	461a      	mov	r2, r3
 80042f0:	d330      	bcc.n	8004354 <quorem+0xfc>
 80042f2:	f8c8 4010 	str.w	r4, [r8, #16]
 80042f6:	4640      	mov	r0, r8
 80042f8:	f001 fa4d 	bl	8005796 <__mcmp>
 80042fc:	2800      	cmp	r0, #0
 80042fe:	db25      	blt.n	800434c <quorem+0xf4>
 8004300:	3501      	adds	r5, #1
 8004302:	4630      	mov	r0, r6
 8004304:	f04f 0e00 	mov.w	lr, #0
 8004308:	f857 2b04 	ldr.w	r2, [r7], #4
 800430c:	f8d0 c000 	ldr.w	ip, [r0]
 8004310:	b293      	uxth	r3, r2
 8004312:	ebae 0303 	sub.w	r3, lr, r3
 8004316:	0c12      	lsrs	r2, r2, #16
 8004318:	fa13 f38c 	uxtah	r3, r3, ip
 800431c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004320:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004324:	b29b      	uxth	r3, r3
 8004326:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800432a:	45b9      	cmp	r9, r7
 800432c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8004330:	f840 3b04 	str.w	r3, [r0], #4
 8004334:	d2e8      	bcs.n	8004308 <quorem+0xb0>
 8004336:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800433a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800433e:	b92a      	cbnz	r2, 800434c <quorem+0xf4>
 8004340:	3b04      	subs	r3, #4
 8004342:	429e      	cmp	r6, r3
 8004344:	461a      	mov	r2, r3
 8004346:	d30b      	bcc.n	8004360 <quorem+0x108>
 8004348:	f8c8 4010 	str.w	r4, [r8, #16]
 800434c:	4628      	mov	r0, r5
 800434e:	b003      	add	sp, #12
 8004350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004354:	6812      	ldr	r2, [r2, #0]
 8004356:	3b04      	subs	r3, #4
 8004358:	2a00      	cmp	r2, #0
 800435a:	d1ca      	bne.n	80042f2 <quorem+0x9a>
 800435c:	3c01      	subs	r4, #1
 800435e:	e7c5      	b.n	80042ec <quorem+0x94>
 8004360:	6812      	ldr	r2, [r2, #0]
 8004362:	3b04      	subs	r3, #4
 8004364:	2a00      	cmp	r2, #0
 8004366:	d1ef      	bne.n	8004348 <quorem+0xf0>
 8004368:	3c01      	subs	r4, #1
 800436a:	e7ea      	b.n	8004342 <quorem+0xea>
 800436c:	2000      	movs	r0, #0
 800436e:	e7ee      	b.n	800434e <quorem+0xf6>

08004370 <_dtoa_r>:
 8004370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004374:	ec57 6b10 	vmov	r6, r7, d0
 8004378:	b097      	sub	sp, #92	; 0x5c
 800437a:	e9cd 6700 	strd	r6, r7, [sp]
 800437e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004380:	9107      	str	r1, [sp, #28]
 8004382:	4604      	mov	r4, r0
 8004384:	920a      	str	r2, [sp, #40]	; 0x28
 8004386:	930f      	str	r3, [sp, #60]	; 0x3c
 8004388:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800438a:	b93e      	cbnz	r6, 800439c <_dtoa_r+0x2c>
 800438c:	2010      	movs	r0, #16
 800438e:	f000 fdcb 	bl	8004f28 <malloc>
 8004392:	6260      	str	r0, [r4, #36]	; 0x24
 8004394:	6046      	str	r6, [r0, #4]
 8004396:	6086      	str	r6, [r0, #8]
 8004398:	6006      	str	r6, [r0, #0]
 800439a:	60c6      	str	r6, [r0, #12]
 800439c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800439e:	6819      	ldr	r1, [r3, #0]
 80043a0:	b151      	cbz	r1, 80043b8 <_dtoa_r+0x48>
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	604a      	str	r2, [r1, #4]
 80043a6:	2301      	movs	r3, #1
 80043a8:	4093      	lsls	r3, r2
 80043aa:	608b      	str	r3, [r1, #8]
 80043ac:	4620      	mov	r0, r4
 80043ae:	f001 f81d 	bl	80053ec <_Bfree>
 80043b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043b4:	2200      	movs	r2, #0
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	9b01      	ldr	r3, [sp, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	bfbf      	itttt	lt
 80043be:	2301      	movlt	r3, #1
 80043c0:	602b      	strlt	r3, [r5, #0]
 80043c2:	9b01      	ldrlt	r3, [sp, #4]
 80043c4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80043c8:	bfb2      	itee	lt
 80043ca:	9301      	strlt	r3, [sp, #4]
 80043cc:	2300      	movge	r3, #0
 80043ce:	602b      	strge	r3, [r5, #0]
 80043d0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80043d4:	4ba8      	ldr	r3, [pc, #672]	; (8004678 <_dtoa_r+0x308>)
 80043d6:	ea33 0308 	bics.w	r3, r3, r8
 80043da:	d11b      	bne.n	8004414 <_dtoa_r+0xa4>
 80043dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80043de:	f242 730f 	movw	r3, #9999	; 0x270f
 80043e2:	6013      	str	r3, [r2, #0]
 80043e4:	9b00      	ldr	r3, [sp, #0]
 80043e6:	b923      	cbnz	r3, 80043f2 <_dtoa_r+0x82>
 80043e8:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80043ec:	2800      	cmp	r0, #0
 80043ee:	f000 8578 	beq.w	8004ee2 <_dtoa_r+0xb72>
 80043f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80043f4:	b953      	cbnz	r3, 800440c <_dtoa_r+0x9c>
 80043f6:	4ba1      	ldr	r3, [pc, #644]	; (800467c <_dtoa_r+0x30c>)
 80043f8:	e021      	b.n	800443e <_dtoa_r+0xce>
 80043fa:	4ba1      	ldr	r3, [pc, #644]	; (8004680 <_dtoa_r+0x310>)
 80043fc:	9302      	str	r3, [sp, #8]
 80043fe:	3308      	adds	r3, #8
 8004400:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004402:	6013      	str	r3, [r2, #0]
 8004404:	9802      	ldr	r0, [sp, #8]
 8004406:	b017      	add	sp, #92	; 0x5c
 8004408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800440c:	4b9b      	ldr	r3, [pc, #620]	; (800467c <_dtoa_r+0x30c>)
 800440e:	9302      	str	r3, [sp, #8]
 8004410:	3303      	adds	r3, #3
 8004412:	e7f5      	b.n	8004400 <_dtoa_r+0x90>
 8004414:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004418:	2200      	movs	r2, #0
 800441a:	2300      	movs	r3, #0
 800441c:	4630      	mov	r0, r6
 800441e:	4639      	mov	r1, r7
 8004420:	f7fc fb4e 	bl	8000ac0 <__aeabi_dcmpeq>
 8004424:	4681      	mov	r9, r0
 8004426:	b160      	cbz	r0, 8004442 <_dtoa_r+0xd2>
 8004428:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800442a:	2301      	movs	r3, #1
 800442c:	6013      	str	r3, [r2, #0]
 800442e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 8553 	beq.w	8004edc <_dtoa_r+0xb6c>
 8004436:	4b93      	ldr	r3, [pc, #588]	; (8004684 <_dtoa_r+0x314>)
 8004438:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800443a:	6013      	str	r3, [r2, #0]
 800443c:	3b01      	subs	r3, #1
 800443e:	9302      	str	r3, [sp, #8]
 8004440:	e7e0      	b.n	8004404 <_dtoa_r+0x94>
 8004442:	aa14      	add	r2, sp, #80	; 0x50
 8004444:	a915      	add	r1, sp, #84	; 0x54
 8004446:	ec47 6b10 	vmov	d0, r6, r7
 800444a:	4620      	mov	r0, r4
 800444c:	f001 fa1b 	bl	8005886 <__d2b>
 8004450:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004454:	4682      	mov	sl, r0
 8004456:	2d00      	cmp	r5, #0
 8004458:	d07e      	beq.n	8004558 <_dtoa_r+0x1e8>
 800445a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800445e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004462:	4630      	mov	r0, r6
 8004464:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004468:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800446c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8004470:	2200      	movs	r2, #0
 8004472:	4b85      	ldr	r3, [pc, #532]	; (8004688 <_dtoa_r+0x318>)
 8004474:	f7fb ff08 	bl	8000288 <__aeabi_dsub>
 8004478:	a379      	add	r3, pc, #484	; (adr r3, 8004660 <_dtoa_r+0x2f0>)
 800447a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800447e:	f7fc f8b7 	bl	80005f0 <__aeabi_dmul>
 8004482:	a379      	add	r3, pc, #484	; (adr r3, 8004668 <_dtoa_r+0x2f8>)
 8004484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004488:	f7fb ff00 	bl	800028c <__adddf3>
 800448c:	4606      	mov	r6, r0
 800448e:	4628      	mov	r0, r5
 8004490:	460f      	mov	r7, r1
 8004492:	f7fc f847 	bl	8000524 <__aeabi_i2d>
 8004496:	a376      	add	r3, pc, #472	; (adr r3, 8004670 <_dtoa_r+0x300>)
 8004498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449c:	f7fc f8a8 	bl	80005f0 <__aeabi_dmul>
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	4630      	mov	r0, r6
 80044a6:	4639      	mov	r1, r7
 80044a8:	f7fb fef0 	bl	800028c <__adddf3>
 80044ac:	4606      	mov	r6, r0
 80044ae:	460f      	mov	r7, r1
 80044b0:	f7fc fb4e 	bl	8000b50 <__aeabi_d2iz>
 80044b4:	2200      	movs	r2, #0
 80044b6:	4683      	mov	fp, r0
 80044b8:	2300      	movs	r3, #0
 80044ba:	4630      	mov	r0, r6
 80044bc:	4639      	mov	r1, r7
 80044be:	f7fc fb09 	bl	8000ad4 <__aeabi_dcmplt>
 80044c2:	b158      	cbz	r0, 80044dc <_dtoa_r+0x16c>
 80044c4:	4658      	mov	r0, fp
 80044c6:	f7fc f82d 	bl	8000524 <__aeabi_i2d>
 80044ca:	4602      	mov	r2, r0
 80044cc:	460b      	mov	r3, r1
 80044ce:	4630      	mov	r0, r6
 80044d0:	4639      	mov	r1, r7
 80044d2:	f7fc faf5 	bl	8000ac0 <__aeabi_dcmpeq>
 80044d6:	b908      	cbnz	r0, 80044dc <_dtoa_r+0x16c>
 80044d8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80044dc:	f1bb 0f16 	cmp.w	fp, #22
 80044e0:	d859      	bhi.n	8004596 <_dtoa_r+0x226>
 80044e2:	496a      	ldr	r1, [pc, #424]	; (800468c <_dtoa_r+0x31c>)
 80044e4:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80044e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80044ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80044f0:	f7fc fb0e 	bl	8000b10 <__aeabi_dcmpgt>
 80044f4:	2800      	cmp	r0, #0
 80044f6:	d050      	beq.n	800459a <_dtoa_r+0x22a>
 80044f8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80044fc:	2300      	movs	r3, #0
 80044fe:	930e      	str	r3, [sp, #56]	; 0x38
 8004500:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004502:	1b5d      	subs	r5, r3, r5
 8004504:	1e6b      	subs	r3, r5, #1
 8004506:	9306      	str	r3, [sp, #24]
 8004508:	bf45      	ittet	mi
 800450a:	f1c5 0301 	rsbmi	r3, r5, #1
 800450e:	9305      	strmi	r3, [sp, #20]
 8004510:	2300      	movpl	r3, #0
 8004512:	2300      	movmi	r3, #0
 8004514:	bf4c      	ite	mi
 8004516:	9306      	strmi	r3, [sp, #24]
 8004518:	9305      	strpl	r3, [sp, #20]
 800451a:	f1bb 0f00 	cmp.w	fp, #0
 800451e:	db3e      	blt.n	800459e <_dtoa_r+0x22e>
 8004520:	9b06      	ldr	r3, [sp, #24]
 8004522:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004526:	445b      	add	r3, fp
 8004528:	9306      	str	r3, [sp, #24]
 800452a:	2300      	movs	r3, #0
 800452c:	9308      	str	r3, [sp, #32]
 800452e:	9b07      	ldr	r3, [sp, #28]
 8004530:	2b09      	cmp	r3, #9
 8004532:	f200 80af 	bhi.w	8004694 <_dtoa_r+0x324>
 8004536:	2b05      	cmp	r3, #5
 8004538:	bfc4      	itt	gt
 800453a:	3b04      	subgt	r3, #4
 800453c:	9307      	strgt	r3, [sp, #28]
 800453e:	9b07      	ldr	r3, [sp, #28]
 8004540:	f1a3 0302 	sub.w	r3, r3, #2
 8004544:	bfcc      	ite	gt
 8004546:	2600      	movgt	r6, #0
 8004548:	2601      	movle	r6, #1
 800454a:	2b03      	cmp	r3, #3
 800454c:	f200 80ae 	bhi.w	80046ac <_dtoa_r+0x33c>
 8004550:	e8df f003 	tbb	[pc, r3]
 8004554:	772f8482 	.word	0x772f8482
 8004558:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800455a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800455c:	441d      	add	r5, r3
 800455e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004562:	2b20      	cmp	r3, #32
 8004564:	dd11      	ble.n	800458a <_dtoa_r+0x21a>
 8004566:	9a00      	ldr	r2, [sp, #0]
 8004568:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800456c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8004570:	fa22 f000 	lsr.w	r0, r2, r0
 8004574:	fa08 f303 	lsl.w	r3, r8, r3
 8004578:	4318      	orrs	r0, r3
 800457a:	f7fb ffc3 	bl	8000504 <__aeabi_ui2d>
 800457e:	2301      	movs	r3, #1
 8004580:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004584:	3d01      	subs	r5, #1
 8004586:	9312      	str	r3, [sp, #72]	; 0x48
 8004588:	e772      	b.n	8004470 <_dtoa_r+0x100>
 800458a:	f1c3 0020 	rsb	r0, r3, #32
 800458e:	9b00      	ldr	r3, [sp, #0]
 8004590:	fa03 f000 	lsl.w	r0, r3, r0
 8004594:	e7f1      	b.n	800457a <_dtoa_r+0x20a>
 8004596:	2301      	movs	r3, #1
 8004598:	e7b1      	b.n	80044fe <_dtoa_r+0x18e>
 800459a:	900e      	str	r0, [sp, #56]	; 0x38
 800459c:	e7b0      	b.n	8004500 <_dtoa_r+0x190>
 800459e:	9b05      	ldr	r3, [sp, #20]
 80045a0:	eba3 030b 	sub.w	r3, r3, fp
 80045a4:	9305      	str	r3, [sp, #20]
 80045a6:	f1cb 0300 	rsb	r3, fp, #0
 80045aa:	9308      	str	r3, [sp, #32]
 80045ac:	2300      	movs	r3, #0
 80045ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80045b0:	e7bd      	b.n	800452e <_dtoa_r+0x1be>
 80045b2:	2301      	movs	r3, #1
 80045b4:	9309      	str	r3, [sp, #36]	; 0x24
 80045b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	dd7a      	ble.n	80046b2 <_dtoa_r+0x342>
 80045bc:	9304      	str	r3, [sp, #16]
 80045be:	9303      	str	r3, [sp, #12]
 80045c0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80045c2:	2200      	movs	r2, #0
 80045c4:	606a      	str	r2, [r5, #4]
 80045c6:	2104      	movs	r1, #4
 80045c8:	f101 0214 	add.w	r2, r1, #20
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d975      	bls.n	80046bc <_dtoa_r+0x34c>
 80045d0:	6869      	ldr	r1, [r5, #4]
 80045d2:	4620      	mov	r0, r4
 80045d4:	f000 fed6 	bl	8005384 <_Balloc>
 80045d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045da:	6028      	str	r0, [r5, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	9302      	str	r3, [sp, #8]
 80045e0:	9b03      	ldr	r3, [sp, #12]
 80045e2:	2b0e      	cmp	r3, #14
 80045e4:	f200 80e5 	bhi.w	80047b2 <_dtoa_r+0x442>
 80045e8:	2e00      	cmp	r6, #0
 80045ea:	f000 80e2 	beq.w	80047b2 <_dtoa_r+0x442>
 80045ee:	ed9d 7b00 	vldr	d7, [sp]
 80045f2:	f1bb 0f00 	cmp.w	fp, #0
 80045f6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80045fa:	dd74      	ble.n	80046e6 <_dtoa_r+0x376>
 80045fc:	4a23      	ldr	r2, [pc, #140]	; (800468c <_dtoa_r+0x31c>)
 80045fe:	f00b 030f 	and.w	r3, fp, #15
 8004602:	ea4f 162b 	mov.w	r6, fp, asr #4
 8004606:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800460a:	06f0      	lsls	r0, r6, #27
 800460c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004610:	d559      	bpl.n	80046c6 <_dtoa_r+0x356>
 8004612:	4b1f      	ldr	r3, [pc, #124]	; (8004690 <_dtoa_r+0x320>)
 8004614:	ec51 0b17 	vmov	r0, r1, d7
 8004618:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800461c:	f7fc f912 	bl	8000844 <__aeabi_ddiv>
 8004620:	e9cd 0100 	strd	r0, r1, [sp]
 8004624:	f006 060f 	and.w	r6, r6, #15
 8004628:	2503      	movs	r5, #3
 800462a:	4f19      	ldr	r7, [pc, #100]	; (8004690 <_dtoa_r+0x320>)
 800462c:	2e00      	cmp	r6, #0
 800462e:	d14c      	bne.n	80046ca <_dtoa_r+0x35a>
 8004630:	4642      	mov	r2, r8
 8004632:	464b      	mov	r3, r9
 8004634:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004638:	f7fc f904 	bl	8000844 <__aeabi_ddiv>
 800463c:	e9cd 0100 	strd	r0, r1, [sp]
 8004640:	e06a      	b.n	8004718 <_dtoa_r+0x3a8>
 8004642:	2301      	movs	r3, #1
 8004644:	9309      	str	r3, [sp, #36]	; 0x24
 8004646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004648:	445b      	add	r3, fp
 800464a:	9304      	str	r3, [sp, #16]
 800464c:	3301      	adds	r3, #1
 800464e:	2b01      	cmp	r3, #1
 8004650:	9303      	str	r3, [sp, #12]
 8004652:	bfb8      	it	lt
 8004654:	2301      	movlt	r3, #1
 8004656:	e7b3      	b.n	80045c0 <_dtoa_r+0x250>
 8004658:	2300      	movs	r3, #0
 800465a:	e7ab      	b.n	80045b4 <_dtoa_r+0x244>
 800465c:	2300      	movs	r3, #0
 800465e:	e7f1      	b.n	8004644 <_dtoa_r+0x2d4>
 8004660:	636f4361 	.word	0x636f4361
 8004664:	3fd287a7 	.word	0x3fd287a7
 8004668:	8b60c8b3 	.word	0x8b60c8b3
 800466c:	3fc68a28 	.word	0x3fc68a28
 8004670:	509f79fb 	.word	0x509f79fb
 8004674:	3fd34413 	.word	0x3fd34413
 8004678:	7ff00000 	.word	0x7ff00000
 800467c:	080066d3 	.word	0x080066d3
 8004680:	080066ca 	.word	0x080066ca
 8004684:	080066a9 	.word	0x080066a9
 8004688:	3ff80000 	.word	0x3ff80000
 800468c:	08006700 	.word	0x08006700
 8004690:	080066d8 	.word	0x080066d8
 8004694:	2601      	movs	r6, #1
 8004696:	2300      	movs	r3, #0
 8004698:	9307      	str	r3, [sp, #28]
 800469a:	9609      	str	r6, [sp, #36]	; 0x24
 800469c:	f04f 33ff 	mov.w	r3, #4294967295
 80046a0:	9304      	str	r3, [sp, #16]
 80046a2:	9303      	str	r3, [sp, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	2312      	movs	r3, #18
 80046a8:	920a      	str	r2, [sp, #40]	; 0x28
 80046aa:	e789      	b.n	80045c0 <_dtoa_r+0x250>
 80046ac:	2301      	movs	r3, #1
 80046ae:	9309      	str	r3, [sp, #36]	; 0x24
 80046b0:	e7f4      	b.n	800469c <_dtoa_r+0x32c>
 80046b2:	2301      	movs	r3, #1
 80046b4:	9304      	str	r3, [sp, #16]
 80046b6:	9303      	str	r3, [sp, #12]
 80046b8:	461a      	mov	r2, r3
 80046ba:	e7f5      	b.n	80046a8 <_dtoa_r+0x338>
 80046bc:	686a      	ldr	r2, [r5, #4]
 80046be:	3201      	adds	r2, #1
 80046c0:	606a      	str	r2, [r5, #4]
 80046c2:	0049      	lsls	r1, r1, #1
 80046c4:	e780      	b.n	80045c8 <_dtoa_r+0x258>
 80046c6:	2502      	movs	r5, #2
 80046c8:	e7af      	b.n	800462a <_dtoa_r+0x2ba>
 80046ca:	07f1      	lsls	r1, r6, #31
 80046cc:	d508      	bpl.n	80046e0 <_dtoa_r+0x370>
 80046ce:	4640      	mov	r0, r8
 80046d0:	4649      	mov	r1, r9
 80046d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046d6:	f7fb ff8b 	bl	80005f0 <__aeabi_dmul>
 80046da:	3501      	adds	r5, #1
 80046dc:	4680      	mov	r8, r0
 80046de:	4689      	mov	r9, r1
 80046e0:	1076      	asrs	r6, r6, #1
 80046e2:	3708      	adds	r7, #8
 80046e4:	e7a2      	b.n	800462c <_dtoa_r+0x2bc>
 80046e6:	f000 809d 	beq.w	8004824 <_dtoa_r+0x4b4>
 80046ea:	f1cb 0600 	rsb	r6, fp, #0
 80046ee:	4b9f      	ldr	r3, [pc, #636]	; (800496c <_dtoa_r+0x5fc>)
 80046f0:	4f9f      	ldr	r7, [pc, #636]	; (8004970 <_dtoa_r+0x600>)
 80046f2:	f006 020f 	and.w	r2, r6, #15
 80046f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80046fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004702:	f7fb ff75 	bl	80005f0 <__aeabi_dmul>
 8004706:	e9cd 0100 	strd	r0, r1, [sp]
 800470a:	1136      	asrs	r6, r6, #4
 800470c:	2300      	movs	r3, #0
 800470e:	2502      	movs	r5, #2
 8004710:	2e00      	cmp	r6, #0
 8004712:	d17c      	bne.n	800480e <_dtoa_r+0x49e>
 8004714:	2b00      	cmp	r3, #0
 8004716:	d191      	bne.n	800463c <_dtoa_r+0x2cc>
 8004718:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800471a:	2b00      	cmp	r3, #0
 800471c:	f000 8084 	beq.w	8004828 <_dtoa_r+0x4b8>
 8004720:	e9dd 8900 	ldrd	r8, r9, [sp]
 8004724:	2200      	movs	r2, #0
 8004726:	4b93      	ldr	r3, [pc, #588]	; (8004974 <_dtoa_r+0x604>)
 8004728:	4640      	mov	r0, r8
 800472a:	4649      	mov	r1, r9
 800472c:	f7fc f9d2 	bl	8000ad4 <__aeabi_dcmplt>
 8004730:	2800      	cmp	r0, #0
 8004732:	d079      	beq.n	8004828 <_dtoa_r+0x4b8>
 8004734:	9b03      	ldr	r3, [sp, #12]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d076      	beq.n	8004828 <_dtoa_r+0x4b8>
 800473a:	9b04      	ldr	r3, [sp, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	dd34      	ble.n	80047aa <_dtoa_r+0x43a>
 8004740:	2200      	movs	r2, #0
 8004742:	4b8d      	ldr	r3, [pc, #564]	; (8004978 <_dtoa_r+0x608>)
 8004744:	4640      	mov	r0, r8
 8004746:	4649      	mov	r1, r9
 8004748:	f7fb ff52 	bl	80005f0 <__aeabi_dmul>
 800474c:	e9cd 0100 	strd	r0, r1, [sp]
 8004750:	9e04      	ldr	r6, [sp, #16]
 8004752:	f10b 37ff 	add.w	r7, fp, #4294967295
 8004756:	3501      	adds	r5, #1
 8004758:	4628      	mov	r0, r5
 800475a:	f7fb fee3 	bl	8000524 <__aeabi_i2d>
 800475e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004762:	f7fb ff45 	bl	80005f0 <__aeabi_dmul>
 8004766:	2200      	movs	r2, #0
 8004768:	4b84      	ldr	r3, [pc, #528]	; (800497c <_dtoa_r+0x60c>)
 800476a:	f7fb fd8f 	bl	800028c <__adddf3>
 800476e:	4680      	mov	r8, r0
 8004770:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8004774:	2e00      	cmp	r6, #0
 8004776:	d15a      	bne.n	800482e <_dtoa_r+0x4be>
 8004778:	2200      	movs	r2, #0
 800477a:	4b81      	ldr	r3, [pc, #516]	; (8004980 <_dtoa_r+0x610>)
 800477c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004780:	f7fb fd82 	bl	8000288 <__aeabi_dsub>
 8004784:	4642      	mov	r2, r8
 8004786:	464b      	mov	r3, r9
 8004788:	e9cd 0100 	strd	r0, r1, [sp]
 800478c:	f7fc f9c0 	bl	8000b10 <__aeabi_dcmpgt>
 8004790:	2800      	cmp	r0, #0
 8004792:	f040 829b 	bne.w	8004ccc <_dtoa_r+0x95c>
 8004796:	4642      	mov	r2, r8
 8004798:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800479c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80047a0:	f7fc f998 	bl	8000ad4 <__aeabi_dcmplt>
 80047a4:	2800      	cmp	r0, #0
 80047a6:	f040 828f 	bne.w	8004cc8 <_dtoa_r+0x958>
 80047aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80047ae:	e9cd 2300 	strd	r2, r3, [sp]
 80047b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f2c0 8150 	blt.w	8004a5a <_dtoa_r+0x6ea>
 80047ba:	f1bb 0f0e 	cmp.w	fp, #14
 80047be:	f300 814c 	bgt.w	8004a5a <_dtoa_r+0x6ea>
 80047c2:	4b6a      	ldr	r3, [pc, #424]	; (800496c <_dtoa_r+0x5fc>)
 80047c4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80047c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80047cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f280 80da 	bge.w	8004988 <_dtoa_r+0x618>
 80047d4:	9b03      	ldr	r3, [sp, #12]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f300 80d6 	bgt.w	8004988 <_dtoa_r+0x618>
 80047dc:	f040 8273 	bne.w	8004cc6 <_dtoa_r+0x956>
 80047e0:	2200      	movs	r2, #0
 80047e2:	4b67      	ldr	r3, [pc, #412]	; (8004980 <_dtoa_r+0x610>)
 80047e4:	4640      	mov	r0, r8
 80047e6:	4649      	mov	r1, r9
 80047e8:	f7fb ff02 	bl	80005f0 <__aeabi_dmul>
 80047ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80047f0:	f7fc f984 	bl	8000afc <__aeabi_dcmpge>
 80047f4:	9e03      	ldr	r6, [sp, #12]
 80047f6:	4637      	mov	r7, r6
 80047f8:	2800      	cmp	r0, #0
 80047fa:	f040 824a 	bne.w	8004c92 <_dtoa_r+0x922>
 80047fe:	9b02      	ldr	r3, [sp, #8]
 8004800:	9a02      	ldr	r2, [sp, #8]
 8004802:	1c5d      	adds	r5, r3, #1
 8004804:	2331      	movs	r3, #49	; 0x31
 8004806:	7013      	strb	r3, [r2, #0]
 8004808:	f10b 0b01 	add.w	fp, fp, #1
 800480c:	e245      	b.n	8004c9a <_dtoa_r+0x92a>
 800480e:	07f2      	lsls	r2, r6, #31
 8004810:	d505      	bpl.n	800481e <_dtoa_r+0x4ae>
 8004812:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004816:	f7fb feeb 	bl	80005f0 <__aeabi_dmul>
 800481a:	3501      	adds	r5, #1
 800481c:	2301      	movs	r3, #1
 800481e:	1076      	asrs	r6, r6, #1
 8004820:	3708      	adds	r7, #8
 8004822:	e775      	b.n	8004710 <_dtoa_r+0x3a0>
 8004824:	2502      	movs	r5, #2
 8004826:	e777      	b.n	8004718 <_dtoa_r+0x3a8>
 8004828:	465f      	mov	r7, fp
 800482a:	9e03      	ldr	r6, [sp, #12]
 800482c:	e794      	b.n	8004758 <_dtoa_r+0x3e8>
 800482e:	9a02      	ldr	r2, [sp, #8]
 8004830:	4b4e      	ldr	r3, [pc, #312]	; (800496c <_dtoa_r+0x5fc>)
 8004832:	4432      	add	r2, r6
 8004834:	9213      	str	r2, [sp, #76]	; 0x4c
 8004836:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004838:	1e71      	subs	r1, r6, #1
 800483a:	2a00      	cmp	r2, #0
 800483c:	d048      	beq.n	80048d0 <_dtoa_r+0x560>
 800483e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8004842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004846:	2000      	movs	r0, #0
 8004848:	494e      	ldr	r1, [pc, #312]	; (8004984 <_dtoa_r+0x614>)
 800484a:	f7fb fffb 	bl	8000844 <__aeabi_ddiv>
 800484e:	4642      	mov	r2, r8
 8004850:	464b      	mov	r3, r9
 8004852:	f7fb fd19 	bl	8000288 <__aeabi_dsub>
 8004856:	9d02      	ldr	r5, [sp, #8]
 8004858:	4680      	mov	r8, r0
 800485a:	4689      	mov	r9, r1
 800485c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004860:	f7fc f976 	bl	8000b50 <__aeabi_d2iz>
 8004864:	4606      	mov	r6, r0
 8004866:	f7fb fe5d 	bl	8000524 <__aeabi_i2d>
 800486a:	4602      	mov	r2, r0
 800486c:	460b      	mov	r3, r1
 800486e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004872:	f7fb fd09 	bl	8000288 <__aeabi_dsub>
 8004876:	3630      	adds	r6, #48	; 0x30
 8004878:	f805 6b01 	strb.w	r6, [r5], #1
 800487c:	4642      	mov	r2, r8
 800487e:	464b      	mov	r3, r9
 8004880:	e9cd 0100 	strd	r0, r1, [sp]
 8004884:	f7fc f926 	bl	8000ad4 <__aeabi_dcmplt>
 8004888:	2800      	cmp	r0, #0
 800488a:	d165      	bne.n	8004958 <_dtoa_r+0x5e8>
 800488c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004890:	2000      	movs	r0, #0
 8004892:	4938      	ldr	r1, [pc, #224]	; (8004974 <_dtoa_r+0x604>)
 8004894:	f7fb fcf8 	bl	8000288 <__aeabi_dsub>
 8004898:	4642      	mov	r2, r8
 800489a:	464b      	mov	r3, r9
 800489c:	f7fc f91a 	bl	8000ad4 <__aeabi_dcmplt>
 80048a0:	2800      	cmp	r0, #0
 80048a2:	f040 80ba 	bne.w	8004a1a <_dtoa_r+0x6aa>
 80048a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80048a8:	429d      	cmp	r5, r3
 80048aa:	f43f af7e 	beq.w	80047aa <_dtoa_r+0x43a>
 80048ae:	2200      	movs	r2, #0
 80048b0:	4b31      	ldr	r3, [pc, #196]	; (8004978 <_dtoa_r+0x608>)
 80048b2:	4640      	mov	r0, r8
 80048b4:	4649      	mov	r1, r9
 80048b6:	f7fb fe9b 	bl	80005f0 <__aeabi_dmul>
 80048ba:	2200      	movs	r2, #0
 80048bc:	4680      	mov	r8, r0
 80048be:	4689      	mov	r9, r1
 80048c0:	4b2d      	ldr	r3, [pc, #180]	; (8004978 <_dtoa_r+0x608>)
 80048c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80048c6:	f7fb fe93 	bl	80005f0 <__aeabi_dmul>
 80048ca:	e9cd 0100 	strd	r0, r1, [sp]
 80048ce:	e7c5      	b.n	800485c <_dtoa_r+0x4ec>
 80048d0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80048d4:	4642      	mov	r2, r8
 80048d6:	464b      	mov	r3, r9
 80048d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048dc:	f7fb fe88 	bl	80005f0 <__aeabi_dmul>
 80048e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80048e4:	9d02      	ldr	r5, [sp, #8]
 80048e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80048ea:	f7fc f931 	bl	8000b50 <__aeabi_d2iz>
 80048ee:	4606      	mov	r6, r0
 80048f0:	f7fb fe18 	bl	8000524 <__aeabi_i2d>
 80048f4:	3630      	adds	r6, #48	; 0x30
 80048f6:	4602      	mov	r2, r0
 80048f8:	460b      	mov	r3, r1
 80048fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80048fe:	f7fb fcc3 	bl	8000288 <__aeabi_dsub>
 8004902:	f805 6b01 	strb.w	r6, [r5], #1
 8004906:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004908:	42ab      	cmp	r3, r5
 800490a:	4680      	mov	r8, r0
 800490c:	4689      	mov	r9, r1
 800490e:	f04f 0200 	mov.w	r2, #0
 8004912:	d125      	bne.n	8004960 <_dtoa_r+0x5f0>
 8004914:	4b1b      	ldr	r3, [pc, #108]	; (8004984 <_dtoa_r+0x614>)
 8004916:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800491a:	f7fb fcb7 	bl	800028c <__adddf3>
 800491e:	4602      	mov	r2, r0
 8004920:	460b      	mov	r3, r1
 8004922:	4640      	mov	r0, r8
 8004924:	4649      	mov	r1, r9
 8004926:	f7fc f8f3 	bl	8000b10 <__aeabi_dcmpgt>
 800492a:	2800      	cmp	r0, #0
 800492c:	d175      	bne.n	8004a1a <_dtoa_r+0x6aa>
 800492e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004932:	2000      	movs	r0, #0
 8004934:	4913      	ldr	r1, [pc, #76]	; (8004984 <_dtoa_r+0x614>)
 8004936:	f7fb fca7 	bl	8000288 <__aeabi_dsub>
 800493a:	4602      	mov	r2, r0
 800493c:	460b      	mov	r3, r1
 800493e:	4640      	mov	r0, r8
 8004940:	4649      	mov	r1, r9
 8004942:	f7fc f8c7 	bl	8000ad4 <__aeabi_dcmplt>
 8004946:	2800      	cmp	r0, #0
 8004948:	f43f af2f 	beq.w	80047aa <_dtoa_r+0x43a>
 800494c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004950:	2b30      	cmp	r3, #48	; 0x30
 8004952:	f105 32ff 	add.w	r2, r5, #4294967295
 8004956:	d001      	beq.n	800495c <_dtoa_r+0x5ec>
 8004958:	46bb      	mov	fp, r7
 800495a:	e04d      	b.n	80049f8 <_dtoa_r+0x688>
 800495c:	4615      	mov	r5, r2
 800495e:	e7f5      	b.n	800494c <_dtoa_r+0x5dc>
 8004960:	4b05      	ldr	r3, [pc, #20]	; (8004978 <_dtoa_r+0x608>)
 8004962:	f7fb fe45 	bl	80005f0 <__aeabi_dmul>
 8004966:	e9cd 0100 	strd	r0, r1, [sp]
 800496a:	e7bc      	b.n	80048e6 <_dtoa_r+0x576>
 800496c:	08006700 	.word	0x08006700
 8004970:	080066d8 	.word	0x080066d8
 8004974:	3ff00000 	.word	0x3ff00000
 8004978:	40240000 	.word	0x40240000
 800497c:	401c0000 	.word	0x401c0000
 8004980:	40140000 	.word	0x40140000
 8004984:	3fe00000 	.word	0x3fe00000
 8004988:	e9dd 6700 	ldrd	r6, r7, [sp]
 800498c:	9d02      	ldr	r5, [sp, #8]
 800498e:	4642      	mov	r2, r8
 8004990:	464b      	mov	r3, r9
 8004992:	4630      	mov	r0, r6
 8004994:	4639      	mov	r1, r7
 8004996:	f7fb ff55 	bl	8000844 <__aeabi_ddiv>
 800499a:	f7fc f8d9 	bl	8000b50 <__aeabi_d2iz>
 800499e:	9000      	str	r0, [sp, #0]
 80049a0:	f7fb fdc0 	bl	8000524 <__aeabi_i2d>
 80049a4:	4642      	mov	r2, r8
 80049a6:	464b      	mov	r3, r9
 80049a8:	f7fb fe22 	bl	80005f0 <__aeabi_dmul>
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
 80049b0:	4630      	mov	r0, r6
 80049b2:	4639      	mov	r1, r7
 80049b4:	f7fb fc68 	bl	8000288 <__aeabi_dsub>
 80049b8:	9e00      	ldr	r6, [sp, #0]
 80049ba:	9f03      	ldr	r7, [sp, #12]
 80049bc:	3630      	adds	r6, #48	; 0x30
 80049be:	f805 6b01 	strb.w	r6, [r5], #1
 80049c2:	9e02      	ldr	r6, [sp, #8]
 80049c4:	1bae      	subs	r6, r5, r6
 80049c6:	42b7      	cmp	r7, r6
 80049c8:	4602      	mov	r2, r0
 80049ca:	460b      	mov	r3, r1
 80049cc:	d138      	bne.n	8004a40 <_dtoa_r+0x6d0>
 80049ce:	f7fb fc5d 	bl	800028c <__adddf3>
 80049d2:	4606      	mov	r6, r0
 80049d4:	460f      	mov	r7, r1
 80049d6:	4602      	mov	r2, r0
 80049d8:	460b      	mov	r3, r1
 80049da:	4640      	mov	r0, r8
 80049dc:	4649      	mov	r1, r9
 80049de:	f7fc f879 	bl	8000ad4 <__aeabi_dcmplt>
 80049e2:	b9c8      	cbnz	r0, 8004a18 <_dtoa_r+0x6a8>
 80049e4:	4632      	mov	r2, r6
 80049e6:	463b      	mov	r3, r7
 80049e8:	4640      	mov	r0, r8
 80049ea:	4649      	mov	r1, r9
 80049ec:	f7fc f868 	bl	8000ac0 <__aeabi_dcmpeq>
 80049f0:	b110      	cbz	r0, 80049f8 <_dtoa_r+0x688>
 80049f2:	9b00      	ldr	r3, [sp, #0]
 80049f4:	07db      	lsls	r3, r3, #31
 80049f6:	d40f      	bmi.n	8004a18 <_dtoa_r+0x6a8>
 80049f8:	4651      	mov	r1, sl
 80049fa:	4620      	mov	r0, r4
 80049fc:	f000 fcf6 	bl	80053ec <_Bfree>
 8004a00:	2300      	movs	r3, #0
 8004a02:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004a04:	702b      	strb	r3, [r5, #0]
 8004a06:	f10b 0301 	add.w	r3, fp, #1
 8004a0a:	6013      	str	r3, [r2, #0]
 8004a0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	f43f acf8 	beq.w	8004404 <_dtoa_r+0x94>
 8004a14:	601d      	str	r5, [r3, #0]
 8004a16:	e4f5      	b.n	8004404 <_dtoa_r+0x94>
 8004a18:	465f      	mov	r7, fp
 8004a1a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004a1e:	2a39      	cmp	r2, #57	; 0x39
 8004a20:	f105 33ff 	add.w	r3, r5, #4294967295
 8004a24:	d106      	bne.n	8004a34 <_dtoa_r+0x6c4>
 8004a26:	9a02      	ldr	r2, [sp, #8]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d107      	bne.n	8004a3c <_dtoa_r+0x6cc>
 8004a2c:	2330      	movs	r3, #48	; 0x30
 8004a2e:	7013      	strb	r3, [r2, #0]
 8004a30:	3701      	adds	r7, #1
 8004a32:	4613      	mov	r3, r2
 8004a34:	781a      	ldrb	r2, [r3, #0]
 8004a36:	3201      	adds	r2, #1
 8004a38:	701a      	strb	r2, [r3, #0]
 8004a3a:	e78d      	b.n	8004958 <_dtoa_r+0x5e8>
 8004a3c:	461d      	mov	r5, r3
 8004a3e:	e7ec      	b.n	8004a1a <_dtoa_r+0x6aa>
 8004a40:	2200      	movs	r2, #0
 8004a42:	4ba4      	ldr	r3, [pc, #656]	; (8004cd4 <_dtoa_r+0x964>)
 8004a44:	f7fb fdd4 	bl	80005f0 <__aeabi_dmul>
 8004a48:	2200      	movs	r2, #0
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	4606      	mov	r6, r0
 8004a4e:	460f      	mov	r7, r1
 8004a50:	f7fc f836 	bl	8000ac0 <__aeabi_dcmpeq>
 8004a54:	2800      	cmp	r0, #0
 8004a56:	d09a      	beq.n	800498e <_dtoa_r+0x61e>
 8004a58:	e7ce      	b.n	80049f8 <_dtoa_r+0x688>
 8004a5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a5c:	2a00      	cmp	r2, #0
 8004a5e:	f000 80cd 	beq.w	8004bfc <_dtoa_r+0x88c>
 8004a62:	9a07      	ldr	r2, [sp, #28]
 8004a64:	2a01      	cmp	r2, #1
 8004a66:	f300 80af 	bgt.w	8004bc8 <_dtoa_r+0x858>
 8004a6a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004a6c:	2a00      	cmp	r2, #0
 8004a6e:	f000 80a7 	beq.w	8004bc0 <_dtoa_r+0x850>
 8004a72:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004a76:	9e08      	ldr	r6, [sp, #32]
 8004a78:	9d05      	ldr	r5, [sp, #20]
 8004a7a:	9a05      	ldr	r2, [sp, #20]
 8004a7c:	441a      	add	r2, r3
 8004a7e:	9205      	str	r2, [sp, #20]
 8004a80:	9a06      	ldr	r2, [sp, #24]
 8004a82:	2101      	movs	r1, #1
 8004a84:	441a      	add	r2, r3
 8004a86:	4620      	mov	r0, r4
 8004a88:	9206      	str	r2, [sp, #24]
 8004a8a:	f000 fd4f 	bl	800552c <__i2b>
 8004a8e:	4607      	mov	r7, r0
 8004a90:	2d00      	cmp	r5, #0
 8004a92:	dd0c      	ble.n	8004aae <_dtoa_r+0x73e>
 8004a94:	9b06      	ldr	r3, [sp, #24]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	dd09      	ble.n	8004aae <_dtoa_r+0x73e>
 8004a9a:	42ab      	cmp	r3, r5
 8004a9c:	9a05      	ldr	r2, [sp, #20]
 8004a9e:	bfa8      	it	ge
 8004aa0:	462b      	movge	r3, r5
 8004aa2:	1ad2      	subs	r2, r2, r3
 8004aa4:	9205      	str	r2, [sp, #20]
 8004aa6:	9a06      	ldr	r2, [sp, #24]
 8004aa8:	1aed      	subs	r5, r5, r3
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	9306      	str	r3, [sp, #24]
 8004aae:	9b08      	ldr	r3, [sp, #32]
 8004ab0:	b1f3      	cbz	r3, 8004af0 <_dtoa_r+0x780>
 8004ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f000 80a5 	beq.w	8004c04 <_dtoa_r+0x894>
 8004aba:	2e00      	cmp	r6, #0
 8004abc:	dd10      	ble.n	8004ae0 <_dtoa_r+0x770>
 8004abe:	4639      	mov	r1, r7
 8004ac0:	4632      	mov	r2, r6
 8004ac2:	4620      	mov	r0, r4
 8004ac4:	f000 fdc8 	bl	8005658 <__pow5mult>
 8004ac8:	4652      	mov	r2, sl
 8004aca:	4601      	mov	r1, r0
 8004acc:	4607      	mov	r7, r0
 8004ace:	4620      	mov	r0, r4
 8004ad0:	f000 fd35 	bl	800553e <__multiply>
 8004ad4:	4651      	mov	r1, sl
 8004ad6:	4680      	mov	r8, r0
 8004ad8:	4620      	mov	r0, r4
 8004ada:	f000 fc87 	bl	80053ec <_Bfree>
 8004ade:	46c2      	mov	sl, r8
 8004ae0:	9b08      	ldr	r3, [sp, #32]
 8004ae2:	1b9a      	subs	r2, r3, r6
 8004ae4:	d004      	beq.n	8004af0 <_dtoa_r+0x780>
 8004ae6:	4651      	mov	r1, sl
 8004ae8:	4620      	mov	r0, r4
 8004aea:	f000 fdb5 	bl	8005658 <__pow5mult>
 8004aee:	4682      	mov	sl, r0
 8004af0:	2101      	movs	r1, #1
 8004af2:	4620      	mov	r0, r4
 8004af4:	f000 fd1a 	bl	800552c <__i2b>
 8004af8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	4606      	mov	r6, r0
 8004afe:	f340 8083 	ble.w	8004c08 <_dtoa_r+0x898>
 8004b02:	461a      	mov	r2, r3
 8004b04:	4601      	mov	r1, r0
 8004b06:	4620      	mov	r0, r4
 8004b08:	f000 fda6 	bl	8005658 <__pow5mult>
 8004b0c:	9b07      	ldr	r3, [sp, #28]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	4606      	mov	r6, r0
 8004b12:	dd7c      	ble.n	8004c0e <_dtoa_r+0x89e>
 8004b14:	f04f 0800 	mov.w	r8, #0
 8004b18:	6933      	ldr	r3, [r6, #16]
 8004b1a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004b1e:	6918      	ldr	r0, [r3, #16]
 8004b20:	f000 fcb6 	bl	8005490 <__hi0bits>
 8004b24:	f1c0 0020 	rsb	r0, r0, #32
 8004b28:	9b06      	ldr	r3, [sp, #24]
 8004b2a:	4418      	add	r0, r3
 8004b2c:	f010 001f 	ands.w	r0, r0, #31
 8004b30:	f000 8096 	beq.w	8004c60 <_dtoa_r+0x8f0>
 8004b34:	f1c0 0320 	rsb	r3, r0, #32
 8004b38:	2b04      	cmp	r3, #4
 8004b3a:	f340 8087 	ble.w	8004c4c <_dtoa_r+0x8dc>
 8004b3e:	9b05      	ldr	r3, [sp, #20]
 8004b40:	f1c0 001c 	rsb	r0, r0, #28
 8004b44:	4403      	add	r3, r0
 8004b46:	9305      	str	r3, [sp, #20]
 8004b48:	9b06      	ldr	r3, [sp, #24]
 8004b4a:	4405      	add	r5, r0
 8004b4c:	4403      	add	r3, r0
 8004b4e:	9306      	str	r3, [sp, #24]
 8004b50:	9b05      	ldr	r3, [sp, #20]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	dd05      	ble.n	8004b62 <_dtoa_r+0x7f2>
 8004b56:	4651      	mov	r1, sl
 8004b58:	461a      	mov	r2, r3
 8004b5a:	4620      	mov	r0, r4
 8004b5c:	f000 fdca 	bl	80056f4 <__lshift>
 8004b60:	4682      	mov	sl, r0
 8004b62:	9b06      	ldr	r3, [sp, #24]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	dd05      	ble.n	8004b74 <_dtoa_r+0x804>
 8004b68:	4631      	mov	r1, r6
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	4620      	mov	r0, r4
 8004b6e:	f000 fdc1 	bl	80056f4 <__lshift>
 8004b72:	4606      	mov	r6, r0
 8004b74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d074      	beq.n	8004c64 <_dtoa_r+0x8f4>
 8004b7a:	4631      	mov	r1, r6
 8004b7c:	4650      	mov	r0, sl
 8004b7e:	f000 fe0a 	bl	8005796 <__mcmp>
 8004b82:	2800      	cmp	r0, #0
 8004b84:	da6e      	bge.n	8004c64 <_dtoa_r+0x8f4>
 8004b86:	2300      	movs	r3, #0
 8004b88:	4651      	mov	r1, sl
 8004b8a:	220a      	movs	r2, #10
 8004b8c:	4620      	mov	r0, r4
 8004b8e:	f000 fc44 	bl	800541a <__multadd>
 8004b92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b94:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004b98:	4682      	mov	sl, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 81a8 	beq.w	8004ef0 <_dtoa_r+0xb80>
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	4639      	mov	r1, r7
 8004ba4:	220a      	movs	r2, #10
 8004ba6:	4620      	mov	r0, r4
 8004ba8:	f000 fc37 	bl	800541a <__multadd>
 8004bac:	9b04      	ldr	r3, [sp, #16]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	4607      	mov	r7, r0
 8004bb2:	f300 80c8 	bgt.w	8004d46 <_dtoa_r+0x9d6>
 8004bb6:	9b07      	ldr	r3, [sp, #28]
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	f340 80c4 	ble.w	8004d46 <_dtoa_r+0x9d6>
 8004bbe:	e059      	b.n	8004c74 <_dtoa_r+0x904>
 8004bc0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004bc2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004bc6:	e756      	b.n	8004a76 <_dtoa_r+0x706>
 8004bc8:	9b03      	ldr	r3, [sp, #12]
 8004bca:	1e5e      	subs	r6, r3, #1
 8004bcc:	9b08      	ldr	r3, [sp, #32]
 8004bce:	42b3      	cmp	r3, r6
 8004bd0:	bfbf      	itttt	lt
 8004bd2:	9b08      	ldrlt	r3, [sp, #32]
 8004bd4:	9608      	strlt	r6, [sp, #32]
 8004bd6:	1af2      	sublt	r2, r6, r3
 8004bd8:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8004bda:	bfb6      	itet	lt
 8004bdc:	189b      	addlt	r3, r3, r2
 8004bde:	1b9e      	subge	r6, r3, r6
 8004be0:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8004be2:	9b03      	ldr	r3, [sp, #12]
 8004be4:	bfb8      	it	lt
 8004be6:	2600      	movlt	r6, #0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	bfb9      	ittee	lt
 8004bec:	9b05      	ldrlt	r3, [sp, #20]
 8004bee:	9a03      	ldrlt	r2, [sp, #12]
 8004bf0:	9d05      	ldrge	r5, [sp, #20]
 8004bf2:	9b03      	ldrge	r3, [sp, #12]
 8004bf4:	bfbc      	itt	lt
 8004bf6:	1a9d      	sublt	r5, r3, r2
 8004bf8:	2300      	movlt	r3, #0
 8004bfa:	e73e      	b.n	8004a7a <_dtoa_r+0x70a>
 8004bfc:	9e08      	ldr	r6, [sp, #32]
 8004bfe:	9d05      	ldr	r5, [sp, #20]
 8004c00:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004c02:	e745      	b.n	8004a90 <_dtoa_r+0x720>
 8004c04:	9a08      	ldr	r2, [sp, #32]
 8004c06:	e76e      	b.n	8004ae6 <_dtoa_r+0x776>
 8004c08:	9b07      	ldr	r3, [sp, #28]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	dc19      	bgt.n	8004c42 <_dtoa_r+0x8d2>
 8004c0e:	9b00      	ldr	r3, [sp, #0]
 8004c10:	b9bb      	cbnz	r3, 8004c42 <_dtoa_r+0x8d2>
 8004c12:	9b01      	ldr	r3, [sp, #4]
 8004c14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c18:	b99b      	cbnz	r3, 8004c42 <_dtoa_r+0x8d2>
 8004c1a:	9b01      	ldr	r3, [sp, #4]
 8004c1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c20:	0d1b      	lsrs	r3, r3, #20
 8004c22:	051b      	lsls	r3, r3, #20
 8004c24:	b183      	cbz	r3, 8004c48 <_dtoa_r+0x8d8>
 8004c26:	9b05      	ldr	r3, [sp, #20]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	9305      	str	r3, [sp, #20]
 8004c2c:	9b06      	ldr	r3, [sp, #24]
 8004c2e:	3301      	adds	r3, #1
 8004c30:	9306      	str	r3, [sp, #24]
 8004c32:	f04f 0801 	mov.w	r8, #1
 8004c36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f47f af6d 	bne.w	8004b18 <_dtoa_r+0x7a8>
 8004c3e:	2001      	movs	r0, #1
 8004c40:	e772      	b.n	8004b28 <_dtoa_r+0x7b8>
 8004c42:	f04f 0800 	mov.w	r8, #0
 8004c46:	e7f6      	b.n	8004c36 <_dtoa_r+0x8c6>
 8004c48:	4698      	mov	r8, r3
 8004c4a:	e7f4      	b.n	8004c36 <_dtoa_r+0x8c6>
 8004c4c:	d080      	beq.n	8004b50 <_dtoa_r+0x7e0>
 8004c4e:	9a05      	ldr	r2, [sp, #20]
 8004c50:	331c      	adds	r3, #28
 8004c52:	441a      	add	r2, r3
 8004c54:	9205      	str	r2, [sp, #20]
 8004c56:	9a06      	ldr	r2, [sp, #24]
 8004c58:	441a      	add	r2, r3
 8004c5a:	441d      	add	r5, r3
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	e776      	b.n	8004b4e <_dtoa_r+0x7de>
 8004c60:	4603      	mov	r3, r0
 8004c62:	e7f4      	b.n	8004c4e <_dtoa_r+0x8de>
 8004c64:	9b03      	ldr	r3, [sp, #12]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	dc36      	bgt.n	8004cd8 <_dtoa_r+0x968>
 8004c6a:	9b07      	ldr	r3, [sp, #28]
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	dd33      	ble.n	8004cd8 <_dtoa_r+0x968>
 8004c70:	9b03      	ldr	r3, [sp, #12]
 8004c72:	9304      	str	r3, [sp, #16]
 8004c74:	9b04      	ldr	r3, [sp, #16]
 8004c76:	b963      	cbnz	r3, 8004c92 <_dtoa_r+0x922>
 8004c78:	4631      	mov	r1, r6
 8004c7a:	2205      	movs	r2, #5
 8004c7c:	4620      	mov	r0, r4
 8004c7e:	f000 fbcc 	bl	800541a <__multadd>
 8004c82:	4601      	mov	r1, r0
 8004c84:	4606      	mov	r6, r0
 8004c86:	4650      	mov	r0, sl
 8004c88:	f000 fd85 	bl	8005796 <__mcmp>
 8004c8c:	2800      	cmp	r0, #0
 8004c8e:	f73f adb6 	bgt.w	80047fe <_dtoa_r+0x48e>
 8004c92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c94:	9d02      	ldr	r5, [sp, #8]
 8004c96:	ea6f 0b03 	mvn.w	fp, r3
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	9303      	str	r3, [sp, #12]
 8004c9e:	4631      	mov	r1, r6
 8004ca0:	4620      	mov	r0, r4
 8004ca2:	f000 fba3 	bl	80053ec <_Bfree>
 8004ca6:	2f00      	cmp	r7, #0
 8004ca8:	f43f aea6 	beq.w	80049f8 <_dtoa_r+0x688>
 8004cac:	9b03      	ldr	r3, [sp, #12]
 8004cae:	b12b      	cbz	r3, 8004cbc <_dtoa_r+0x94c>
 8004cb0:	42bb      	cmp	r3, r7
 8004cb2:	d003      	beq.n	8004cbc <_dtoa_r+0x94c>
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	f000 fb98 	bl	80053ec <_Bfree>
 8004cbc:	4639      	mov	r1, r7
 8004cbe:	4620      	mov	r0, r4
 8004cc0:	f000 fb94 	bl	80053ec <_Bfree>
 8004cc4:	e698      	b.n	80049f8 <_dtoa_r+0x688>
 8004cc6:	2600      	movs	r6, #0
 8004cc8:	4637      	mov	r7, r6
 8004cca:	e7e2      	b.n	8004c92 <_dtoa_r+0x922>
 8004ccc:	46bb      	mov	fp, r7
 8004cce:	4637      	mov	r7, r6
 8004cd0:	e595      	b.n	80047fe <_dtoa_r+0x48e>
 8004cd2:	bf00      	nop
 8004cd4:	40240000 	.word	0x40240000
 8004cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cda:	bb93      	cbnz	r3, 8004d42 <_dtoa_r+0x9d2>
 8004cdc:	9b03      	ldr	r3, [sp, #12]
 8004cde:	9304      	str	r3, [sp, #16]
 8004ce0:	9d02      	ldr	r5, [sp, #8]
 8004ce2:	4631      	mov	r1, r6
 8004ce4:	4650      	mov	r0, sl
 8004ce6:	f7ff fab7 	bl	8004258 <quorem>
 8004cea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004cee:	f805 9b01 	strb.w	r9, [r5], #1
 8004cf2:	9b02      	ldr	r3, [sp, #8]
 8004cf4:	9a04      	ldr	r2, [sp, #16]
 8004cf6:	1aeb      	subs	r3, r5, r3
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	f300 80dc 	bgt.w	8004eb6 <_dtoa_r+0xb46>
 8004cfe:	9b02      	ldr	r3, [sp, #8]
 8004d00:	2a01      	cmp	r2, #1
 8004d02:	bfac      	ite	ge
 8004d04:	189b      	addge	r3, r3, r2
 8004d06:	3301      	addlt	r3, #1
 8004d08:	4698      	mov	r8, r3
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	9303      	str	r3, [sp, #12]
 8004d0e:	4651      	mov	r1, sl
 8004d10:	2201      	movs	r2, #1
 8004d12:	4620      	mov	r0, r4
 8004d14:	f000 fcee 	bl	80056f4 <__lshift>
 8004d18:	4631      	mov	r1, r6
 8004d1a:	4682      	mov	sl, r0
 8004d1c:	f000 fd3b 	bl	8005796 <__mcmp>
 8004d20:	2800      	cmp	r0, #0
 8004d22:	f300 808d 	bgt.w	8004e40 <_dtoa_r+0xad0>
 8004d26:	d103      	bne.n	8004d30 <_dtoa_r+0x9c0>
 8004d28:	f019 0f01 	tst.w	r9, #1
 8004d2c:	f040 8088 	bne.w	8004e40 <_dtoa_r+0xad0>
 8004d30:	4645      	mov	r5, r8
 8004d32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004d36:	2b30      	cmp	r3, #48	; 0x30
 8004d38:	f105 32ff 	add.w	r2, r5, #4294967295
 8004d3c:	d1af      	bne.n	8004c9e <_dtoa_r+0x92e>
 8004d3e:	4615      	mov	r5, r2
 8004d40:	e7f7      	b.n	8004d32 <_dtoa_r+0x9c2>
 8004d42:	9b03      	ldr	r3, [sp, #12]
 8004d44:	9304      	str	r3, [sp, #16]
 8004d46:	2d00      	cmp	r5, #0
 8004d48:	dd05      	ble.n	8004d56 <_dtoa_r+0x9e6>
 8004d4a:	4639      	mov	r1, r7
 8004d4c:	462a      	mov	r2, r5
 8004d4e:	4620      	mov	r0, r4
 8004d50:	f000 fcd0 	bl	80056f4 <__lshift>
 8004d54:	4607      	mov	r7, r0
 8004d56:	f1b8 0f00 	cmp.w	r8, #0
 8004d5a:	d04c      	beq.n	8004df6 <_dtoa_r+0xa86>
 8004d5c:	6879      	ldr	r1, [r7, #4]
 8004d5e:	4620      	mov	r0, r4
 8004d60:	f000 fb10 	bl	8005384 <_Balloc>
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	3202      	adds	r2, #2
 8004d68:	4605      	mov	r5, r0
 8004d6a:	0092      	lsls	r2, r2, #2
 8004d6c:	f107 010c 	add.w	r1, r7, #12
 8004d70:	300c      	adds	r0, #12
 8004d72:	f000 faef 	bl	8005354 <memcpy>
 8004d76:	2201      	movs	r2, #1
 8004d78:	4629      	mov	r1, r5
 8004d7a:	4620      	mov	r0, r4
 8004d7c:	f000 fcba 	bl	80056f4 <__lshift>
 8004d80:	9b00      	ldr	r3, [sp, #0]
 8004d82:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8004d86:	9703      	str	r7, [sp, #12]
 8004d88:	f003 0301 	and.w	r3, r3, #1
 8004d8c:	4607      	mov	r7, r0
 8004d8e:	9305      	str	r3, [sp, #20]
 8004d90:	4631      	mov	r1, r6
 8004d92:	4650      	mov	r0, sl
 8004d94:	f7ff fa60 	bl	8004258 <quorem>
 8004d98:	9903      	ldr	r1, [sp, #12]
 8004d9a:	4605      	mov	r5, r0
 8004d9c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004da0:	4650      	mov	r0, sl
 8004da2:	f000 fcf8 	bl	8005796 <__mcmp>
 8004da6:	463a      	mov	r2, r7
 8004da8:	9000      	str	r0, [sp, #0]
 8004daa:	4631      	mov	r1, r6
 8004dac:	4620      	mov	r0, r4
 8004dae:	f000 fd0c 	bl	80057ca <__mdiff>
 8004db2:	68c3      	ldr	r3, [r0, #12]
 8004db4:	4602      	mov	r2, r0
 8004db6:	bb03      	cbnz	r3, 8004dfa <_dtoa_r+0xa8a>
 8004db8:	4601      	mov	r1, r0
 8004dba:	9006      	str	r0, [sp, #24]
 8004dbc:	4650      	mov	r0, sl
 8004dbe:	f000 fcea 	bl	8005796 <__mcmp>
 8004dc2:	9a06      	ldr	r2, [sp, #24]
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	4611      	mov	r1, r2
 8004dc8:	4620      	mov	r0, r4
 8004dca:	9306      	str	r3, [sp, #24]
 8004dcc:	f000 fb0e 	bl	80053ec <_Bfree>
 8004dd0:	9b06      	ldr	r3, [sp, #24]
 8004dd2:	b9a3      	cbnz	r3, 8004dfe <_dtoa_r+0xa8e>
 8004dd4:	9a07      	ldr	r2, [sp, #28]
 8004dd6:	b992      	cbnz	r2, 8004dfe <_dtoa_r+0xa8e>
 8004dd8:	9a05      	ldr	r2, [sp, #20]
 8004dda:	b982      	cbnz	r2, 8004dfe <_dtoa_r+0xa8e>
 8004ddc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004de0:	d029      	beq.n	8004e36 <_dtoa_r+0xac6>
 8004de2:	9b00      	ldr	r3, [sp, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	dd01      	ble.n	8004dec <_dtoa_r+0xa7c>
 8004de8:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8004dec:	f108 0501 	add.w	r5, r8, #1
 8004df0:	f888 9000 	strb.w	r9, [r8]
 8004df4:	e753      	b.n	8004c9e <_dtoa_r+0x92e>
 8004df6:	4638      	mov	r0, r7
 8004df8:	e7c2      	b.n	8004d80 <_dtoa_r+0xa10>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e7e3      	b.n	8004dc6 <_dtoa_r+0xa56>
 8004dfe:	9a00      	ldr	r2, [sp, #0]
 8004e00:	2a00      	cmp	r2, #0
 8004e02:	db04      	blt.n	8004e0e <_dtoa_r+0xa9e>
 8004e04:	d125      	bne.n	8004e52 <_dtoa_r+0xae2>
 8004e06:	9a07      	ldr	r2, [sp, #28]
 8004e08:	bb1a      	cbnz	r2, 8004e52 <_dtoa_r+0xae2>
 8004e0a:	9a05      	ldr	r2, [sp, #20]
 8004e0c:	bb0a      	cbnz	r2, 8004e52 <_dtoa_r+0xae2>
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	ddec      	ble.n	8004dec <_dtoa_r+0xa7c>
 8004e12:	4651      	mov	r1, sl
 8004e14:	2201      	movs	r2, #1
 8004e16:	4620      	mov	r0, r4
 8004e18:	f000 fc6c 	bl	80056f4 <__lshift>
 8004e1c:	4631      	mov	r1, r6
 8004e1e:	4682      	mov	sl, r0
 8004e20:	f000 fcb9 	bl	8005796 <__mcmp>
 8004e24:	2800      	cmp	r0, #0
 8004e26:	dc03      	bgt.n	8004e30 <_dtoa_r+0xac0>
 8004e28:	d1e0      	bne.n	8004dec <_dtoa_r+0xa7c>
 8004e2a:	f019 0f01 	tst.w	r9, #1
 8004e2e:	d0dd      	beq.n	8004dec <_dtoa_r+0xa7c>
 8004e30:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004e34:	d1d8      	bne.n	8004de8 <_dtoa_r+0xa78>
 8004e36:	2339      	movs	r3, #57	; 0x39
 8004e38:	f888 3000 	strb.w	r3, [r8]
 8004e3c:	f108 0801 	add.w	r8, r8, #1
 8004e40:	4645      	mov	r5, r8
 8004e42:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004e46:	2b39      	cmp	r3, #57	; 0x39
 8004e48:	f105 32ff 	add.w	r2, r5, #4294967295
 8004e4c:	d03b      	beq.n	8004ec6 <_dtoa_r+0xb56>
 8004e4e:	3301      	adds	r3, #1
 8004e50:	e040      	b.n	8004ed4 <_dtoa_r+0xb64>
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	f108 0501 	add.w	r5, r8, #1
 8004e58:	dd05      	ble.n	8004e66 <_dtoa_r+0xaf6>
 8004e5a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004e5e:	d0ea      	beq.n	8004e36 <_dtoa_r+0xac6>
 8004e60:	f109 0901 	add.w	r9, r9, #1
 8004e64:	e7c4      	b.n	8004df0 <_dtoa_r+0xa80>
 8004e66:	9b02      	ldr	r3, [sp, #8]
 8004e68:	9a04      	ldr	r2, [sp, #16]
 8004e6a:	f805 9c01 	strb.w	r9, [r5, #-1]
 8004e6e:	1aeb      	subs	r3, r5, r3
 8004e70:	4293      	cmp	r3, r2
 8004e72:	46a8      	mov	r8, r5
 8004e74:	f43f af4b 	beq.w	8004d0e <_dtoa_r+0x99e>
 8004e78:	4651      	mov	r1, sl
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	220a      	movs	r2, #10
 8004e7e:	4620      	mov	r0, r4
 8004e80:	f000 facb 	bl	800541a <__multadd>
 8004e84:	9b03      	ldr	r3, [sp, #12]
 8004e86:	9903      	ldr	r1, [sp, #12]
 8004e88:	42bb      	cmp	r3, r7
 8004e8a:	4682      	mov	sl, r0
 8004e8c:	f04f 0300 	mov.w	r3, #0
 8004e90:	f04f 020a 	mov.w	r2, #10
 8004e94:	4620      	mov	r0, r4
 8004e96:	d104      	bne.n	8004ea2 <_dtoa_r+0xb32>
 8004e98:	f000 fabf 	bl	800541a <__multadd>
 8004e9c:	9003      	str	r0, [sp, #12]
 8004e9e:	4607      	mov	r7, r0
 8004ea0:	e776      	b.n	8004d90 <_dtoa_r+0xa20>
 8004ea2:	f000 faba 	bl	800541a <__multadd>
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	9003      	str	r0, [sp, #12]
 8004eaa:	220a      	movs	r2, #10
 8004eac:	4639      	mov	r1, r7
 8004eae:	4620      	mov	r0, r4
 8004eb0:	f000 fab3 	bl	800541a <__multadd>
 8004eb4:	e7f3      	b.n	8004e9e <_dtoa_r+0xb2e>
 8004eb6:	4651      	mov	r1, sl
 8004eb8:	2300      	movs	r3, #0
 8004eba:	220a      	movs	r2, #10
 8004ebc:	4620      	mov	r0, r4
 8004ebe:	f000 faac 	bl	800541a <__multadd>
 8004ec2:	4682      	mov	sl, r0
 8004ec4:	e70d      	b.n	8004ce2 <_dtoa_r+0x972>
 8004ec6:	9b02      	ldr	r3, [sp, #8]
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d105      	bne.n	8004ed8 <_dtoa_r+0xb68>
 8004ecc:	9a02      	ldr	r2, [sp, #8]
 8004ece:	f10b 0b01 	add.w	fp, fp, #1
 8004ed2:	2331      	movs	r3, #49	; 0x31
 8004ed4:	7013      	strb	r3, [r2, #0]
 8004ed6:	e6e2      	b.n	8004c9e <_dtoa_r+0x92e>
 8004ed8:	4615      	mov	r5, r2
 8004eda:	e7b2      	b.n	8004e42 <_dtoa_r+0xad2>
 8004edc:	4b09      	ldr	r3, [pc, #36]	; (8004f04 <_dtoa_r+0xb94>)
 8004ede:	f7ff baae 	b.w	800443e <_dtoa_r+0xce>
 8004ee2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f47f aa88 	bne.w	80043fa <_dtoa_r+0x8a>
 8004eea:	4b07      	ldr	r3, [pc, #28]	; (8004f08 <_dtoa_r+0xb98>)
 8004eec:	f7ff baa7 	b.w	800443e <_dtoa_r+0xce>
 8004ef0:	9b04      	ldr	r3, [sp, #16]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f73f aef4 	bgt.w	8004ce0 <_dtoa_r+0x970>
 8004ef8:	9b07      	ldr	r3, [sp, #28]
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	f77f aef0 	ble.w	8004ce0 <_dtoa_r+0x970>
 8004f00:	e6b8      	b.n	8004c74 <_dtoa_r+0x904>
 8004f02:	bf00      	nop
 8004f04:	080066a8 	.word	0x080066a8
 8004f08:	080066ca 	.word	0x080066ca

08004f0c <_localeconv_r>:
 8004f0c:	4b04      	ldr	r3, [pc, #16]	; (8004f20 <_localeconv_r+0x14>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6a18      	ldr	r0, [r3, #32]
 8004f12:	4b04      	ldr	r3, [pc, #16]	; (8004f24 <_localeconv_r+0x18>)
 8004f14:	2800      	cmp	r0, #0
 8004f16:	bf08      	it	eq
 8004f18:	4618      	moveq	r0, r3
 8004f1a:	30f0      	adds	r0, #240	; 0xf0
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	20000004 	.word	0x20000004
 8004f24:	20000508 	.word	0x20000508

08004f28 <malloc>:
 8004f28:	4b02      	ldr	r3, [pc, #8]	; (8004f34 <malloc+0xc>)
 8004f2a:	4601      	mov	r1, r0
 8004f2c:	6818      	ldr	r0, [r3, #0]
 8004f2e:	f000 b803 	b.w	8004f38 <_malloc_r>
 8004f32:	bf00      	nop
 8004f34:	20000004 	.word	0x20000004

08004f38 <_malloc_r>:
 8004f38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f3c:	f101 040b 	add.w	r4, r1, #11
 8004f40:	2c16      	cmp	r4, #22
 8004f42:	4681      	mov	r9, r0
 8004f44:	d907      	bls.n	8004f56 <_malloc_r+0x1e>
 8004f46:	f034 0407 	bics.w	r4, r4, #7
 8004f4a:	d505      	bpl.n	8004f58 <_malloc_r+0x20>
 8004f4c:	230c      	movs	r3, #12
 8004f4e:	f8c9 3000 	str.w	r3, [r9]
 8004f52:	2600      	movs	r6, #0
 8004f54:	e131      	b.n	80051ba <_malloc_r+0x282>
 8004f56:	2410      	movs	r4, #16
 8004f58:	428c      	cmp	r4, r1
 8004f5a:	d3f7      	bcc.n	8004f4c <_malloc_r+0x14>
 8004f5c:	4648      	mov	r0, r9
 8004f5e:	f000 fa05 	bl	800536c <__malloc_lock>
 8004f62:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8004f66:	4d9c      	ldr	r5, [pc, #624]	; (80051d8 <_malloc_r+0x2a0>)
 8004f68:	d236      	bcs.n	8004fd8 <_malloc_r+0xa0>
 8004f6a:	f104 0208 	add.w	r2, r4, #8
 8004f6e:	442a      	add	r2, r5
 8004f70:	f1a2 0108 	sub.w	r1, r2, #8
 8004f74:	6856      	ldr	r6, [r2, #4]
 8004f76:	428e      	cmp	r6, r1
 8004f78:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8004f7c:	d102      	bne.n	8004f84 <_malloc_r+0x4c>
 8004f7e:	68d6      	ldr	r6, [r2, #12]
 8004f80:	42b2      	cmp	r2, r6
 8004f82:	d010      	beq.n	8004fa6 <_malloc_r+0x6e>
 8004f84:	6873      	ldr	r3, [r6, #4]
 8004f86:	68f2      	ldr	r2, [r6, #12]
 8004f88:	68b1      	ldr	r1, [r6, #8]
 8004f8a:	f023 0303 	bic.w	r3, r3, #3
 8004f8e:	60ca      	str	r2, [r1, #12]
 8004f90:	4433      	add	r3, r6
 8004f92:	6091      	str	r1, [r2, #8]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	f042 0201 	orr.w	r2, r2, #1
 8004f9a:	605a      	str	r2, [r3, #4]
 8004f9c:	4648      	mov	r0, r9
 8004f9e:	f000 f9eb 	bl	8005378 <__malloc_unlock>
 8004fa2:	3608      	adds	r6, #8
 8004fa4:	e109      	b.n	80051ba <_malloc_r+0x282>
 8004fa6:	3302      	adds	r3, #2
 8004fa8:	4a8c      	ldr	r2, [pc, #560]	; (80051dc <_malloc_r+0x2a4>)
 8004faa:	692e      	ldr	r6, [r5, #16]
 8004fac:	4296      	cmp	r6, r2
 8004fae:	4611      	mov	r1, r2
 8004fb0:	d06d      	beq.n	800508e <_malloc_r+0x156>
 8004fb2:	6870      	ldr	r0, [r6, #4]
 8004fb4:	f020 0003 	bic.w	r0, r0, #3
 8004fb8:	1b07      	subs	r7, r0, r4
 8004fba:	2f0f      	cmp	r7, #15
 8004fbc:	dd47      	ble.n	800504e <_malloc_r+0x116>
 8004fbe:	1933      	adds	r3, r6, r4
 8004fc0:	f044 0401 	orr.w	r4, r4, #1
 8004fc4:	6074      	str	r4, [r6, #4]
 8004fc6:	616b      	str	r3, [r5, #20]
 8004fc8:	612b      	str	r3, [r5, #16]
 8004fca:	60da      	str	r2, [r3, #12]
 8004fcc:	609a      	str	r2, [r3, #8]
 8004fce:	f047 0201 	orr.w	r2, r7, #1
 8004fd2:	605a      	str	r2, [r3, #4]
 8004fd4:	5037      	str	r7, [r6, r0]
 8004fd6:	e7e1      	b.n	8004f9c <_malloc_r+0x64>
 8004fd8:	0a63      	lsrs	r3, r4, #9
 8004fda:	d02a      	beq.n	8005032 <_malloc_r+0xfa>
 8004fdc:	2b04      	cmp	r3, #4
 8004fde:	d812      	bhi.n	8005006 <_malloc_r+0xce>
 8004fe0:	09a3      	lsrs	r3, r4, #6
 8004fe2:	3338      	adds	r3, #56	; 0x38
 8004fe4:	1c5a      	adds	r2, r3, #1
 8004fe6:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004fea:	f1a2 0008 	sub.w	r0, r2, #8
 8004fee:	6856      	ldr	r6, [r2, #4]
 8004ff0:	4286      	cmp	r6, r0
 8004ff2:	d006      	beq.n	8005002 <_malloc_r+0xca>
 8004ff4:	6872      	ldr	r2, [r6, #4]
 8004ff6:	f022 0203 	bic.w	r2, r2, #3
 8004ffa:	1b11      	subs	r1, r2, r4
 8004ffc:	290f      	cmp	r1, #15
 8004ffe:	dd1c      	ble.n	800503a <_malloc_r+0x102>
 8005000:	3b01      	subs	r3, #1
 8005002:	3301      	adds	r3, #1
 8005004:	e7d0      	b.n	8004fa8 <_malloc_r+0x70>
 8005006:	2b14      	cmp	r3, #20
 8005008:	d801      	bhi.n	800500e <_malloc_r+0xd6>
 800500a:	335b      	adds	r3, #91	; 0x5b
 800500c:	e7ea      	b.n	8004fe4 <_malloc_r+0xac>
 800500e:	2b54      	cmp	r3, #84	; 0x54
 8005010:	d802      	bhi.n	8005018 <_malloc_r+0xe0>
 8005012:	0b23      	lsrs	r3, r4, #12
 8005014:	336e      	adds	r3, #110	; 0x6e
 8005016:	e7e5      	b.n	8004fe4 <_malloc_r+0xac>
 8005018:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800501c:	d802      	bhi.n	8005024 <_malloc_r+0xec>
 800501e:	0be3      	lsrs	r3, r4, #15
 8005020:	3377      	adds	r3, #119	; 0x77
 8005022:	e7df      	b.n	8004fe4 <_malloc_r+0xac>
 8005024:	f240 5254 	movw	r2, #1364	; 0x554
 8005028:	4293      	cmp	r3, r2
 800502a:	d804      	bhi.n	8005036 <_malloc_r+0xfe>
 800502c:	0ca3      	lsrs	r3, r4, #18
 800502e:	337c      	adds	r3, #124	; 0x7c
 8005030:	e7d8      	b.n	8004fe4 <_malloc_r+0xac>
 8005032:	233f      	movs	r3, #63	; 0x3f
 8005034:	e7d6      	b.n	8004fe4 <_malloc_r+0xac>
 8005036:	237e      	movs	r3, #126	; 0x7e
 8005038:	e7d4      	b.n	8004fe4 <_malloc_r+0xac>
 800503a:	2900      	cmp	r1, #0
 800503c:	68f1      	ldr	r1, [r6, #12]
 800503e:	db04      	blt.n	800504a <_malloc_r+0x112>
 8005040:	68b3      	ldr	r3, [r6, #8]
 8005042:	60d9      	str	r1, [r3, #12]
 8005044:	608b      	str	r3, [r1, #8]
 8005046:	18b3      	adds	r3, r6, r2
 8005048:	e7a4      	b.n	8004f94 <_malloc_r+0x5c>
 800504a:	460e      	mov	r6, r1
 800504c:	e7d0      	b.n	8004ff0 <_malloc_r+0xb8>
 800504e:	2f00      	cmp	r7, #0
 8005050:	616a      	str	r2, [r5, #20]
 8005052:	612a      	str	r2, [r5, #16]
 8005054:	db05      	blt.n	8005062 <_malloc_r+0x12a>
 8005056:	4430      	add	r0, r6
 8005058:	6843      	ldr	r3, [r0, #4]
 800505a:	f043 0301 	orr.w	r3, r3, #1
 800505e:	6043      	str	r3, [r0, #4]
 8005060:	e79c      	b.n	8004f9c <_malloc_r+0x64>
 8005062:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005066:	d244      	bcs.n	80050f2 <_malloc_r+0x1ba>
 8005068:	08c0      	lsrs	r0, r0, #3
 800506a:	1087      	asrs	r7, r0, #2
 800506c:	2201      	movs	r2, #1
 800506e:	fa02 f707 	lsl.w	r7, r2, r7
 8005072:	686a      	ldr	r2, [r5, #4]
 8005074:	3001      	adds	r0, #1
 8005076:	433a      	orrs	r2, r7
 8005078:	606a      	str	r2, [r5, #4]
 800507a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800507e:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8005082:	60b7      	str	r7, [r6, #8]
 8005084:	3a08      	subs	r2, #8
 8005086:	60f2      	str	r2, [r6, #12]
 8005088:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 800508c:	60fe      	str	r6, [r7, #12]
 800508e:	2001      	movs	r0, #1
 8005090:	109a      	asrs	r2, r3, #2
 8005092:	fa00 f202 	lsl.w	r2, r0, r2
 8005096:	6868      	ldr	r0, [r5, #4]
 8005098:	4282      	cmp	r2, r0
 800509a:	f200 80a1 	bhi.w	80051e0 <_malloc_r+0x2a8>
 800509e:	4202      	tst	r2, r0
 80050a0:	d106      	bne.n	80050b0 <_malloc_r+0x178>
 80050a2:	f023 0303 	bic.w	r3, r3, #3
 80050a6:	0052      	lsls	r2, r2, #1
 80050a8:	4202      	tst	r2, r0
 80050aa:	f103 0304 	add.w	r3, r3, #4
 80050ae:	d0fa      	beq.n	80050a6 <_malloc_r+0x16e>
 80050b0:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 80050b4:	46e0      	mov	r8, ip
 80050b6:	469e      	mov	lr, r3
 80050b8:	f8d8 600c 	ldr.w	r6, [r8, #12]
 80050bc:	4546      	cmp	r6, r8
 80050be:	d153      	bne.n	8005168 <_malloc_r+0x230>
 80050c0:	f10e 0e01 	add.w	lr, lr, #1
 80050c4:	f01e 0f03 	tst.w	lr, #3
 80050c8:	f108 0808 	add.w	r8, r8, #8
 80050cc:	d1f4      	bne.n	80050b8 <_malloc_r+0x180>
 80050ce:	0798      	lsls	r0, r3, #30
 80050d0:	d179      	bne.n	80051c6 <_malloc_r+0x28e>
 80050d2:	686b      	ldr	r3, [r5, #4]
 80050d4:	ea23 0302 	bic.w	r3, r3, r2
 80050d8:	606b      	str	r3, [r5, #4]
 80050da:	6868      	ldr	r0, [r5, #4]
 80050dc:	0052      	lsls	r2, r2, #1
 80050de:	4282      	cmp	r2, r0
 80050e0:	d87e      	bhi.n	80051e0 <_malloc_r+0x2a8>
 80050e2:	2a00      	cmp	r2, #0
 80050e4:	d07c      	beq.n	80051e0 <_malloc_r+0x2a8>
 80050e6:	4673      	mov	r3, lr
 80050e8:	4202      	tst	r2, r0
 80050ea:	d1e1      	bne.n	80050b0 <_malloc_r+0x178>
 80050ec:	3304      	adds	r3, #4
 80050ee:	0052      	lsls	r2, r2, #1
 80050f0:	e7fa      	b.n	80050e8 <_malloc_r+0x1b0>
 80050f2:	0a42      	lsrs	r2, r0, #9
 80050f4:	2a04      	cmp	r2, #4
 80050f6:	d815      	bhi.n	8005124 <_malloc_r+0x1ec>
 80050f8:	0982      	lsrs	r2, r0, #6
 80050fa:	3238      	adds	r2, #56	; 0x38
 80050fc:	1c57      	adds	r7, r2, #1
 80050fe:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8005102:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8005106:	45be      	cmp	lr, r7
 8005108:	d126      	bne.n	8005158 <_malloc_r+0x220>
 800510a:	2001      	movs	r0, #1
 800510c:	1092      	asrs	r2, r2, #2
 800510e:	fa00 f202 	lsl.w	r2, r0, r2
 8005112:	6868      	ldr	r0, [r5, #4]
 8005114:	4310      	orrs	r0, r2
 8005116:	6068      	str	r0, [r5, #4]
 8005118:	f8c6 e00c 	str.w	lr, [r6, #12]
 800511c:	60b7      	str	r7, [r6, #8]
 800511e:	f8ce 6008 	str.w	r6, [lr, #8]
 8005122:	e7b3      	b.n	800508c <_malloc_r+0x154>
 8005124:	2a14      	cmp	r2, #20
 8005126:	d801      	bhi.n	800512c <_malloc_r+0x1f4>
 8005128:	325b      	adds	r2, #91	; 0x5b
 800512a:	e7e7      	b.n	80050fc <_malloc_r+0x1c4>
 800512c:	2a54      	cmp	r2, #84	; 0x54
 800512e:	d802      	bhi.n	8005136 <_malloc_r+0x1fe>
 8005130:	0b02      	lsrs	r2, r0, #12
 8005132:	326e      	adds	r2, #110	; 0x6e
 8005134:	e7e2      	b.n	80050fc <_malloc_r+0x1c4>
 8005136:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800513a:	d802      	bhi.n	8005142 <_malloc_r+0x20a>
 800513c:	0bc2      	lsrs	r2, r0, #15
 800513e:	3277      	adds	r2, #119	; 0x77
 8005140:	e7dc      	b.n	80050fc <_malloc_r+0x1c4>
 8005142:	f240 5754 	movw	r7, #1364	; 0x554
 8005146:	42ba      	cmp	r2, r7
 8005148:	bf9a      	itte	ls
 800514a:	0c82      	lsrls	r2, r0, #18
 800514c:	327c      	addls	r2, #124	; 0x7c
 800514e:	227e      	movhi	r2, #126	; 0x7e
 8005150:	e7d4      	b.n	80050fc <_malloc_r+0x1c4>
 8005152:	68bf      	ldr	r7, [r7, #8]
 8005154:	45be      	cmp	lr, r7
 8005156:	d004      	beq.n	8005162 <_malloc_r+0x22a>
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	f022 0203 	bic.w	r2, r2, #3
 800515e:	4290      	cmp	r0, r2
 8005160:	d3f7      	bcc.n	8005152 <_malloc_r+0x21a>
 8005162:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8005166:	e7d7      	b.n	8005118 <_malloc_r+0x1e0>
 8005168:	6870      	ldr	r0, [r6, #4]
 800516a:	68f7      	ldr	r7, [r6, #12]
 800516c:	f020 0003 	bic.w	r0, r0, #3
 8005170:	eba0 0a04 	sub.w	sl, r0, r4
 8005174:	f1ba 0f0f 	cmp.w	sl, #15
 8005178:	dd10      	ble.n	800519c <_malloc_r+0x264>
 800517a:	68b2      	ldr	r2, [r6, #8]
 800517c:	1933      	adds	r3, r6, r4
 800517e:	f044 0401 	orr.w	r4, r4, #1
 8005182:	6074      	str	r4, [r6, #4]
 8005184:	60d7      	str	r7, [r2, #12]
 8005186:	60ba      	str	r2, [r7, #8]
 8005188:	f04a 0201 	orr.w	r2, sl, #1
 800518c:	616b      	str	r3, [r5, #20]
 800518e:	612b      	str	r3, [r5, #16]
 8005190:	60d9      	str	r1, [r3, #12]
 8005192:	6099      	str	r1, [r3, #8]
 8005194:	605a      	str	r2, [r3, #4]
 8005196:	f846 a000 	str.w	sl, [r6, r0]
 800519a:	e6ff      	b.n	8004f9c <_malloc_r+0x64>
 800519c:	f1ba 0f00 	cmp.w	sl, #0
 80051a0:	db0f      	blt.n	80051c2 <_malloc_r+0x28a>
 80051a2:	4430      	add	r0, r6
 80051a4:	6843      	ldr	r3, [r0, #4]
 80051a6:	f043 0301 	orr.w	r3, r3, #1
 80051aa:	6043      	str	r3, [r0, #4]
 80051ac:	f856 3f08 	ldr.w	r3, [r6, #8]!
 80051b0:	4648      	mov	r0, r9
 80051b2:	60df      	str	r7, [r3, #12]
 80051b4:	60bb      	str	r3, [r7, #8]
 80051b6:	f000 f8df 	bl	8005378 <__malloc_unlock>
 80051ba:	4630      	mov	r0, r6
 80051bc:	b003      	add	sp, #12
 80051be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051c2:	463e      	mov	r6, r7
 80051c4:	e77a      	b.n	80050bc <_malloc_r+0x184>
 80051c6:	f85c 0908 	ldr.w	r0, [ip], #-8
 80051ca:	4584      	cmp	ip, r0
 80051cc:	f103 33ff 	add.w	r3, r3, #4294967295
 80051d0:	f43f af7d 	beq.w	80050ce <_malloc_r+0x196>
 80051d4:	e781      	b.n	80050da <_malloc_r+0x1a2>
 80051d6:	bf00      	nop
 80051d8:	200000f8 	.word	0x200000f8
 80051dc:	20000100 	.word	0x20000100
 80051e0:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80051e4:	f8db 6004 	ldr.w	r6, [fp, #4]
 80051e8:	f026 0603 	bic.w	r6, r6, #3
 80051ec:	42b4      	cmp	r4, r6
 80051ee:	d803      	bhi.n	80051f8 <_malloc_r+0x2c0>
 80051f0:	1b33      	subs	r3, r6, r4
 80051f2:	2b0f      	cmp	r3, #15
 80051f4:	f300 8096 	bgt.w	8005324 <_malloc_r+0x3ec>
 80051f8:	4a4f      	ldr	r2, [pc, #316]	; (8005338 <_malloc_r+0x400>)
 80051fa:	6817      	ldr	r7, [r2, #0]
 80051fc:	4a4f      	ldr	r2, [pc, #316]	; (800533c <_malloc_r+0x404>)
 80051fe:	6811      	ldr	r1, [r2, #0]
 8005200:	3710      	adds	r7, #16
 8005202:	3101      	adds	r1, #1
 8005204:	eb0b 0306 	add.w	r3, fp, r6
 8005208:	4427      	add	r7, r4
 800520a:	d005      	beq.n	8005218 <_malloc_r+0x2e0>
 800520c:	494c      	ldr	r1, [pc, #304]	; (8005340 <_malloc_r+0x408>)
 800520e:	3901      	subs	r1, #1
 8005210:	440f      	add	r7, r1
 8005212:	3101      	adds	r1, #1
 8005214:	4249      	negs	r1, r1
 8005216:	400f      	ands	r7, r1
 8005218:	4639      	mov	r1, r7
 800521a:	4648      	mov	r0, r9
 800521c:	9201      	str	r2, [sp, #4]
 800521e:	9300      	str	r3, [sp, #0]
 8005220:	f000 fb80 	bl	8005924 <_sbrk_r>
 8005224:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005228:	4680      	mov	r8, r0
 800522a:	d056      	beq.n	80052da <_malloc_r+0x3a2>
 800522c:	9b00      	ldr	r3, [sp, #0]
 800522e:	9a01      	ldr	r2, [sp, #4]
 8005230:	4283      	cmp	r3, r0
 8005232:	d901      	bls.n	8005238 <_malloc_r+0x300>
 8005234:	45ab      	cmp	fp, r5
 8005236:	d150      	bne.n	80052da <_malloc_r+0x3a2>
 8005238:	4842      	ldr	r0, [pc, #264]	; (8005344 <_malloc_r+0x40c>)
 800523a:	6801      	ldr	r1, [r0, #0]
 800523c:	4543      	cmp	r3, r8
 800523e:	eb07 0e01 	add.w	lr, r7, r1
 8005242:	f8c0 e000 	str.w	lr, [r0]
 8005246:	4940      	ldr	r1, [pc, #256]	; (8005348 <_malloc_r+0x410>)
 8005248:	4682      	mov	sl, r0
 800524a:	d113      	bne.n	8005274 <_malloc_r+0x33c>
 800524c:	420b      	tst	r3, r1
 800524e:	d111      	bne.n	8005274 <_malloc_r+0x33c>
 8005250:	68ab      	ldr	r3, [r5, #8]
 8005252:	443e      	add	r6, r7
 8005254:	f046 0601 	orr.w	r6, r6, #1
 8005258:	605e      	str	r6, [r3, #4]
 800525a:	4a3c      	ldr	r2, [pc, #240]	; (800534c <_malloc_r+0x414>)
 800525c:	f8da 3000 	ldr.w	r3, [sl]
 8005260:	6811      	ldr	r1, [r2, #0]
 8005262:	428b      	cmp	r3, r1
 8005264:	bf88      	it	hi
 8005266:	6013      	strhi	r3, [r2, #0]
 8005268:	4a39      	ldr	r2, [pc, #228]	; (8005350 <_malloc_r+0x418>)
 800526a:	6811      	ldr	r1, [r2, #0]
 800526c:	428b      	cmp	r3, r1
 800526e:	bf88      	it	hi
 8005270:	6013      	strhi	r3, [r2, #0]
 8005272:	e032      	b.n	80052da <_malloc_r+0x3a2>
 8005274:	6810      	ldr	r0, [r2, #0]
 8005276:	3001      	adds	r0, #1
 8005278:	bf1b      	ittet	ne
 800527a:	eba8 0303 	subne.w	r3, r8, r3
 800527e:	4473      	addne	r3, lr
 8005280:	f8c2 8000 	streq.w	r8, [r2]
 8005284:	f8ca 3000 	strne.w	r3, [sl]
 8005288:	f018 0007 	ands.w	r0, r8, #7
 800528c:	bf1c      	itt	ne
 800528e:	f1c0 0008 	rsbne	r0, r0, #8
 8005292:	4480      	addne	r8, r0
 8005294:	4b2a      	ldr	r3, [pc, #168]	; (8005340 <_malloc_r+0x408>)
 8005296:	4447      	add	r7, r8
 8005298:	4418      	add	r0, r3
 800529a:	400f      	ands	r7, r1
 800529c:	1bc7      	subs	r7, r0, r7
 800529e:	4639      	mov	r1, r7
 80052a0:	4648      	mov	r0, r9
 80052a2:	f000 fb3f 	bl	8005924 <_sbrk_r>
 80052a6:	1c43      	adds	r3, r0, #1
 80052a8:	bf08      	it	eq
 80052aa:	4640      	moveq	r0, r8
 80052ac:	f8da 3000 	ldr.w	r3, [sl]
 80052b0:	f8c5 8008 	str.w	r8, [r5, #8]
 80052b4:	bf08      	it	eq
 80052b6:	2700      	moveq	r7, #0
 80052b8:	eba0 0008 	sub.w	r0, r0, r8
 80052bc:	443b      	add	r3, r7
 80052be:	4407      	add	r7, r0
 80052c0:	f047 0701 	orr.w	r7, r7, #1
 80052c4:	45ab      	cmp	fp, r5
 80052c6:	f8ca 3000 	str.w	r3, [sl]
 80052ca:	f8c8 7004 	str.w	r7, [r8, #4]
 80052ce:	d0c4      	beq.n	800525a <_malloc_r+0x322>
 80052d0:	2e0f      	cmp	r6, #15
 80052d2:	d810      	bhi.n	80052f6 <_malloc_r+0x3be>
 80052d4:	2301      	movs	r3, #1
 80052d6:	f8c8 3004 	str.w	r3, [r8, #4]
 80052da:	68ab      	ldr	r3, [r5, #8]
 80052dc:	685a      	ldr	r2, [r3, #4]
 80052de:	f022 0203 	bic.w	r2, r2, #3
 80052e2:	4294      	cmp	r4, r2
 80052e4:	eba2 0304 	sub.w	r3, r2, r4
 80052e8:	d801      	bhi.n	80052ee <_malloc_r+0x3b6>
 80052ea:	2b0f      	cmp	r3, #15
 80052ec:	dc1a      	bgt.n	8005324 <_malloc_r+0x3ec>
 80052ee:	4648      	mov	r0, r9
 80052f0:	f000 f842 	bl	8005378 <__malloc_unlock>
 80052f4:	e62d      	b.n	8004f52 <_malloc_r+0x1a>
 80052f6:	f8db 3004 	ldr.w	r3, [fp, #4]
 80052fa:	3e0c      	subs	r6, #12
 80052fc:	f026 0607 	bic.w	r6, r6, #7
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	4333      	orrs	r3, r6
 8005306:	f8cb 3004 	str.w	r3, [fp, #4]
 800530a:	eb0b 0306 	add.w	r3, fp, r6
 800530e:	2205      	movs	r2, #5
 8005310:	2e0f      	cmp	r6, #15
 8005312:	605a      	str	r2, [r3, #4]
 8005314:	609a      	str	r2, [r3, #8]
 8005316:	d9a0      	bls.n	800525a <_malloc_r+0x322>
 8005318:	f10b 0108 	add.w	r1, fp, #8
 800531c:	4648      	mov	r0, r9
 800531e:	f000 fc0f 	bl	8005b40 <_free_r>
 8005322:	e79a      	b.n	800525a <_malloc_r+0x322>
 8005324:	68ae      	ldr	r6, [r5, #8]
 8005326:	f044 0201 	orr.w	r2, r4, #1
 800532a:	4434      	add	r4, r6
 800532c:	f043 0301 	orr.w	r3, r3, #1
 8005330:	6072      	str	r2, [r6, #4]
 8005332:	60ac      	str	r4, [r5, #8]
 8005334:	6063      	str	r3, [r4, #4]
 8005336:	e631      	b.n	8004f9c <_malloc_r+0x64>
 8005338:	200006c4 	.word	0x200006c4
 800533c:	20000500 	.word	0x20000500
 8005340:	00000080 	.word	0x00000080
 8005344:	20000694 	.word	0x20000694
 8005348:	0000007f 	.word	0x0000007f
 800534c:	200006bc 	.word	0x200006bc
 8005350:	200006c0 	.word	0x200006c0

08005354 <memcpy>:
 8005354:	b510      	push	{r4, lr}
 8005356:	1e43      	subs	r3, r0, #1
 8005358:	440a      	add	r2, r1
 800535a:	4291      	cmp	r1, r2
 800535c:	d100      	bne.n	8005360 <memcpy+0xc>
 800535e:	bd10      	pop	{r4, pc}
 8005360:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005364:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005368:	e7f7      	b.n	800535a <memcpy+0x6>
	...

0800536c <__malloc_lock>:
 800536c:	4801      	ldr	r0, [pc, #4]	; (8005374 <__malloc_lock+0x8>)
 800536e:	f000 bca3 	b.w	8005cb8 <__retarget_lock_acquire_recursive>
 8005372:	bf00      	nop
 8005374:	200007a4 	.word	0x200007a4

08005378 <__malloc_unlock>:
 8005378:	4801      	ldr	r0, [pc, #4]	; (8005380 <__malloc_unlock+0x8>)
 800537a:	f000 bc9e 	b.w	8005cba <__retarget_lock_release_recursive>
 800537e:	bf00      	nop
 8005380:	200007a4 	.word	0x200007a4

08005384 <_Balloc>:
 8005384:	b570      	push	{r4, r5, r6, lr}
 8005386:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005388:	4604      	mov	r4, r0
 800538a:	460e      	mov	r6, r1
 800538c:	b93d      	cbnz	r5, 800539e <_Balloc+0x1a>
 800538e:	2010      	movs	r0, #16
 8005390:	f7ff fdca 	bl	8004f28 <malloc>
 8005394:	6260      	str	r0, [r4, #36]	; 0x24
 8005396:	6045      	str	r5, [r0, #4]
 8005398:	6085      	str	r5, [r0, #8]
 800539a:	6005      	str	r5, [r0, #0]
 800539c:	60c5      	str	r5, [r0, #12]
 800539e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80053a0:	68eb      	ldr	r3, [r5, #12]
 80053a2:	b183      	cbz	r3, 80053c6 <_Balloc+0x42>
 80053a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80053ac:	b9b8      	cbnz	r0, 80053de <_Balloc+0x5a>
 80053ae:	2101      	movs	r1, #1
 80053b0:	fa01 f506 	lsl.w	r5, r1, r6
 80053b4:	1d6a      	adds	r2, r5, #5
 80053b6:	0092      	lsls	r2, r2, #2
 80053b8:	4620      	mov	r0, r4
 80053ba:	f000 fb3d 	bl	8005a38 <_calloc_r>
 80053be:	b160      	cbz	r0, 80053da <_Balloc+0x56>
 80053c0:	6046      	str	r6, [r0, #4]
 80053c2:	6085      	str	r5, [r0, #8]
 80053c4:	e00e      	b.n	80053e4 <_Balloc+0x60>
 80053c6:	2221      	movs	r2, #33	; 0x21
 80053c8:	2104      	movs	r1, #4
 80053ca:	4620      	mov	r0, r4
 80053cc:	f000 fb34 	bl	8005a38 <_calloc_r>
 80053d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053d2:	60e8      	str	r0, [r5, #12]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1e4      	bne.n	80053a4 <_Balloc+0x20>
 80053da:	2000      	movs	r0, #0
 80053dc:	bd70      	pop	{r4, r5, r6, pc}
 80053de:	6802      	ldr	r2, [r0, #0]
 80053e0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80053e4:	2300      	movs	r3, #0
 80053e6:	6103      	str	r3, [r0, #16]
 80053e8:	60c3      	str	r3, [r0, #12]
 80053ea:	bd70      	pop	{r4, r5, r6, pc}

080053ec <_Bfree>:
 80053ec:	b570      	push	{r4, r5, r6, lr}
 80053ee:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80053f0:	4606      	mov	r6, r0
 80053f2:	460d      	mov	r5, r1
 80053f4:	b93c      	cbnz	r4, 8005406 <_Bfree+0x1a>
 80053f6:	2010      	movs	r0, #16
 80053f8:	f7ff fd96 	bl	8004f28 <malloc>
 80053fc:	6270      	str	r0, [r6, #36]	; 0x24
 80053fe:	6044      	str	r4, [r0, #4]
 8005400:	6084      	str	r4, [r0, #8]
 8005402:	6004      	str	r4, [r0, #0]
 8005404:	60c4      	str	r4, [r0, #12]
 8005406:	b13d      	cbz	r5, 8005418 <_Bfree+0x2c>
 8005408:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800540a:	686a      	ldr	r2, [r5, #4]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005412:	6029      	str	r1, [r5, #0]
 8005414:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005418:	bd70      	pop	{r4, r5, r6, pc}

0800541a <__multadd>:
 800541a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800541e:	690d      	ldr	r5, [r1, #16]
 8005420:	461f      	mov	r7, r3
 8005422:	4606      	mov	r6, r0
 8005424:	460c      	mov	r4, r1
 8005426:	f101 0e14 	add.w	lr, r1, #20
 800542a:	2300      	movs	r3, #0
 800542c:	f8de 0000 	ldr.w	r0, [lr]
 8005430:	b281      	uxth	r1, r0
 8005432:	fb02 7101 	mla	r1, r2, r1, r7
 8005436:	0c0f      	lsrs	r7, r1, #16
 8005438:	0c00      	lsrs	r0, r0, #16
 800543a:	fb02 7000 	mla	r0, r2, r0, r7
 800543e:	b289      	uxth	r1, r1
 8005440:	3301      	adds	r3, #1
 8005442:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005446:	429d      	cmp	r5, r3
 8005448:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800544c:	f84e 1b04 	str.w	r1, [lr], #4
 8005450:	dcec      	bgt.n	800542c <__multadd+0x12>
 8005452:	b1d7      	cbz	r7, 800548a <__multadd+0x70>
 8005454:	68a3      	ldr	r3, [r4, #8]
 8005456:	429d      	cmp	r5, r3
 8005458:	db12      	blt.n	8005480 <__multadd+0x66>
 800545a:	6861      	ldr	r1, [r4, #4]
 800545c:	4630      	mov	r0, r6
 800545e:	3101      	adds	r1, #1
 8005460:	f7ff ff90 	bl	8005384 <_Balloc>
 8005464:	6922      	ldr	r2, [r4, #16]
 8005466:	3202      	adds	r2, #2
 8005468:	f104 010c 	add.w	r1, r4, #12
 800546c:	4680      	mov	r8, r0
 800546e:	0092      	lsls	r2, r2, #2
 8005470:	300c      	adds	r0, #12
 8005472:	f7ff ff6f 	bl	8005354 <memcpy>
 8005476:	4621      	mov	r1, r4
 8005478:	4630      	mov	r0, r6
 800547a:	f7ff ffb7 	bl	80053ec <_Bfree>
 800547e:	4644      	mov	r4, r8
 8005480:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005484:	3501      	adds	r5, #1
 8005486:	615f      	str	r7, [r3, #20]
 8005488:	6125      	str	r5, [r4, #16]
 800548a:	4620      	mov	r0, r4
 800548c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005490 <__hi0bits>:
 8005490:	0c02      	lsrs	r2, r0, #16
 8005492:	0412      	lsls	r2, r2, #16
 8005494:	4603      	mov	r3, r0
 8005496:	b9b2      	cbnz	r2, 80054c6 <__hi0bits+0x36>
 8005498:	0403      	lsls	r3, r0, #16
 800549a:	2010      	movs	r0, #16
 800549c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80054a0:	bf04      	itt	eq
 80054a2:	021b      	lsleq	r3, r3, #8
 80054a4:	3008      	addeq	r0, #8
 80054a6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80054aa:	bf04      	itt	eq
 80054ac:	011b      	lsleq	r3, r3, #4
 80054ae:	3004      	addeq	r0, #4
 80054b0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80054b4:	bf04      	itt	eq
 80054b6:	009b      	lsleq	r3, r3, #2
 80054b8:	3002      	addeq	r0, #2
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	db06      	blt.n	80054cc <__hi0bits+0x3c>
 80054be:	005b      	lsls	r3, r3, #1
 80054c0:	d503      	bpl.n	80054ca <__hi0bits+0x3a>
 80054c2:	3001      	adds	r0, #1
 80054c4:	4770      	bx	lr
 80054c6:	2000      	movs	r0, #0
 80054c8:	e7e8      	b.n	800549c <__hi0bits+0xc>
 80054ca:	2020      	movs	r0, #32
 80054cc:	4770      	bx	lr

080054ce <__lo0bits>:
 80054ce:	6803      	ldr	r3, [r0, #0]
 80054d0:	f013 0207 	ands.w	r2, r3, #7
 80054d4:	4601      	mov	r1, r0
 80054d6:	d00b      	beq.n	80054f0 <__lo0bits+0x22>
 80054d8:	07da      	lsls	r2, r3, #31
 80054da:	d423      	bmi.n	8005524 <__lo0bits+0x56>
 80054dc:	0798      	lsls	r0, r3, #30
 80054de:	bf49      	itett	mi
 80054e0:	085b      	lsrmi	r3, r3, #1
 80054e2:	089b      	lsrpl	r3, r3, #2
 80054e4:	2001      	movmi	r0, #1
 80054e6:	600b      	strmi	r3, [r1, #0]
 80054e8:	bf5c      	itt	pl
 80054ea:	600b      	strpl	r3, [r1, #0]
 80054ec:	2002      	movpl	r0, #2
 80054ee:	4770      	bx	lr
 80054f0:	b298      	uxth	r0, r3
 80054f2:	b9a8      	cbnz	r0, 8005520 <__lo0bits+0x52>
 80054f4:	0c1b      	lsrs	r3, r3, #16
 80054f6:	2010      	movs	r0, #16
 80054f8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80054fc:	bf04      	itt	eq
 80054fe:	0a1b      	lsreq	r3, r3, #8
 8005500:	3008      	addeq	r0, #8
 8005502:	071a      	lsls	r2, r3, #28
 8005504:	bf04      	itt	eq
 8005506:	091b      	lsreq	r3, r3, #4
 8005508:	3004      	addeq	r0, #4
 800550a:	079a      	lsls	r2, r3, #30
 800550c:	bf04      	itt	eq
 800550e:	089b      	lsreq	r3, r3, #2
 8005510:	3002      	addeq	r0, #2
 8005512:	07da      	lsls	r2, r3, #31
 8005514:	d402      	bmi.n	800551c <__lo0bits+0x4e>
 8005516:	085b      	lsrs	r3, r3, #1
 8005518:	d006      	beq.n	8005528 <__lo0bits+0x5a>
 800551a:	3001      	adds	r0, #1
 800551c:	600b      	str	r3, [r1, #0]
 800551e:	4770      	bx	lr
 8005520:	4610      	mov	r0, r2
 8005522:	e7e9      	b.n	80054f8 <__lo0bits+0x2a>
 8005524:	2000      	movs	r0, #0
 8005526:	4770      	bx	lr
 8005528:	2020      	movs	r0, #32
 800552a:	4770      	bx	lr

0800552c <__i2b>:
 800552c:	b510      	push	{r4, lr}
 800552e:	460c      	mov	r4, r1
 8005530:	2101      	movs	r1, #1
 8005532:	f7ff ff27 	bl	8005384 <_Balloc>
 8005536:	2201      	movs	r2, #1
 8005538:	6144      	str	r4, [r0, #20]
 800553a:	6102      	str	r2, [r0, #16]
 800553c:	bd10      	pop	{r4, pc}

0800553e <__multiply>:
 800553e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005542:	4614      	mov	r4, r2
 8005544:	690a      	ldr	r2, [r1, #16]
 8005546:	6923      	ldr	r3, [r4, #16]
 8005548:	429a      	cmp	r2, r3
 800554a:	bfb8      	it	lt
 800554c:	460b      	movlt	r3, r1
 800554e:	4689      	mov	r9, r1
 8005550:	bfbc      	itt	lt
 8005552:	46a1      	movlt	r9, r4
 8005554:	461c      	movlt	r4, r3
 8005556:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800555a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800555e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8005562:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005566:	eb07 060a 	add.w	r6, r7, sl
 800556a:	429e      	cmp	r6, r3
 800556c:	bfc8      	it	gt
 800556e:	3101      	addgt	r1, #1
 8005570:	f7ff ff08 	bl	8005384 <_Balloc>
 8005574:	f100 0514 	add.w	r5, r0, #20
 8005578:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800557c:	462b      	mov	r3, r5
 800557e:	2200      	movs	r2, #0
 8005580:	4543      	cmp	r3, r8
 8005582:	d316      	bcc.n	80055b2 <__multiply+0x74>
 8005584:	f104 0214 	add.w	r2, r4, #20
 8005588:	f109 0114 	add.w	r1, r9, #20
 800558c:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8005590:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005594:	9301      	str	r3, [sp, #4]
 8005596:	9c01      	ldr	r4, [sp, #4]
 8005598:	4294      	cmp	r4, r2
 800559a:	4613      	mov	r3, r2
 800559c:	d80c      	bhi.n	80055b8 <__multiply+0x7a>
 800559e:	2e00      	cmp	r6, #0
 80055a0:	dd03      	ble.n	80055aa <__multiply+0x6c>
 80055a2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d054      	beq.n	8005654 <__multiply+0x116>
 80055aa:	6106      	str	r6, [r0, #16]
 80055ac:	b003      	add	sp, #12
 80055ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055b2:	f843 2b04 	str.w	r2, [r3], #4
 80055b6:	e7e3      	b.n	8005580 <__multiply+0x42>
 80055b8:	f8b3 a000 	ldrh.w	sl, [r3]
 80055bc:	3204      	adds	r2, #4
 80055be:	f1ba 0f00 	cmp.w	sl, #0
 80055c2:	d020      	beq.n	8005606 <__multiply+0xc8>
 80055c4:	46ae      	mov	lr, r5
 80055c6:	4689      	mov	r9, r1
 80055c8:	f04f 0c00 	mov.w	ip, #0
 80055cc:	f859 4b04 	ldr.w	r4, [r9], #4
 80055d0:	f8be b000 	ldrh.w	fp, [lr]
 80055d4:	b2a3      	uxth	r3, r4
 80055d6:	fb0a b303 	mla	r3, sl, r3, fp
 80055da:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 80055de:	f8de 4000 	ldr.w	r4, [lr]
 80055e2:	4463      	add	r3, ip
 80055e4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80055e8:	fb0a c40b 	mla	r4, sl, fp, ip
 80055ec:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80055f6:	454f      	cmp	r7, r9
 80055f8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80055fc:	f84e 3b04 	str.w	r3, [lr], #4
 8005600:	d8e4      	bhi.n	80055cc <__multiply+0x8e>
 8005602:	f8ce c000 	str.w	ip, [lr]
 8005606:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800560a:	f1b9 0f00 	cmp.w	r9, #0
 800560e:	d01f      	beq.n	8005650 <__multiply+0x112>
 8005610:	682b      	ldr	r3, [r5, #0]
 8005612:	46ae      	mov	lr, r5
 8005614:	468c      	mov	ip, r1
 8005616:	f04f 0a00 	mov.w	sl, #0
 800561a:	f8bc 4000 	ldrh.w	r4, [ip]
 800561e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005622:	fb09 b404 	mla	r4, r9, r4, fp
 8005626:	44a2      	add	sl, r4
 8005628:	b29b      	uxth	r3, r3
 800562a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800562e:	f84e 3b04 	str.w	r3, [lr], #4
 8005632:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005636:	f8be 4000 	ldrh.w	r4, [lr]
 800563a:	0c1b      	lsrs	r3, r3, #16
 800563c:	fb09 4303 	mla	r3, r9, r3, r4
 8005640:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8005644:	4567      	cmp	r7, ip
 8005646:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800564a:	d8e6      	bhi.n	800561a <__multiply+0xdc>
 800564c:	f8ce 3000 	str.w	r3, [lr]
 8005650:	3504      	adds	r5, #4
 8005652:	e7a0      	b.n	8005596 <__multiply+0x58>
 8005654:	3e01      	subs	r6, #1
 8005656:	e7a2      	b.n	800559e <__multiply+0x60>

08005658 <__pow5mult>:
 8005658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800565c:	4615      	mov	r5, r2
 800565e:	f012 0203 	ands.w	r2, r2, #3
 8005662:	4606      	mov	r6, r0
 8005664:	460f      	mov	r7, r1
 8005666:	d007      	beq.n	8005678 <__pow5mult+0x20>
 8005668:	3a01      	subs	r2, #1
 800566a:	4c21      	ldr	r4, [pc, #132]	; (80056f0 <__pow5mult+0x98>)
 800566c:	2300      	movs	r3, #0
 800566e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005672:	f7ff fed2 	bl	800541a <__multadd>
 8005676:	4607      	mov	r7, r0
 8005678:	10ad      	asrs	r5, r5, #2
 800567a:	d035      	beq.n	80056e8 <__pow5mult+0x90>
 800567c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800567e:	b93c      	cbnz	r4, 8005690 <__pow5mult+0x38>
 8005680:	2010      	movs	r0, #16
 8005682:	f7ff fc51 	bl	8004f28 <malloc>
 8005686:	6270      	str	r0, [r6, #36]	; 0x24
 8005688:	6044      	str	r4, [r0, #4]
 800568a:	6084      	str	r4, [r0, #8]
 800568c:	6004      	str	r4, [r0, #0]
 800568e:	60c4      	str	r4, [r0, #12]
 8005690:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005694:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005698:	b94c      	cbnz	r4, 80056ae <__pow5mult+0x56>
 800569a:	f240 2171 	movw	r1, #625	; 0x271
 800569e:	4630      	mov	r0, r6
 80056a0:	f7ff ff44 	bl	800552c <__i2b>
 80056a4:	2300      	movs	r3, #0
 80056a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80056aa:	4604      	mov	r4, r0
 80056ac:	6003      	str	r3, [r0, #0]
 80056ae:	f04f 0800 	mov.w	r8, #0
 80056b2:	07eb      	lsls	r3, r5, #31
 80056b4:	d50a      	bpl.n	80056cc <__pow5mult+0x74>
 80056b6:	4639      	mov	r1, r7
 80056b8:	4622      	mov	r2, r4
 80056ba:	4630      	mov	r0, r6
 80056bc:	f7ff ff3f 	bl	800553e <__multiply>
 80056c0:	4639      	mov	r1, r7
 80056c2:	4681      	mov	r9, r0
 80056c4:	4630      	mov	r0, r6
 80056c6:	f7ff fe91 	bl	80053ec <_Bfree>
 80056ca:	464f      	mov	r7, r9
 80056cc:	106d      	asrs	r5, r5, #1
 80056ce:	d00b      	beq.n	80056e8 <__pow5mult+0x90>
 80056d0:	6820      	ldr	r0, [r4, #0]
 80056d2:	b938      	cbnz	r0, 80056e4 <__pow5mult+0x8c>
 80056d4:	4622      	mov	r2, r4
 80056d6:	4621      	mov	r1, r4
 80056d8:	4630      	mov	r0, r6
 80056da:	f7ff ff30 	bl	800553e <__multiply>
 80056de:	6020      	str	r0, [r4, #0]
 80056e0:	f8c0 8000 	str.w	r8, [r0]
 80056e4:	4604      	mov	r4, r0
 80056e6:	e7e4      	b.n	80056b2 <__pow5mult+0x5a>
 80056e8:	4638      	mov	r0, r7
 80056ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056ee:	bf00      	nop
 80056f0:	080067c8 	.word	0x080067c8

080056f4 <__lshift>:
 80056f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056f8:	460c      	mov	r4, r1
 80056fa:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80056fe:	6923      	ldr	r3, [r4, #16]
 8005700:	6849      	ldr	r1, [r1, #4]
 8005702:	eb0a 0903 	add.w	r9, sl, r3
 8005706:	68a3      	ldr	r3, [r4, #8]
 8005708:	4607      	mov	r7, r0
 800570a:	4616      	mov	r6, r2
 800570c:	f109 0501 	add.w	r5, r9, #1
 8005710:	42ab      	cmp	r3, r5
 8005712:	db31      	blt.n	8005778 <__lshift+0x84>
 8005714:	4638      	mov	r0, r7
 8005716:	f7ff fe35 	bl	8005384 <_Balloc>
 800571a:	2200      	movs	r2, #0
 800571c:	4680      	mov	r8, r0
 800571e:	f100 0314 	add.w	r3, r0, #20
 8005722:	4611      	mov	r1, r2
 8005724:	4552      	cmp	r2, sl
 8005726:	db2a      	blt.n	800577e <__lshift+0x8a>
 8005728:	6920      	ldr	r0, [r4, #16]
 800572a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800572e:	f104 0114 	add.w	r1, r4, #20
 8005732:	f016 021f 	ands.w	r2, r6, #31
 8005736:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800573a:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800573e:	d022      	beq.n	8005786 <__lshift+0x92>
 8005740:	f1c2 0c20 	rsb	ip, r2, #32
 8005744:	2000      	movs	r0, #0
 8005746:	680e      	ldr	r6, [r1, #0]
 8005748:	4096      	lsls	r6, r2
 800574a:	4330      	orrs	r0, r6
 800574c:	f843 0b04 	str.w	r0, [r3], #4
 8005750:	f851 0b04 	ldr.w	r0, [r1], #4
 8005754:	458e      	cmp	lr, r1
 8005756:	fa20 f00c 	lsr.w	r0, r0, ip
 800575a:	d8f4      	bhi.n	8005746 <__lshift+0x52>
 800575c:	6018      	str	r0, [r3, #0]
 800575e:	b108      	cbz	r0, 8005764 <__lshift+0x70>
 8005760:	f109 0502 	add.w	r5, r9, #2
 8005764:	3d01      	subs	r5, #1
 8005766:	4638      	mov	r0, r7
 8005768:	f8c8 5010 	str.w	r5, [r8, #16]
 800576c:	4621      	mov	r1, r4
 800576e:	f7ff fe3d 	bl	80053ec <_Bfree>
 8005772:	4640      	mov	r0, r8
 8005774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005778:	3101      	adds	r1, #1
 800577a:	005b      	lsls	r3, r3, #1
 800577c:	e7c8      	b.n	8005710 <__lshift+0x1c>
 800577e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005782:	3201      	adds	r2, #1
 8005784:	e7ce      	b.n	8005724 <__lshift+0x30>
 8005786:	3b04      	subs	r3, #4
 8005788:	f851 2b04 	ldr.w	r2, [r1], #4
 800578c:	f843 2f04 	str.w	r2, [r3, #4]!
 8005790:	458e      	cmp	lr, r1
 8005792:	d8f9      	bhi.n	8005788 <__lshift+0x94>
 8005794:	e7e6      	b.n	8005764 <__lshift+0x70>

08005796 <__mcmp>:
 8005796:	6903      	ldr	r3, [r0, #16]
 8005798:	690a      	ldr	r2, [r1, #16]
 800579a:	1a9b      	subs	r3, r3, r2
 800579c:	b530      	push	{r4, r5, lr}
 800579e:	d10c      	bne.n	80057ba <__mcmp+0x24>
 80057a0:	0092      	lsls	r2, r2, #2
 80057a2:	3014      	adds	r0, #20
 80057a4:	3114      	adds	r1, #20
 80057a6:	1884      	adds	r4, r0, r2
 80057a8:	4411      	add	r1, r2
 80057aa:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80057ae:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80057b2:	4295      	cmp	r5, r2
 80057b4:	d003      	beq.n	80057be <__mcmp+0x28>
 80057b6:	d305      	bcc.n	80057c4 <__mcmp+0x2e>
 80057b8:	2301      	movs	r3, #1
 80057ba:	4618      	mov	r0, r3
 80057bc:	bd30      	pop	{r4, r5, pc}
 80057be:	42a0      	cmp	r0, r4
 80057c0:	d3f3      	bcc.n	80057aa <__mcmp+0x14>
 80057c2:	e7fa      	b.n	80057ba <__mcmp+0x24>
 80057c4:	f04f 33ff 	mov.w	r3, #4294967295
 80057c8:	e7f7      	b.n	80057ba <__mcmp+0x24>

080057ca <__mdiff>:
 80057ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057ce:	460d      	mov	r5, r1
 80057d0:	4607      	mov	r7, r0
 80057d2:	4611      	mov	r1, r2
 80057d4:	4628      	mov	r0, r5
 80057d6:	4614      	mov	r4, r2
 80057d8:	f7ff ffdd 	bl	8005796 <__mcmp>
 80057dc:	1e06      	subs	r6, r0, #0
 80057de:	d108      	bne.n	80057f2 <__mdiff+0x28>
 80057e0:	4631      	mov	r1, r6
 80057e2:	4638      	mov	r0, r7
 80057e4:	f7ff fdce 	bl	8005384 <_Balloc>
 80057e8:	2301      	movs	r3, #1
 80057ea:	6103      	str	r3, [r0, #16]
 80057ec:	6146      	str	r6, [r0, #20]
 80057ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057f2:	bfa4      	itt	ge
 80057f4:	4623      	movge	r3, r4
 80057f6:	462c      	movge	r4, r5
 80057f8:	4638      	mov	r0, r7
 80057fa:	6861      	ldr	r1, [r4, #4]
 80057fc:	bfa6      	itte	ge
 80057fe:	461d      	movge	r5, r3
 8005800:	2600      	movge	r6, #0
 8005802:	2601      	movlt	r6, #1
 8005804:	f7ff fdbe 	bl	8005384 <_Balloc>
 8005808:	692b      	ldr	r3, [r5, #16]
 800580a:	60c6      	str	r6, [r0, #12]
 800580c:	6926      	ldr	r6, [r4, #16]
 800580e:	f105 0914 	add.w	r9, r5, #20
 8005812:	f104 0214 	add.w	r2, r4, #20
 8005816:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800581a:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800581e:	f100 0514 	add.w	r5, r0, #20
 8005822:	f04f 0c00 	mov.w	ip, #0
 8005826:	f852 ab04 	ldr.w	sl, [r2], #4
 800582a:	f859 4b04 	ldr.w	r4, [r9], #4
 800582e:	fa1c f18a 	uxtah	r1, ip, sl
 8005832:	b2a3      	uxth	r3, r4
 8005834:	1ac9      	subs	r1, r1, r3
 8005836:	0c23      	lsrs	r3, r4, #16
 8005838:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800583c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005840:	b289      	uxth	r1, r1
 8005842:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005846:	45c8      	cmp	r8, r9
 8005848:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800584c:	4696      	mov	lr, r2
 800584e:	f845 3b04 	str.w	r3, [r5], #4
 8005852:	d8e8      	bhi.n	8005826 <__mdiff+0x5c>
 8005854:	45be      	cmp	lr, r7
 8005856:	d305      	bcc.n	8005864 <__mdiff+0x9a>
 8005858:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800585c:	b18b      	cbz	r3, 8005882 <__mdiff+0xb8>
 800585e:	6106      	str	r6, [r0, #16]
 8005860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005864:	f85e 1b04 	ldr.w	r1, [lr], #4
 8005868:	fa1c f381 	uxtah	r3, ip, r1
 800586c:	141a      	asrs	r2, r3, #16
 800586e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005872:	b29b      	uxth	r3, r3
 8005874:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005878:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800587c:	f845 3b04 	str.w	r3, [r5], #4
 8005880:	e7e8      	b.n	8005854 <__mdiff+0x8a>
 8005882:	3e01      	subs	r6, #1
 8005884:	e7e8      	b.n	8005858 <__mdiff+0x8e>

08005886 <__d2b>:
 8005886:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800588a:	460e      	mov	r6, r1
 800588c:	2101      	movs	r1, #1
 800588e:	ec59 8b10 	vmov	r8, r9, d0
 8005892:	4615      	mov	r5, r2
 8005894:	f7ff fd76 	bl	8005384 <_Balloc>
 8005898:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800589c:	4607      	mov	r7, r0
 800589e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80058a2:	bb34      	cbnz	r4, 80058f2 <__d2b+0x6c>
 80058a4:	9301      	str	r3, [sp, #4]
 80058a6:	f1b8 0f00 	cmp.w	r8, #0
 80058aa:	d027      	beq.n	80058fc <__d2b+0x76>
 80058ac:	a802      	add	r0, sp, #8
 80058ae:	f840 8d08 	str.w	r8, [r0, #-8]!
 80058b2:	f7ff fe0c 	bl	80054ce <__lo0bits>
 80058b6:	9900      	ldr	r1, [sp, #0]
 80058b8:	b1f0      	cbz	r0, 80058f8 <__d2b+0x72>
 80058ba:	9a01      	ldr	r2, [sp, #4]
 80058bc:	f1c0 0320 	rsb	r3, r0, #32
 80058c0:	fa02 f303 	lsl.w	r3, r2, r3
 80058c4:	430b      	orrs	r3, r1
 80058c6:	40c2      	lsrs	r2, r0
 80058c8:	617b      	str	r3, [r7, #20]
 80058ca:	9201      	str	r2, [sp, #4]
 80058cc:	9b01      	ldr	r3, [sp, #4]
 80058ce:	61bb      	str	r3, [r7, #24]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	bf14      	ite	ne
 80058d4:	2102      	movne	r1, #2
 80058d6:	2101      	moveq	r1, #1
 80058d8:	6139      	str	r1, [r7, #16]
 80058da:	b1c4      	cbz	r4, 800590e <__d2b+0x88>
 80058dc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80058e0:	4404      	add	r4, r0
 80058e2:	6034      	str	r4, [r6, #0]
 80058e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80058e8:	6028      	str	r0, [r5, #0]
 80058ea:	4638      	mov	r0, r7
 80058ec:	b003      	add	sp, #12
 80058ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80058f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058f6:	e7d5      	b.n	80058a4 <__d2b+0x1e>
 80058f8:	6179      	str	r1, [r7, #20]
 80058fa:	e7e7      	b.n	80058cc <__d2b+0x46>
 80058fc:	a801      	add	r0, sp, #4
 80058fe:	f7ff fde6 	bl	80054ce <__lo0bits>
 8005902:	9b01      	ldr	r3, [sp, #4]
 8005904:	617b      	str	r3, [r7, #20]
 8005906:	2101      	movs	r1, #1
 8005908:	6139      	str	r1, [r7, #16]
 800590a:	3020      	adds	r0, #32
 800590c:	e7e5      	b.n	80058da <__d2b+0x54>
 800590e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005912:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005916:	6030      	str	r0, [r6, #0]
 8005918:	6918      	ldr	r0, [r3, #16]
 800591a:	f7ff fdb9 	bl	8005490 <__hi0bits>
 800591e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005922:	e7e1      	b.n	80058e8 <__d2b+0x62>

08005924 <_sbrk_r>:
 8005924:	b538      	push	{r3, r4, r5, lr}
 8005926:	4c06      	ldr	r4, [pc, #24]	; (8005940 <_sbrk_r+0x1c>)
 8005928:	2300      	movs	r3, #0
 800592a:	4605      	mov	r5, r0
 800592c:	4608      	mov	r0, r1
 800592e:	6023      	str	r3, [r4, #0]
 8005930:	f000 fe48 	bl	80065c4 <_sbrk>
 8005934:	1c43      	adds	r3, r0, #1
 8005936:	d102      	bne.n	800593e <_sbrk_r+0x1a>
 8005938:	6823      	ldr	r3, [r4, #0]
 800593a:	b103      	cbz	r3, 800593e <_sbrk_r+0x1a>
 800593c:	602b      	str	r3, [r5, #0]
 800593e:	bd38      	pop	{r3, r4, r5, pc}
 8005940:	200007ac 	.word	0x200007ac

08005944 <__ssprint_r>:
 8005944:	6893      	ldr	r3, [r2, #8]
 8005946:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800594a:	4681      	mov	r9, r0
 800594c:	460c      	mov	r4, r1
 800594e:	4617      	mov	r7, r2
 8005950:	2b00      	cmp	r3, #0
 8005952:	d060      	beq.n	8005a16 <__ssprint_r+0xd2>
 8005954:	f04f 0b00 	mov.w	fp, #0
 8005958:	f8d2 a000 	ldr.w	sl, [r2]
 800595c:	465e      	mov	r6, fp
 800595e:	b356      	cbz	r6, 80059b6 <__ssprint_r+0x72>
 8005960:	68a3      	ldr	r3, [r4, #8]
 8005962:	429e      	cmp	r6, r3
 8005964:	d344      	bcc.n	80059f0 <__ssprint_r+0xac>
 8005966:	89a2      	ldrh	r2, [r4, #12]
 8005968:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800596c:	d03e      	beq.n	80059ec <__ssprint_r+0xa8>
 800596e:	6825      	ldr	r5, [r4, #0]
 8005970:	6921      	ldr	r1, [r4, #16]
 8005972:	eba5 0801 	sub.w	r8, r5, r1
 8005976:	6965      	ldr	r5, [r4, #20]
 8005978:	2302      	movs	r3, #2
 800597a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800597e:	fb95 f5f3 	sdiv	r5, r5, r3
 8005982:	f108 0301 	add.w	r3, r8, #1
 8005986:	4433      	add	r3, r6
 8005988:	429d      	cmp	r5, r3
 800598a:	bf38      	it	cc
 800598c:	461d      	movcc	r5, r3
 800598e:	0553      	lsls	r3, r2, #21
 8005990:	d546      	bpl.n	8005a20 <__ssprint_r+0xdc>
 8005992:	4629      	mov	r1, r5
 8005994:	4648      	mov	r0, r9
 8005996:	f7ff facf 	bl	8004f38 <_malloc_r>
 800599a:	b998      	cbnz	r0, 80059c4 <__ssprint_r+0x80>
 800599c:	230c      	movs	r3, #12
 800599e:	f8c9 3000 	str.w	r3, [r9]
 80059a2:	89a3      	ldrh	r3, [r4, #12]
 80059a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059a8:	81a3      	strh	r3, [r4, #12]
 80059aa:	2300      	movs	r3, #0
 80059ac:	60bb      	str	r3, [r7, #8]
 80059ae:	607b      	str	r3, [r7, #4]
 80059b0:	f04f 30ff 	mov.w	r0, #4294967295
 80059b4:	e031      	b.n	8005a1a <__ssprint_r+0xd6>
 80059b6:	f8da b000 	ldr.w	fp, [sl]
 80059ba:	f8da 6004 	ldr.w	r6, [sl, #4]
 80059be:	f10a 0a08 	add.w	sl, sl, #8
 80059c2:	e7cc      	b.n	800595e <__ssprint_r+0x1a>
 80059c4:	4642      	mov	r2, r8
 80059c6:	6921      	ldr	r1, [r4, #16]
 80059c8:	9001      	str	r0, [sp, #4]
 80059ca:	f7ff fcc3 	bl	8005354 <memcpy>
 80059ce:	89a2      	ldrh	r2, [r4, #12]
 80059d0:	9b01      	ldr	r3, [sp, #4]
 80059d2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80059d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80059da:	81a2      	strh	r2, [r4, #12]
 80059dc:	6123      	str	r3, [r4, #16]
 80059de:	6165      	str	r5, [r4, #20]
 80059e0:	4443      	add	r3, r8
 80059e2:	eba5 0508 	sub.w	r5, r5, r8
 80059e6:	6023      	str	r3, [r4, #0]
 80059e8:	60a5      	str	r5, [r4, #8]
 80059ea:	4633      	mov	r3, r6
 80059ec:	429e      	cmp	r6, r3
 80059ee:	d200      	bcs.n	80059f2 <__ssprint_r+0xae>
 80059f0:	4633      	mov	r3, r6
 80059f2:	461a      	mov	r2, r3
 80059f4:	4659      	mov	r1, fp
 80059f6:	6820      	ldr	r0, [r4, #0]
 80059f8:	9301      	str	r3, [sp, #4]
 80059fa:	f000 f971 	bl	8005ce0 <memmove>
 80059fe:	68a2      	ldr	r2, [r4, #8]
 8005a00:	9b01      	ldr	r3, [sp, #4]
 8005a02:	1ad2      	subs	r2, r2, r3
 8005a04:	60a2      	str	r2, [r4, #8]
 8005a06:	6822      	ldr	r2, [r4, #0]
 8005a08:	4413      	add	r3, r2
 8005a0a:	6023      	str	r3, [r4, #0]
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	1b9e      	subs	r6, r3, r6
 8005a10:	60be      	str	r6, [r7, #8]
 8005a12:	2e00      	cmp	r6, #0
 8005a14:	d1cf      	bne.n	80059b6 <__ssprint_r+0x72>
 8005a16:	2000      	movs	r0, #0
 8005a18:	6078      	str	r0, [r7, #4]
 8005a1a:	b003      	add	sp, #12
 8005a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a20:	462a      	mov	r2, r5
 8005a22:	4648      	mov	r0, r9
 8005a24:	f000 f97e 	bl	8005d24 <_realloc_r>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2800      	cmp	r0, #0
 8005a2c:	d1d6      	bne.n	80059dc <__ssprint_r+0x98>
 8005a2e:	6921      	ldr	r1, [r4, #16]
 8005a30:	4648      	mov	r0, r9
 8005a32:	f000 f885 	bl	8005b40 <_free_r>
 8005a36:	e7b1      	b.n	800599c <__ssprint_r+0x58>

08005a38 <_calloc_r>:
 8005a38:	b510      	push	{r4, lr}
 8005a3a:	4351      	muls	r1, r2
 8005a3c:	f7ff fa7c 	bl	8004f38 <_malloc_r>
 8005a40:	4604      	mov	r4, r0
 8005a42:	b198      	cbz	r0, 8005a6c <_calloc_r+0x34>
 8005a44:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8005a48:	f022 0203 	bic.w	r2, r2, #3
 8005a4c:	3a04      	subs	r2, #4
 8005a4e:	2a24      	cmp	r2, #36	; 0x24
 8005a50:	d81b      	bhi.n	8005a8a <_calloc_r+0x52>
 8005a52:	2a13      	cmp	r2, #19
 8005a54:	d917      	bls.n	8005a86 <_calloc_r+0x4e>
 8005a56:	2100      	movs	r1, #0
 8005a58:	2a1b      	cmp	r2, #27
 8005a5a:	6001      	str	r1, [r0, #0]
 8005a5c:	6041      	str	r1, [r0, #4]
 8005a5e:	d807      	bhi.n	8005a70 <_calloc_r+0x38>
 8005a60:	f100 0308 	add.w	r3, r0, #8
 8005a64:	2200      	movs	r2, #0
 8005a66:	601a      	str	r2, [r3, #0]
 8005a68:	605a      	str	r2, [r3, #4]
 8005a6a:	609a      	str	r2, [r3, #8]
 8005a6c:	4620      	mov	r0, r4
 8005a6e:	bd10      	pop	{r4, pc}
 8005a70:	2a24      	cmp	r2, #36	; 0x24
 8005a72:	6081      	str	r1, [r0, #8]
 8005a74:	60c1      	str	r1, [r0, #12]
 8005a76:	bf11      	iteee	ne
 8005a78:	f100 0310 	addne.w	r3, r0, #16
 8005a7c:	6101      	streq	r1, [r0, #16]
 8005a7e:	f100 0318 	addeq.w	r3, r0, #24
 8005a82:	6141      	streq	r1, [r0, #20]
 8005a84:	e7ee      	b.n	8005a64 <_calloc_r+0x2c>
 8005a86:	4603      	mov	r3, r0
 8005a88:	e7ec      	b.n	8005a64 <_calloc_r+0x2c>
 8005a8a:	2100      	movs	r1, #0
 8005a8c:	f000 f942 	bl	8005d14 <memset>
 8005a90:	e7ec      	b.n	8005a6c <_calloc_r+0x34>
	...

08005a94 <_malloc_trim_r>:
 8005a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a98:	4f25      	ldr	r7, [pc, #148]	; (8005b30 <_malloc_trim_r+0x9c>)
 8005a9a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8005b3c <_malloc_trim_r+0xa8>
 8005a9e:	4689      	mov	r9, r1
 8005aa0:	4606      	mov	r6, r0
 8005aa2:	f7ff fc63 	bl	800536c <__malloc_lock>
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	685d      	ldr	r5, [r3, #4]
 8005aaa:	f1a8 0411 	sub.w	r4, r8, #17
 8005aae:	f025 0503 	bic.w	r5, r5, #3
 8005ab2:	eba4 0409 	sub.w	r4, r4, r9
 8005ab6:	442c      	add	r4, r5
 8005ab8:	fbb4 f4f8 	udiv	r4, r4, r8
 8005abc:	3c01      	subs	r4, #1
 8005abe:	fb08 f404 	mul.w	r4, r8, r4
 8005ac2:	4544      	cmp	r4, r8
 8005ac4:	da05      	bge.n	8005ad2 <_malloc_trim_r+0x3e>
 8005ac6:	4630      	mov	r0, r6
 8005ac8:	f7ff fc56 	bl	8005378 <__malloc_unlock>
 8005acc:	2000      	movs	r0, #0
 8005ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ad2:	2100      	movs	r1, #0
 8005ad4:	4630      	mov	r0, r6
 8005ad6:	f7ff ff25 	bl	8005924 <_sbrk_r>
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	442b      	add	r3, r5
 8005ade:	4298      	cmp	r0, r3
 8005ae0:	d1f1      	bne.n	8005ac6 <_malloc_trim_r+0x32>
 8005ae2:	4261      	negs	r1, r4
 8005ae4:	4630      	mov	r0, r6
 8005ae6:	f7ff ff1d 	bl	8005924 <_sbrk_r>
 8005aea:	3001      	adds	r0, #1
 8005aec:	d110      	bne.n	8005b10 <_malloc_trim_r+0x7c>
 8005aee:	2100      	movs	r1, #0
 8005af0:	4630      	mov	r0, r6
 8005af2:	f7ff ff17 	bl	8005924 <_sbrk_r>
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	1a83      	subs	r3, r0, r2
 8005afa:	2b0f      	cmp	r3, #15
 8005afc:	dde3      	ble.n	8005ac6 <_malloc_trim_r+0x32>
 8005afe:	490d      	ldr	r1, [pc, #52]	; (8005b34 <_malloc_trim_r+0xa0>)
 8005b00:	6809      	ldr	r1, [r1, #0]
 8005b02:	1a40      	subs	r0, r0, r1
 8005b04:	490c      	ldr	r1, [pc, #48]	; (8005b38 <_malloc_trim_r+0xa4>)
 8005b06:	f043 0301 	orr.w	r3, r3, #1
 8005b0a:	6008      	str	r0, [r1, #0]
 8005b0c:	6053      	str	r3, [r2, #4]
 8005b0e:	e7da      	b.n	8005ac6 <_malloc_trim_r+0x32>
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	4a09      	ldr	r2, [pc, #36]	; (8005b38 <_malloc_trim_r+0xa4>)
 8005b14:	1b2d      	subs	r5, r5, r4
 8005b16:	f045 0501 	orr.w	r5, r5, #1
 8005b1a:	605d      	str	r5, [r3, #4]
 8005b1c:	6813      	ldr	r3, [r2, #0]
 8005b1e:	4630      	mov	r0, r6
 8005b20:	1b1c      	subs	r4, r3, r4
 8005b22:	6014      	str	r4, [r2, #0]
 8005b24:	f7ff fc28 	bl	8005378 <__malloc_unlock>
 8005b28:	2001      	movs	r0, #1
 8005b2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b2e:	bf00      	nop
 8005b30:	200000f8 	.word	0x200000f8
 8005b34:	20000500 	.word	0x20000500
 8005b38:	20000694 	.word	0x20000694
 8005b3c:	00000080 	.word	0x00000080

08005b40 <_free_r>:
 8005b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b44:	4604      	mov	r4, r0
 8005b46:	4688      	mov	r8, r1
 8005b48:	2900      	cmp	r1, #0
 8005b4a:	f000 80ab 	beq.w	8005ca4 <_free_r+0x164>
 8005b4e:	f7ff fc0d 	bl	800536c <__malloc_lock>
 8005b52:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8005b56:	4d54      	ldr	r5, [pc, #336]	; (8005ca8 <_free_r+0x168>)
 8005b58:	f022 0001 	bic.w	r0, r2, #1
 8005b5c:	f1a8 0308 	sub.w	r3, r8, #8
 8005b60:	181f      	adds	r7, r3, r0
 8005b62:	68a9      	ldr	r1, [r5, #8]
 8005b64:	687e      	ldr	r6, [r7, #4]
 8005b66:	428f      	cmp	r7, r1
 8005b68:	f026 0603 	bic.w	r6, r6, #3
 8005b6c:	f002 0201 	and.w	r2, r2, #1
 8005b70:	d11b      	bne.n	8005baa <_free_r+0x6a>
 8005b72:	4430      	add	r0, r6
 8005b74:	b93a      	cbnz	r2, 8005b86 <_free_r+0x46>
 8005b76:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8005b7a:	1a9b      	subs	r3, r3, r2
 8005b7c:	4410      	add	r0, r2
 8005b7e:	6899      	ldr	r1, [r3, #8]
 8005b80:	68da      	ldr	r2, [r3, #12]
 8005b82:	60ca      	str	r2, [r1, #12]
 8005b84:	6091      	str	r1, [r2, #8]
 8005b86:	f040 0201 	orr.w	r2, r0, #1
 8005b8a:	605a      	str	r2, [r3, #4]
 8005b8c:	60ab      	str	r3, [r5, #8]
 8005b8e:	4b47      	ldr	r3, [pc, #284]	; (8005cac <_free_r+0x16c>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4298      	cmp	r0, r3
 8005b94:	d304      	bcc.n	8005ba0 <_free_r+0x60>
 8005b96:	4b46      	ldr	r3, [pc, #280]	; (8005cb0 <_free_r+0x170>)
 8005b98:	4620      	mov	r0, r4
 8005b9a:	6819      	ldr	r1, [r3, #0]
 8005b9c:	f7ff ff7a 	bl	8005a94 <_malloc_trim_r>
 8005ba0:	4620      	mov	r0, r4
 8005ba2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ba6:	f7ff bbe7 	b.w	8005378 <__malloc_unlock>
 8005baa:	607e      	str	r6, [r7, #4]
 8005bac:	2a00      	cmp	r2, #0
 8005bae:	d139      	bne.n	8005c24 <_free_r+0xe4>
 8005bb0:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8005bb4:	1a5b      	subs	r3, r3, r1
 8005bb6:	4408      	add	r0, r1
 8005bb8:	6899      	ldr	r1, [r3, #8]
 8005bba:	f105 0e08 	add.w	lr, r5, #8
 8005bbe:	4571      	cmp	r1, lr
 8005bc0:	d032      	beq.n	8005c28 <_free_r+0xe8>
 8005bc2:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8005bc6:	f8c1 e00c 	str.w	lr, [r1, #12]
 8005bca:	f8ce 1008 	str.w	r1, [lr, #8]
 8005bce:	19b9      	adds	r1, r7, r6
 8005bd0:	6849      	ldr	r1, [r1, #4]
 8005bd2:	07c9      	lsls	r1, r1, #31
 8005bd4:	d40a      	bmi.n	8005bec <_free_r+0xac>
 8005bd6:	4430      	add	r0, r6
 8005bd8:	68b9      	ldr	r1, [r7, #8]
 8005bda:	bb3a      	cbnz	r2, 8005c2c <_free_r+0xec>
 8005bdc:	4e35      	ldr	r6, [pc, #212]	; (8005cb4 <_free_r+0x174>)
 8005bde:	42b1      	cmp	r1, r6
 8005be0:	d124      	bne.n	8005c2c <_free_r+0xec>
 8005be2:	616b      	str	r3, [r5, #20]
 8005be4:	612b      	str	r3, [r5, #16]
 8005be6:	2201      	movs	r2, #1
 8005be8:	60d9      	str	r1, [r3, #12]
 8005bea:	6099      	str	r1, [r3, #8]
 8005bec:	f040 0101 	orr.w	r1, r0, #1
 8005bf0:	6059      	str	r1, [r3, #4]
 8005bf2:	5018      	str	r0, [r3, r0]
 8005bf4:	2a00      	cmp	r2, #0
 8005bf6:	d1d3      	bne.n	8005ba0 <_free_r+0x60>
 8005bf8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005bfc:	d21a      	bcs.n	8005c34 <_free_r+0xf4>
 8005bfe:	08c0      	lsrs	r0, r0, #3
 8005c00:	1081      	asrs	r1, r0, #2
 8005c02:	2201      	movs	r2, #1
 8005c04:	408a      	lsls	r2, r1
 8005c06:	6869      	ldr	r1, [r5, #4]
 8005c08:	3001      	adds	r0, #1
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	606a      	str	r2, [r5, #4]
 8005c0e:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8005c12:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8005c16:	6099      	str	r1, [r3, #8]
 8005c18:	3a08      	subs	r2, #8
 8005c1a:	60da      	str	r2, [r3, #12]
 8005c1c:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8005c20:	60cb      	str	r3, [r1, #12]
 8005c22:	e7bd      	b.n	8005ba0 <_free_r+0x60>
 8005c24:	2200      	movs	r2, #0
 8005c26:	e7d2      	b.n	8005bce <_free_r+0x8e>
 8005c28:	2201      	movs	r2, #1
 8005c2a:	e7d0      	b.n	8005bce <_free_r+0x8e>
 8005c2c:	68fe      	ldr	r6, [r7, #12]
 8005c2e:	60ce      	str	r6, [r1, #12]
 8005c30:	60b1      	str	r1, [r6, #8]
 8005c32:	e7db      	b.n	8005bec <_free_r+0xac>
 8005c34:	0a42      	lsrs	r2, r0, #9
 8005c36:	2a04      	cmp	r2, #4
 8005c38:	d813      	bhi.n	8005c62 <_free_r+0x122>
 8005c3a:	0982      	lsrs	r2, r0, #6
 8005c3c:	3238      	adds	r2, #56	; 0x38
 8005c3e:	1c51      	adds	r1, r2, #1
 8005c40:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8005c44:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8005c48:	428e      	cmp	r6, r1
 8005c4a:	d124      	bne.n	8005c96 <_free_r+0x156>
 8005c4c:	2001      	movs	r0, #1
 8005c4e:	1092      	asrs	r2, r2, #2
 8005c50:	fa00 f202 	lsl.w	r2, r0, r2
 8005c54:	6868      	ldr	r0, [r5, #4]
 8005c56:	4302      	orrs	r2, r0
 8005c58:	606a      	str	r2, [r5, #4]
 8005c5a:	60de      	str	r6, [r3, #12]
 8005c5c:	6099      	str	r1, [r3, #8]
 8005c5e:	60b3      	str	r3, [r6, #8]
 8005c60:	e7de      	b.n	8005c20 <_free_r+0xe0>
 8005c62:	2a14      	cmp	r2, #20
 8005c64:	d801      	bhi.n	8005c6a <_free_r+0x12a>
 8005c66:	325b      	adds	r2, #91	; 0x5b
 8005c68:	e7e9      	b.n	8005c3e <_free_r+0xfe>
 8005c6a:	2a54      	cmp	r2, #84	; 0x54
 8005c6c:	d802      	bhi.n	8005c74 <_free_r+0x134>
 8005c6e:	0b02      	lsrs	r2, r0, #12
 8005c70:	326e      	adds	r2, #110	; 0x6e
 8005c72:	e7e4      	b.n	8005c3e <_free_r+0xfe>
 8005c74:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005c78:	d802      	bhi.n	8005c80 <_free_r+0x140>
 8005c7a:	0bc2      	lsrs	r2, r0, #15
 8005c7c:	3277      	adds	r2, #119	; 0x77
 8005c7e:	e7de      	b.n	8005c3e <_free_r+0xfe>
 8005c80:	f240 5154 	movw	r1, #1364	; 0x554
 8005c84:	428a      	cmp	r2, r1
 8005c86:	bf9a      	itte	ls
 8005c88:	0c82      	lsrls	r2, r0, #18
 8005c8a:	327c      	addls	r2, #124	; 0x7c
 8005c8c:	227e      	movhi	r2, #126	; 0x7e
 8005c8e:	e7d6      	b.n	8005c3e <_free_r+0xfe>
 8005c90:	6889      	ldr	r1, [r1, #8]
 8005c92:	428e      	cmp	r6, r1
 8005c94:	d004      	beq.n	8005ca0 <_free_r+0x160>
 8005c96:	684a      	ldr	r2, [r1, #4]
 8005c98:	f022 0203 	bic.w	r2, r2, #3
 8005c9c:	4290      	cmp	r0, r2
 8005c9e:	d3f7      	bcc.n	8005c90 <_free_r+0x150>
 8005ca0:	68ce      	ldr	r6, [r1, #12]
 8005ca2:	e7da      	b.n	8005c5a <_free_r+0x11a>
 8005ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ca8:	200000f8 	.word	0x200000f8
 8005cac:	20000504 	.word	0x20000504
 8005cb0:	200006c4 	.word	0x200006c4
 8005cb4:	20000100 	.word	0x20000100

08005cb8 <__retarget_lock_acquire_recursive>:
 8005cb8:	4770      	bx	lr

08005cba <__retarget_lock_release_recursive>:
 8005cba:	4770      	bx	lr

08005cbc <__ascii_mbtowc>:
 8005cbc:	b082      	sub	sp, #8
 8005cbe:	b901      	cbnz	r1, 8005cc2 <__ascii_mbtowc+0x6>
 8005cc0:	a901      	add	r1, sp, #4
 8005cc2:	b142      	cbz	r2, 8005cd6 <__ascii_mbtowc+0x1a>
 8005cc4:	b14b      	cbz	r3, 8005cda <__ascii_mbtowc+0x1e>
 8005cc6:	7813      	ldrb	r3, [r2, #0]
 8005cc8:	600b      	str	r3, [r1, #0]
 8005cca:	7812      	ldrb	r2, [r2, #0]
 8005ccc:	1c10      	adds	r0, r2, #0
 8005cce:	bf18      	it	ne
 8005cd0:	2001      	movne	r0, #1
 8005cd2:	b002      	add	sp, #8
 8005cd4:	4770      	bx	lr
 8005cd6:	4610      	mov	r0, r2
 8005cd8:	e7fb      	b.n	8005cd2 <__ascii_mbtowc+0x16>
 8005cda:	f06f 0001 	mvn.w	r0, #1
 8005cde:	e7f8      	b.n	8005cd2 <__ascii_mbtowc+0x16>

08005ce0 <memmove>:
 8005ce0:	4288      	cmp	r0, r1
 8005ce2:	b510      	push	{r4, lr}
 8005ce4:	eb01 0302 	add.w	r3, r1, r2
 8005ce8:	d803      	bhi.n	8005cf2 <memmove+0x12>
 8005cea:	1e42      	subs	r2, r0, #1
 8005cec:	4299      	cmp	r1, r3
 8005cee:	d10c      	bne.n	8005d0a <memmove+0x2a>
 8005cf0:	bd10      	pop	{r4, pc}
 8005cf2:	4298      	cmp	r0, r3
 8005cf4:	d2f9      	bcs.n	8005cea <memmove+0xa>
 8005cf6:	1881      	adds	r1, r0, r2
 8005cf8:	1ad2      	subs	r2, r2, r3
 8005cfa:	42d3      	cmn	r3, r2
 8005cfc:	d100      	bne.n	8005d00 <memmove+0x20>
 8005cfe:	bd10      	pop	{r4, pc}
 8005d00:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d04:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005d08:	e7f7      	b.n	8005cfa <memmove+0x1a>
 8005d0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d0e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005d12:	e7eb      	b.n	8005cec <memmove+0xc>

08005d14 <memset>:
 8005d14:	4402      	add	r2, r0
 8005d16:	4603      	mov	r3, r0
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d100      	bne.n	8005d1e <memset+0xa>
 8005d1c:	4770      	bx	lr
 8005d1e:	f803 1b01 	strb.w	r1, [r3], #1
 8005d22:	e7f9      	b.n	8005d18 <memset+0x4>

08005d24 <_realloc_r>:
 8005d24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d28:	4682      	mov	sl, r0
 8005d2a:	460c      	mov	r4, r1
 8005d2c:	b929      	cbnz	r1, 8005d3a <_realloc_r+0x16>
 8005d2e:	4611      	mov	r1, r2
 8005d30:	b003      	add	sp, #12
 8005d32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d36:	f7ff b8ff 	b.w	8004f38 <_malloc_r>
 8005d3a:	9201      	str	r2, [sp, #4]
 8005d3c:	f7ff fb16 	bl	800536c <__malloc_lock>
 8005d40:	9a01      	ldr	r2, [sp, #4]
 8005d42:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8005d46:	f102 080b 	add.w	r8, r2, #11
 8005d4a:	f1b8 0f16 	cmp.w	r8, #22
 8005d4e:	f1a4 0908 	sub.w	r9, r4, #8
 8005d52:	f025 0603 	bic.w	r6, r5, #3
 8005d56:	d90a      	bls.n	8005d6e <_realloc_r+0x4a>
 8005d58:	f038 0807 	bics.w	r8, r8, #7
 8005d5c:	d509      	bpl.n	8005d72 <_realloc_r+0x4e>
 8005d5e:	230c      	movs	r3, #12
 8005d60:	f8ca 3000 	str.w	r3, [sl]
 8005d64:	2700      	movs	r7, #0
 8005d66:	4638      	mov	r0, r7
 8005d68:	b003      	add	sp, #12
 8005d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d6e:	f04f 0810 	mov.w	r8, #16
 8005d72:	4590      	cmp	r8, r2
 8005d74:	d3f3      	bcc.n	8005d5e <_realloc_r+0x3a>
 8005d76:	45b0      	cmp	r8, r6
 8005d78:	f340 8145 	ble.w	8006006 <_realloc_r+0x2e2>
 8005d7c:	4ba8      	ldr	r3, [pc, #672]	; (8006020 <_realloc_r+0x2fc>)
 8005d7e:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8005d82:	eb09 0106 	add.w	r1, r9, r6
 8005d86:	4571      	cmp	r1, lr
 8005d88:	469b      	mov	fp, r3
 8005d8a:	684b      	ldr	r3, [r1, #4]
 8005d8c:	d005      	beq.n	8005d9a <_realloc_r+0x76>
 8005d8e:	f023 0001 	bic.w	r0, r3, #1
 8005d92:	4408      	add	r0, r1
 8005d94:	6840      	ldr	r0, [r0, #4]
 8005d96:	07c7      	lsls	r7, r0, #31
 8005d98:	d447      	bmi.n	8005e2a <_realloc_r+0x106>
 8005d9a:	f023 0303 	bic.w	r3, r3, #3
 8005d9e:	4571      	cmp	r1, lr
 8005da0:	eb06 0703 	add.w	r7, r6, r3
 8005da4:	d119      	bne.n	8005dda <_realloc_r+0xb6>
 8005da6:	f108 0010 	add.w	r0, r8, #16
 8005daa:	4287      	cmp	r7, r0
 8005dac:	db3f      	blt.n	8005e2e <_realloc_r+0x10a>
 8005dae:	eb09 0308 	add.w	r3, r9, r8
 8005db2:	eba7 0708 	sub.w	r7, r7, r8
 8005db6:	f047 0701 	orr.w	r7, r7, #1
 8005dba:	f8cb 3008 	str.w	r3, [fp, #8]
 8005dbe:	605f      	str	r7, [r3, #4]
 8005dc0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005dc4:	f003 0301 	and.w	r3, r3, #1
 8005dc8:	ea43 0308 	orr.w	r3, r3, r8
 8005dcc:	f844 3c04 	str.w	r3, [r4, #-4]
 8005dd0:	4650      	mov	r0, sl
 8005dd2:	f7ff fad1 	bl	8005378 <__malloc_unlock>
 8005dd6:	4627      	mov	r7, r4
 8005dd8:	e7c5      	b.n	8005d66 <_realloc_r+0x42>
 8005dda:	45b8      	cmp	r8, r7
 8005ddc:	dc27      	bgt.n	8005e2e <_realloc_r+0x10a>
 8005dde:	68cb      	ldr	r3, [r1, #12]
 8005de0:	688a      	ldr	r2, [r1, #8]
 8005de2:	60d3      	str	r3, [r2, #12]
 8005de4:	609a      	str	r2, [r3, #8]
 8005de6:	eba7 0008 	sub.w	r0, r7, r8
 8005dea:	280f      	cmp	r0, #15
 8005dec:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005df0:	eb09 0207 	add.w	r2, r9, r7
 8005df4:	f240 8109 	bls.w	800600a <_realloc_r+0x2e6>
 8005df8:	eb09 0108 	add.w	r1, r9, r8
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	ea43 0308 	orr.w	r3, r3, r8
 8005e04:	f040 0001 	orr.w	r0, r0, #1
 8005e08:	f8c9 3004 	str.w	r3, [r9, #4]
 8005e0c:	6048      	str	r0, [r1, #4]
 8005e0e:	6853      	ldr	r3, [r2, #4]
 8005e10:	f043 0301 	orr.w	r3, r3, #1
 8005e14:	6053      	str	r3, [r2, #4]
 8005e16:	3108      	adds	r1, #8
 8005e18:	4650      	mov	r0, sl
 8005e1a:	f7ff fe91 	bl	8005b40 <_free_r>
 8005e1e:	4650      	mov	r0, sl
 8005e20:	f7ff faaa 	bl	8005378 <__malloc_unlock>
 8005e24:	f109 0708 	add.w	r7, r9, #8
 8005e28:	e79d      	b.n	8005d66 <_realloc_r+0x42>
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	07e8      	lsls	r0, r5, #31
 8005e30:	f100 8084 	bmi.w	8005f3c <_realloc_r+0x218>
 8005e34:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8005e38:	eba9 0505 	sub.w	r5, r9, r5
 8005e3c:	6868      	ldr	r0, [r5, #4]
 8005e3e:	f020 0003 	bic.w	r0, r0, #3
 8005e42:	4430      	add	r0, r6
 8005e44:	2900      	cmp	r1, #0
 8005e46:	d076      	beq.n	8005f36 <_realloc_r+0x212>
 8005e48:	4571      	cmp	r1, lr
 8005e4a:	d150      	bne.n	8005eee <_realloc_r+0x1ca>
 8005e4c:	4403      	add	r3, r0
 8005e4e:	f108 0110 	add.w	r1, r8, #16
 8005e52:	428b      	cmp	r3, r1
 8005e54:	db6f      	blt.n	8005f36 <_realloc_r+0x212>
 8005e56:	462f      	mov	r7, r5
 8005e58:	68ea      	ldr	r2, [r5, #12]
 8005e5a:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8005e5e:	60ca      	str	r2, [r1, #12]
 8005e60:	6091      	str	r1, [r2, #8]
 8005e62:	1f32      	subs	r2, r6, #4
 8005e64:	2a24      	cmp	r2, #36	; 0x24
 8005e66:	d83b      	bhi.n	8005ee0 <_realloc_r+0x1bc>
 8005e68:	2a13      	cmp	r2, #19
 8005e6a:	d936      	bls.n	8005eda <_realloc_r+0x1b6>
 8005e6c:	6821      	ldr	r1, [r4, #0]
 8005e6e:	60a9      	str	r1, [r5, #8]
 8005e70:	6861      	ldr	r1, [r4, #4]
 8005e72:	60e9      	str	r1, [r5, #12]
 8005e74:	2a1b      	cmp	r2, #27
 8005e76:	d81c      	bhi.n	8005eb2 <_realloc_r+0x18e>
 8005e78:	f105 0210 	add.w	r2, r5, #16
 8005e7c:	f104 0108 	add.w	r1, r4, #8
 8005e80:	6808      	ldr	r0, [r1, #0]
 8005e82:	6010      	str	r0, [r2, #0]
 8005e84:	6848      	ldr	r0, [r1, #4]
 8005e86:	6050      	str	r0, [r2, #4]
 8005e88:	6889      	ldr	r1, [r1, #8]
 8005e8a:	6091      	str	r1, [r2, #8]
 8005e8c:	eb05 0208 	add.w	r2, r5, r8
 8005e90:	eba3 0308 	sub.w	r3, r3, r8
 8005e94:	f043 0301 	orr.w	r3, r3, #1
 8005e98:	f8cb 2008 	str.w	r2, [fp, #8]
 8005e9c:	6053      	str	r3, [r2, #4]
 8005e9e:	686b      	ldr	r3, [r5, #4]
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	ea43 0308 	orr.w	r3, r3, r8
 8005ea8:	606b      	str	r3, [r5, #4]
 8005eaa:	4650      	mov	r0, sl
 8005eac:	f7ff fa64 	bl	8005378 <__malloc_unlock>
 8005eb0:	e759      	b.n	8005d66 <_realloc_r+0x42>
 8005eb2:	68a1      	ldr	r1, [r4, #8]
 8005eb4:	6129      	str	r1, [r5, #16]
 8005eb6:	68e1      	ldr	r1, [r4, #12]
 8005eb8:	6169      	str	r1, [r5, #20]
 8005eba:	2a24      	cmp	r2, #36	; 0x24
 8005ebc:	bf01      	itttt	eq
 8005ebe:	6922      	ldreq	r2, [r4, #16]
 8005ec0:	61aa      	streq	r2, [r5, #24]
 8005ec2:	6960      	ldreq	r0, [r4, #20]
 8005ec4:	61e8      	streq	r0, [r5, #28]
 8005ec6:	bf19      	ittee	ne
 8005ec8:	f105 0218 	addne.w	r2, r5, #24
 8005ecc:	f104 0110 	addne.w	r1, r4, #16
 8005ed0:	f105 0220 	addeq.w	r2, r5, #32
 8005ed4:	f104 0118 	addeq.w	r1, r4, #24
 8005ed8:	e7d2      	b.n	8005e80 <_realloc_r+0x15c>
 8005eda:	463a      	mov	r2, r7
 8005edc:	4621      	mov	r1, r4
 8005ede:	e7cf      	b.n	8005e80 <_realloc_r+0x15c>
 8005ee0:	4621      	mov	r1, r4
 8005ee2:	4638      	mov	r0, r7
 8005ee4:	9301      	str	r3, [sp, #4]
 8005ee6:	f7ff fefb 	bl	8005ce0 <memmove>
 8005eea:	9b01      	ldr	r3, [sp, #4]
 8005eec:	e7ce      	b.n	8005e8c <_realloc_r+0x168>
 8005eee:	18c7      	adds	r7, r0, r3
 8005ef0:	45b8      	cmp	r8, r7
 8005ef2:	dc20      	bgt.n	8005f36 <_realloc_r+0x212>
 8005ef4:	68cb      	ldr	r3, [r1, #12]
 8005ef6:	688a      	ldr	r2, [r1, #8]
 8005ef8:	60d3      	str	r3, [r2, #12]
 8005efa:	609a      	str	r2, [r3, #8]
 8005efc:	4628      	mov	r0, r5
 8005efe:	68eb      	ldr	r3, [r5, #12]
 8005f00:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8005f04:	60d3      	str	r3, [r2, #12]
 8005f06:	609a      	str	r2, [r3, #8]
 8005f08:	1f32      	subs	r2, r6, #4
 8005f0a:	2a24      	cmp	r2, #36	; 0x24
 8005f0c:	d842      	bhi.n	8005f94 <_realloc_r+0x270>
 8005f0e:	2a13      	cmp	r2, #19
 8005f10:	d93e      	bls.n	8005f90 <_realloc_r+0x26c>
 8005f12:	6823      	ldr	r3, [r4, #0]
 8005f14:	60ab      	str	r3, [r5, #8]
 8005f16:	6863      	ldr	r3, [r4, #4]
 8005f18:	60eb      	str	r3, [r5, #12]
 8005f1a:	2a1b      	cmp	r2, #27
 8005f1c:	d824      	bhi.n	8005f68 <_realloc_r+0x244>
 8005f1e:	f105 0010 	add.w	r0, r5, #16
 8005f22:	f104 0308 	add.w	r3, r4, #8
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	6002      	str	r2, [r0, #0]
 8005f2a:	685a      	ldr	r2, [r3, #4]
 8005f2c:	6042      	str	r2, [r0, #4]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	6083      	str	r3, [r0, #8]
 8005f32:	46a9      	mov	r9, r5
 8005f34:	e757      	b.n	8005de6 <_realloc_r+0xc2>
 8005f36:	4580      	cmp	r8, r0
 8005f38:	4607      	mov	r7, r0
 8005f3a:	dddf      	ble.n	8005efc <_realloc_r+0x1d8>
 8005f3c:	4611      	mov	r1, r2
 8005f3e:	4650      	mov	r0, sl
 8005f40:	f7fe fffa 	bl	8004f38 <_malloc_r>
 8005f44:	4607      	mov	r7, r0
 8005f46:	2800      	cmp	r0, #0
 8005f48:	d0af      	beq.n	8005eaa <_realloc_r+0x186>
 8005f4a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005f4e:	f023 0301 	bic.w	r3, r3, #1
 8005f52:	f1a0 0208 	sub.w	r2, r0, #8
 8005f56:	444b      	add	r3, r9
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d11f      	bne.n	8005f9c <_realloc_r+0x278>
 8005f5c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8005f60:	f027 0703 	bic.w	r7, r7, #3
 8005f64:	4437      	add	r7, r6
 8005f66:	e73e      	b.n	8005de6 <_realloc_r+0xc2>
 8005f68:	68a3      	ldr	r3, [r4, #8]
 8005f6a:	612b      	str	r3, [r5, #16]
 8005f6c:	68e3      	ldr	r3, [r4, #12]
 8005f6e:	616b      	str	r3, [r5, #20]
 8005f70:	2a24      	cmp	r2, #36	; 0x24
 8005f72:	bf01      	itttt	eq
 8005f74:	6923      	ldreq	r3, [r4, #16]
 8005f76:	61ab      	streq	r3, [r5, #24]
 8005f78:	6962      	ldreq	r2, [r4, #20]
 8005f7a:	61ea      	streq	r2, [r5, #28]
 8005f7c:	bf19      	ittee	ne
 8005f7e:	f105 0018 	addne.w	r0, r5, #24
 8005f82:	f104 0310 	addne.w	r3, r4, #16
 8005f86:	f105 0020 	addeq.w	r0, r5, #32
 8005f8a:	f104 0318 	addeq.w	r3, r4, #24
 8005f8e:	e7ca      	b.n	8005f26 <_realloc_r+0x202>
 8005f90:	4623      	mov	r3, r4
 8005f92:	e7c8      	b.n	8005f26 <_realloc_r+0x202>
 8005f94:	4621      	mov	r1, r4
 8005f96:	f7ff fea3 	bl	8005ce0 <memmove>
 8005f9a:	e7ca      	b.n	8005f32 <_realloc_r+0x20e>
 8005f9c:	1f32      	subs	r2, r6, #4
 8005f9e:	2a24      	cmp	r2, #36	; 0x24
 8005fa0:	d82d      	bhi.n	8005ffe <_realloc_r+0x2da>
 8005fa2:	2a13      	cmp	r2, #19
 8005fa4:	d928      	bls.n	8005ff8 <_realloc_r+0x2d4>
 8005fa6:	6823      	ldr	r3, [r4, #0]
 8005fa8:	6003      	str	r3, [r0, #0]
 8005faa:	6863      	ldr	r3, [r4, #4]
 8005fac:	6043      	str	r3, [r0, #4]
 8005fae:	2a1b      	cmp	r2, #27
 8005fb0:	d80e      	bhi.n	8005fd0 <_realloc_r+0x2ac>
 8005fb2:	f100 0308 	add.w	r3, r0, #8
 8005fb6:	f104 0208 	add.w	r2, r4, #8
 8005fba:	6811      	ldr	r1, [r2, #0]
 8005fbc:	6019      	str	r1, [r3, #0]
 8005fbe:	6851      	ldr	r1, [r2, #4]
 8005fc0:	6059      	str	r1, [r3, #4]
 8005fc2:	6892      	ldr	r2, [r2, #8]
 8005fc4:	609a      	str	r2, [r3, #8]
 8005fc6:	4621      	mov	r1, r4
 8005fc8:	4650      	mov	r0, sl
 8005fca:	f7ff fdb9 	bl	8005b40 <_free_r>
 8005fce:	e76c      	b.n	8005eaa <_realloc_r+0x186>
 8005fd0:	68a3      	ldr	r3, [r4, #8]
 8005fd2:	6083      	str	r3, [r0, #8]
 8005fd4:	68e3      	ldr	r3, [r4, #12]
 8005fd6:	60c3      	str	r3, [r0, #12]
 8005fd8:	2a24      	cmp	r2, #36	; 0x24
 8005fda:	bf01      	itttt	eq
 8005fdc:	6923      	ldreq	r3, [r4, #16]
 8005fde:	6103      	streq	r3, [r0, #16]
 8005fe0:	6961      	ldreq	r1, [r4, #20]
 8005fe2:	6141      	streq	r1, [r0, #20]
 8005fe4:	bf19      	ittee	ne
 8005fe6:	f100 0310 	addne.w	r3, r0, #16
 8005fea:	f104 0210 	addne.w	r2, r4, #16
 8005fee:	f100 0318 	addeq.w	r3, r0, #24
 8005ff2:	f104 0218 	addeq.w	r2, r4, #24
 8005ff6:	e7e0      	b.n	8005fba <_realloc_r+0x296>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	4622      	mov	r2, r4
 8005ffc:	e7dd      	b.n	8005fba <_realloc_r+0x296>
 8005ffe:	4621      	mov	r1, r4
 8006000:	f7ff fe6e 	bl	8005ce0 <memmove>
 8006004:	e7df      	b.n	8005fc6 <_realloc_r+0x2a2>
 8006006:	4637      	mov	r7, r6
 8006008:	e6ed      	b.n	8005de6 <_realloc_r+0xc2>
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	431f      	orrs	r7, r3
 8006010:	f8c9 7004 	str.w	r7, [r9, #4]
 8006014:	6853      	ldr	r3, [r2, #4]
 8006016:	f043 0301 	orr.w	r3, r3, #1
 800601a:	6053      	str	r3, [r2, #4]
 800601c:	e6ff      	b.n	8005e1e <_realloc_r+0xfa>
 800601e:	bf00      	nop
 8006020:	200000f8 	.word	0x200000f8

08006024 <__ascii_wctomb>:
 8006024:	b149      	cbz	r1, 800603a <__ascii_wctomb+0x16>
 8006026:	2aff      	cmp	r2, #255	; 0xff
 8006028:	bf85      	ittet	hi
 800602a:	238a      	movhi	r3, #138	; 0x8a
 800602c:	6003      	strhi	r3, [r0, #0]
 800602e:	700a      	strbls	r2, [r1, #0]
 8006030:	f04f 30ff 	movhi.w	r0, #4294967295
 8006034:	bf98      	it	ls
 8006036:	2001      	movls	r0, #1
 8006038:	4770      	bx	lr
 800603a:	4608      	mov	r0, r1
 800603c:	4770      	bx	lr
	...

08006040 <atan>:
 8006040:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006044:	ec55 4b10 	vmov	r4, r5, d0
 8006048:	4bc7      	ldr	r3, [pc, #796]	; (8006368 <atan+0x328>)
 800604a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800604e:	429e      	cmp	r6, r3
 8006050:	46ab      	mov	fp, r5
 8006052:	dd18      	ble.n	8006086 <atan+0x46>
 8006054:	4ac5      	ldr	r2, [pc, #788]	; (800636c <atan+0x32c>)
 8006056:	4296      	cmp	r6, r2
 8006058:	dc01      	bgt.n	800605e <atan+0x1e>
 800605a:	d109      	bne.n	8006070 <atan+0x30>
 800605c:	b144      	cbz	r4, 8006070 <atan+0x30>
 800605e:	4622      	mov	r2, r4
 8006060:	462b      	mov	r3, r5
 8006062:	4620      	mov	r0, r4
 8006064:	4629      	mov	r1, r5
 8006066:	f7fa f911 	bl	800028c <__adddf3>
 800606a:	4604      	mov	r4, r0
 800606c:	460d      	mov	r5, r1
 800606e:	e006      	b.n	800607e <atan+0x3e>
 8006070:	f1bb 0f00 	cmp.w	fp, #0
 8006074:	f300 813a 	bgt.w	80062ec <atan+0x2ac>
 8006078:	a59f      	add	r5, pc, #636	; (adr r5, 80062f8 <atan+0x2b8>)
 800607a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800607e:	ec45 4b10 	vmov	d0, r4, r5
 8006082:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006086:	4bba      	ldr	r3, [pc, #744]	; (8006370 <atan+0x330>)
 8006088:	429e      	cmp	r6, r3
 800608a:	dc14      	bgt.n	80060b6 <atan+0x76>
 800608c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006090:	429e      	cmp	r6, r3
 8006092:	dc0d      	bgt.n	80060b0 <atan+0x70>
 8006094:	a39a      	add	r3, pc, #616	; (adr r3, 8006300 <atan+0x2c0>)
 8006096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609a:	ee10 0a10 	vmov	r0, s0
 800609e:	4629      	mov	r1, r5
 80060a0:	f7fa f8f4 	bl	800028c <__adddf3>
 80060a4:	2200      	movs	r2, #0
 80060a6:	4bb3      	ldr	r3, [pc, #716]	; (8006374 <atan+0x334>)
 80060a8:	f7fa fd32 	bl	8000b10 <__aeabi_dcmpgt>
 80060ac:	2800      	cmp	r0, #0
 80060ae:	d1e6      	bne.n	800607e <atan+0x3e>
 80060b0:	f04f 3aff 	mov.w	sl, #4294967295
 80060b4:	e02b      	b.n	800610e <atan+0xce>
 80060b6:	f000 f96b 	bl	8006390 <fabs>
 80060ba:	4baf      	ldr	r3, [pc, #700]	; (8006378 <atan+0x338>)
 80060bc:	429e      	cmp	r6, r3
 80060be:	ec55 4b10 	vmov	r4, r5, d0
 80060c2:	f300 80bf 	bgt.w	8006244 <atan+0x204>
 80060c6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80060ca:	429e      	cmp	r6, r3
 80060cc:	f300 80a0 	bgt.w	8006210 <atan+0x1d0>
 80060d0:	ee10 2a10 	vmov	r2, s0
 80060d4:	ee10 0a10 	vmov	r0, s0
 80060d8:	462b      	mov	r3, r5
 80060da:	4629      	mov	r1, r5
 80060dc:	f7fa f8d6 	bl	800028c <__adddf3>
 80060e0:	2200      	movs	r2, #0
 80060e2:	4ba4      	ldr	r3, [pc, #656]	; (8006374 <atan+0x334>)
 80060e4:	f7fa f8d0 	bl	8000288 <__aeabi_dsub>
 80060e8:	2200      	movs	r2, #0
 80060ea:	4606      	mov	r6, r0
 80060ec:	460f      	mov	r7, r1
 80060ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80060f2:	4620      	mov	r0, r4
 80060f4:	4629      	mov	r1, r5
 80060f6:	f7fa f8c9 	bl	800028c <__adddf3>
 80060fa:	4602      	mov	r2, r0
 80060fc:	460b      	mov	r3, r1
 80060fe:	4630      	mov	r0, r6
 8006100:	4639      	mov	r1, r7
 8006102:	f7fa fb9f 	bl	8000844 <__aeabi_ddiv>
 8006106:	f04f 0a00 	mov.w	sl, #0
 800610a:	4604      	mov	r4, r0
 800610c:	460d      	mov	r5, r1
 800610e:	4622      	mov	r2, r4
 8006110:	462b      	mov	r3, r5
 8006112:	4620      	mov	r0, r4
 8006114:	4629      	mov	r1, r5
 8006116:	f7fa fa6b 	bl	80005f0 <__aeabi_dmul>
 800611a:	4602      	mov	r2, r0
 800611c:	460b      	mov	r3, r1
 800611e:	4680      	mov	r8, r0
 8006120:	4689      	mov	r9, r1
 8006122:	f7fa fa65 	bl	80005f0 <__aeabi_dmul>
 8006126:	a378      	add	r3, pc, #480	; (adr r3, 8006308 <atan+0x2c8>)
 8006128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612c:	4606      	mov	r6, r0
 800612e:	460f      	mov	r7, r1
 8006130:	f7fa fa5e 	bl	80005f0 <__aeabi_dmul>
 8006134:	a376      	add	r3, pc, #472	; (adr r3, 8006310 <atan+0x2d0>)
 8006136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613a:	f7fa f8a7 	bl	800028c <__adddf3>
 800613e:	4632      	mov	r2, r6
 8006140:	463b      	mov	r3, r7
 8006142:	f7fa fa55 	bl	80005f0 <__aeabi_dmul>
 8006146:	a374      	add	r3, pc, #464	; (adr r3, 8006318 <atan+0x2d8>)
 8006148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614c:	f7fa f89e 	bl	800028c <__adddf3>
 8006150:	4632      	mov	r2, r6
 8006152:	463b      	mov	r3, r7
 8006154:	f7fa fa4c 	bl	80005f0 <__aeabi_dmul>
 8006158:	a371      	add	r3, pc, #452	; (adr r3, 8006320 <atan+0x2e0>)
 800615a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615e:	f7fa f895 	bl	800028c <__adddf3>
 8006162:	4632      	mov	r2, r6
 8006164:	463b      	mov	r3, r7
 8006166:	f7fa fa43 	bl	80005f0 <__aeabi_dmul>
 800616a:	a36f      	add	r3, pc, #444	; (adr r3, 8006328 <atan+0x2e8>)
 800616c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006170:	f7fa f88c 	bl	800028c <__adddf3>
 8006174:	4632      	mov	r2, r6
 8006176:	463b      	mov	r3, r7
 8006178:	f7fa fa3a 	bl	80005f0 <__aeabi_dmul>
 800617c:	a36c      	add	r3, pc, #432	; (adr r3, 8006330 <atan+0x2f0>)
 800617e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006182:	f7fa f883 	bl	800028c <__adddf3>
 8006186:	4642      	mov	r2, r8
 8006188:	464b      	mov	r3, r9
 800618a:	f7fa fa31 	bl	80005f0 <__aeabi_dmul>
 800618e:	a36a      	add	r3, pc, #424	; (adr r3, 8006338 <atan+0x2f8>)
 8006190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006194:	4680      	mov	r8, r0
 8006196:	4689      	mov	r9, r1
 8006198:	4630      	mov	r0, r6
 800619a:	4639      	mov	r1, r7
 800619c:	f7fa fa28 	bl	80005f0 <__aeabi_dmul>
 80061a0:	a367      	add	r3, pc, #412	; (adr r3, 8006340 <atan+0x300>)
 80061a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a6:	f7fa f86f 	bl	8000288 <__aeabi_dsub>
 80061aa:	4632      	mov	r2, r6
 80061ac:	463b      	mov	r3, r7
 80061ae:	f7fa fa1f 	bl	80005f0 <__aeabi_dmul>
 80061b2:	a365      	add	r3, pc, #404	; (adr r3, 8006348 <atan+0x308>)
 80061b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b8:	f7fa f866 	bl	8000288 <__aeabi_dsub>
 80061bc:	4632      	mov	r2, r6
 80061be:	463b      	mov	r3, r7
 80061c0:	f7fa fa16 	bl	80005f0 <__aeabi_dmul>
 80061c4:	a362      	add	r3, pc, #392	; (adr r3, 8006350 <atan+0x310>)
 80061c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ca:	f7fa f85d 	bl	8000288 <__aeabi_dsub>
 80061ce:	4632      	mov	r2, r6
 80061d0:	463b      	mov	r3, r7
 80061d2:	f7fa fa0d 	bl	80005f0 <__aeabi_dmul>
 80061d6:	a360      	add	r3, pc, #384	; (adr r3, 8006358 <atan+0x318>)
 80061d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061dc:	f7fa f854 	bl	8000288 <__aeabi_dsub>
 80061e0:	4632      	mov	r2, r6
 80061e2:	463b      	mov	r3, r7
 80061e4:	f7fa fa04 	bl	80005f0 <__aeabi_dmul>
 80061e8:	f1ba 3fff 	cmp.w	sl, #4294967295
 80061ec:	4602      	mov	r2, r0
 80061ee:	460b      	mov	r3, r1
 80061f0:	d155      	bne.n	800629e <atan+0x25e>
 80061f2:	4640      	mov	r0, r8
 80061f4:	4649      	mov	r1, r9
 80061f6:	f7fa f849 	bl	800028c <__adddf3>
 80061fa:	4622      	mov	r2, r4
 80061fc:	462b      	mov	r3, r5
 80061fe:	f7fa f9f7 	bl	80005f0 <__aeabi_dmul>
 8006202:	4602      	mov	r2, r0
 8006204:	460b      	mov	r3, r1
 8006206:	4620      	mov	r0, r4
 8006208:	4629      	mov	r1, r5
 800620a:	f7fa f83d 	bl	8000288 <__aeabi_dsub>
 800620e:	e72c      	b.n	800606a <atan+0x2a>
 8006210:	ee10 0a10 	vmov	r0, s0
 8006214:	2200      	movs	r2, #0
 8006216:	4b57      	ldr	r3, [pc, #348]	; (8006374 <atan+0x334>)
 8006218:	4629      	mov	r1, r5
 800621a:	f7fa f835 	bl	8000288 <__aeabi_dsub>
 800621e:	2200      	movs	r2, #0
 8006220:	4606      	mov	r6, r0
 8006222:	460f      	mov	r7, r1
 8006224:	4b53      	ldr	r3, [pc, #332]	; (8006374 <atan+0x334>)
 8006226:	4620      	mov	r0, r4
 8006228:	4629      	mov	r1, r5
 800622a:	f7fa f82f 	bl	800028c <__adddf3>
 800622e:	4602      	mov	r2, r0
 8006230:	460b      	mov	r3, r1
 8006232:	4630      	mov	r0, r6
 8006234:	4639      	mov	r1, r7
 8006236:	f7fa fb05 	bl	8000844 <__aeabi_ddiv>
 800623a:	f04f 0a01 	mov.w	sl, #1
 800623e:	4604      	mov	r4, r0
 8006240:	460d      	mov	r5, r1
 8006242:	e764      	b.n	800610e <atan+0xce>
 8006244:	4b4d      	ldr	r3, [pc, #308]	; (800637c <atan+0x33c>)
 8006246:	429e      	cmp	r6, r3
 8006248:	dc1d      	bgt.n	8006286 <atan+0x246>
 800624a:	ee10 0a10 	vmov	r0, s0
 800624e:	2200      	movs	r2, #0
 8006250:	4b4b      	ldr	r3, [pc, #300]	; (8006380 <atan+0x340>)
 8006252:	4629      	mov	r1, r5
 8006254:	f7fa f818 	bl	8000288 <__aeabi_dsub>
 8006258:	2200      	movs	r2, #0
 800625a:	4606      	mov	r6, r0
 800625c:	460f      	mov	r7, r1
 800625e:	4b48      	ldr	r3, [pc, #288]	; (8006380 <atan+0x340>)
 8006260:	4620      	mov	r0, r4
 8006262:	4629      	mov	r1, r5
 8006264:	f7fa f9c4 	bl	80005f0 <__aeabi_dmul>
 8006268:	2200      	movs	r2, #0
 800626a:	4b42      	ldr	r3, [pc, #264]	; (8006374 <atan+0x334>)
 800626c:	f7fa f80e 	bl	800028c <__adddf3>
 8006270:	4602      	mov	r2, r0
 8006272:	460b      	mov	r3, r1
 8006274:	4630      	mov	r0, r6
 8006276:	4639      	mov	r1, r7
 8006278:	f7fa fae4 	bl	8000844 <__aeabi_ddiv>
 800627c:	f04f 0a02 	mov.w	sl, #2
 8006280:	4604      	mov	r4, r0
 8006282:	460d      	mov	r5, r1
 8006284:	e743      	b.n	800610e <atan+0xce>
 8006286:	462b      	mov	r3, r5
 8006288:	ee10 2a10 	vmov	r2, s0
 800628c:	2000      	movs	r0, #0
 800628e:	493d      	ldr	r1, [pc, #244]	; (8006384 <atan+0x344>)
 8006290:	f7fa fad8 	bl	8000844 <__aeabi_ddiv>
 8006294:	f04f 0a03 	mov.w	sl, #3
 8006298:	4604      	mov	r4, r0
 800629a:	460d      	mov	r5, r1
 800629c:	e737      	b.n	800610e <atan+0xce>
 800629e:	4640      	mov	r0, r8
 80062a0:	4649      	mov	r1, r9
 80062a2:	f7f9 fff3 	bl	800028c <__adddf3>
 80062a6:	4622      	mov	r2, r4
 80062a8:	462b      	mov	r3, r5
 80062aa:	f7fa f9a1 	bl	80005f0 <__aeabi_dmul>
 80062ae:	4e36      	ldr	r6, [pc, #216]	; (8006388 <atan+0x348>)
 80062b0:	4b36      	ldr	r3, [pc, #216]	; (800638c <atan+0x34c>)
 80062b2:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80062b6:	4456      	add	r6, sl
 80062b8:	449a      	add	sl, r3
 80062ba:	e9da 2300 	ldrd	r2, r3, [sl]
 80062be:	f7f9 ffe3 	bl	8000288 <__aeabi_dsub>
 80062c2:	4622      	mov	r2, r4
 80062c4:	462b      	mov	r3, r5
 80062c6:	f7f9 ffdf 	bl	8000288 <__aeabi_dsub>
 80062ca:	4602      	mov	r2, r0
 80062cc:	460b      	mov	r3, r1
 80062ce:	e9d6 0100 	ldrd	r0, r1, [r6]
 80062d2:	f7f9 ffd9 	bl	8000288 <__aeabi_dsub>
 80062d6:	f1bb 0f00 	cmp.w	fp, #0
 80062da:	4604      	mov	r4, r0
 80062dc:	460d      	mov	r5, r1
 80062de:	f6bf aece 	bge.w	800607e <atan+0x3e>
 80062e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80062e6:	4604      	mov	r4, r0
 80062e8:	461d      	mov	r5, r3
 80062ea:	e6c8      	b.n	800607e <atan+0x3e>
 80062ec:	a51c      	add	r5, pc, #112	; (adr r5, 8006360 <atan+0x320>)
 80062ee:	e9d5 4500 	ldrd	r4, r5, [r5]
 80062f2:	e6c4      	b.n	800607e <atan+0x3e>
 80062f4:	f3af 8000 	nop.w
 80062f8:	54442d18 	.word	0x54442d18
 80062fc:	bff921fb 	.word	0xbff921fb
 8006300:	8800759c 	.word	0x8800759c
 8006304:	7e37e43c 	.word	0x7e37e43c
 8006308:	e322da11 	.word	0xe322da11
 800630c:	3f90ad3a 	.word	0x3f90ad3a
 8006310:	24760deb 	.word	0x24760deb
 8006314:	3fa97b4b 	.word	0x3fa97b4b
 8006318:	a0d03d51 	.word	0xa0d03d51
 800631c:	3fb10d66 	.word	0x3fb10d66
 8006320:	c54c206e 	.word	0xc54c206e
 8006324:	3fb745cd 	.word	0x3fb745cd
 8006328:	920083ff 	.word	0x920083ff
 800632c:	3fc24924 	.word	0x3fc24924
 8006330:	5555550d 	.word	0x5555550d
 8006334:	3fd55555 	.word	0x3fd55555
 8006338:	2c6a6c2f 	.word	0x2c6a6c2f
 800633c:	bfa2b444 	.word	0xbfa2b444
 8006340:	52defd9a 	.word	0x52defd9a
 8006344:	3fadde2d 	.word	0x3fadde2d
 8006348:	af749a6d 	.word	0xaf749a6d
 800634c:	3fb3b0f2 	.word	0x3fb3b0f2
 8006350:	fe231671 	.word	0xfe231671
 8006354:	3fbc71c6 	.word	0x3fbc71c6
 8006358:	9998ebc4 	.word	0x9998ebc4
 800635c:	3fc99999 	.word	0x3fc99999
 8006360:	54442d18 	.word	0x54442d18
 8006364:	3ff921fb 	.word	0x3ff921fb
 8006368:	440fffff 	.word	0x440fffff
 800636c:	7ff00000 	.word	0x7ff00000
 8006370:	3fdbffff 	.word	0x3fdbffff
 8006374:	3ff00000 	.word	0x3ff00000
 8006378:	3ff2ffff 	.word	0x3ff2ffff
 800637c:	40037fff 	.word	0x40037fff
 8006380:	3ff80000 	.word	0x3ff80000
 8006384:	bff00000 	.word	0xbff00000
 8006388:	080068e0 	.word	0x080068e0
 800638c:	08006900 	.word	0x08006900

08006390 <fabs>:
 8006390:	ec53 2b10 	vmov	r2, r3, d0
 8006394:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006398:	ec43 2b10 	vmov	d0, r2, r3
 800639c:	4770      	bx	lr
	...

080063a0 <sqrt>:
 80063a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80063a4:	ed2d 8b02 	vpush	{d8}
 80063a8:	b08b      	sub	sp, #44	; 0x2c
 80063aa:	ec55 4b10 	vmov	r4, r5, d0
 80063ae:	f000 f851 	bl	8006454 <__ieee754_sqrt>
 80063b2:	4b26      	ldr	r3, [pc, #152]	; (800644c <sqrt+0xac>)
 80063b4:	eeb0 8a40 	vmov.f32	s16, s0
 80063b8:	eef0 8a60 	vmov.f32	s17, s1
 80063bc:	f993 6000 	ldrsb.w	r6, [r3]
 80063c0:	1c73      	adds	r3, r6, #1
 80063c2:	d02a      	beq.n	800641a <sqrt+0x7a>
 80063c4:	4622      	mov	r2, r4
 80063c6:	462b      	mov	r3, r5
 80063c8:	4620      	mov	r0, r4
 80063ca:	4629      	mov	r1, r5
 80063cc:	f7fa fbaa 	bl	8000b24 <__aeabi_dcmpun>
 80063d0:	4607      	mov	r7, r0
 80063d2:	bb10      	cbnz	r0, 800641a <sqrt+0x7a>
 80063d4:	f04f 0800 	mov.w	r8, #0
 80063d8:	f04f 0900 	mov.w	r9, #0
 80063dc:	4642      	mov	r2, r8
 80063de:	464b      	mov	r3, r9
 80063e0:	4620      	mov	r0, r4
 80063e2:	4629      	mov	r1, r5
 80063e4:	f7fa fb76 	bl	8000ad4 <__aeabi_dcmplt>
 80063e8:	b1b8      	cbz	r0, 800641a <sqrt+0x7a>
 80063ea:	2301      	movs	r3, #1
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	4b18      	ldr	r3, [pc, #96]	; (8006450 <sqrt+0xb0>)
 80063f0:	9301      	str	r3, [sp, #4]
 80063f2:	9708      	str	r7, [sp, #32]
 80063f4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80063f8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80063fc:	b9b6      	cbnz	r6, 800642c <sqrt+0x8c>
 80063fe:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006402:	4668      	mov	r0, sp
 8006404:	f000 f8d6 	bl	80065b4 <matherr>
 8006408:	b1d0      	cbz	r0, 8006440 <sqrt+0xa0>
 800640a:	9b08      	ldr	r3, [sp, #32]
 800640c:	b11b      	cbz	r3, 8006416 <sqrt+0x76>
 800640e:	f000 f8d3 	bl	80065b8 <__errno>
 8006412:	9b08      	ldr	r3, [sp, #32]
 8006414:	6003      	str	r3, [r0, #0]
 8006416:	ed9d 8b06 	vldr	d8, [sp, #24]
 800641a:	eeb0 0a48 	vmov.f32	s0, s16
 800641e:	eef0 0a68 	vmov.f32	s1, s17
 8006422:	b00b      	add	sp, #44	; 0x2c
 8006424:	ecbd 8b02 	vpop	{d8}
 8006428:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800642c:	4642      	mov	r2, r8
 800642e:	464b      	mov	r3, r9
 8006430:	4640      	mov	r0, r8
 8006432:	4649      	mov	r1, r9
 8006434:	f7fa fa06 	bl	8000844 <__aeabi_ddiv>
 8006438:	2e02      	cmp	r6, #2
 800643a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800643e:	d1e0      	bne.n	8006402 <sqrt+0x62>
 8006440:	f000 f8ba 	bl	80065b8 <__errno>
 8006444:	2321      	movs	r3, #33	; 0x21
 8006446:	6003      	str	r3, [r0, #0]
 8006448:	e7df      	b.n	800640a <sqrt+0x6a>
 800644a:	bf00      	nop
 800644c:	20000674 	.word	0x20000674
 8006450:	08006920 	.word	0x08006920

08006454 <__ieee754_sqrt>:
 8006454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006458:	ec55 4b10 	vmov	r4, r5, d0
 800645c:	4e54      	ldr	r6, [pc, #336]	; (80065b0 <__ieee754_sqrt+0x15c>)
 800645e:	43ae      	bics	r6, r5
 8006460:	ee10 0a10 	vmov	r0, s0
 8006464:	462b      	mov	r3, r5
 8006466:	462a      	mov	r2, r5
 8006468:	4621      	mov	r1, r4
 800646a:	d113      	bne.n	8006494 <__ieee754_sqrt+0x40>
 800646c:	ee10 2a10 	vmov	r2, s0
 8006470:	462b      	mov	r3, r5
 8006472:	ee10 0a10 	vmov	r0, s0
 8006476:	4629      	mov	r1, r5
 8006478:	f7fa f8ba 	bl	80005f0 <__aeabi_dmul>
 800647c:	4602      	mov	r2, r0
 800647e:	460b      	mov	r3, r1
 8006480:	4620      	mov	r0, r4
 8006482:	4629      	mov	r1, r5
 8006484:	f7f9 ff02 	bl	800028c <__adddf3>
 8006488:	4604      	mov	r4, r0
 800648a:	460d      	mov	r5, r1
 800648c:	ec45 4b10 	vmov	d0, r4, r5
 8006490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006494:	2d00      	cmp	r5, #0
 8006496:	dc10      	bgt.n	80064ba <__ieee754_sqrt+0x66>
 8006498:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800649c:	4330      	orrs	r0, r6
 800649e:	d0f5      	beq.n	800648c <__ieee754_sqrt+0x38>
 80064a0:	b15d      	cbz	r5, 80064ba <__ieee754_sqrt+0x66>
 80064a2:	ee10 2a10 	vmov	r2, s0
 80064a6:	462b      	mov	r3, r5
 80064a8:	4620      	mov	r0, r4
 80064aa:	4629      	mov	r1, r5
 80064ac:	f7f9 feec 	bl	8000288 <__aeabi_dsub>
 80064b0:	4602      	mov	r2, r0
 80064b2:	460b      	mov	r3, r1
 80064b4:	f7fa f9c6 	bl	8000844 <__aeabi_ddiv>
 80064b8:	e7e6      	b.n	8006488 <__ieee754_sqrt+0x34>
 80064ba:	151b      	asrs	r3, r3, #20
 80064bc:	d10c      	bne.n	80064d8 <__ieee754_sqrt+0x84>
 80064be:	2a00      	cmp	r2, #0
 80064c0:	d06d      	beq.n	800659e <__ieee754_sqrt+0x14a>
 80064c2:	2000      	movs	r0, #0
 80064c4:	02d6      	lsls	r6, r2, #11
 80064c6:	d56e      	bpl.n	80065a6 <__ieee754_sqrt+0x152>
 80064c8:	1e44      	subs	r4, r0, #1
 80064ca:	1b1b      	subs	r3, r3, r4
 80064cc:	f1c0 0420 	rsb	r4, r0, #32
 80064d0:	fa21 f404 	lsr.w	r4, r1, r4
 80064d4:	4322      	orrs	r2, r4
 80064d6:	4081      	lsls	r1, r0
 80064d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80064dc:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80064e0:	07dd      	lsls	r5, r3, #31
 80064e2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80064e6:	bf42      	ittt	mi
 80064e8:	0052      	lslmi	r2, r2, #1
 80064ea:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 80064ee:	0049      	lslmi	r1, r1, #1
 80064f0:	1058      	asrs	r0, r3, #1
 80064f2:	2500      	movs	r5, #0
 80064f4:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 80064f8:	441a      	add	r2, r3
 80064fa:	0049      	lsls	r1, r1, #1
 80064fc:	2316      	movs	r3, #22
 80064fe:	462c      	mov	r4, r5
 8006500:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8006504:	19a7      	adds	r7, r4, r6
 8006506:	4297      	cmp	r7, r2
 8006508:	bfde      	ittt	le
 800650a:	1bd2      	suble	r2, r2, r7
 800650c:	19bc      	addle	r4, r7, r6
 800650e:	19ad      	addle	r5, r5, r6
 8006510:	0052      	lsls	r2, r2, #1
 8006512:	3b01      	subs	r3, #1
 8006514:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8006518:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800651c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006520:	d1f0      	bne.n	8006504 <__ieee754_sqrt+0xb0>
 8006522:	f04f 0e20 	mov.w	lr, #32
 8006526:	469c      	mov	ip, r3
 8006528:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800652c:	42a2      	cmp	r2, r4
 800652e:	eb06 070c 	add.w	r7, r6, ip
 8006532:	dc02      	bgt.n	800653a <__ieee754_sqrt+0xe6>
 8006534:	d112      	bne.n	800655c <__ieee754_sqrt+0x108>
 8006536:	428f      	cmp	r7, r1
 8006538:	d810      	bhi.n	800655c <__ieee754_sqrt+0x108>
 800653a:	2f00      	cmp	r7, #0
 800653c:	eb07 0c06 	add.w	ip, r7, r6
 8006540:	da34      	bge.n	80065ac <__ieee754_sqrt+0x158>
 8006542:	f1bc 0f00 	cmp.w	ip, #0
 8006546:	db31      	blt.n	80065ac <__ieee754_sqrt+0x158>
 8006548:	f104 0801 	add.w	r8, r4, #1
 800654c:	1b12      	subs	r2, r2, r4
 800654e:	428f      	cmp	r7, r1
 8006550:	bf88      	it	hi
 8006552:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006556:	1bc9      	subs	r1, r1, r7
 8006558:	4433      	add	r3, r6
 800655a:	4644      	mov	r4, r8
 800655c:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8006560:	f1be 0e01 	subs.w	lr, lr, #1
 8006564:	443a      	add	r2, r7
 8006566:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800656a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800656e:	d1dd      	bne.n	800652c <__ieee754_sqrt+0xd8>
 8006570:	430a      	orrs	r2, r1
 8006572:	d006      	beq.n	8006582 <__ieee754_sqrt+0x12e>
 8006574:	1c5c      	adds	r4, r3, #1
 8006576:	bf13      	iteet	ne
 8006578:	3301      	addne	r3, #1
 800657a:	3501      	addeq	r5, #1
 800657c:	4673      	moveq	r3, lr
 800657e:	f023 0301 	bicne.w	r3, r3, #1
 8006582:	106a      	asrs	r2, r5, #1
 8006584:	085b      	lsrs	r3, r3, #1
 8006586:	07e9      	lsls	r1, r5, #31
 8006588:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800658c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8006590:	bf48      	it	mi
 8006592:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8006596:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800659a:	461c      	mov	r4, r3
 800659c:	e776      	b.n	800648c <__ieee754_sqrt+0x38>
 800659e:	0aca      	lsrs	r2, r1, #11
 80065a0:	3b15      	subs	r3, #21
 80065a2:	0549      	lsls	r1, r1, #21
 80065a4:	e78b      	b.n	80064be <__ieee754_sqrt+0x6a>
 80065a6:	0052      	lsls	r2, r2, #1
 80065a8:	3001      	adds	r0, #1
 80065aa:	e78b      	b.n	80064c4 <__ieee754_sqrt+0x70>
 80065ac:	46a0      	mov	r8, r4
 80065ae:	e7cd      	b.n	800654c <__ieee754_sqrt+0xf8>
 80065b0:	7ff00000 	.word	0x7ff00000

080065b4 <matherr>:
 80065b4:	2000      	movs	r0, #0
 80065b6:	4770      	bx	lr

080065b8 <__errno>:
 80065b8:	4b01      	ldr	r3, [pc, #4]	; (80065c0 <__errno+0x8>)
 80065ba:	6818      	ldr	r0, [r3, #0]
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	20000004 	.word	0x20000004

080065c4 <_sbrk>:
 80065c4:	4b04      	ldr	r3, [pc, #16]	; (80065d8 <_sbrk+0x14>)
 80065c6:	6819      	ldr	r1, [r3, #0]
 80065c8:	4602      	mov	r2, r0
 80065ca:	b909      	cbnz	r1, 80065d0 <_sbrk+0xc>
 80065cc:	4903      	ldr	r1, [pc, #12]	; (80065dc <_sbrk+0x18>)
 80065ce:	6019      	str	r1, [r3, #0]
 80065d0:	6818      	ldr	r0, [r3, #0]
 80065d2:	4402      	add	r2, r0
 80065d4:	601a      	str	r2, [r3, #0]
 80065d6:	4770      	bx	lr
 80065d8:	200006c8 	.word	0x200006c8
 80065dc:	200007b0 	.word	0x200007b0

080065e0 <_init>:
 80065e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065e2:	bf00      	nop
 80065e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065e6:	bc08      	pop	{r3}
 80065e8:	469e      	mov	lr, r3
 80065ea:	4770      	bx	lr

080065ec <_fini>:
 80065ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ee:	bf00      	nop
 80065f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065f2:	bc08      	pop	{r3}
 80065f4:	469e      	mov	lr, r3
 80065f6:	4770      	bx	lr
