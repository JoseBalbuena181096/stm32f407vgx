
C:\Users\LENOVO\Documents\Proyecto_PWM\Debug\Proyecto_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000115c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080012e4  080012e4  000112e4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001304  08001304  00011304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001308  08001308  00011308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  0800130c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          0000005c  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000060  20000060  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000fade  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001fcf  00000000  00000000  0002fb12  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000048a5  00000000  00000000  00031ae1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000006c0  00000000  00000000  00036388  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000008d0  00000000  00000000  00036a48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00003d7d  00000000  00000000  00037318  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002ed6  00000000  00000000  0003b095  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003df6b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000012b4  00000000  00000000  0003dfe8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080012cc 	.word	0x080012cc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080012cc 	.word	0x080012cc

080001c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80001ca:	4b08      	ldr	r3, [pc, #32]	; (80001ec <HAL_InitTick+0x24>)
{
 80001cc:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80001ce:	6818      	ldr	r0, [r3, #0]
 80001d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80001d8:	f000 f888 	bl	80002ec <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001dc:	2200      	movs	r2, #0
 80001de:	4621      	mov	r1, r4
 80001e0:	f04f 30ff 	mov.w	r0, #4294967295
 80001e4:	f000 f84e 	bl	8000284 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80001e8:	2000      	movs	r0, #0
 80001ea:	bd10      	pop	{r4, pc}
 80001ec:	20000000 	.word	0x20000000

080001f0 <HAL_Init>:
{
 80001f0:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80001f2:	4b0b      	ldr	r3, [pc, #44]	; (8000220 <HAL_Init+0x30>)
 80001f4:	681a      	ldr	r2, [r3, #0]
 80001f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80001fa:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80001fc:	681a      	ldr	r2, [r3, #0]
 80001fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000202:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000204:	681a      	ldr	r2, [r3, #0]
 8000206:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800020a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800020c:	2003      	movs	r0, #3
 800020e:	f000 f827 	bl	8000260 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000212:	2000      	movs	r0, #0
 8000214:	f7ff ffd8 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 8000218:	f000 ff2b 	bl	8001072 <HAL_MspInit>
}
 800021c:	2000      	movs	r0, #0
 800021e:	bd08      	pop	{r3, pc}
 8000220:	40023c00 	.word	0x40023c00

08000224 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000224:	4a02      	ldr	r2, [pc, #8]	; (8000230 <HAL_IncTick+0xc>)
 8000226:	6813      	ldr	r3, [r2, #0]
 8000228:	3301      	adds	r3, #1
 800022a:	6013      	str	r3, [r2, #0]
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	20000020 	.word	0x20000020

08000234 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000234:	4b01      	ldr	r3, [pc, #4]	; (800023c <HAL_GetTick+0x8>)
 8000236:	6818      	ldr	r0, [r3, #0]
}
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	20000020 	.word	0x20000020

08000240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000240:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000242:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000244:	f7ff fff6 	bl	8000234 <HAL_GetTick>
  uint32_t wait = Delay;
 8000248:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800024a:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800024c:	4605      	mov	r5, r0
  {
     wait++;
 800024e:	bf18      	it	ne
 8000250:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000252:	f7ff ffef 	bl	8000234 <HAL_GetTick>
 8000256:	1b40      	subs	r0, r0, r5
 8000258:	42a0      	cmp	r0, r4
 800025a:	d3fa      	bcc.n	8000252 <HAL_Delay+0x12>
  {
  }
}
 800025c:	b003      	add	sp, #12
 800025e:	bd30      	pop	{r4, r5, pc}

08000260 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000260:	4a07      	ldr	r2, [pc, #28]	; (8000280 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000262:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000264:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000268:	041b      	lsls	r3, r3, #16
 800026a:	0c1b      	lsrs	r3, r3, #16
 800026c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000270:	0200      	lsls	r0, r0, #8
 8000272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000276:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800027a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800027c:	60d3      	str	r3, [r2, #12]
 800027e:	4770      	bx	lr
 8000280:	e000ed00 	.word	0xe000ed00

08000284 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000284:	4b17      	ldr	r3, [pc, #92]	; (80002e4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000286:	b530      	push	{r4, r5, lr}
 8000288:	68dc      	ldr	r4, [r3, #12]
 800028a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800028e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000292:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000294:	2b04      	cmp	r3, #4
 8000296:	bf28      	it	cs
 8000298:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800029a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800029c:	f04f 0501 	mov.w	r5, #1
 80002a0:	fa05 f303 	lsl.w	r3, r5, r3
 80002a4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002a8:	bf8c      	ite	hi
 80002aa:	3c03      	subhi	r4, #3
 80002ac:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002ae:	4019      	ands	r1, r3
 80002b0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002b2:	fa05 f404 	lsl.w	r4, r5, r4
 80002b6:	3c01      	subs	r4, #1
 80002b8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80002ba:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002bc:	ea42 0201 	orr.w	r2, r2, r1
 80002c0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c4:	bfaf      	iteee	ge
 80002c6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ca:	f000 000f 	andlt.w	r0, r0, #15
 80002ce:	4b06      	ldrlt	r3, [pc, #24]	; (80002e8 <HAL_NVIC_SetPriority+0x64>)
 80002d0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d2:	bfa5      	ittet	ge
 80002d4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80002d8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002da:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002dc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002e0:	bd30      	pop	{r4, r5, pc}
 80002e2:	bf00      	nop
 80002e4:	e000ed00 	.word	0xe000ed00
 80002e8:	e000ed14 	.word	0xe000ed14

080002ec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002ec:	3801      	subs	r0, #1
 80002ee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002f2:	d20a      	bcs.n	800030a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002f4:	4b06      	ldr	r3, [pc, #24]	; (8000310 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f6:	4a07      	ldr	r2, [pc, #28]	; (8000314 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002f8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fa:	21f0      	movs	r1, #240	; 0xf0
 80002fc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000300:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000302:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000304:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000306:	601a      	str	r2, [r3, #0]
 8000308:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800030a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	e000e010 	.word	0xe000e010
 8000314:	e000ed00 	.word	0xe000ed00

08000318 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000318:	4b04      	ldr	r3, [pc, #16]	; (800032c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800031a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800031c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800031e:	bf0c      	ite	eq
 8000320:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000324:	f022 0204 	bicne.w	r2, r2, #4
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	4770      	bx	lr
 800032c:	e000e010 	.word	0xe000e010

08000330 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000330:	4770      	bx	lr

08000332 <HAL_SYSTICK_IRQHandler>:
{
 8000332:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000334:	f7ff fffc 	bl	8000330 <HAL_SYSTICK_Callback>
 8000338:	bd08      	pop	{r3, pc}
	...

0800033c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800033c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000340:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000342:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000344:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80004f4 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000348:	4a68      	ldr	r2, [pc, #416]	; (80004ec <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800034a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80004f8 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800034e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000350:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000352:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000356:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000358:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800035c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000360:	45b6      	cmp	lr, r6
 8000362:	f040 80ae 	bne.w	80004c2 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000366:	684c      	ldr	r4, [r1, #4]
 8000368:	f024 0710 	bic.w	r7, r4, #16
 800036c:	2f02      	cmp	r7, #2
 800036e:	d116      	bne.n	800039e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000370:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000374:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000378:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800037c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000380:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000384:	f04f 0c0f 	mov.w	ip, #15
 8000388:	fa0c fc0b 	lsl.w	ip, ip, fp
 800038c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000390:	690d      	ldr	r5, [r1, #16]
 8000392:	fa05 f50b 	lsl.w	r5, r5, fp
 8000396:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800039a:	f8ca 5020 	str.w	r5, [sl, #32]
 800039e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003a2:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80003a4:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003a8:	fa05 f50a 	lsl.w	r5, r5, sl
 80003ac:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003ae:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003b2:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003b6:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003ba:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003bc:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003c0:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80003c2:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003c6:	d811      	bhi.n	80003ec <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80003c8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003ca:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80003ce:	68cf      	ldr	r7, [r1, #12]
 80003d0:	fa07 fc0a 	lsl.w	ip, r7, sl
 80003d4:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80003d8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80003da:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80003dc:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003e0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80003e4:	409f      	lsls	r7, r3
 80003e6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80003ea:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80003ec:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80003ee:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80003f0:	688f      	ldr	r7, [r1, #8]
 80003f2:	fa07 f70a 	lsl.w	r7, r7, sl
 80003f6:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80003f8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003fa:	00e5      	lsls	r5, r4, #3
 80003fc:	d561      	bpl.n	80004c2 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003fe:	f04f 0b00 	mov.w	fp, #0
 8000402:	f8cd b00c 	str.w	fp, [sp, #12]
 8000406:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800040a:	4d39      	ldr	r5, [pc, #228]	; (80004f0 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800040c:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000410:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000414:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000418:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800041c:	9703      	str	r7, [sp, #12]
 800041e:	9f03      	ldr	r7, [sp, #12]
 8000420:	f023 0703 	bic.w	r7, r3, #3
 8000424:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000428:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800042c:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000430:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000434:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000438:	f04f 0e0f 	mov.w	lr, #15
 800043c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000440:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000442:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000446:	d043      	beq.n	80004d0 <HAL_GPIO_Init+0x194>
 8000448:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800044c:	42a8      	cmp	r0, r5
 800044e:	d041      	beq.n	80004d4 <HAL_GPIO_Init+0x198>
 8000450:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000454:	42a8      	cmp	r0, r5
 8000456:	d03f      	beq.n	80004d8 <HAL_GPIO_Init+0x19c>
 8000458:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800045c:	42a8      	cmp	r0, r5
 800045e:	d03d      	beq.n	80004dc <HAL_GPIO_Init+0x1a0>
 8000460:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000464:	42a8      	cmp	r0, r5
 8000466:	d03b      	beq.n	80004e0 <HAL_GPIO_Init+0x1a4>
 8000468:	4548      	cmp	r0, r9
 800046a:	d03b      	beq.n	80004e4 <HAL_GPIO_Init+0x1a8>
 800046c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000470:	42a8      	cmp	r0, r5
 8000472:	d039      	beq.n	80004e8 <HAL_GPIO_Init+0x1ac>
 8000474:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000478:	42a8      	cmp	r0, r5
 800047a:	bf14      	ite	ne
 800047c:	2508      	movne	r5, #8
 800047e:	2507      	moveq	r5, #7
 8000480:	fa05 f50c 	lsl.w	r5, r5, ip
 8000484:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000488:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800048a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800048c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800048e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000492:	bf0c      	ite	eq
 8000494:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000496:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000498:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800049a:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800049c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80004a0:	bf0c      	ite	eq
 80004a2:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80004a4:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80004a6:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80004a8:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004aa:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80004ae:	bf0c      	ite	eq
 80004b0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80004b2:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80004b4:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80004b6:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004b8:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80004ba:	bf54      	ite	pl
 80004bc:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80004be:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80004c0:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80004c2:	3301      	adds	r3, #1
 80004c4:	2b10      	cmp	r3, #16
 80004c6:	f47f af44 	bne.w	8000352 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80004ca:	b005      	add	sp, #20
 80004cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80004d0:	465d      	mov	r5, fp
 80004d2:	e7d5      	b.n	8000480 <HAL_GPIO_Init+0x144>
 80004d4:	2501      	movs	r5, #1
 80004d6:	e7d3      	b.n	8000480 <HAL_GPIO_Init+0x144>
 80004d8:	2502      	movs	r5, #2
 80004da:	e7d1      	b.n	8000480 <HAL_GPIO_Init+0x144>
 80004dc:	2503      	movs	r5, #3
 80004de:	e7cf      	b.n	8000480 <HAL_GPIO_Init+0x144>
 80004e0:	2504      	movs	r5, #4
 80004e2:	e7cd      	b.n	8000480 <HAL_GPIO_Init+0x144>
 80004e4:	2505      	movs	r5, #5
 80004e6:	e7cb      	b.n	8000480 <HAL_GPIO_Init+0x144>
 80004e8:	2506      	movs	r5, #6
 80004ea:	e7c9      	b.n	8000480 <HAL_GPIO_Init+0x144>
 80004ec:	40013c00 	.word	0x40013c00
 80004f0:	40020000 	.word	0x40020000
 80004f4:	40023800 	.word	0x40023800
 80004f8:	40021400 	.word	0x40021400

080004fc <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004fc:	6803      	ldr	r3, [r0, #0]
{
 80004fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000500:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000502:	07d8      	lsls	r0, r3, #31
 8000504:	d43b      	bmi.n	800057e <HAL_RCC_OscConfig+0x82>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000506:	6823      	ldr	r3, [r4, #0]
 8000508:	0799      	lsls	r1, r3, #30
 800050a:	f100 8086 	bmi.w	800061a <HAL_RCC_OscConfig+0x11e>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800050e:	6823      	ldr	r3, [r4, #0]
 8000510:	071e      	lsls	r6, r3, #28
 8000512:	f100 80d1 	bmi.w	80006b8 <HAL_RCC_OscConfig+0x1bc>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000516:	6823      	ldr	r3, [r4, #0]
 8000518:	075d      	lsls	r5, r3, #29
 800051a:	d52a      	bpl.n	8000572 <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800051c:	2300      	movs	r3, #0
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4b8e      	ldr	r3, [pc, #568]	; (800075c <HAL_RCC_OscConfig+0x260>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000522:	4d8f      	ldr	r5, [pc, #572]	; (8000760 <HAL_RCC_OscConfig+0x264>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8000524:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000526:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800052a:	641a      	str	r2, [r3, #64]	; 0x40
 800052c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000532:	9301      	str	r3, [sp, #4]
 8000534:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8000536:	682b      	ldr	r3, [r5, #0]
 8000538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800053c:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 800053e:	f7ff fe79 	bl	8000234 <HAL_GetTick>
 8000542:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000544:	682b      	ldr	r3, [r5, #0]
 8000546:	05da      	lsls	r2, r3, #23
 8000548:	f140 80d8 	bpl.w	80006fc <HAL_RCC_OscConfig+0x200>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800054c:	68a3      	ldr	r3, [r4, #8]
 800054e:	4d83      	ldr	r5, [pc, #524]	; (800075c <HAL_RCC_OscConfig+0x260>)
 8000550:	2b01      	cmp	r3, #1
 8000552:	f040 80da 	bne.w	800070a <HAL_RCC_OscConfig+0x20e>
 8000556:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000558:	f043 0301 	orr.w	r3, r3, #1
 800055c:	672b      	str	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800055e:	f7ff fe69 	bl	8000234 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000562:	4d7e      	ldr	r5, [pc, #504]	; (800075c <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 8000564:	4606      	mov	r6, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000566:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800056a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800056c:	079b      	lsls	r3, r3, #30
 800056e:	f140 80ed 	bpl.w	800074c <HAL_RCC_OscConfig+0x250>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000572:	69a2      	ldr	r2, [r4, #24]
 8000574:	2a00      	cmp	r2, #0
 8000576:	f040 80f9 	bne.w	800076c <HAL_RCC_OscConfig+0x270>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800057a:	2000      	movs	r0, #0
 800057c:	e015      	b.n	80005aa <HAL_RCC_OscConfig+0xae>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800057e:	4b77      	ldr	r3, [pc, #476]	; (800075c <HAL_RCC_OscConfig+0x260>)
 8000580:	689a      	ldr	r2, [r3, #8]
 8000582:	f002 020c 	and.w	r2, r2, #12
 8000586:	2a04      	cmp	r2, #4
 8000588:	d007      	beq.n	800059a <HAL_RCC_OscConfig+0x9e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800058a:	689a      	ldr	r2, [r3, #8]
 800058c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000590:	2a08      	cmp	r2, #8
 8000592:	d10c      	bne.n	80005ae <HAL_RCC_OscConfig+0xb2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000594:	685b      	ldr	r3, [r3, #4]
 8000596:	025a      	lsls	r2, r3, #9
 8000598:	d509      	bpl.n	80005ae <HAL_RCC_OscConfig+0xb2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800059a:	4b70      	ldr	r3, [pc, #448]	; (800075c <HAL_RCC_OscConfig+0x260>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	039b      	lsls	r3, r3, #14
 80005a0:	d5b1      	bpl.n	8000506 <HAL_RCC_OscConfig+0xa>
 80005a2:	6863      	ldr	r3, [r4, #4]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d1ae      	bne.n	8000506 <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 80005a8:	2001      	movs	r0, #1
}
 80005aa:	b003      	add	sp, #12
 80005ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005ae:	6863      	ldr	r3, [r4, #4]
 80005b0:	4d6a      	ldr	r5, [pc, #424]	; (800075c <HAL_RCC_OscConfig+0x260>)
 80005b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005b6:	d111      	bne.n	80005dc <HAL_RCC_OscConfig+0xe0>
 80005b8:	682b      	ldr	r3, [r5, #0]
 80005ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005be:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80005c0:	f7ff fe38 	bl	8000234 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005c4:	4d65      	ldr	r5, [pc, #404]	; (800075c <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 80005c6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005c8:	682b      	ldr	r3, [r5, #0]
 80005ca:	039f      	lsls	r7, r3, #14
 80005cc:	d49b      	bmi.n	8000506 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005ce:	f7ff fe31 	bl	8000234 <HAL_GetTick>
 80005d2:	1b80      	subs	r0, r0, r6
 80005d4:	2864      	cmp	r0, #100	; 0x64
 80005d6:	d9f7      	bls.n	80005c8 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 80005d8:	2003      	movs	r0, #3
 80005da:	e7e6      	b.n	80005aa <HAL_RCC_OscConfig+0xae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80005e0:	d104      	bne.n	80005ec <HAL_RCC_OscConfig+0xf0>
 80005e2:	682b      	ldr	r3, [r5, #0]
 80005e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005e8:	602b      	str	r3, [r5, #0]
 80005ea:	e7e5      	b.n	80005b8 <HAL_RCC_OscConfig+0xbc>
 80005ec:	682a      	ldr	r2, [r5, #0]
 80005ee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80005f2:	602a      	str	r2, [r5, #0]
 80005f4:	682a      	ldr	r2, [r5, #0]
 80005f6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80005fa:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d1df      	bne.n	80005c0 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8000600:	f7ff fe18 	bl	8000234 <HAL_GetTick>
 8000604:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000606:	682b      	ldr	r3, [r5, #0]
 8000608:	0398      	lsls	r0, r3, #14
 800060a:	f57f af7c 	bpl.w	8000506 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800060e:	f7ff fe11 	bl	8000234 <HAL_GetTick>
 8000612:	1b80      	subs	r0, r0, r6
 8000614:	2864      	cmp	r0, #100	; 0x64
 8000616:	d9f6      	bls.n	8000606 <HAL_RCC_OscConfig+0x10a>
 8000618:	e7de      	b.n	80005d8 <HAL_RCC_OscConfig+0xdc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800061a:	4b50      	ldr	r3, [pc, #320]	; (800075c <HAL_RCC_OscConfig+0x260>)
 800061c:	689a      	ldr	r2, [r3, #8]
 800061e:	f012 0f0c 	tst.w	r2, #12
 8000622:	d007      	beq.n	8000634 <HAL_RCC_OscConfig+0x138>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000624:	689a      	ldr	r2, [r3, #8]
 8000626:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800062a:	2a08      	cmp	r2, #8
 800062c:	d116      	bne.n	800065c <HAL_RCC_OscConfig+0x160>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	0259      	lsls	r1, r3, #9
 8000632:	d413      	bmi.n	800065c <HAL_RCC_OscConfig+0x160>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000634:	4b49      	ldr	r3, [pc, #292]	; (800075c <HAL_RCC_OscConfig+0x260>)
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	0792      	lsls	r2, r2, #30
 800063a:	d502      	bpl.n	8000642 <HAL_RCC_OscConfig+0x146>
 800063c:	68e2      	ldr	r2, [r4, #12]
 800063e:	2a01      	cmp	r2, #1
 8000640:	d1b2      	bne.n	80005a8 <HAL_RCC_OscConfig+0xac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000642:	6818      	ldr	r0, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000644:	22f8      	movs	r2, #248	; 0xf8
 8000646:	fa92 f2a2 	rbit	r2, r2
 800064a:	fab2 f182 	clz	r1, r2
 800064e:	6922      	ldr	r2, [r4, #16]
 8000650:	408a      	lsls	r2, r1
 8000652:	f020 01f8 	bic.w	r1, r0, #248	; 0xf8
 8000656:	430a      	orrs	r2, r1
 8000658:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800065a:	e758      	b.n	800050e <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800065c:	68e2      	ldr	r2, [r4, #12]
 800065e:	4b41      	ldr	r3, [pc, #260]	; (8000764 <HAL_RCC_OscConfig+0x268>)
 8000660:	b1da      	cbz	r2, 800069a <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_HSI_ENABLE();
 8000662:	2201      	movs	r2, #1
 8000664:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000666:	f7ff fde5 	bl	8000234 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800066a:	4d3c      	ldr	r5, [pc, #240]	; (800075c <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 800066c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800066e:	682b      	ldr	r3, [r5, #0]
 8000670:	079b      	lsls	r3, r3, #30
 8000672:	d50c      	bpl.n	800068e <HAL_RCC_OscConfig+0x192>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000674:	6829      	ldr	r1, [r5, #0]
 8000676:	23f8      	movs	r3, #248	; 0xf8
 8000678:	fa93 f3a3 	rbit	r3, r3
 800067c:	fab3 f283 	clz	r2, r3
 8000680:	6923      	ldr	r3, [r4, #16]
 8000682:	4093      	lsls	r3, r2
 8000684:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000688:	4313      	orrs	r3, r2
 800068a:	602b      	str	r3, [r5, #0]
 800068c:	e73f      	b.n	800050e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800068e:	f7ff fdd1 	bl	8000234 <HAL_GetTick>
 8000692:	1b80      	subs	r0, r0, r6
 8000694:	2802      	cmp	r0, #2
 8000696:	d9ea      	bls.n	800066e <HAL_RCC_OscConfig+0x172>
 8000698:	e79e      	b.n	80005d8 <HAL_RCC_OscConfig+0xdc>
        __HAL_RCC_HSI_DISABLE();
 800069a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800069c:	f7ff fdca 	bl	8000234 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006a0:	4d2e      	ldr	r5, [pc, #184]	; (800075c <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 80006a2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006a4:	682b      	ldr	r3, [r5, #0]
 80006a6:	079f      	lsls	r7, r3, #30
 80006a8:	f57f af31 	bpl.w	800050e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006ac:	f7ff fdc2 	bl	8000234 <HAL_GetTick>
 80006b0:	1b80      	subs	r0, r0, r6
 80006b2:	2802      	cmp	r0, #2
 80006b4:	d9f6      	bls.n	80006a4 <HAL_RCC_OscConfig+0x1a8>
 80006b6:	e78f      	b.n	80005d8 <HAL_RCC_OscConfig+0xdc>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80006b8:	6962      	ldr	r2, [r4, #20]
 80006ba:	4b2b      	ldr	r3, [pc, #172]	; (8000768 <HAL_RCC_OscConfig+0x26c>)
 80006bc:	b17a      	cbz	r2, 80006de <HAL_RCC_OscConfig+0x1e2>
      __HAL_RCC_LSI_ENABLE();
 80006be:	2201      	movs	r2, #1
 80006c0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80006c2:	f7ff fdb7 	bl	8000234 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006c6:	4d25      	ldr	r5, [pc, #148]	; (800075c <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 80006c8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006ca:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80006cc:	0798      	lsls	r0, r3, #30
 80006ce:	f53f af22 	bmi.w	8000516 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006d2:	f7ff fdaf 	bl	8000234 <HAL_GetTick>
 80006d6:	1b80      	subs	r0, r0, r6
 80006d8:	2802      	cmp	r0, #2
 80006da:	d9f6      	bls.n	80006ca <HAL_RCC_OscConfig+0x1ce>
 80006dc:	e77c      	b.n	80005d8 <HAL_RCC_OscConfig+0xdc>
      __HAL_RCC_LSI_DISABLE();
 80006de:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80006e0:	f7ff fda8 	bl	8000234 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006e4:	4d1d      	ldr	r5, [pc, #116]	; (800075c <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 80006e6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006e8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80006ea:	0799      	lsls	r1, r3, #30
 80006ec:	f57f af13 	bpl.w	8000516 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006f0:	f7ff fda0 	bl	8000234 <HAL_GetTick>
 80006f4:	1b80      	subs	r0, r0, r6
 80006f6:	2802      	cmp	r0, #2
 80006f8:	d9f6      	bls.n	80006e8 <HAL_RCC_OscConfig+0x1ec>
 80006fa:	e76d      	b.n	80005d8 <HAL_RCC_OscConfig+0xdc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80006fc:	f7ff fd9a 	bl	8000234 <HAL_GetTick>
 8000700:	1b80      	subs	r0, r0, r6
 8000702:	2802      	cmp	r0, #2
 8000704:	f67f af1e 	bls.w	8000544 <HAL_RCC_OscConfig+0x48>
 8000708:	e766      	b.n	80005d8 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800070a:	2b05      	cmp	r3, #5
 800070c:	d104      	bne.n	8000718 <HAL_RCC_OscConfig+0x21c>
 800070e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000710:	f043 0304 	orr.w	r3, r3, #4
 8000714:	672b      	str	r3, [r5, #112]	; 0x70
 8000716:	e71e      	b.n	8000556 <HAL_RCC_OscConfig+0x5a>
 8000718:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800071a:	f022 0201 	bic.w	r2, r2, #1
 800071e:	672a      	str	r2, [r5, #112]	; 0x70
 8000720:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000722:	f022 0204 	bic.w	r2, r2, #4
 8000726:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000728:	2b00      	cmp	r3, #0
 800072a:	f47f af18 	bne.w	800055e <HAL_RCC_OscConfig+0x62>
      tickstart = HAL_GetTick();
 800072e:	f7ff fd81 	bl	8000234 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000732:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000736:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000738:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800073a:	0798      	lsls	r0, r3, #30
 800073c:	f57f af19 	bpl.w	8000572 <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000740:	f7ff fd78 	bl	8000234 <HAL_GetTick>
 8000744:	1b80      	subs	r0, r0, r6
 8000746:	42b8      	cmp	r0, r7
 8000748:	d9f6      	bls.n	8000738 <HAL_RCC_OscConfig+0x23c>
 800074a:	e745      	b.n	80005d8 <HAL_RCC_OscConfig+0xdc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800074c:	f7ff fd72 	bl	8000234 <HAL_GetTick>
 8000750:	1b80      	subs	r0, r0, r6
 8000752:	42b8      	cmp	r0, r7
 8000754:	f67f af09 	bls.w	800056a <HAL_RCC_OscConfig+0x6e>
 8000758:	e73e      	b.n	80005d8 <HAL_RCC_OscConfig+0xdc>
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800
 8000760:	40007000 	.word	0x40007000
 8000764:	42470000 	.word	0x42470000
 8000768:	42470e80 	.word	0x42470e80
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800076c:	4d2b      	ldr	r5, [pc, #172]	; (800081c <HAL_RCC_OscConfig+0x320>)
 800076e:	68ab      	ldr	r3, [r5, #8]
 8000770:	f003 030c 	and.w	r3, r3, #12
 8000774:	2b08      	cmp	r3, #8
 8000776:	f43f af17 	beq.w	80005a8 <HAL_RCC_OscConfig+0xac>
 800077a:	4e29      	ldr	r6, [pc, #164]	; (8000820 <HAL_RCC_OscConfig+0x324>)
 800077c:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800077e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000780:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000782:	d13e      	bne.n	8000802 <HAL_RCC_OscConfig+0x306>
        tickstart = HAL_GetTick();
 8000784:	f7ff fd56 	bl	8000234 <HAL_GetTick>
 8000788:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800078a:	682b      	ldr	r3, [r5, #0]
 800078c:	0199      	lsls	r1, r3, #6
 800078e:	d432      	bmi.n	80007f6 <HAL_RCC_OscConfig+0x2fa>
 8000790:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8000794:	fa97 f7a7 	rbit	r7, r7
 8000798:	f44f 3240 	mov.w	r2, #196608	; 0x30000
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800079c:	fab7 f787 	clz	r7, r7
 80007a0:	fa92 f2a2 	rbit	r2, r2
 80007a4:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 80007a8:	fab2 f082 	clz	r0, r2
 80007ac:	fa91 f1a1 	rbit	r1, r1
 80007b0:	6a22      	ldr	r2, [r4, #32]
 80007b2:	69e3      	ldr	r3, [r4, #28]
 80007b4:	4313      	orrs	r3, r2
 80007b6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80007b8:	fa02 f707 	lsl.w	r7, r2, r7
 80007bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80007be:	0852      	lsrs	r2, r2, #1
 80007c0:	3a01      	subs	r2, #1
 80007c2:	4082      	lsls	r2, r0
 80007c4:	433b      	orrs	r3, r7
 80007c6:	4313      	orrs	r3, r2
 80007c8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80007ca:	4c14      	ldr	r4, [pc, #80]	; (800081c <HAL_RCC_OscConfig+0x320>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80007cc:	fab1 f181 	clz	r1, r1
 80007d0:	fa02 f101 	lsl.w	r1, r2, r1
 80007d4:	430b      	orrs	r3, r1
 80007d6:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80007d8:	2301      	movs	r3, #1
 80007da:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80007dc:	f7ff fd2a 	bl	8000234 <HAL_GetTick>
 80007e0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80007e2:	6823      	ldr	r3, [r4, #0]
 80007e4:	019a      	lsls	r2, r3, #6
 80007e6:	f53f aec8 	bmi.w	800057a <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007ea:	f7ff fd23 	bl	8000234 <HAL_GetTick>
 80007ee:	1b40      	subs	r0, r0, r5
 80007f0:	2802      	cmp	r0, #2
 80007f2:	d9f6      	bls.n	80007e2 <HAL_RCC_OscConfig+0x2e6>
 80007f4:	e6f0      	b.n	80005d8 <HAL_RCC_OscConfig+0xdc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007f6:	f7ff fd1d 	bl	8000234 <HAL_GetTick>
 80007fa:	1bc0      	subs	r0, r0, r7
 80007fc:	2802      	cmp	r0, #2
 80007fe:	d9c4      	bls.n	800078a <HAL_RCC_OscConfig+0x28e>
 8000800:	e6ea      	b.n	80005d8 <HAL_RCC_OscConfig+0xdc>
        tickstart = HAL_GetTick();
 8000802:	f7ff fd17 	bl	8000234 <HAL_GetTick>
 8000806:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000808:	682b      	ldr	r3, [r5, #0]
 800080a:	019b      	lsls	r3, r3, #6
 800080c:	f57f aeb5 	bpl.w	800057a <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000810:	f7ff fd10 	bl	8000234 <HAL_GetTick>
 8000814:	1b00      	subs	r0, r0, r4
 8000816:	2802      	cmp	r0, #2
 8000818:	d9f6      	bls.n	8000808 <HAL_RCC_OscConfig+0x30c>
 800081a:	e6dd      	b.n	80005d8 <HAL_RCC_OscConfig+0xdc>
 800081c:	40023800 	.word	0x40023800
 8000820:	42470060 	.word	0x42470060

08000824 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000824:	4a19      	ldr	r2, [pc, #100]	; (800088c <HAL_RCC_GetSysClockFreq+0x68>)
 8000826:	6893      	ldr	r3, [r2, #8]
 8000828:	f003 030c 	and.w	r3, r3, #12
 800082c:	2b04      	cmp	r3, #4
{
 800082e:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000830:	d003      	beq.n	800083a <HAL_RCC_GetSysClockFreq+0x16>
 8000832:	2b08      	cmp	r3, #8
 8000834:	d003      	beq.n	800083e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000836:	4816      	ldr	r0, [pc, #88]	; (8000890 <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000838:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 800083a:	4816      	ldr	r0, [pc, #88]	; (8000894 <HAL_RCC_GetSysClockFreq+0x70>)
 800083c:	bd10      	pop	{r4, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800083e:	6851      	ldr	r1, [r2, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000840:	6853      	ldr	r3, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000842:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000846:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800084a:	f647 74c0 	movw	r4, #32704	; 0x7fc0
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 800084e:	6853      	ldr	r3, [r2, #4]
 8000850:	fa94 f0a4 	rbit	r0, r4
 8000854:	fab0 f080 	clz	r0, r0
 8000858:	ea03 0304 	and.w	r3, r3, r4
 800085c:	fa23 f300 	lsr.w	r3, r3, r0
 8000860:	bf14      	ite	ne
 8000862:	480c      	ldrne	r0, [pc, #48]	; (8000894 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8000864:	480a      	ldreq	r0, [pc, #40]	; (8000890 <HAL_RCC_GetSysClockFreq+0x6c>)
 8000866:	fbb0 f0f1 	udiv	r0, r0, r1
 800086a:	4358      	muls	r0, r3
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <HAL_RCC_GetSysClockFreq+0x68>)
 800086e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	fa92 f2a2 	rbit	r2, r2
 8000878:	fab2 f282 	clz	r2, r2
 800087c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000880:	40d3      	lsrs	r3, r2
 8000882:	3301      	adds	r3, #1
 8000884:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000886:	fbb0 f0f3 	udiv	r0, r0, r3
 800088a:	bd10      	pop	{r4, pc}
 800088c:	40023800 	.word	0x40023800
 8000890:	00f42400 	.word	0x00f42400
 8000894:	017d7840 	.word	0x017d7840

08000898 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000898:	4b56      	ldr	r3, [pc, #344]	; (80009f4 <HAL_RCC_ClockConfig+0x15c>)
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	f002 020f 	and.w	r2, r2, #15
 80008a0:	428a      	cmp	r2, r1
{
 80008a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008a6:	4605      	mov	r5, r0
 80008a8:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008aa:	d330      	bcc.n	800090e <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80008ac:	682a      	ldr	r2, [r5, #0]
 80008ae:	0794      	lsls	r4, r2, #30
 80008b0:	d437      	bmi.n	8000922 <HAL_RCC_ClockConfig+0x8a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80008b2:	07d0      	lsls	r0, r2, #31
 80008b4:	d43d      	bmi.n	8000932 <HAL_RCC_ClockConfig+0x9a>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80008b6:	4b4f      	ldr	r3, [pc, #316]	; (80009f4 <HAL_RCC_ClockConfig+0x15c>)
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	f002 020f 	and.w	r2, r2, #15
 80008be:	4296      	cmp	r6, r2
 80008c0:	f0c0 8088 	bcc.w	80009d4 <HAL_RCC_ClockConfig+0x13c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80008c4:	682a      	ldr	r2, [r5, #0]
 80008c6:	0751      	lsls	r1, r2, #29
 80008c8:	f100 808c 	bmi.w	80009e4 <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80008cc:	0713      	lsls	r3, r2, #28
 80008ce:	d507      	bpl.n	80008e0 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80008d0:	4a49      	ldr	r2, [pc, #292]	; (80009f8 <HAL_RCC_ClockConfig+0x160>)
 80008d2:	6929      	ldr	r1, [r5, #16]
 80008d4:	6893      	ldr	r3, [r2, #8]
 80008d6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80008da:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80008de:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80008e0:	f7ff ffa0 	bl	8000824 <HAL_RCC_GetSysClockFreq>
 80008e4:	4b44      	ldr	r3, [pc, #272]	; (80009f8 <HAL_RCC_ClockConfig+0x160>)
 80008e6:	22f0      	movs	r2, #240	; 0xf0
 80008e8:	689b      	ldr	r3, [r3, #8]
 80008ea:	fa92 f2a2 	rbit	r2, r2
 80008ee:	fab2 f282 	clz	r2, r2
 80008f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80008f6:	40d3      	lsrs	r3, r2
 80008f8:	4a40      	ldr	r2, [pc, #256]	; (80009fc <HAL_RCC_ClockConfig+0x164>)
 80008fa:	5cd3      	ldrb	r3, [r2, r3]
 80008fc:	40d8      	lsrs	r0, r3
 80008fe:	4b40      	ldr	r3, [pc, #256]	; (8000a00 <HAL_RCC_ClockConfig+0x168>)
 8000900:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000902:	2000      	movs	r0, #0
 8000904:	f7ff fc60 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 8000908:	2000      	movs	r0, #0
}
 800090a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800090e:	b2ca      	uxtb	r2, r1
 8000910:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f003 030f 	and.w	r3, r3, #15
 8000918:	4299      	cmp	r1, r3
 800091a:	d0c7      	beq.n	80008ac <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800091c:	2001      	movs	r0, #1
 800091e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000922:	4935      	ldr	r1, [pc, #212]	; (80009f8 <HAL_RCC_ClockConfig+0x160>)
 8000924:	68a8      	ldr	r0, [r5, #8]
 8000926:	688b      	ldr	r3, [r1, #8]
 8000928:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800092c:	4303      	orrs	r3, r0
 800092e:	608b      	str	r3, [r1, #8]
 8000930:	e7bf      	b.n	80008b2 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000932:	686a      	ldr	r2, [r5, #4]
 8000934:	4b30      	ldr	r3, [pc, #192]	; (80009f8 <HAL_RCC_ClockConfig+0x160>)
 8000936:	2a01      	cmp	r2, #1
 8000938:	d11e      	bne.n	8000978 <HAL_RCC_ClockConfig+0xe0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000940:	d0ec      	beq.n	800091c <HAL_RCC_ClockConfig+0x84>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000942:	4c2d      	ldr	r4, [pc, #180]	; (80009f8 <HAL_RCC_ClockConfig+0x160>)
 8000944:	68a3      	ldr	r3, [r4, #8]
 8000946:	f023 0303 	bic.w	r3, r3, #3
 800094a:	4313      	orrs	r3, r2
 800094c:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800094e:	f7ff fc71 	bl	8000234 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000952:	686b      	ldr	r3, [r5, #4]
 8000954:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8000956:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000958:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800095c:	d116      	bne.n	800098c <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800095e:	68a3      	ldr	r3, [r4, #8]
 8000960:	f003 030c 	and.w	r3, r3, #12
 8000964:	2b04      	cmp	r3, #4
 8000966:	d0a6      	beq.n	80008b6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000968:	f7ff fc64 	bl	8000234 <HAL_GetTick>
 800096c:	1bc0      	subs	r0, r0, r7
 800096e:	4540      	cmp	r0, r8
 8000970:	d9f5      	bls.n	800095e <HAL_RCC_ClockConfig+0xc6>
          return HAL_TIMEOUT;
 8000972:	2003      	movs	r0, #3
 8000974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000978:	1e91      	subs	r1, r2, #2
 800097a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800097c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 800097e:	d802      	bhi.n	8000986 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000980:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000984:	e7dc      	b.n	8000940 <HAL_RCC_ClockConfig+0xa8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000986:	f013 0f02 	tst.w	r3, #2
 800098a:	e7d9      	b.n	8000940 <HAL_RCC_ClockConfig+0xa8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800098c:	2b02      	cmp	r3, #2
 800098e:	d10a      	bne.n	80009a6 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000990:	68a3      	ldr	r3, [r4, #8]
 8000992:	f003 030c 	and.w	r3, r3, #12
 8000996:	2b08      	cmp	r3, #8
 8000998:	d08d      	beq.n	80008b6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800099a:	f7ff fc4b 	bl	8000234 <HAL_GetTick>
 800099e:	1bc0      	subs	r0, r0, r7
 80009a0:	4540      	cmp	r0, r8
 80009a2:	d9f5      	bls.n	8000990 <HAL_RCC_ClockConfig+0xf8>
 80009a4:	e7e5      	b.n	8000972 <HAL_RCC_ClockConfig+0xda>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 80009a6:	2b03      	cmp	r3, #3
 80009a8:	d10f      	bne.n	80009ca <HAL_RCC_ClockConfig+0x132>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80009aa:	68a3      	ldr	r3, [r4, #8]
 80009ac:	f003 030c 	and.w	r3, r3, #12
 80009b0:	2b0c      	cmp	r3, #12
 80009b2:	d080      	beq.n	80008b6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009b4:	f7ff fc3e 	bl	8000234 <HAL_GetTick>
 80009b8:	1bc0      	subs	r0, r0, r7
 80009ba:	4540      	cmp	r0, r8
 80009bc:	d9f5      	bls.n	80009aa <HAL_RCC_ClockConfig+0x112>
 80009be:	e7d8      	b.n	8000972 <HAL_RCC_ClockConfig+0xda>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009c0:	f7ff fc38 	bl	8000234 <HAL_GetTick>
 80009c4:	1bc0      	subs	r0, r0, r7
 80009c6:	4540      	cmp	r0, r8
 80009c8:	d8d3      	bhi.n	8000972 <HAL_RCC_ClockConfig+0xda>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80009ca:	68a3      	ldr	r3, [r4, #8]
 80009cc:	f013 0f0c 	tst.w	r3, #12
 80009d0:	d1f6      	bne.n	80009c0 <HAL_RCC_ClockConfig+0x128>
 80009d2:	e770      	b.n	80008b6 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009d4:	b2f2      	uxtb	r2, r6
 80009d6:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f003 030f 	and.w	r3, r3, #15
 80009de:	429e      	cmp	r6, r3
 80009e0:	d19c      	bne.n	800091c <HAL_RCC_ClockConfig+0x84>
 80009e2:	e76f      	b.n	80008c4 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80009e4:	4904      	ldr	r1, [pc, #16]	; (80009f8 <HAL_RCC_ClockConfig+0x160>)
 80009e6:	68e8      	ldr	r0, [r5, #12]
 80009e8:	688b      	ldr	r3, [r1, #8]
 80009ea:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80009ee:	4303      	orrs	r3, r0
 80009f0:	608b      	str	r3, [r1, #8]
 80009f2:	e76b      	b.n	80008cc <HAL_RCC_ClockConfig+0x34>
 80009f4:	40023c00 	.word	0x40023c00
 80009f8:	40023800 	.word	0x40023800
 80009fc:	080012e4 	.word	0x080012e4
 8000a00:	20000000 	.word	0x20000000

08000a04 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000a04:	4b01      	ldr	r3, [pc, #4]	; (8000a0c <HAL_RCC_GetHCLKFreq+0x8>)
 8000a06:	6818      	ldr	r0, [r3, #0]
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	20000000 	.word	0x20000000

08000a10 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000a10:	6a03      	ldr	r3, [r0, #32]
 8000a12:	f023 0301 	bic.w	r3, r3, #1
 8000a16:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000a18:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000a1a:	6842      	ldr	r2, [r0, #4]
{
 8000a1c:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000a1e:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000a20:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000a22:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000a26:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000a28:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8000a2a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8000a2e:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000a30:	4c0c      	ldr	r4, [pc, #48]	; (8000a64 <TIM_OC1_SetConfig+0x54>)
 8000a32:	42a0      	cmp	r0, r4
 8000a34:	d009      	beq.n	8000a4a <TIM_OC1_SetConfig+0x3a>
 8000a36:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000a3a:	42a0      	cmp	r0, r4
 8000a3c:	d005      	beq.n	8000a4a <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000a3e:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000a40:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8000a42:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8000a44:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8000a46:	6203      	str	r3, [r0, #32]
} 
 8000a48:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8000a4a:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8000a4c:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8000a4e:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8000a52:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8000a54:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000a56:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8000a5a:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8000a5c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8000a60:	4322      	orrs	r2, r4
 8000a62:	e7ec      	b.n	8000a3e <TIM_OC1_SetConfig+0x2e>
 8000a64:	40010000 	.word	0x40010000

08000a68 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000a68:	6a03      	ldr	r3, [r0, #32]
 8000a6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a6e:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000a70:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000a72:	6842      	ldr	r2, [r0, #4]
{
 8000a74:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000a76:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000a78:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8000a7a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000a7e:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000a80:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8000a82:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000a86:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000a8a:	4c0e      	ldr	r4, [pc, #56]	; (8000ac4 <TIM_OC3_SetConfig+0x5c>)
 8000a8c:	42a0      	cmp	r0, r4
 8000a8e:	d009      	beq.n	8000aa4 <TIM_OC3_SetConfig+0x3c>
 8000a90:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000a94:	42a0      	cmp	r0, r4
 8000a96:	d005      	beq.n	8000aa4 <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000a98:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8000a9a:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8000a9c:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8000a9e:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000aa0:	6203      	str	r3, [r0, #32]
}
 8000aa2:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000aa4:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000aa6:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8000aa8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000aac:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8000ab0:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000ab2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000ab6:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8000ab8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000abc:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8000ac0:	e7ea      	b.n	8000a98 <TIM_OC3_SetConfig+0x30>
 8000ac2:	bf00      	nop
 8000ac4:	40010000 	.word	0x40010000

08000ac8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000ac8:	6a03      	ldr	r3, [r0, #32]
 8000aca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ace:	6203      	str	r3, [r0, #32]
{
 8000ad0:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000ad2:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000ad4:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000ad6:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000ad8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000ada:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000ade:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000ae2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8000ae4:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000ae8:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000aec:	4d09      	ldr	r5, [pc, #36]	; (8000b14 <TIM_OC4_SetConfig+0x4c>)
 8000aee:	42a8      	cmp	r0, r5
 8000af0:	d009      	beq.n	8000b06 <TIM_OC4_SetConfig+0x3e>
 8000af2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000af6:	42a8      	cmp	r0, r5
 8000af8:	d005      	beq.n	8000b06 <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000afa:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8000afc:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8000afe:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8000b00:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000b02:	6204      	str	r4, [r0, #32]
}
 8000b04:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000b06:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8000b08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000b0c:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8000b10:	e7f3      	b.n	8000afa <TIM_OC4_SetConfig+0x32>
 8000b12:	bf00      	nop
 8000b14:	40010000 	.word	0x40010000

08000b18 <HAL_TIM_PWM_MspInit>:
 8000b18:	4770      	bx	lr

08000b1a <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8000b1a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000b1e:	2b01      	cmp	r3, #1
{
 8000b20:	b570      	push	{r4, r5, r6, lr}
 8000b22:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8000b26:	d01c      	beq.n	8000b62 <HAL_TIM_ConfigClockSource+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8000b28:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 8000b2c:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8000b2e:	2201      	movs	r2, #1
 8000b30:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 8000b34:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000b36:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000b3a:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000b3e:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8000b40:	680a      	ldr	r2, [r1, #0]
 8000b42:	2a40      	cmp	r2, #64	; 0x40
 8000b44:	d079      	beq.n	8000c3a <HAL_TIM_ConfigClockSource+0x120>
 8000b46:	d819      	bhi.n	8000b7c <HAL_TIM_ConfigClockSource+0x62>
 8000b48:	2a10      	cmp	r2, #16
 8000b4a:	f000 8093 	beq.w	8000c74 <HAL_TIM_ConfigClockSource+0x15a>
 8000b4e:	d80a      	bhi.n	8000b66 <HAL_TIM_ConfigClockSource+0x4c>
 8000b50:	2a00      	cmp	r2, #0
 8000b52:	f000 8089 	beq.w	8000c68 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8000b56:	2301      	movs	r3, #1
 8000b58:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8000b62:	4618      	mov	r0, r3
}
 8000b64:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8000b66:	2a20      	cmp	r2, #32
 8000b68:	f000 808a 	beq.w	8000c80 <HAL_TIM_ConfigClockSource+0x166>
 8000b6c:	2a30      	cmp	r2, #48	; 0x30
 8000b6e:	d1f2      	bne.n	8000b56 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000b70:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000b72:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000b76:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8000b7a:	e036      	b.n	8000bea <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000b7c:	2a70      	cmp	r2, #112	; 0x70
 8000b7e:	d036      	beq.n	8000bee <HAL_TIM_ConfigClockSource+0xd4>
 8000b80:	d81b      	bhi.n	8000bba <HAL_TIM_ConfigClockSource+0xa0>
 8000b82:	2a50      	cmp	r2, #80	; 0x50
 8000b84:	d042      	beq.n	8000c0c <HAL_TIM_ConfigClockSource+0xf2>
 8000b86:	2a60      	cmp	r2, #96	; 0x60
 8000b88:	d1e5      	bne.n	8000b56 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000b8a:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8000b8c:	684d      	ldr	r5, [r1, #4]
 8000b8e:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000b90:	f024 0410 	bic.w	r4, r4, #16
 8000b94:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000b96:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8000b98:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000b9a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000b9e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000ba2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000ba6:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8000baa:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000bac:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000bae:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000bb0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000bb4:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8000bb8:	e017      	b.n	8000bea <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000bba:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000bbe:	d011      	beq.n	8000be4 <HAL_TIM_ConfigClockSource+0xca>
 8000bc0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000bc4:	d1c7      	bne.n	8000b56 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000bc6:	688a      	ldr	r2, [r1, #8]
 8000bc8:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000bca:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000bcc:	68c9      	ldr	r1, [r1, #12]
 8000bce:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000bd0:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000bd4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000bd8:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000bda:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000bdc:	689a      	ldr	r2, [r3, #8]
 8000bde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000be2:	e002      	b.n	8000bea <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000be4:	689a      	ldr	r2, [r3, #8]
 8000be6:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	e7b3      	b.n	8000b56 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000bee:	688a      	ldr	r2, [r1, #8]
 8000bf0:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000bf2:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000bf4:	68c9      	ldr	r1, [r1, #12]
 8000bf6:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000bf8:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000bfc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000c00:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8000c02:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8000c04:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000c06:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8000c0a:	e7ee      	b.n	8000bea <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8000c0c:	684c      	ldr	r4, [r1, #4]
 8000c0e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000c10:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000c12:	6a1d      	ldr	r5, [r3, #32]
 8000c14:	f025 0501 	bic.w	r5, r5, #1
 8000c18:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8000c1a:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000c1c:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000c20:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000c24:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8000c28:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8000c2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000c2c:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000c2e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000c30:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000c34:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8000c38:	e7d7      	b.n	8000bea <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8000c3a:	684c      	ldr	r4, [r1, #4]
 8000c3c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000c3e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000c40:	6a1d      	ldr	r5, [r3, #32]
 8000c42:	f025 0501 	bic.w	r5, r5, #1
 8000c46:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8000c48:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000c4a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000c4e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000c52:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8000c56:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8000c58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000c5a:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000c5c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000c5e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000c62:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8000c66:	e7c0      	b.n	8000bea <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000c68:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000c6a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000c6e:	f042 0207 	orr.w	r2, r2, #7
 8000c72:	e7ba      	b.n	8000bea <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000c74:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000c76:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000c7a:	f042 0217 	orr.w	r2, r2, #23
 8000c7e:	e7b4      	b.n	8000bea <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000c80:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000c82:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000c86:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8000c8a:	e7ae      	b.n	8000bea <HAL_TIM_ConfigClockSource+0xd0>

08000c8c <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000c8c:	4a2e      	ldr	r2, [pc, #184]	; (8000d48 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8000c8e:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000c90:	4290      	cmp	r0, r2
 8000c92:	d012      	beq.n	8000cba <TIM_Base_SetConfig+0x2e>
 8000c94:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000c98:	d00f      	beq.n	8000cba <TIM_Base_SetConfig+0x2e>
 8000c9a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	d00b      	beq.n	8000cba <TIM_Base_SetConfig+0x2e>
 8000ca2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ca6:	4290      	cmp	r0, r2
 8000ca8:	d007      	beq.n	8000cba <TIM_Base_SetConfig+0x2e>
 8000caa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	d003      	beq.n	8000cba <TIM_Base_SetConfig+0x2e>
 8000cb2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000cb6:	4290      	cmp	r0, r2
 8000cb8:	d11d      	bne.n	8000cf6 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8000cba:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000cc0:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000cc2:	4a21      	ldr	r2, [pc, #132]	; (8000d48 <TIM_Base_SetConfig+0xbc>)
 8000cc4:	4290      	cmp	r0, r2
 8000cc6:	d104      	bne.n	8000cd2 <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000cc8:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000cca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	e028      	b.n	8000d24 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000cd2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000cd6:	d0f7      	beq.n	8000cc8 <TIM_Base_SetConfig+0x3c>
 8000cd8:	4a1c      	ldr	r2, [pc, #112]	; (8000d4c <TIM_Base_SetConfig+0xc0>)
 8000cda:	4290      	cmp	r0, r2
 8000cdc:	d0f4      	beq.n	8000cc8 <TIM_Base_SetConfig+0x3c>
 8000cde:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ce2:	4290      	cmp	r0, r2
 8000ce4:	d0f0      	beq.n	8000cc8 <TIM_Base_SetConfig+0x3c>
 8000ce6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cea:	4290      	cmp	r0, r2
 8000cec:	d0ec      	beq.n	8000cc8 <TIM_Base_SetConfig+0x3c>
 8000cee:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000cf2:	4290      	cmp	r0, r2
 8000cf4:	d0e8      	beq.n	8000cc8 <TIM_Base_SetConfig+0x3c>
 8000cf6:	4a16      	ldr	r2, [pc, #88]	; (8000d50 <TIM_Base_SetConfig+0xc4>)
 8000cf8:	4290      	cmp	r0, r2
 8000cfa:	d0e5      	beq.n	8000cc8 <TIM_Base_SetConfig+0x3c>
 8000cfc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d0e1      	beq.n	8000cc8 <TIM_Base_SetConfig+0x3c>
 8000d04:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d08:	4290      	cmp	r0, r2
 8000d0a:	d0dd      	beq.n	8000cc8 <TIM_Base_SetConfig+0x3c>
 8000d0c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d0d9      	beq.n	8000cc8 <TIM_Base_SetConfig+0x3c>
 8000d14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d18:	4290      	cmp	r0, r2
 8000d1a:	d0d5      	beq.n	8000cc8 <TIM_Base_SetConfig+0x3c>
 8000d1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d20:	4290      	cmp	r0, r2
 8000d22:	d0d1      	beq.n	8000cc8 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 8000d24:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000d26:	688b      	ldr	r3, [r1, #8]
 8000d28:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000d2a:	680b      	ldr	r3, [r1, #0]
 8000d2c:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <TIM_Base_SetConfig+0xbc>)
 8000d30:	4298      	cmp	r0, r3
 8000d32:	d006      	beq.n	8000d42 <TIM_Base_SetConfig+0xb6>
 8000d34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d38:	4298      	cmp	r0, r3
 8000d3a:	d002      	beq.n	8000d42 <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	6143      	str	r3, [r0, #20]
}
 8000d40:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8000d42:	690b      	ldr	r3, [r1, #16]
 8000d44:	6303      	str	r3, [r0, #48]	; 0x30
 8000d46:	e7f9      	b.n	8000d3c <TIM_Base_SetConfig+0xb0>
 8000d48:	40010000 	.word	0x40010000
 8000d4c:	40000400 	.word	0x40000400
 8000d50:	40014000 	.word	0x40014000

08000d54 <HAL_TIM_Base_Init>:
{ 
 8000d54:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000d56:	4604      	mov	r4, r0
 8000d58:	b1a0      	cbz	r0, 8000d84 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000d5a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000d5e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000d62:	b91b      	cbnz	r3, 8000d6c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000d64:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8000d68:	f000 f9e8 	bl	800113c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8000d72:	6820      	ldr	r0, [r4, #0]
 8000d74:	1d21      	adds	r1, r4, #4
 8000d76:	f7ff ff89 	bl	8000c8c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8000d80:	2000      	movs	r0, #0
 8000d82:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000d84:	2001      	movs	r0, #1
}
 8000d86:	bd10      	pop	{r4, pc}

08000d88 <HAL_TIM_PWM_Init>:
{
 8000d88:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	b1a0      	cbz	r0, 8000db8 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000d8e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000d92:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000d96:	b91b      	cbnz	r3, 8000da0 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000d98:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8000d9c:	f7ff febc 	bl	8000b18 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 8000da0:	2302      	movs	r3, #2
 8000da2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8000da6:	6820      	ldr	r0, [r4, #0]
 8000da8:	1d21      	adds	r1, r4, #4
 8000daa:	f7ff ff6f 	bl	8000c8c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000dae:	2301      	movs	r3, #1
 8000db0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8000db4:	2000      	movs	r0, #0
 8000db6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000db8:	2001      	movs	r0, #1
}  
 8000dba:	bd10      	pop	{r4, pc}

08000dbc <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000dbc:	6a03      	ldr	r3, [r0, #32]
 8000dbe:	f023 0310 	bic.w	r3, r3, #16
 8000dc2:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8000dc4:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8000dc6:	6842      	ldr	r2, [r0, #4]
{
 8000dc8:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 8000dca:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000dcc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8000dce:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000dd2:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000dd6:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8000dd8:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000ddc:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000de0:	4c0d      	ldr	r4, [pc, #52]	; (8000e18 <TIM_OC2_SetConfig+0x5c>)
 8000de2:	42a0      	cmp	r0, r4
 8000de4:	d009      	beq.n	8000dfa <TIM_OC2_SetConfig+0x3e>
 8000de6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000dea:	42a0      	cmp	r0, r4
 8000dec:	d005      	beq.n	8000dfa <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 8000dee:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8000df0:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8000df2:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8000df4:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8000df6:	6203      	str	r3, [r0, #32]
}
 8000df8:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8000dfa:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8000dfc:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8000dfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8000e02:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8000e06:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8000e08:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8000e0c:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8000e0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8000e12:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 8000e16:	e7ea      	b.n	8000dee <TIM_OC2_SetConfig+0x32>
 8000e18:	40010000 	.word	0x40010000

08000e1c <HAL_TIM_PWM_ConfigChannel>:
{
 8000e1c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8000e1e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000e22:	2b01      	cmp	r3, #1
{
 8000e24:	4604      	mov	r4, r0
 8000e26:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8000e2a:	d025      	beq.n	8000e78 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8000e32:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 8000e36:	2a0c      	cmp	r2, #12
 8000e38:	d818      	bhi.n	8000e6c <HAL_TIM_PWM_ConfigChannel+0x50>
 8000e3a:	e8df f002 	tbb	[pc, r2]
 8000e3e:	1707      	.short	0x1707
 8000e40:	171e1717 	.word	0x171e1717
 8000e44:	172f1717 	.word	0x172f1717
 8000e48:	1717      	.short	0x1717
 8000e4a:	40          	.byte	0x40
 8000e4b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8000e4c:	6820      	ldr	r0, [r4, #0]
 8000e4e:	f7ff fddf 	bl	8000a10 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8000e52:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8000e54:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8000e56:	699a      	ldr	r2, [r3, #24]
 8000e58:	f042 0208 	orr.w	r2, r2, #8
 8000e5c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8000e5e:	699a      	ldr	r2, [r3, #24]
 8000e60:	f022 0204 	bic.w	r2, r2, #4
 8000e64:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8000e66:	699a      	ldr	r2, [r3, #24]
 8000e68:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8000e6a:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8000e6c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8000e6e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000e70:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8000e74:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8000e78:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8000e7a:	6820      	ldr	r0, [r4, #0]
 8000e7c:	f7ff ff9e 	bl	8000dbc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8000e80:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8000e82:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8000e84:	699a      	ldr	r2, [r3, #24]
 8000e86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000e8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8000e8c:	699a      	ldr	r2, [r3, #24]
 8000e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8000e94:	699a      	ldr	r2, [r3, #24]
 8000e96:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000e9a:	e7e6      	b.n	8000e6a <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8000e9c:	6820      	ldr	r0, [r4, #0]
 8000e9e:	f7ff fde3 	bl	8000a68 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8000ea2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8000ea4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8000ea6:	69da      	ldr	r2, [r3, #28]
 8000ea8:	f042 0208 	orr.w	r2, r2, #8
 8000eac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8000eae:	69da      	ldr	r2, [r3, #28]
 8000eb0:	f022 0204 	bic.w	r2, r2, #4
 8000eb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8000eb6:	69da      	ldr	r2, [r3, #28]
 8000eb8:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8000eba:	61da      	str	r2, [r3, #28]
    break;
 8000ebc:	e7d6      	b.n	8000e6c <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8000ebe:	6820      	ldr	r0, [r4, #0]
 8000ec0:	f7ff fe02 	bl	8000ac8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8000ec4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8000ec6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8000ec8:	69da      	ldr	r2, [r3, #28]
 8000eca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000ece:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8000ed0:	69da      	ldr	r2, [r3, #28]
 8000ed2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ed6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8000ed8:	69da      	ldr	r2, [r3, #28]
 8000eda:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000ede:	e7ec      	b.n	8000eba <HAL_TIM_PWM_ConfigChannel+0x9e>

08000ee0 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8000ee0:	6a03      	ldr	r3, [r0, #32]
{
 8000ee2:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8000ee4:	2401      	movs	r4, #1
 8000ee6:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8000ee8:	ea23 0304 	bic.w	r3, r3, r4
 8000eec:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8000eee:	6a03      	ldr	r3, [r0, #32]
 8000ef0:	408a      	lsls	r2, r1
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	6202      	str	r2, [r0, #32]
 8000ef6:	bd10      	pop	{r4, pc}

08000ef8 <HAL_TIM_PWM_Start>:
{
 8000ef8:	b510      	push	{r4, lr}
 8000efa:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8000efc:	2201      	movs	r2, #1
 8000efe:	6800      	ldr	r0, [r0, #0]
 8000f00:	f7ff ffee 	bl	8000ee0 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8000f04:	6823      	ldr	r3, [r4, #0]
 8000f06:	4a08      	ldr	r2, [pc, #32]	; (8000f28 <HAL_TIM_PWM_Start+0x30>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d003      	beq.n	8000f14 <HAL_TIM_PWM_Start+0x1c>
 8000f0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d103      	bne.n	8000f1c <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8000f14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f1a:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	f042 0201 	orr.w	r2, r2, #1
 8000f22:	601a      	str	r2, [r3, #0]
} 
 8000f24:	2000      	movs	r0, #0
 8000f26:	bd10      	pop	{r4, pc}
 8000f28:	40010000 	.word	0x40010000

08000f2c <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8000f2c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000f30:	2b01      	cmp	r3, #1
{
 8000f32:	b510      	push	{r4, lr}
 8000f34:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8000f38:	d018      	beq.n	8000f6c <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8000f3a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000f3e:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8000f40:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000f42:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000f44:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000f46:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000f4a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8000f4c:	685a      	ldr	r2, [r3, #4]
 8000f4e:	4322      	orrs	r2, r4
 8000f50:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8000f52:	689a      	ldr	r2, [r3, #8]
 8000f54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f58:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000f5a:	689a      	ldr	r2, [r3, #8]
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8000f60:	2301      	movs	r3, #1
 8000f62:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8000f66:	2300      	movs	r3, #0
 8000f68:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8000f6c:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8000f6e:	bd10      	pop	{r4, pc}

08000f70 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000f70:	b082      	sub	sp, #8

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	9301      	str	r3, [sp, #4]
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <MX_GPIO_Init+0x20>)
 8000f78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f7a:	f042 0201 	orr.w	r2, r2, #1
 8000f7e:	631a      	str	r2, [r3, #48]	; 0x30
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	9301      	str	r3, [sp, #4]
 8000f88:	9b01      	ldr	r3, [sp, #4]

}
 8000f8a:	b002      	add	sp, #8
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	40023800 	.word	0x40023800

08000f94 <SystemClock_Config>:
}
}
/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000f94:	b510      	push	{r4, lr}
 8000f96:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f98:	2300      	movs	r3, #0
 8000f9a:	4a21      	ldr	r2, [pc, #132]	; (8001020 <SystemClock_Config+0x8c>)
 8000f9c:	9301      	str	r3, [sp, #4]
 8000f9e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000fa0:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000fa4:	6411      	str	r1, [r2, #64]	; 0x40
 8000fa6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000fa8:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000fac:	9201      	str	r2, [sp, #4]
 8000fae:	9a01      	ldr	r2, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fb0:	4a1c      	ldr	r2, [pc, #112]	; (8001024 <SystemClock_Config+0x90>)
 8000fb2:	9302      	str	r3, [sp, #8]
 8000fb4:	6811      	ldr	r1, [r2, #0]
 8000fb6:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000fba:	6011      	str	r1, [r2, #0]
 8000fbc:	6812      	ldr	r2, [r2, #0]
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fbe:	930e      	str	r3, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fc0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000fc4:	9202      	str	r2, [sp, #8]
 8000fc6:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fc8:	2202      	movs	r2, #2
 8000fca:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fcc:	2201      	movs	r2, #1
 8000fce:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd0:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000fd2:	2210      	movs	r2, #16
 8000fd4:	920c      	str	r2, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd6:	f7ff fa91 	bl	80004fc <HAL_RCC_OscConfig>
 8000fda:	4601      	mov	r1, r0
 8000fdc:	b100      	cbz	r0, 8000fe0 <SystemClock_Config+0x4c>
 8000fde:	e7fe      	b.n	8000fde <SystemClock_Config+0x4a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe0:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fe2:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe4:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fe6:	9006      	str	r0, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fe8:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fea:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fec:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fee:	f7ff fc53 	bl	8000898 <HAL_RCC_ClockConfig>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	b100      	cbz	r0, 8000ff8 <SystemClock_Config+0x64>
 8000ff6:	e7fe      	b.n	8000ff6 <SystemClock_Config+0x62>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000ff8:	f7ff fd04 	bl	8000a04 <HAL_RCC_GetHCLKFreq>
 8000ffc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001000:	fbb0 f0f3 	udiv	r0, r0, r3
 8001004:	f7ff f972 	bl	80002ec <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001008:	2004      	movs	r0, #4
 800100a:	f7ff f985 	bl	8000318 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800100e:	4622      	mov	r2, r4
 8001010:	4621      	mov	r1, r4
 8001012:	f04f 30ff 	mov.w	r0, #4294967295
 8001016:	f7ff f935 	bl	8000284 <HAL_NVIC_SetPriority>
}
 800101a:	b014      	add	sp, #80	; 0x50
 800101c:	bd10      	pop	{r4, pc}
 800101e:	bf00      	nop
 8001020:	40023800 	.word	0x40023800
 8001024:	40007000 	.word	0x40007000

08001028 <main>:
{
 8001028:	b570      	push	{r4, r5, r6, lr}
  HAL_Init();
 800102a:	f7ff f8e1 	bl	80001f0 <HAL_Init>
  SystemClock_Config();
 800102e:	f7ff ffb1 	bl	8000f94 <SystemClock_Config>
  MX_GPIO_Init();
 8001032:	f7ff ff9d 	bl	8000f70 <MX_GPIO_Init>
  MX_TIM2_Init();//inicializa el timer2
 8001036:	f000 f8ad 	bl	8001194 <MX_TIM2_Init>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800103a:	2100      	movs	r1, #0
 800103c:	480b      	ldr	r0, [pc, #44]	; (800106c <main+0x44>)
			  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,i);
 800103e:	4d0b      	ldr	r5, [pc, #44]	; (800106c <main+0x44>)
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8001040:	f7ff ff5a 	bl	8000ef8 <HAL_TIM_PWM_Start>
 8001044:	462e      	mov	r6, r5
		  for(int i=0;i<=100;i++){
 8001046:	2400      	movs	r4, #0
			  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,i);
 8001048:	682b      	ldr	r3, [r5, #0]
			  HAL_Delay(10);
 800104a:	200a      	movs	r0, #10
			  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,i);
 800104c:	635c      	str	r4, [r3, #52]	; 0x34
		  for(int i=0;i<=100;i++){
 800104e:	3401      	adds	r4, #1
			  HAL_Delay(10);
 8001050:	f7ff f8f6 	bl	8000240 <HAL_Delay>
		  for(int i=0;i<=100;i++){
 8001054:	2c65      	cmp	r4, #101	; 0x65
 8001056:	d1f7      	bne.n	8001048 <main+0x20>
 8001058:	2464      	movs	r4, #100	; 0x64
			  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,i);
 800105a:	6833      	ldr	r3, [r6, #0]
			  HAL_Delay(10);
 800105c:	200a      	movs	r0, #10
			  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,i);
 800105e:	635c      	str	r4, [r3, #52]	; 0x34
			  HAL_Delay(10);
 8001060:	f7ff f8ee 	bl	8000240 <HAL_Delay>
		  for(int i=100;i>=0;i--){
 8001064:	f114 34ff 	adds.w	r4, r4, #4294967295
 8001068:	d2f7      	bcs.n	800105a <main+0x32>
 800106a:	e7ec      	b.n	8001046 <main+0x1e>
 800106c:	20000024 	.word	0x20000024

08001070 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8001070:	e7fe      	b.n	8001070 <_Error_Handler>

08001072 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001072:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001074:	2003      	movs	r0, #3
 8001076:	f7ff f8f3 	bl	8000260 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	4611      	mov	r1, r2
 800107e:	f06f 000b 	mvn.w	r0, #11
 8001082:	f7ff f8ff 	bl	8000284 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	4611      	mov	r1, r2
 800108a:	f06f 000a 	mvn.w	r0, #10
 800108e:	f7ff f8f9 	bl	8000284 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001092:	2200      	movs	r2, #0
 8001094:	4611      	mov	r1, r2
 8001096:	f06f 0009 	mvn.w	r0, #9
 800109a:	f7ff f8f3 	bl	8000284 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	4611      	mov	r1, r2
 80010a2:	f06f 0004 	mvn.w	r0, #4
 80010a6:	f7ff f8ed 	bl	8000284 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	4611      	mov	r1, r2
 80010ae:	f06f 0003 	mvn.w	r0, #3
 80010b2:	f7ff f8e7 	bl	8000284 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	4611      	mov	r1, r2
 80010ba:	f06f 0001 	mvn.w	r0, #1
 80010be:	f7ff f8e1 	bl	8000284 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80010c2:	2200      	movs	r2, #0
 80010c4:	4611      	mov	r1, r2
 80010c6:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80010ce:	f7ff b8d9 	b.w	8000284 <HAL_NVIC_SetPriority>

080010d2 <NMI_Handler>:
 80010d2:	4770      	bx	lr

080010d4 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80010d4:	e7fe      	b.n	80010d4 <HardFault_Handler>

080010d6 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80010d6:	e7fe      	b.n	80010d6 <MemManage_Handler>

080010d8 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80010d8:	e7fe      	b.n	80010d8 <BusFault_Handler>

080010da <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80010da:	e7fe      	b.n	80010da <UsageFault_Handler>

080010dc <SVC_Handler>:
 80010dc:	4770      	bx	lr

080010de <DebugMon_Handler>:
 80010de:	4770      	bx	lr

080010e0 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80010e0:	4770      	bx	lr

080010e2 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80010e2:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e4:	f7ff f89e 	bl	8000224 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80010ec:	f7ff b921 	b.w	8000332 <HAL_SYSTICK_IRQHandler>

080010f0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010f0:	490f      	ldr	r1, [pc, #60]	; (8001130 <SystemInit+0x40>)
 80010f2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80010f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80010fe:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <SystemInit+0x44>)
 8001100:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001102:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001104:	f042 0201 	orr.w	r2, r2, #1
 8001108:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800110a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001112:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001116:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001118:	4a07      	ldr	r2, [pc, #28]	; (8001138 <SystemInit+0x48>)
 800111a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001122:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001124:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001126:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800112a:	608b      	str	r3, [r1, #8]
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000ed00 	.word	0xe000ed00
 8001134:	40023800 	.word	0x40023800
 8001138:	24003010 	.word	0x24003010

0800113c <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 800113c:	6803      	ldr	r3, [r0, #0]
 800113e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8001142:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM2)
 8001144:	d10b      	bne.n	800115e <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	9301      	str	r3, [sp, #4]
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_TIM_Base_MspInit+0x28>)
 800114c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800114e:	f042 0201 	orr.w	r2, r2, #1
 8001152:	641a      	str	r2, [r3, #64]	; 0x40
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	9301      	str	r3, [sp, #4]
 800115c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800115e:	b002      	add	sp, #8
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800

08001168 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001168:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM2)
 800116a:	6803      	ldr	r3, [r0, #0]
 800116c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001170:	d10b      	bne.n	800118a <HAL_TIM_MspPostInit+0x22>
  
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2202      	movs	r2, #2
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001174:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001178:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2200      	movs	r2, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117c:	4804      	ldr	r0, [pc, #16]	; (8001190 <HAL_TIM_MspPostInit+0x28>)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800117e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001184:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	f7ff f8d9 	bl	800033c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800118a:	b007      	add	sp, #28
 800118c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001190:	40020000 	.word	0x40020000

08001194 <MX_TIM2_Init>:
{
 8001194:	b500      	push	{lr}
  htim2.Instance = TIM2;
 8001196:	4824      	ldr	r0, [pc, #144]	; (8001228 <MX_TIM2_Init+0x94>)
  htim2.Init.Prescaler = 15;
 8001198:	230f      	movs	r3, #15
 800119a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
{
 800119e:	b08f      	sub	sp, #60	; 0x3c
  htim2.Init.Prescaler = 15;
 80011a0:	e880 000a 	stmia.w	r0, {r1, r3}
  htim2.Init.Period = 100;
 80011a4:	2264      	movs	r2, #100	; 0x64
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a6:	2300      	movs	r3, #0
 80011a8:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 100;
 80011aa:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ac:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011ae:	f7ff fdd1 	bl	8000d54 <HAL_TIM_Base_Init>
 80011b2:	b118      	cbz	r0, 80011bc <MX_TIM2_Init+0x28>
    _Error_Handler(__FILE__, __LINE__);
 80011b4:	213f      	movs	r1, #63	; 0x3f
 80011b6:	481d      	ldr	r0, [pc, #116]	; (800122c <MX_TIM2_Init+0x98>)
 80011b8:	f7ff ff5a 	bl	8001070 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011bc:	a90e      	add	r1, sp, #56	; 0x38
 80011be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c2:	f841 3d2c 	str.w	r3, [r1, #-44]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011c6:	4818      	ldr	r0, [pc, #96]	; (8001228 <MX_TIM2_Init+0x94>)
 80011c8:	f7ff fca7 	bl	8000b1a <HAL_TIM_ConfigClockSource>
 80011cc:	b118      	cbz	r0, 80011d6 <MX_TIM2_Init+0x42>
    _Error_Handler(__FILE__, __LINE__);
 80011ce:	2145      	movs	r1, #69	; 0x45
 80011d0:	4816      	ldr	r0, [pc, #88]	; (800122c <MX_TIM2_Init+0x98>)
 80011d2:	f7ff ff4d 	bl	8001070 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011d6:	4814      	ldr	r0, [pc, #80]	; (8001228 <MX_TIM2_Init+0x94>)
 80011d8:	f7ff fdd6 	bl	8000d88 <HAL_TIM_PWM_Init>
 80011dc:	b118      	cbz	r0, 80011e6 <MX_TIM2_Init+0x52>
    _Error_Handler(__FILE__, __LINE__);
 80011de:	214a      	movs	r1, #74	; 0x4a
 80011e0:	4812      	ldr	r0, [pc, #72]	; (800122c <MX_TIM2_Init+0x98>)
 80011e2:	f7ff ff45 	bl	8001070 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e6:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011e8:	a901      	add	r1, sp, #4
 80011ea:	480f      	ldr	r0, [pc, #60]	; (8001228 <MX_TIM2_Init+0x94>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ec:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ee:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011f0:	f7ff fe9c 	bl	8000f2c <HAL_TIMEx_MasterConfigSynchronization>
 80011f4:	b118      	cbz	r0, 80011fe <MX_TIM2_Init+0x6a>
    _Error_Handler(__FILE__, __LINE__);
 80011f6:	2151      	movs	r1, #81	; 0x51
 80011f8:	480c      	ldr	r0, [pc, #48]	; (800122c <MX_TIM2_Init+0x98>)
 80011fa:	f7ff ff39 	bl	8001070 <_Error_Handler>
  sConfigOC.Pulse = 0;
 80011fe:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001200:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001202:	a907      	add	r1, sp, #28
 8001204:	4808      	ldr	r0, [pc, #32]	; (8001228 <MX_TIM2_Init+0x94>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001206:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 8001208:	9208      	str	r2, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800120a:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800120c:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800120e:	f7ff fe05 	bl	8000e1c <HAL_TIM_PWM_ConfigChannel>
 8001212:	b118      	cbz	r0, 800121c <MX_TIM2_Init+0x88>
    _Error_Handler(__FILE__, __LINE__);
 8001214:	215a      	movs	r1, #90	; 0x5a
 8001216:	4805      	ldr	r0, [pc, #20]	; (800122c <MX_TIM2_Init+0x98>)
 8001218:	f7ff ff2a 	bl	8001070 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 800121c:	4802      	ldr	r0, [pc, #8]	; (8001228 <MX_TIM2_Init+0x94>)
 800121e:	f7ff ffa3 	bl	8001168 <HAL_TIM_MspPostInit>
}
 8001222:	b00f      	add	sp, #60	; 0x3c
 8001224:	f85d fb04 	ldr.w	pc, [sp], #4
 8001228:	20000024 	.word	0x20000024
 800122c:	080012f4 	.word	0x080012f4

08001230 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001230:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001268 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001234:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001236:	e003      	b.n	8001240 <LoopCopyDataInit>

08001238 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800123a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800123c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800123e:	3104      	adds	r1, #4

08001240 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001240:	480b      	ldr	r0, [pc, #44]	; (8001270 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001242:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001244:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001246:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001248:	d3f6      	bcc.n	8001238 <CopyDataInit>
  ldr  r2, =_sbss
 800124a:	4a0b      	ldr	r2, [pc, #44]	; (8001278 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800124c:	e002      	b.n	8001254 <LoopFillZerobss>

0800124e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800124e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001250:	f842 3b04 	str.w	r3, [r2], #4

08001254 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001254:	4b09      	ldr	r3, [pc, #36]	; (800127c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001256:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001258:	d3f9      	bcc.n	800124e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800125a:	f7ff ff49 	bl	80010f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800125e:	f000 f811 	bl	8001284 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001262:	f7ff fee1 	bl	8001028 <main>
  bx  lr    
 8001266:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001268:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800126c:	0800130c 	.word	0x0800130c
  ldr  r0, =_sdata
 8001270:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001274:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8001278:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 800127c:	20000060 	.word	0x20000060

08001280 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001280:	e7fe      	b.n	8001280 <ADC_IRQHandler>
	...

08001284 <__libc_init_array>:
 8001284:	b570      	push	{r4, r5, r6, lr}
 8001286:	4e0d      	ldr	r6, [pc, #52]	; (80012bc <__libc_init_array+0x38>)
 8001288:	4c0d      	ldr	r4, [pc, #52]	; (80012c0 <__libc_init_array+0x3c>)
 800128a:	1ba4      	subs	r4, r4, r6
 800128c:	10a4      	asrs	r4, r4, #2
 800128e:	2500      	movs	r5, #0
 8001290:	42a5      	cmp	r5, r4
 8001292:	d109      	bne.n	80012a8 <__libc_init_array+0x24>
 8001294:	4e0b      	ldr	r6, [pc, #44]	; (80012c4 <__libc_init_array+0x40>)
 8001296:	4c0c      	ldr	r4, [pc, #48]	; (80012c8 <__libc_init_array+0x44>)
 8001298:	f000 f818 	bl	80012cc <_init>
 800129c:	1ba4      	subs	r4, r4, r6
 800129e:	10a4      	asrs	r4, r4, #2
 80012a0:	2500      	movs	r5, #0
 80012a2:	42a5      	cmp	r5, r4
 80012a4:	d105      	bne.n	80012b2 <__libc_init_array+0x2e>
 80012a6:	bd70      	pop	{r4, r5, r6, pc}
 80012a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80012ac:	4798      	blx	r3
 80012ae:	3501      	adds	r5, #1
 80012b0:	e7ee      	b.n	8001290 <__libc_init_array+0xc>
 80012b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80012b6:	4798      	blx	r3
 80012b8:	3501      	adds	r5, #1
 80012ba:	e7f2      	b.n	80012a2 <__libc_init_array+0x1e>
 80012bc:	08001304 	.word	0x08001304
 80012c0:	08001304 	.word	0x08001304
 80012c4:	08001304 	.word	0x08001304
 80012c8:	08001308 	.word	0x08001308

080012cc <_init>:
 80012cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ce:	bf00      	nop
 80012d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012d2:	bc08      	pop	{r3}
 80012d4:	469e      	mov	lr, r3
 80012d6:	4770      	bx	lr

080012d8 <_fini>:
 80012d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012da:	bf00      	nop
 80012dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012de:	bc08      	pop	{r3}
 80012e0:	469e      	mov	lr, r3
 80012e2:	4770      	bx	lr
