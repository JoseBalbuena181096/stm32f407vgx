
Control_Self_Balancing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003374  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080034fc  080034fc  000134fc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003540  08003540  00013540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003548  08003548  00013548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800354c  0800354c  0001354c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  20000000  08003550  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
  8 .bss          000001b0  20000018  20000018  00020018  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  200001c8  200001c8  00020018  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001a5fc  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003016  00000000  00000000  0003a640  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00008ec1  00000000  00000000  0003d656  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ae0  00000000  00000000  00046518  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e88  00000000  00000000  00046ff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00007133  00000000  00000000  00047e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000443e  00000000  00000000  0004efb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000533f1  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000236c  00000000  00000000  00053470  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080034e4 	.word	0x080034e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	080034e4 	.word	0x080034e4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2iz>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d215      	bcs.n	8000aa2 <__aeabi_d2iz+0x36>
 8000a76:	d511      	bpl.n	8000a9c <__aeabi_d2iz+0x30>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d912      	bls.n	8000aa8 <__aeabi_d2iz+0x3c>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d105      	bne.n	8000ab4 <__aeabi_d2iz+0x48>
 8000aa8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	bf08      	it	eq
 8000aae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_d2f>:
 8000abc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac4:	bf24      	itt	cs
 8000ac6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ace:	d90d      	bls.n	8000aec <__aeabi_d2f+0x30>
 8000ad0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000adc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae4:	bf08      	it	eq
 8000ae6:	f020 0001 	biceq.w	r0, r0, #1
 8000aea:	4770      	bx	lr
 8000aec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af0:	d121      	bne.n	8000b36 <__aeabi_d2f+0x7a>
 8000af2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af6:	bfbc      	itt	lt
 8000af8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	4770      	bxlt	lr
 8000afe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b06:	f1c2 0218 	rsb	r2, r2, #24
 8000b0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b12:	fa20 f002 	lsr.w	r0, r0, r2
 8000b16:	bf18      	it	ne
 8000b18:	f040 0001 	orrne.w	r0, r0, #1
 8000b1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b28:	ea40 000c 	orr.w	r0, r0, ip
 8000b2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b34:	e7cc      	b.n	8000ad0 <__aeabi_d2f+0x14>
 8000b36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b3a:	d107      	bne.n	8000b4c <__aeabi_d2f+0x90>
 8000b3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b40:	bf1e      	ittt	ne
 8000b42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b4a:	4770      	bxne	lr
 8000b4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <__aeabi_uldivmod>:
 8000b5c:	b953      	cbnz	r3, 8000b74 <__aeabi_uldivmod+0x18>
 8000b5e:	b94a      	cbnz	r2, 8000b74 <__aeabi_uldivmod+0x18>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	bf08      	it	eq
 8000b64:	2800      	cmpeq	r0, #0
 8000b66:	bf1c      	itt	ne
 8000b68:	f04f 31ff 	movne.w	r1, #4294967295
 8000b6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b70:	f000 b97a 	b.w	8000e68 <__aeabi_idiv0>
 8000b74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b7c:	f000 f806 	bl	8000b8c <__udivmoddi4>
 8000b80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b88:	b004      	add	sp, #16
 8000b8a:	4770      	bx	lr

08000b8c <__udivmoddi4>:
 8000b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b90:	468c      	mov	ip, r1
 8000b92:	460d      	mov	r5, r1
 8000b94:	4604      	mov	r4, r0
 8000b96:	9e08      	ldr	r6, [sp, #32]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d151      	bne.n	8000c40 <__udivmoddi4+0xb4>
 8000b9c:	428a      	cmp	r2, r1
 8000b9e:	4617      	mov	r7, r2
 8000ba0:	d96d      	bls.n	8000c7e <__udivmoddi4+0xf2>
 8000ba2:	fab2 fe82 	clz	lr, r2
 8000ba6:	f1be 0f00 	cmp.w	lr, #0
 8000baa:	d00b      	beq.n	8000bc4 <__udivmoddi4+0x38>
 8000bac:	f1ce 0c20 	rsb	ip, lr, #32
 8000bb0:	fa01 f50e 	lsl.w	r5, r1, lr
 8000bb4:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bb8:	fa02 f70e 	lsl.w	r7, r2, lr
 8000bbc:	ea4c 0c05 	orr.w	ip, ip, r5
 8000bc0:	fa00 f40e 	lsl.w	r4, r0, lr
 8000bc4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000bc8:	0c25      	lsrs	r5, r4, #16
 8000bca:	fbbc f8fa 	udiv	r8, ip, sl
 8000bce:	fa1f f987 	uxth.w	r9, r7
 8000bd2:	fb0a cc18 	mls	ip, sl, r8, ip
 8000bd6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000bda:	fb08 f309 	mul.w	r3, r8, r9
 8000bde:	42ab      	cmp	r3, r5
 8000be0:	d90a      	bls.n	8000bf8 <__udivmoddi4+0x6c>
 8000be2:	19ed      	adds	r5, r5, r7
 8000be4:	f108 32ff 	add.w	r2, r8, #4294967295
 8000be8:	f080 8123 	bcs.w	8000e32 <__udivmoddi4+0x2a6>
 8000bec:	42ab      	cmp	r3, r5
 8000bee:	f240 8120 	bls.w	8000e32 <__udivmoddi4+0x2a6>
 8000bf2:	f1a8 0802 	sub.w	r8, r8, #2
 8000bf6:	443d      	add	r5, r7
 8000bf8:	1aed      	subs	r5, r5, r3
 8000bfa:	b2a4      	uxth	r4, r4
 8000bfc:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c00:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c04:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c08:	fb00 f909 	mul.w	r9, r0, r9
 8000c0c:	45a1      	cmp	r9, r4
 8000c0e:	d909      	bls.n	8000c24 <__udivmoddi4+0x98>
 8000c10:	19e4      	adds	r4, r4, r7
 8000c12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c16:	f080 810a 	bcs.w	8000e2e <__udivmoddi4+0x2a2>
 8000c1a:	45a1      	cmp	r9, r4
 8000c1c:	f240 8107 	bls.w	8000e2e <__udivmoddi4+0x2a2>
 8000c20:	3802      	subs	r0, #2
 8000c22:	443c      	add	r4, r7
 8000c24:	eba4 0409 	sub.w	r4, r4, r9
 8000c28:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	2e00      	cmp	r6, #0
 8000c30:	d061      	beq.n	8000cf6 <__udivmoddi4+0x16a>
 8000c32:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c36:	2300      	movs	r3, #0
 8000c38:	6034      	str	r4, [r6, #0]
 8000c3a:	6073      	str	r3, [r6, #4]
 8000c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c40:	428b      	cmp	r3, r1
 8000c42:	d907      	bls.n	8000c54 <__udivmoddi4+0xc8>
 8000c44:	2e00      	cmp	r6, #0
 8000c46:	d054      	beq.n	8000cf2 <__udivmoddi4+0x166>
 8000c48:	2100      	movs	r1, #0
 8000c4a:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c4e:	4608      	mov	r0, r1
 8000c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c54:	fab3 f183 	clz	r1, r3
 8000c58:	2900      	cmp	r1, #0
 8000c5a:	f040 808e 	bne.w	8000d7a <__udivmoddi4+0x1ee>
 8000c5e:	42ab      	cmp	r3, r5
 8000c60:	d302      	bcc.n	8000c68 <__udivmoddi4+0xdc>
 8000c62:	4282      	cmp	r2, r0
 8000c64:	f200 80fa 	bhi.w	8000e5c <__udivmoddi4+0x2d0>
 8000c68:	1a84      	subs	r4, r0, r2
 8000c6a:	eb65 0503 	sbc.w	r5, r5, r3
 8000c6e:	2001      	movs	r0, #1
 8000c70:	46ac      	mov	ip, r5
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d03f      	beq.n	8000cf6 <__udivmoddi4+0x16a>
 8000c76:	e886 1010 	stmia.w	r6, {r4, ip}
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b912      	cbnz	r2, 8000c86 <__udivmoddi4+0xfa>
 8000c80:	2701      	movs	r7, #1
 8000c82:	fbb7 f7f2 	udiv	r7, r7, r2
 8000c86:	fab7 fe87 	clz	lr, r7
 8000c8a:	f1be 0f00 	cmp.w	lr, #0
 8000c8e:	d134      	bne.n	8000cfa <__udivmoddi4+0x16e>
 8000c90:	1beb      	subs	r3, r5, r7
 8000c92:	0c3a      	lsrs	r2, r7, #16
 8000c94:	fa1f fc87 	uxth.w	ip, r7
 8000c98:	2101      	movs	r1, #1
 8000c9a:	fbb3 f8f2 	udiv	r8, r3, r2
 8000c9e:	0c25      	lsrs	r5, r4, #16
 8000ca0:	fb02 3318 	mls	r3, r2, r8, r3
 8000ca4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000ca8:	fb0c f308 	mul.w	r3, ip, r8
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d907      	bls.n	8000cc0 <__udivmoddi4+0x134>
 8000cb0:	19ed      	adds	r5, r5, r7
 8000cb2:	f108 30ff 	add.w	r0, r8, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0x132>
 8000cb8:	42ab      	cmp	r3, r5
 8000cba:	f200 80d1 	bhi.w	8000e60 <__udivmoddi4+0x2d4>
 8000cbe:	4680      	mov	r8, r0
 8000cc0:	1aed      	subs	r5, r5, r3
 8000cc2:	b2a3      	uxth	r3, r4
 8000cc4:	fbb5 f0f2 	udiv	r0, r5, r2
 8000cc8:	fb02 5510 	mls	r5, r2, r0, r5
 8000ccc:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000cd0:	fb0c fc00 	mul.w	ip, ip, r0
 8000cd4:	45a4      	cmp	ip, r4
 8000cd6:	d907      	bls.n	8000ce8 <__udivmoddi4+0x15c>
 8000cd8:	19e4      	adds	r4, r4, r7
 8000cda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cde:	d202      	bcs.n	8000ce6 <__udivmoddi4+0x15a>
 8000ce0:	45a4      	cmp	ip, r4
 8000ce2:	f200 80b8 	bhi.w	8000e56 <__udivmoddi4+0x2ca>
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	eba4 040c 	sub.w	r4, r4, ip
 8000cec:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cf0:	e79d      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000cf2:	4631      	mov	r1, r6
 8000cf4:	4630      	mov	r0, r6
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	f1ce 0420 	rsb	r4, lr, #32
 8000cfe:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d02:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d06:	fa20 f804 	lsr.w	r8, r0, r4
 8000d0a:	0c3a      	lsrs	r2, r7, #16
 8000d0c:	fa25 f404 	lsr.w	r4, r5, r4
 8000d10:	ea48 0803 	orr.w	r8, r8, r3
 8000d14:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d18:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d1c:	fb02 4411 	mls	r4, r2, r1, r4
 8000d20:	fa1f fc87 	uxth.w	ip, r7
 8000d24:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d28:	fb01 f30c 	mul.w	r3, r1, ip
 8000d2c:	42ab      	cmp	r3, r5
 8000d2e:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x1bc>
 8000d34:	19ed      	adds	r5, r5, r7
 8000d36:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d3a:	f080 808a 	bcs.w	8000e52 <__udivmoddi4+0x2c6>
 8000d3e:	42ab      	cmp	r3, r5
 8000d40:	f240 8087 	bls.w	8000e52 <__udivmoddi4+0x2c6>
 8000d44:	3902      	subs	r1, #2
 8000d46:	443d      	add	r5, r7
 8000d48:	1aeb      	subs	r3, r5, r3
 8000d4a:	fa1f f588 	uxth.w	r5, r8
 8000d4e:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d52:	fb02 3310 	mls	r3, r2, r0, r3
 8000d56:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d5a:	fb00 f30c 	mul.w	r3, r0, ip
 8000d5e:	42ab      	cmp	r3, r5
 8000d60:	d907      	bls.n	8000d72 <__udivmoddi4+0x1e6>
 8000d62:	19ed      	adds	r5, r5, r7
 8000d64:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d68:	d26f      	bcs.n	8000e4a <__udivmoddi4+0x2be>
 8000d6a:	42ab      	cmp	r3, r5
 8000d6c:	d96d      	bls.n	8000e4a <__udivmoddi4+0x2be>
 8000d6e:	3802      	subs	r0, #2
 8000d70:	443d      	add	r5, r7
 8000d72:	1aeb      	subs	r3, r5, r3
 8000d74:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d78:	e78f      	b.n	8000c9a <__udivmoddi4+0x10e>
 8000d7a:	f1c1 0720 	rsb	r7, r1, #32
 8000d7e:	fa22 f807 	lsr.w	r8, r2, r7
 8000d82:	408b      	lsls	r3, r1
 8000d84:	fa05 f401 	lsl.w	r4, r5, r1
 8000d88:	ea48 0303 	orr.w	r3, r8, r3
 8000d8c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000d90:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000d94:	40fd      	lsrs	r5, r7
 8000d96:	ea4e 0e04 	orr.w	lr, lr, r4
 8000d9a:	fbb5 f9fc 	udiv	r9, r5, ip
 8000d9e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000da2:	fb0c 5519 	mls	r5, ip, r9, r5
 8000da6:	fa1f f883 	uxth.w	r8, r3
 8000daa:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000dae:	fb09 f408 	mul.w	r4, r9, r8
 8000db2:	42ac      	cmp	r4, r5
 8000db4:	fa02 f201 	lsl.w	r2, r2, r1
 8000db8:	fa00 fa01 	lsl.w	sl, r0, r1
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x244>
 8000dbe:	18ed      	adds	r5, r5, r3
 8000dc0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dc4:	d243      	bcs.n	8000e4e <__udivmoddi4+0x2c2>
 8000dc6:	42ac      	cmp	r4, r5
 8000dc8:	d941      	bls.n	8000e4e <__udivmoddi4+0x2c2>
 8000dca:	f1a9 0902 	sub.w	r9, r9, #2
 8000dce:	441d      	add	r5, r3
 8000dd0:	1b2d      	subs	r5, r5, r4
 8000dd2:	fa1f fe8e 	uxth.w	lr, lr
 8000dd6:	fbb5 f0fc 	udiv	r0, r5, ip
 8000dda:	fb0c 5510 	mls	r5, ip, r0, r5
 8000dde:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000de2:	fb00 f808 	mul.w	r8, r0, r8
 8000de6:	45a0      	cmp	r8, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x26e>
 8000dea:	18e4      	adds	r4, r4, r3
 8000dec:	f100 35ff 	add.w	r5, r0, #4294967295
 8000df0:	d229      	bcs.n	8000e46 <__udivmoddi4+0x2ba>
 8000df2:	45a0      	cmp	r8, r4
 8000df4:	d927      	bls.n	8000e46 <__udivmoddi4+0x2ba>
 8000df6:	3802      	subs	r0, #2
 8000df8:	441c      	add	r4, r3
 8000dfa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dfe:	eba4 0408 	sub.w	r4, r4, r8
 8000e02:	fba0 8902 	umull	r8, r9, r0, r2
 8000e06:	454c      	cmp	r4, r9
 8000e08:	46c6      	mov	lr, r8
 8000e0a:	464d      	mov	r5, r9
 8000e0c:	d315      	bcc.n	8000e3a <__udivmoddi4+0x2ae>
 8000e0e:	d012      	beq.n	8000e36 <__udivmoddi4+0x2aa>
 8000e10:	b156      	cbz	r6, 8000e28 <__udivmoddi4+0x29c>
 8000e12:	ebba 030e 	subs.w	r3, sl, lr
 8000e16:	eb64 0405 	sbc.w	r4, r4, r5
 8000e1a:	fa04 f707 	lsl.w	r7, r4, r7
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431f      	orrs	r7, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	6037      	str	r7, [r6, #0]
 8000e26:	6074      	str	r4, [r6, #4]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	e6f8      	b.n	8000c24 <__udivmoddi4+0x98>
 8000e32:	4690      	mov	r8, r2
 8000e34:	e6e0      	b.n	8000bf8 <__udivmoddi4+0x6c>
 8000e36:	45c2      	cmp	sl, r8
 8000e38:	d2ea      	bcs.n	8000e10 <__udivmoddi4+0x284>
 8000e3a:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e3e:	eb69 0503 	sbc.w	r5, r9, r3
 8000e42:	3801      	subs	r0, #1
 8000e44:	e7e4      	b.n	8000e10 <__udivmoddi4+0x284>
 8000e46:	4628      	mov	r0, r5
 8000e48:	e7d7      	b.n	8000dfa <__udivmoddi4+0x26e>
 8000e4a:	4640      	mov	r0, r8
 8000e4c:	e791      	b.n	8000d72 <__udivmoddi4+0x1e6>
 8000e4e:	4681      	mov	r9, r0
 8000e50:	e7be      	b.n	8000dd0 <__udivmoddi4+0x244>
 8000e52:	4601      	mov	r1, r0
 8000e54:	e778      	b.n	8000d48 <__udivmoddi4+0x1bc>
 8000e56:	3802      	subs	r0, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	e745      	b.n	8000ce8 <__udivmoddi4+0x15c>
 8000e5c:	4608      	mov	r0, r1
 8000e5e:	e708      	b.n	8000c72 <__udivmoddi4+0xe6>
 8000e60:	f1a8 0802 	sub.w	r8, r8, #2
 8000e64:	443d      	add	r5, r7
 8000e66:	e72b      	b.n	8000cc0 <__udivmoddi4+0x134>

08000e68 <__aeabi_idiv0>:
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e6c:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000e6e:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <HAL_InitTick+0x24>)
{
 8000e70:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000e72:	6818      	ldr	r0, [r3, #0]
 8000e74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e78:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e7c:	f000 f884 	bl	8000f88 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e80:	2200      	movs	r2, #0
 8000e82:	4621      	mov	r1, r4
 8000e84:	f04f 30ff 	mov.w	r0, #4294967295
 8000e88:	f000 f83e 	bl	8000f08 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	bd10      	pop	{r4, pc}
 8000e90:	20000010 	.word	0x20000010

08000e94 <HAL_Init>:
{
 8000e94:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e96:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <HAL_Init+0x30>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e9e:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ea6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000eae:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb0:	2003      	movs	r0, #3
 8000eb2:	f000 f817 	bl	8000ee4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f7ff ffd8 	bl	8000e6c <HAL_InitTick>
  HAL_MspInit();
 8000ebc:	f001 fef1 	bl	8002ca2 <HAL_MspInit>
}
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	bd08      	pop	{r3, pc}
 8000ec4:	40023c00 	.word	0x40023c00

08000ec8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000ec8:	4a02      	ldr	r2, [pc, #8]	; (8000ed4 <HAL_IncTick+0xc>)
 8000eca:	6813      	ldr	r3, [r2, #0]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	6013      	str	r3, [r2, #0]
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	2000005c 	.word	0x2000005c

08000ed8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ed8:	4b01      	ldr	r3, [pc, #4]	; (8000ee0 <HAL_GetTick+0x8>)
 8000eda:	6818      	ldr	r0, [r3, #0]
}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	2000005c 	.word	0x2000005c

08000ee4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee4:	4a07      	ldr	r2, [pc, #28]	; (8000f04 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000ee6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ee8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000eec:	041b      	lsls	r3, r3, #16
 8000eee:	0c1b      	lsrs	r3, r3, #16
 8000ef0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000ef4:	0200      	lsls	r0, r0, #8
 8000ef6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000efa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000efe:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000f00:	60d3      	str	r3, [r2, #12]
 8000f02:	4770      	bx	lr
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f08:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f0a:	b530      	push	{r4, r5, lr}
 8000f0c:	68dc      	ldr	r4, [r3, #12]
 8000f0e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f12:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f16:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f18:	2b04      	cmp	r3, #4
 8000f1a:	bf28      	it	cs
 8000f1c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	f04f 0501 	mov.w	r5, #1
 8000f24:	fa05 f303 	lsl.w	r3, r5, r3
 8000f28:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2c:	bf8c      	ite	hi
 8000f2e:	3c03      	subhi	r4, #3
 8000f30:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f32:	4019      	ands	r1, r3
 8000f34:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f36:	fa05 f404 	lsl.w	r4, r5, r4
 8000f3a:	3c01      	subs	r4, #1
 8000f3c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000f3e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	ea42 0201 	orr.w	r2, r2, r1
 8000f44:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f48:	bfaf      	iteee	ge
 8000f4a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4e:	f000 000f 	andlt.w	r0, r0, #15
 8000f52:	4b06      	ldrlt	r3, [pc, #24]	; (8000f6c <HAL_NVIC_SetPriority+0x64>)
 8000f54:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f56:	bfa5      	ittet	ge
 8000f58:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000f5c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f60:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000f64:	bd30      	pop	{r4, r5, pc}
 8000f66:	bf00      	nop
 8000f68:	e000ed00 	.word	0xe000ed00
 8000f6c:	e000ed14 	.word	0xe000ed14

08000f70 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000f70:	0942      	lsrs	r2, r0, #5
 8000f72:	2301      	movs	r3, #1
 8000f74:	f000 001f 	and.w	r0, r0, #31
 8000f78:	fa03 f000 	lsl.w	r0, r3, r0
 8000f7c:	4b01      	ldr	r3, [pc, #4]	; (8000f84 <HAL_NVIC_EnableIRQ+0x14>)
 8000f7e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000f82:	4770      	bx	lr
 8000f84:	e000e100 	.word	0xe000e100

08000f88 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f88:	3801      	subs	r0, #1
 8000f8a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000f8e:	d20a      	bcs.n	8000fa6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f92:	4a07      	ldr	r2, [pc, #28]	; (8000fb0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f94:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f96:	21f0      	movs	r1, #240	; 0xf0
 8000f98:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f9c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f9e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000fa6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e000e010 	.word	0xe000e010
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000fb4:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000fb6:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000fb8:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000fba:	bf0c      	ite	eq
 8000fbc:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000fc0:	f022 0204 	bicne.w	r2, r2, #4
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	4770      	bx	lr
 8000fc8:	e000e010 	.word	0xe000e010

08000fcc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000fcc:	4770      	bx	lr

08000fce <HAL_SYSTICK_IRQHandler>:
{
 8000fce:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000fd0:	f7ff fffc 	bl	8000fcc <HAL_SYSTICK_Callback>
 8000fd4:	bd08      	pop	{r3, pc}

08000fd6 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fd6:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d003      	beq.n	8000fe6 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fde:	2380      	movs	r3, #128	; 0x80
 8000fe0:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fe6:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fe8:	2305      	movs	r3, #5
 8000fea:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000fee:	6813      	ldr	r3, [r2, #0]
 8000ff0:	f023 0301 	bic.w	r3, r3, #1
 8000ff4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000ff6:	2000      	movs	r0, #0
}
 8000ff8:	4770      	bx	lr
	...

08000ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001000:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001002:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001004:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80011b4 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001008:	4a68      	ldr	r2, [pc, #416]	; (80011ac <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800100a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80011b8 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800100e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001010:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8001012:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001016:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001018:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800101c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8001020:	45b6      	cmp	lr, r6
 8001022:	f040 80ae 	bne.w	8001182 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001026:	684c      	ldr	r4, [r1, #4]
 8001028:	f024 0710 	bic.w	r7, r4, #16
 800102c:	2f02      	cmp	r7, #2
 800102e:	d116      	bne.n	800105e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8001030:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001034:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001038:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800103c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001040:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001044:	f04f 0c0f 	mov.w	ip, #15
 8001048:	fa0c fc0b 	lsl.w	ip, ip, fp
 800104c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001050:	690d      	ldr	r5, [r1, #16]
 8001052:	fa05 f50b 	lsl.w	r5, r5, fp
 8001056:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800105a:	f8ca 5020 	str.w	r5, [sl, #32]
 800105e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001062:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001064:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001068:	fa05 f50a 	lsl.w	r5, r5, sl
 800106c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800106e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001072:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001076:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800107a:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800107c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001080:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001082:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001086:	d811      	bhi.n	80010ac <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001088:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800108a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800108e:	68cf      	ldr	r7, [r1, #12]
 8001090:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001094:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001098:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800109a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800109c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010a0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80010a4:	409f      	lsls	r7, r3
 80010a6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80010aa:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80010ac:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ae:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010b0:	688f      	ldr	r7, [r1, #8]
 80010b2:	fa07 f70a 	lsl.w	r7, r7, sl
 80010b6:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80010b8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010ba:	00e5      	lsls	r5, r4, #3
 80010bc:	d561      	bpl.n	8001182 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010be:	f04f 0b00 	mov.w	fp, #0
 80010c2:	f8cd b00c 	str.w	fp, [sp, #12]
 80010c6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ca:	4d39      	ldr	r5, [pc, #228]	; (80011b0 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010cc:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80010d0:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80010d4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80010d8:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80010dc:	9703      	str	r7, [sp, #12]
 80010de:	9f03      	ldr	r7, [sp, #12]
 80010e0:	f023 0703 	bic.w	r7, r3, #3
 80010e4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80010e8:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010ec:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80010f0:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010f4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80010f8:	f04f 0e0f 	mov.w	lr, #15
 80010fc:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001100:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001102:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001106:	d043      	beq.n	8001190 <HAL_GPIO_Init+0x194>
 8001108:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800110c:	42a8      	cmp	r0, r5
 800110e:	d041      	beq.n	8001194 <HAL_GPIO_Init+0x198>
 8001110:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001114:	42a8      	cmp	r0, r5
 8001116:	d03f      	beq.n	8001198 <HAL_GPIO_Init+0x19c>
 8001118:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800111c:	42a8      	cmp	r0, r5
 800111e:	d03d      	beq.n	800119c <HAL_GPIO_Init+0x1a0>
 8001120:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001124:	42a8      	cmp	r0, r5
 8001126:	d03b      	beq.n	80011a0 <HAL_GPIO_Init+0x1a4>
 8001128:	4548      	cmp	r0, r9
 800112a:	d03b      	beq.n	80011a4 <HAL_GPIO_Init+0x1a8>
 800112c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001130:	42a8      	cmp	r0, r5
 8001132:	d039      	beq.n	80011a8 <HAL_GPIO_Init+0x1ac>
 8001134:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001138:	42a8      	cmp	r0, r5
 800113a:	bf14      	ite	ne
 800113c:	2508      	movne	r5, #8
 800113e:	2507      	moveq	r5, #7
 8001140:	fa05 f50c 	lsl.w	r5, r5, ip
 8001144:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001148:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800114a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800114c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800114e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001152:	bf0c      	ite	eq
 8001154:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001156:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001158:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800115a:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800115c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001160:	bf0c      	ite	eq
 8001162:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001164:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001166:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001168:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800116a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800116e:	bf0c      	ite	eq
 8001170:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001172:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001174:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001176:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001178:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800117a:	bf54      	ite	pl
 800117c:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800117e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001180:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001182:	3301      	adds	r3, #1
 8001184:	2b10      	cmp	r3, #16
 8001186:	f47f af44 	bne.w	8001012 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800118a:	b005      	add	sp, #20
 800118c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001190:	465d      	mov	r5, fp
 8001192:	e7d5      	b.n	8001140 <HAL_GPIO_Init+0x144>
 8001194:	2501      	movs	r5, #1
 8001196:	e7d3      	b.n	8001140 <HAL_GPIO_Init+0x144>
 8001198:	2502      	movs	r5, #2
 800119a:	e7d1      	b.n	8001140 <HAL_GPIO_Init+0x144>
 800119c:	2503      	movs	r5, #3
 800119e:	e7cf      	b.n	8001140 <HAL_GPIO_Init+0x144>
 80011a0:	2504      	movs	r5, #4
 80011a2:	e7cd      	b.n	8001140 <HAL_GPIO_Init+0x144>
 80011a4:	2505      	movs	r5, #5
 80011a6:	e7cb      	b.n	8001140 <HAL_GPIO_Init+0x144>
 80011a8:	2506      	movs	r5, #6
 80011aa:	e7c9      	b.n	8001140 <HAL_GPIO_Init+0x144>
 80011ac:	40013c00 	.word	0x40013c00
 80011b0:	40020000 	.word	0x40020000
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40021400 	.word	0x40021400

080011bc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011bc:	b10a      	cbz	r2, 80011c2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011be:	6181      	str	r1, [r0, #24]
 80011c0:	4770      	bx	lr
 80011c2:	0409      	lsls	r1, r1, #16
 80011c4:	e7fb      	b.n	80011be <HAL_GPIO_WritePin+0x2>

080011c6 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80011c6:	6802      	ldr	r2, [r0, #0]
 80011c8:	6953      	ldr	r3, [r2, #20]
 80011ca:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80011ce:	d00d      	beq.n	80011ec <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80011d0:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80011d4:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80011d6:	2304      	movs	r3, #4
 80011d8:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 80011da:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 80011dc:	2300      	movs	r3, #0
 80011de:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011e0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 80011e4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 80011e8:	2001      	movs	r0, #1
 80011ea:	4770      	bx	lr
  }
  return HAL_OK;
 80011ec:	4618      	mov	r0, r3
}
 80011ee:	4770      	bx	lr

080011f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80011f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80011f4:	4604      	mov	r4, r0
 80011f6:	4617      	mov	r7, r2
 80011f8:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80011fa:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80011fe:	b28e      	uxth	r6, r1
 8001200:	6825      	ldr	r5, [r4, #0]
 8001202:	f1b8 0f01 	cmp.w	r8, #1
 8001206:	bf0c      	ite	eq
 8001208:	696b      	ldreq	r3, [r5, #20]
 800120a:	69ab      	ldrne	r3, [r5, #24]
 800120c:	ea36 0303 	bics.w	r3, r6, r3
 8001210:	bf14      	ite	ne
 8001212:	2001      	movne	r0, #1
 8001214:	2000      	moveq	r0, #0
 8001216:	b908      	cbnz	r0, 800121c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8001218:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800121c:	696b      	ldr	r3, [r5, #20]
 800121e:	055a      	lsls	r2, r3, #21
 8001220:	d512      	bpl.n	8001248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001222:	682b      	ldr	r3, [r5, #0]
 8001224:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001228:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800122a:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800122e:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001230:	2304      	movs	r3, #4
 8001232:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8001234:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8001236:	2300      	movs	r3, #0
 8001238:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 800123a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 800123e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001242:	2001      	movs	r0, #1
 8001244:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001248:	1c7b      	adds	r3, r7, #1
 800124a:	d0d9      	beq.n	8001200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800124c:	b94f      	cbnz	r7, 8001262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 800124e:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001250:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001252:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001254:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001258:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 800125c:	2003      	movs	r0, #3
 800125e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001262:	f7ff fe39 	bl	8000ed8 <HAL_GetTick>
 8001266:	eba0 0009 	sub.w	r0, r0, r9
 800126a:	4287      	cmp	r7, r0
 800126c:	d2c8      	bcs.n	8001200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 800126e:	e7ee      	b.n	800124e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08001270 <I2C_WaitOnFlagUntilTimeout>:
{
 8001270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001274:	9e08      	ldr	r6, [sp, #32]
 8001276:	4604      	mov	r4, r0
 8001278:	4690      	mov	r8, r2
 800127a:	461f      	mov	r7, r3
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800127c:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8001280:	b28d      	uxth	r5, r1
 8001282:	6823      	ldr	r3, [r4, #0]
 8001284:	f1b9 0f01 	cmp.w	r9, #1
 8001288:	bf0c      	ite	eq
 800128a:	695b      	ldreq	r3, [r3, #20]
 800128c:	699b      	ldrne	r3, [r3, #24]
 800128e:	ea35 0303 	bics.w	r3, r5, r3
 8001292:	bf0c      	ite	eq
 8001294:	2301      	moveq	r3, #1
 8001296:	2300      	movne	r3, #0
 8001298:	4543      	cmp	r3, r8
 800129a:	d002      	beq.n	80012a2 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 800129c:	2000      	movs	r0, #0
}
 800129e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 80012a2:	1c7b      	adds	r3, r7, #1
 80012a4:	d0ed      	beq.n	8001282 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80012a6:	b95f      	cbnz	r7, 80012c0 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 80012a8:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 80012aa:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80012ac:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80012ae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80012b2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80012b6:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80012b8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80012bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80012c0:	f7ff fe0a 	bl	8000ed8 <HAL_GetTick>
 80012c4:	1b80      	subs	r0, r0, r6
 80012c6:	4287      	cmp	r7, r0
 80012c8:	d2db      	bcs.n	8001282 <I2C_WaitOnFlagUntilTimeout+0x12>
 80012ca:	e7ed      	b.n	80012a8 <I2C_WaitOnFlagUntilTimeout+0x38>

080012cc <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 80012cc:	b570      	push	{r4, r5, r6, lr}
 80012ce:	4604      	mov	r4, r0
 80012d0:	460d      	mov	r5, r1
 80012d2:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80012d4:	6823      	ldr	r3, [r4, #0]
 80012d6:	695b      	ldr	r3, [r3, #20]
 80012d8:	061b      	lsls	r3, r3, #24
 80012da:	d501      	bpl.n	80012e0 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 80012dc:	2000      	movs	r0, #0
 80012de:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80012e0:	4620      	mov	r0, r4
 80012e2:	f7ff ff70 	bl	80011c6 <I2C_IsAcknowledgeFailed>
 80012e6:	b9a8      	cbnz	r0, 8001314 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 80012e8:	1c6a      	adds	r2, r5, #1
 80012ea:	d0f3      	beq.n	80012d4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80012ec:	b965      	cbnz	r5, 8001308 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012f0:	f043 0320 	orr.w	r3, r3, #32
 80012f4:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80012f6:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80012f8:	2300      	movs	r3, #0
 80012fa:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80012fc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001300:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001304:	2003      	movs	r0, #3
 8001306:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001308:	f7ff fde6 	bl	8000ed8 <HAL_GetTick>
 800130c:	1b80      	subs	r0, r0, r6
 800130e:	4285      	cmp	r5, r0
 8001310:	d2e0      	bcs.n	80012d4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8001312:	e7ec      	b.n	80012ee <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001314:	2001      	movs	r0, #1
}
 8001316:	bd70      	pop	{r4, r5, r6, pc}

08001318 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 8001318:	b570      	push	{r4, r5, r6, lr}
 800131a:	4604      	mov	r4, r0
 800131c:	460d      	mov	r5, r1
 800131e:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001320:	6820      	ldr	r0, [r4, #0]
 8001322:	6943      	ldr	r3, [r0, #20]
 8001324:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8001328:	d001      	beq.n	800132e <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 800132a:	2000      	movs	r0, #0
}
 800132c:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800132e:	6942      	ldr	r2, [r0, #20]
 8001330:	06d2      	lsls	r2, r2, #27
 8001332:	d50b      	bpl.n	800134c <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001334:	f06f 0210 	mvn.w	r2, #16
 8001338:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 800133a:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800133c:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800133e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 8001342:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8001344:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 8001346:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 800134a:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800134c:	b95d      	cbnz	r5, 8001366 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800134e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001350:	f043 0320 	orr.w	r3, r3, #32
 8001354:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8001356:	2320      	movs	r3, #32
 8001358:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 800135c:	2300      	movs	r3, #0
 800135e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001362:	2003      	movs	r0, #3
 8001364:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001366:	f7ff fdb7 	bl	8000ed8 <HAL_GetTick>
 800136a:	1b80      	subs	r0, r0, r6
 800136c:	4285      	cmp	r5, r0
 800136e:	d2d7      	bcs.n	8001320 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8001370:	e7ed      	b.n	800134e <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

08001372 <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8001372:	b570      	push	{r4, r5, r6, lr}
 8001374:	4604      	mov	r4, r0
 8001376:	460d      	mov	r5, r1
 8001378:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800137a:	6823      	ldr	r3, [r4, #0]
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	075b      	lsls	r3, r3, #29
 8001380:	d501      	bpl.n	8001386 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001382:	2000      	movs	r0, #0
 8001384:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001386:	4620      	mov	r0, r4
 8001388:	f7ff ff1d 	bl	80011c6 <I2C_IsAcknowledgeFailed>
 800138c:	b9a8      	cbnz	r0, 80013ba <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 800138e:	1c6a      	adds	r2, r5, #1
 8001390:	d0f3      	beq.n	800137a <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001392:	b965      	cbnz	r5, 80013ae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001394:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001396:	f043 0320 	orr.w	r3, r3, #32
 800139a:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 800139c:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800139e:	2300      	movs	r3, #0
 80013a0:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80013a2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80013a6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80013aa:	2003      	movs	r0, #3
 80013ac:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80013ae:	f7ff fd93 	bl	8000ed8 <HAL_GetTick>
 80013b2:	1b80      	subs	r0, r0, r6
 80013b4:	4285      	cmp	r5, r0
 80013b6:	d2e0      	bcs.n	800137a <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 80013b8:	e7ec      	b.n	8001394 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80013ba:	2001      	movs	r0, #1
}
 80013bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080013c0 <HAL_I2C_Init>:
{
 80013c0:	b570      	push	{r4, r5, r6, lr}
  if(hi2c == NULL)
 80013c2:	4604      	mov	r4, r0
 80013c4:	2800      	cmp	r0, #0
 80013c6:	d062      	beq.n	800148e <HAL_I2C_Init+0xce>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 80013c8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80013cc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80013d0:	b91b      	cbnz	r3, 80013da <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80013d2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80013d6:	f001 fb85 	bl	8002ae4 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 80013da:	6822      	ldr	r2, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80013dc:	4e2d      	ldr	r6, [pc, #180]	; (8001494 <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 80013de:	4d2e      	ldr	r5, [pc, #184]	; (8001498 <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 80013e0:	2324      	movs	r3, #36	; 0x24
 80013e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80013e6:	6813      	ldr	r3, [r2, #0]
 80013e8:	f023 0301 	bic.w	r3, r3, #1
 80013ec:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013ee:	f000 fce5 	bl	8001dbc <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80013f2:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 80013f4:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80013f6:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80013fa:	42b3      	cmp	r3, r6
 80013fc:	bf84      	itt	hi
 80013fe:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8001402:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 8001404:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001406:	bf91      	iteee	ls
 8001408:	1c69      	addls	r1, r5, #1
 800140a:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 800140e:	fbb1 f1f5 	udivhi	r1, r1, r5
 8001412:	3101      	addhi	r1, #1
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001414:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001416:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001418:	d821      	bhi.n	800145e <HAL_I2C_Init+0x9e>
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001420:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001424:	2b03      	cmp	r3, #3
 8001426:	bf98      	it	ls
 8001428:	2004      	movls	r0, #4
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800142a:	6a21      	ldr	r1, [r4, #32]
 800142c:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800142e:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001430:	430b      	orrs	r3, r1
 8001432:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001434:	68e1      	ldr	r1, [r4, #12]
 8001436:	6923      	ldr	r3, [r4, #16]
 8001438:	430b      	orrs	r3, r1
 800143a:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 800143c:	69a1      	ldr	r1, [r4, #24]
 800143e:	6963      	ldr	r3, [r4, #20]
 8001440:	430b      	orrs	r3, r1
 8001442:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001444:	6813      	ldr	r3, [r2, #0]
 8001446:	f043 0301 	orr.w	r3, r3, #1
 800144a:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800144c:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800144e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001450:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001452:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001456:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001458:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 800145c:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800145e:	68a1      	ldr	r1, [r4, #8]
 8001460:	b949      	cbnz	r1, 8001476 <HAL_I2C_Init+0xb6>
 8001462:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001466:	fbb0 f0f3 	udiv	r0, r0, r3
 800146a:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800146e:	b163      	cbz	r3, 800148a <HAL_I2C_Init+0xca>
 8001470:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8001474:	e7d9      	b.n	800142a <HAL_I2C_Init+0x6a>
 8001476:	2119      	movs	r1, #25
 8001478:	434b      	muls	r3, r1
 800147a:	fbb0 f0f3 	udiv	r0, r0, r3
 800147e:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001482:	b113      	cbz	r3, 800148a <HAL_I2C_Init+0xca>
 8001484:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8001488:	e7cf      	b.n	800142a <HAL_I2C_Init+0x6a>
 800148a:	2001      	movs	r0, #1
 800148c:	e7cd      	b.n	800142a <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 800148e:	2001      	movs	r0, #1
}
 8001490:	bd70      	pop	{r4, r5, r6, pc}
 8001492:	bf00      	nop
 8001494:	000186a0 	.word	0x000186a0
 8001498:	000f4240 	.word	0x000f4240

0800149c <HAL_I2C_Master_Transmit>:
{
 800149c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80014a0:	4604      	mov	r4, r0
 80014a2:	461f      	mov	r7, r3
 80014a4:	460d      	mov	r5, r1
 80014a6:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 80014a8:	f7ff fd16 	bl	8000ed8 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 80014ac:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80014b0:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 80014b2:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 80014b4:	d004      	beq.n	80014c0 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 80014b6:	2502      	movs	r5, #2
}
 80014b8:	4628      	mov	r0, r5
 80014ba:	b004      	add	sp, #16
 80014bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014c0:	9000      	str	r0, [sp, #0]
 80014c2:	2319      	movs	r3, #25
 80014c4:	2201      	movs	r2, #1
 80014c6:	495d      	ldr	r1, [pc, #372]	; (800163c <HAL_I2C_Master_Transmit+0x1a0>)
 80014c8:	4620      	mov	r0, r4
 80014ca:	f7ff fed1 	bl	8001270 <I2C_WaitOnFlagUntilTimeout>
 80014ce:	2800      	cmp	r0, #0
 80014d0:	d1f1      	bne.n	80014b6 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 80014d2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d0ed      	beq.n	80014b6 <HAL_I2C_Master_Transmit+0x1a>
 80014da:	2301      	movs	r3, #1
 80014dc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014e0:	6823      	ldr	r3, [r4, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80014e6:	bf5e      	ittt	pl
 80014e8:	681a      	ldrpl	r2, [r3, #0]
 80014ea:	f042 0201 	orrpl.w	r2, r2, #1
 80014ee:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014f6:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80014f8:	2221      	movs	r2, #33	; 0x21
 80014fa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80014fe:	2210      	movs	r2, #16
 8001500:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001504:	2200      	movs	r2, #0
 8001506:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001508:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 800150c:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800150e:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001510:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001512:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001514:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8001516:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800151a:	2a04      	cmp	r2, #4
 800151c:	d004      	beq.n	8001528 <HAL_I2C_Master_Transmit+0x8c>
 800151e:	2a01      	cmp	r2, #1
 8001520:	d002      	beq.n	8001528 <HAL_I2C_Master_Transmit+0x8c>
 8001522:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001526:	d104      	bne.n	8001532 <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	e002      	b.n	8001538 <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001532:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001534:	2a12      	cmp	r2, #18
 8001536:	d0f7      	beq.n	8001528 <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001538:	9600      	str	r6, [sp, #0]
 800153a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800153c:	2200      	movs	r2, #0
 800153e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001542:	4620      	mov	r0, r4
 8001544:	f7ff fe94 	bl	8001270 <I2C_WaitOnFlagUntilTimeout>
 8001548:	bb28      	cbnz	r0, 8001596 <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800154a:	6923      	ldr	r3, [r4, #16]
 800154c:	6822      	ldr	r2, [r4, #0]
 800154e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001552:	d112      	bne.n	800157a <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001554:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001558:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800155a:	4633      	mov	r3, r6
 800155c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800155e:	4938      	ldr	r1, [pc, #224]	; (8001640 <HAL_I2C_Master_Transmit+0x1a4>)
 8001560:	4620      	mov	r0, r4
 8001562:	f7ff fe45 	bl	80011f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001566:	4605      	mov	r5, r0
 8001568:	b9a0      	cbnz	r0, 8001594 <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800156a:	6823      	ldr	r3, [r4, #0]
 800156c:	9003      	str	r0, [sp, #12]
 800156e:	695a      	ldr	r2, [r3, #20]
 8001570:	9203      	str	r2, [sp, #12]
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	9303      	str	r3, [sp, #12]
 8001576:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8001578:	e050      	b.n	800161c <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800157a:	11eb      	asrs	r3, r5, #7
 800157c:	f003 0306 	and.w	r3, r3, #6
 8001580:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001584:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001586:	492f      	ldr	r1, [pc, #188]	; (8001644 <HAL_I2C_Master_Transmit+0x1a8>)
 8001588:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800158a:	4633      	mov	r3, r6
 800158c:	4620      	mov	r0, r4
 800158e:	f7ff fe2f 	bl	80011f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001592:	b148      	cbz	r0, 80015a8 <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001594:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001596:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001598:	2b04      	cmp	r3, #4
 800159a:	f04f 0300 	mov.w	r3, #0
 800159e:	d107      	bne.n	80015b0 <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 80015a0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 80015a4:	2501      	movs	r5, #1
 80015a6:	e787      	b.n	80014b8 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80015a8:	6823      	ldr	r3, [r4, #0]
 80015aa:	b2ed      	uxtb	r5, r5
 80015ac:	611d      	str	r5, [r3, #16]
 80015ae:	e7d4      	b.n	800155a <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 80015b0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 80015b4:	2503      	movs	r5, #3
 80015b6:	e77f      	b.n	80014b8 <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015b8:	4632      	mov	r2, r6
 80015ba:	990a      	ldr	r1, [sp, #40]	; 0x28
 80015bc:	4620      	mov	r0, r4
 80015be:	f7ff fe85 	bl	80012cc <I2C_WaitOnTXEFlagUntilTimeout>
 80015c2:	b140      	cbz	r0, 80015d6 <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	d1f4      	bne.n	80015b4 <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80015ca:	6822      	ldr	r2, [r4, #0]
 80015cc:	6813      	ldr	r3, [r2, #0]
 80015ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	e7e6      	b.n	80015a4 <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80015d6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80015d8:	6820      	ldr	r0, [r4, #0]
      hi2c->XferSize--;
 80015da:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80015dc:	1c4b      	adds	r3, r1, #1
 80015de:	6263      	str	r3, [r4, #36]	; 0x24
 80015e0:	780b      	ldrb	r3, [r1, #0]
 80015e2:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 80015e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80015e6:	3b01      	subs	r3, #1
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80015ec:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 80015ee:	1e53      	subs	r3, r2, #1
 80015f0:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80015f2:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 80015f4:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80015f6:	d50a      	bpl.n	800160e <HAL_I2C_Master_Transmit+0x172>
 80015f8:	b14b      	cbz	r3, 800160e <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80015fa:	1c8b      	adds	r3, r1, #2
 80015fc:	6263      	str	r3, [r4, #36]	; 0x24
 80015fe:	784b      	ldrb	r3, [r1, #1]
 8001600:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 8001602:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001604:	3b01      	subs	r3, #1
 8001606:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8001608:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 800160a:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800160c:	8522      	strh	r2, [r4, #40]	; 0x28
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800160e:	4632      	mov	r2, r6
 8001610:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001612:	4620      	mov	r0, r4
 8001614:	f7ff fead 	bl	8001372 <I2C_WaitOnBTFFlagUntilTimeout>
 8001618:	2800      	cmp	r0, #0
 800161a:	d1d3      	bne.n	80015c4 <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 800161c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1ca      	bne.n	80015b8 <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001622:	6821      	ldr	r1, [r4, #0]
 8001624:	680a      	ldr	r2, [r1, #0]
 8001626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800162a:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800162c:	2220      	movs	r2, #32
 800162e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001632:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001636:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800163a:	e73d      	b.n	80014b8 <HAL_I2C_Master_Transmit+0x1c>
 800163c:	00100002 	.word	0x00100002
 8001640:	00010002 	.word	0x00010002
 8001644:	00010008 	.word	0x00010008

08001648 <HAL_I2C_Master_Receive>:
{
 8001648:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800164c:	4604      	mov	r4, r0
 800164e:	b089      	sub	sp, #36	; 0x24
 8001650:	4698      	mov	r8, r3
 8001652:	460d      	mov	r5, r1
 8001654:	4691      	mov	r9, r2
 8001656:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8001658:	f7ff fc3e 	bl	8000ed8 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 800165c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001660:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8001662:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001664:	d004      	beq.n	8001670 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 8001666:	2502      	movs	r5, #2
}
 8001668:	4628      	mov	r0, r5
 800166a:	b009      	add	sp, #36	; 0x24
 800166c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001670:	9000      	str	r0, [sp, #0]
 8001672:	2319      	movs	r3, #25
 8001674:	2201      	movs	r2, #1
 8001676:	499c      	ldr	r1, [pc, #624]	; (80018e8 <HAL_I2C_Master_Receive+0x2a0>)
 8001678:	4620      	mov	r0, r4
 800167a:	f7ff fdf9 	bl	8001270 <I2C_WaitOnFlagUntilTimeout>
 800167e:	2800      	cmp	r0, #0
 8001680:	d1f1      	bne.n	8001666 <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8001682:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001686:	2b01      	cmp	r3, #1
 8001688:	d0ed      	beq.n	8001666 <HAL_I2C_Master_Receive+0x1e>
 800168a:	2301      	movs	r3, #1
 800168c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001690:	6823      	ldr	r3, [r4, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001696:	bf5e      	ittt	pl
 8001698:	681a      	ldrpl	r2, [r3, #0]
 800169a:	f042 0201 	orrpl.w	r2, r2, #1
 800169e:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016a6:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80016a8:	2222      	movs	r2, #34	; 0x22
 80016aa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80016ae:	2210      	movs	r2, #16
 80016b0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80016b4:	2200      	movs	r2, #0
 80016b6:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016b8:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 80016bc:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016c0:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80016c2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80016c4:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80016c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80016c8:	6819      	ldr	r1, [r3, #0]
    hi2c->pBuffPtr    = pData;
 80016ca:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80016ce:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80016d2:	2a04      	cmp	r2, #4
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80016d4:	6019      	str	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80016d6:	d004      	beq.n	80016e2 <HAL_I2C_Master_Receive+0x9a>
 80016d8:	2a01      	cmp	r2, #1
 80016da:	d002      	beq.n	80016e2 <HAL_I2C_Master_Receive+0x9a>
 80016dc:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80016e0:	d104      	bne.n	80016ec <HAL_I2C_Master_Receive+0xa4>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	e002      	b.n	80016f2 <HAL_I2C_Master_Receive+0xaa>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80016ec:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80016ee:	2a11      	cmp	r2, #17
 80016f0:	d0f7      	beq.n	80016e2 <HAL_I2C_Master_Receive+0x9a>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80016f2:	9600      	str	r6, [sp, #0]
 80016f4:	463b      	mov	r3, r7
 80016f6:	2200      	movs	r2, #0
 80016f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80016fc:	4620      	mov	r0, r4
 80016fe:	f7ff fdb7 	bl	8001270 <I2C_WaitOnFlagUntilTimeout>
 8001702:	2800      	cmp	r0, #0
 8001704:	d14a      	bne.n	800179c <HAL_I2C_Master_Receive+0x154>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001706:	6923      	ldr	r3, [r4, #16]
 8001708:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800170c:	6823      	ldr	r3, [r4, #0]
 800170e:	d136      	bne.n	800177e <HAL_I2C_Master_Receive+0x136>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001710:	f045 0501 	orr.w	r5, r5, #1
 8001714:	b2ed      	uxtb	r5, r5
 8001716:	611d      	str	r5, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001718:	4633      	mov	r3, r6
 800171a:	463a      	mov	r2, r7
 800171c:	4973      	ldr	r1, [pc, #460]	; (80018ec <HAL_I2C_Master_Receive+0x2a4>)
 800171e:	4620      	mov	r0, r4
 8001720:	f7ff fd66 	bl	80011f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001724:	4605      	mov	r5, r0
 8001726:	2800      	cmp	r0, #0
 8001728:	d137      	bne.n	800179a <HAL_I2C_Master_Receive+0x152>
    if(hi2c->XferSize == 0U)
 800172a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800172c:	6823      	ldr	r3, [r4, #0]
 800172e:	2a00      	cmp	r2, #0
 8001730:	d066      	beq.n	8001800 <HAL_I2C_Master_Receive+0x1b8>
    else if(hi2c->XferSize == 1U)
 8001732:	2a01      	cmp	r2, #1
 8001734:	d177      	bne.n	8001826 <HAL_I2C_Master_Receive+0x1de>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800173c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800173e:	9504      	str	r5, [sp, #16]
 8001740:	695a      	ldr	r2, [r3, #20]
 8001742:	9204      	str	r2, [sp, #16]
 8001744:	699a      	ldr	r2, [r3, #24]
 8001746:	9204      	str	r2, [sp, #16]
 8001748:	9a04      	ldr	r2, [sp, #16]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001750:	601a      	str	r2, [r3, #0]
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001752:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80018f4 <HAL_I2C_Master_Receive+0x2ac>
    while(hi2c->XferSize > 0U)
 8001756:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001758:	2b00      	cmp	r3, #0
 800175a:	d05b      	beq.n	8001814 <HAL_I2C_Master_Receive+0x1cc>
      if(hi2c->XferSize <= 3U)
 800175c:	2b03      	cmp	r3, #3
 800175e:	f200 80cb 	bhi.w	80018f8 <HAL_I2C_Master_Receive+0x2b0>
        if(hi2c->XferSize == 1U)
 8001762:	2b01      	cmp	r3, #1
 8001764:	d17a      	bne.n	800185c <HAL_I2C_Master_Receive+0x214>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001766:	4632      	mov	r2, r6
 8001768:	4639      	mov	r1, r7
 800176a:	4620      	mov	r0, r4
 800176c:	f7ff fdd4 	bl	8001318 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001770:	2800      	cmp	r0, #0
 8001772:	f000 8090 	beq.w	8001896 <HAL_I2C_Master_Receive+0x24e>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001776:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001778:	2b20      	cmp	r3, #32
 800177a:	d116      	bne.n	80017aa <HAL_I2C_Master_Receive+0x162>
 800177c:	e03e      	b.n	80017fc <HAL_I2C_Master_Receive+0x1b4>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800177e:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8001782:	f008 0806 	and.w	r8, r8, #6
 8001786:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 800178a:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800178c:	4958      	ldr	r1, [pc, #352]	; (80018f0 <HAL_I2C_Master_Receive+0x2a8>)
 800178e:	4633      	mov	r3, r6
 8001790:	463a      	mov	r2, r7
 8001792:	4620      	mov	r0, r4
 8001794:	f7ff fd2c 	bl	80011f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001798:	b148      	cbz	r0, 80017ae <HAL_I2C_Master_Receive+0x166>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800179a:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800179c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800179e:	2b04      	cmp	r3, #4
 80017a0:	f04f 0300 	mov.w	r3, #0
 80017a4:	d128      	bne.n	80017f8 <HAL_I2C_Master_Receive+0x1b0>
        __HAL_UNLOCK(hi2c);
 80017a6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 80017aa:	2501      	movs	r5, #1
 80017ac:	e75c      	b.n	8001668 <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80017ae:	6823      	ldr	r3, [r4, #0]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80017b0:	494e      	ldr	r1, [pc, #312]	; (80018ec <HAL_I2C_Master_Receive+0x2a4>)
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80017b2:	b2ed      	uxtb	r5, r5
 80017b4:	611d      	str	r5, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80017b6:	463a      	mov	r2, r7
 80017b8:	4633      	mov	r3, r6
 80017ba:	4620      	mov	r0, r4
 80017bc:	f7ff fd18 	bl	80011f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017c0:	4602      	mov	r2, r0
 80017c2:	2800      	cmp	r0, #0
 80017c4:	d1e9      	bne.n	800179a <HAL_I2C_Master_Receive+0x152>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017c6:	6823      	ldr	r3, [r4, #0]
 80017c8:	9007      	str	r0, [sp, #28]
 80017ca:	6959      	ldr	r1, [r3, #20]
 80017cc:	9107      	str	r1, [sp, #28]
 80017ce:	6999      	ldr	r1, [r3, #24]
 80017d0:	9107      	str	r1, [sp, #28]
 80017d2:	9907      	ldr	r1, [sp, #28]
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80017d4:	6819      	ldr	r1, [r3, #0]
 80017d6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80017da:	6019      	str	r1, [r3, #0]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80017dc:	4620      	mov	r0, r4
 80017de:	9600      	str	r6, [sp, #0]
 80017e0:	463b      	mov	r3, r7
 80017e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80017e6:	f7ff fd43 	bl	8001270 <I2C_WaitOnFlagUntilTimeout>
 80017ea:	2800      	cmp	r0, #0
 80017ec:	d1d6      	bne.n	800179c <HAL_I2C_Master_Receive+0x154>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80017ee:	6822      	ldr	r2, [r4, #0]
 80017f0:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 80017f4:	6113      	str	r3, [r2, #16]
 80017f6:	e78f      	b.n	8001718 <HAL_I2C_Master_Receive+0xd0>
        __HAL_UNLOCK(hi2c);
 80017f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_TIMEOUT;
 80017fc:	2503      	movs	r5, #3
 80017fe:	e733      	b.n	8001668 <HAL_I2C_Master_Receive+0x20>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001800:	9503      	str	r5, [sp, #12]
 8001802:	695a      	ldr	r2, [r3, #20]
 8001804:	9203      	str	r2, [sp, #12]
 8001806:	699a      	ldr	r2, [r3, #24]
 8001808:	9203      	str	r2, [sp, #12]
 800180a:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001812:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001814:	2320      	movs	r3, #32
 8001816:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800181a:	2300      	movs	r3, #0
 800181c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001820:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001824:	e720      	b.n	8001668 <HAL_I2C_Master_Receive+0x20>
    else if(hi2c->XferSize == 2U)
 8001826:	2a02      	cmp	r2, #2
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001828:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 800182a:	d10d      	bne.n	8001848 <HAL_I2C_Master_Receive+0x200>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800182c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001830:	601a      	str	r2, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001838:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800183a:	9505      	str	r5, [sp, #20]
 800183c:	695a      	ldr	r2, [r3, #20]
 800183e:	9205      	str	r2, [sp, #20]
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	9305      	str	r3, [sp, #20]
 8001844:	9b05      	ldr	r3, [sp, #20]
 8001846:	e784      	b.n	8001752 <HAL_I2C_Master_Receive+0x10a>
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001848:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800184c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800184e:	9506      	str	r5, [sp, #24]
 8001850:	695a      	ldr	r2, [r3, #20]
 8001852:	9206      	str	r2, [sp, #24]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	9306      	str	r3, [sp, #24]
 8001858:	9b06      	ldr	r3, [sp, #24]
 800185a:	e77a      	b.n	8001752 <HAL_I2C_Master_Receive+0x10a>
        else if(hi2c->XferSize == 2U)
 800185c:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800185e:	9600      	str	r6, [sp, #0]
 8001860:	463b      	mov	r3, r7
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	4641      	mov	r1, r8
 8001868:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 800186a:	d122      	bne.n	80018b2 <HAL_I2C_Master_Receive+0x26a>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800186c:	f7ff fd00 	bl	8001270 <I2C_WaitOnFlagUntilTimeout>
 8001870:	2800      	cmp	r0, #0
 8001872:	d1c3      	bne.n	80017fc <HAL_I2C_Master_Receive+0x1b4>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001874:	6823      	ldr	r3, [r4, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800187c:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800187e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	1c51      	adds	r1, r2, #1
 8001884:	6261      	str	r1, [r4, #36]	; 0x24
 8001886:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 8001888:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800188a:	3b01      	subs	r3, #1
 800188c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800188e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001890:	3b01      	subs	r3, #1
 8001892:	b29b      	uxth	r3, r3
 8001894:	8563      	strh	r3, [r4, #42]	; 0x2a
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001896:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001898:	1c5a      	adds	r2, r3, #1
 800189a:	6262      	str	r2, [r4, #36]	; 0x24
 800189c:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800189e:	6912      	ldr	r2, [r2, #16]
 80018a0:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80018a2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80018a4:	3b01      	subs	r3, #1
 80018a6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80018a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80018aa:	3b01      	subs	r3, #1
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	8563      	strh	r3, [r4, #42]	; 0x2a
 80018b0:	e751      	b.n	8001756 <HAL_I2C_Master_Receive+0x10e>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80018b2:	f7ff fcdd 	bl	8001270 <I2C_WaitOnFlagUntilTimeout>
 80018b6:	4602      	mov	r2, r0
 80018b8:	2800      	cmp	r0, #0
 80018ba:	d19f      	bne.n	80017fc <HAL_I2C_Master_Receive+0x1b4>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80018bc:	6823      	ldr	r3, [r4, #0]
 80018be:	6819      	ldr	r1, [r3, #0]
 80018c0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80018c4:	6019      	str	r1, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80018c6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	1c48      	adds	r0, r1, #1
 80018cc:	6260      	str	r0, [r4, #36]	; 0x24
 80018ce:	700b      	strb	r3, [r1, #0]
          hi2c->XferSize--;
 80018d0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80018d2:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 80018d4:	3b01      	subs	r3, #1
 80018d6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80018d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80018da:	3b01      	subs	r3, #1
 80018dc:	b29b      	uxth	r3, r3
 80018de:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80018e0:	4641      	mov	r1, r8
 80018e2:	463b      	mov	r3, r7
 80018e4:	4620      	mov	r0, r4
 80018e6:	e7c1      	b.n	800186c <HAL_I2C_Master_Receive+0x224>
 80018e8:	00100002 	.word	0x00100002
 80018ec:	00010002 	.word	0x00010002
 80018f0:	00010008 	.word	0x00010008
 80018f4:	00010004 	.word	0x00010004
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 80018f8:	4632      	mov	r2, r6
 80018fa:	4639      	mov	r1, r7
 80018fc:	4620      	mov	r0, r4
 80018fe:	f7ff fd0b 	bl	8001318 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001902:	2800      	cmp	r0, #0
 8001904:	f47f af37 	bne.w	8001776 <HAL_I2C_Master_Receive+0x12e>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001908:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800190a:	1c5a      	adds	r2, r3, #1
 800190c:	6262      	str	r2, [r4, #36]	; 0x24
 800190e:	6822      	ldr	r2, [r4, #0]
 8001910:	6912      	ldr	r2, [r2, #16]
 8001912:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8001914:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001916:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 8001918:	3b01      	subs	r3, #1
 800191a:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800191c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800191e:	3b01      	subs	r3, #1
 8001920:	b29b      	uxth	r3, r3
 8001922:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001924:	6953      	ldr	r3, [r2, #20]
 8001926:	075b      	lsls	r3, r3, #29
 8001928:	f57f af15 	bpl.w	8001756 <HAL_I2C_Master_Receive+0x10e>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800192c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800192e:	1c59      	adds	r1, r3, #1
 8001930:	6261      	str	r1, [r4, #36]	; 0x24
 8001932:	e7b4      	b.n	800189e <HAL_I2C_Master_Receive+0x256>

08001934 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001936:	4604      	mov	r4, r0
 8001938:	b910      	cbnz	r0, 8001940 <HAL_RCC_OscConfig+0xc>
  {
    return HAL_ERROR;
 800193a:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800193c:	b003      	add	sp, #12
 800193e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001940:	6803      	ldr	r3, [r0, #0]
 8001942:	07d8      	lsls	r0, r3, #31
 8001944:	d43b      	bmi.n	80019be <HAL_RCC_OscConfig+0x8a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001946:	6823      	ldr	r3, [r4, #0]
 8001948:	0799      	lsls	r1, r3, #30
 800194a:	f100 8084 	bmi.w	8001a56 <HAL_RCC_OscConfig+0x122>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800194e:	6823      	ldr	r3, [r4, #0]
 8001950:	071e      	lsls	r6, r3, #28
 8001952:	f100 80c6 	bmi.w	8001ae2 <HAL_RCC_OscConfig+0x1ae>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001956:	6823      	ldr	r3, [r4, #0]
 8001958:	075d      	lsls	r5, r3, #29
 800195a:	d52a      	bpl.n	80019b2 <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_PWR_CLK_ENABLE();
 800195c:	2300      	movs	r3, #0
 800195e:	9301      	str	r3, [sp, #4]
 8001960:	4baa      	ldr	r3, [pc, #680]	; (8001c0c <HAL_RCC_OscConfig+0x2d8>)
    PWR->CR |= PWR_CR_DBP;
 8001962:	4dab      	ldr	r5, [pc, #684]	; (8001c10 <HAL_RCC_OscConfig+0x2dc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001964:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001966:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800196a:	641a      	str	r2, [r3, #64]	; 0x40
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001972:	9301      	str	r3, [sp, #4]
 8001974:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001976:	682b      	ldr	r3, [r5, #0]
 8001978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800197c:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800197e:	f7ff faab 	bl	8000ed8 <HAL_GetTick>
 8001982:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001984:	682b      	ldr	r3, [r5, #0]
 8001986:	05da      	lsls	r2, r3, #23
 8001988:	f140 80cd 	bpl.w	8001b26 <HAL_RCC_OscConfig+0x1f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800198c:	68a3      	ldr	r3, [r4, #8]
 800198e:	4d9f      	ldr	r5, [pc, #636]	; (8001c0c <HAL_RCC_OscConfig+0x2d8>)
 8001990:	2b01      	cmp	r3, #1
 8001992:	f040 80cf 	bne.w	8001b34 <HAL_RCC_OscConfig+0x200>
 8001996:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800199e:	f7ff fa9b 	bl	8000ed8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a2:	4d9a      	ldr	r5, [pc, #616]	; (8001c0c <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 80019a4:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019a6:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019aa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80019ac:	079b      	lsls	r3, r3, #30
 80019ae:	f140 80e2 	bpl.w	8001b76 <HAL_RCC_OscConfig+0x242>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019b2:	69a2      	ldr	r2, [r4, #24]
 80019b4:	2a00      	cmp	r2, #0
 80019b6:	f040 80e5 	bne.w	8001b84 <HAL_RCC_OscConfig+0x250>
  return HAL_OK;
 80019ba:	2000      	movs	r0, #0
 80019bc:	e7be      	b.n	800193c <HAL_RCC_OscConfig+0x8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019be:	4b93      	ldr	r3, [pc, #588]	; (8001c0c <HAL_RCC_OscConfig+0x2d8>)
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	f002 020c 	and.w	r2, r2, #12
 80019c6:	2a04      	cmp	r2, #4
 80019c8:	d007      	beq.n	80019da <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019d0:	2a08      	cmp	r2, #8
 80019d2:	d10a      	bne.n	80019ea <HAL_RCC_OscConfig+0xb6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	025a      	lsls	r2, r3, #9
 80019d8:	d507      	bpl.n	80019ea <HAL_RCC_OscConfig+0xb6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019da:	4b8c      	ldr	r3, [pc, #560]	; (8001c0c <HAL_RCC_OscConfig+0x2d8>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	039b      	lsls	r3, r3, #14
 80019e0:	d5b1      	bpl.n	8001946 <HAL_RCC_OscConfig+0x12>
 80019e2:	6863      	ldr	r3, [r4, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1ae      	bne.n	8001946 <HAL_RCC_OscConfig+0x12>
 80019e8:	e7a7      	b.n	800193a <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ea:	6863      	ldr	r3, [r4, #4]
 80019ec:	4d87      	ldr	r5, [pc, #540]	; (8001c0c <HAL_RCC_OscConfig+0x2d8>)
 80019ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f2:	d111      	bne.n	8001a18 <HAL_RCC_OscConfig+0xe4>
 80019f4:	682b      	ldr	r3, [r5, #0]
 80019f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019fa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80019fc:	f7ff fa6c 	bl	8000ed8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a00:	4d82      	ldr	r5, [pc, #520]	; (8001c0c <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8001a02:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a04:	682b      	ldr	r3, [r5, #0]
 8001a06:	039f      	lsls	r7, r3, #14
 8001a08:	d49d      	bmi.n	8001946 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a0a:	f7ff fa65 	bl	8000ed8 <HAL_GetTick>
 8001a0e:	1b80      	subs	r0, r0, r6
 8001a10:	2864      	cmp	r0, #100	; 0x64
 8001a12:	d9f7      	bls.n	8001a04 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 8001a14:	2003      	movs	r0, #3
 8001a16:	e791      	b.n	800193c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a1c:	d104      	bne.n	8001a28 <HAL_RCC_OscConfig+0xf4>
 8001a1e:	682b      	ldr	r3, [r5, #0]
 8001a20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a24:	602b      	str	r3, [r5, #0]
 8001a26:	e7e5      	b.n	80019f4 <HAL_RCC_OscConfig+0xc0>
 8001a28:	682a      	ldr	r2, [r5, #0]
 8001a2a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a2e:	602a      	str	r2, [r5, #0]
 8001a30:	682a      	ldr	r2, [r5, #0]
 8001a32:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a36:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1df      	bne.n	80019fc <HAL_RCC_OscConfig+0xc8>
        tickstart = HAL_GetTick();
 8001a3c:	f7ff fa4c 	bl	8000ed8 <HAL_GetTick>
 8001a40:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a42:	682b      	ldr	r3, [r5, #0]
 8001a44:	0398      	lsls	r0, r3, #14
 8001a46:	f57f af7e 	bpl.w	8001946 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a4a:	f7ff fa45 	bl	8000ed8 <HAL_GetTick>
 8001a4e:	1b80      	subs	r0, r0, r6
 8001a50:	2864      	cmp	r0, #100	; 0x64
 8001a52:	d9f6      	bls.n	8001a42 <HAL_RCC_OscConfig+0x10e>
 8001a54:	e7de      	b.n	8001a14 <HAL_RCC_OscConfig+0xe0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a56:	4b6d      	ldr	r3, [pc, #436]	; (8001c0c <HAL_RCC_OscConfig+0x2d8>)
 8001a58:	689a      	ldr	r2, [r3, #8]
 8001a5a:	f012 0f0c 	tst.w	r2, #12
 8001a5e:	d007      	beq.n	8001a70 <HAL_RCC_OscConfig+0x13c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a60:	689a      	ldr	r2, [r3, #8]
 8001a62:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a66:	2a08      	cmp	r2, #8
 8001a68:	d112      	bne.n	8001a90 <HAL_RCC_OscConfig+0x15c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	0259      	lsls	r1, r3, #9
 8001a6e:	d40f      	bmi.n	8001a90 <HAL_RCC_OscConfig+0x15c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a70:	4b66      	ldr	r3, [pc, #408]	; (8001c0c <HAL_RCC_OscConfig+0x2d8>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	0792      	lsls	r2, r2, #30
 8001a76:	d503      	bpl.n	8001a80 <HAL_RCC_OscConfig+0x14c>
 8001a78:	68e2      	ldr	r2, [r4, #12]
 8001a7a:	2a01      	cmp	r2, #1
 8001a7c:	f47f af5d 	bne.w	800193a <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	6921      	ldr	r1, [r4, #16]
 8001a84:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001a88:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001a8c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a8e:	e75e      	b.n	800194e <HAL_RCC_OscConfig+0x1a>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a90:	68e2      	ldr	r2, [r4, #12]
 8001a92:	4b60      	ldr	r3, [pc, #384]	; (8001c14 <HAL_RCC_OscConfig+0x2e0>)
 8001a94:	b1b2      	cbz	r2, 8001ac4 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 8001a96:	2201      	movs	r2, #1
 8001a98:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a9a:	f7ff fa1d 	bl	8000ed8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a9e:	4d5b      	ldr	r5, [pc, #364]	; (8001c0c <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8001aa0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa2:	682b      	ldr	r3, [r5, #0]
 8001aa4:	079b      	lsls	r3, r3, #30
 8001aa6:	d507      	bpl.n	8001ab8 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa8:	682b      	ldr	r3, [r5, #0]
 8001aaa:	6922      	ldr	r2, [r4, #16]
 8001aac:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ab0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001ab4:	602b      	str	r3, [r5, #0]
 8001ab6:	e74a      	b.n	800194e <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ab8:	f7ff fa0e 	bl	8000ed8 <HAL_GetTick>
 8001abc:	1b80      	subs	r0, r0, r6
 8001abe:	2802      	cmp	r0, #2
 8001ac0:	d9ef      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x16e>
 8001ac2:	e7a7      	b.n	8001a14 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 8001ac4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ac6:	f7ff fa07 	bl	8000ed8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aca:	4d50      	ldr	r5, [pc, #320]	; (8001c0c <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8001acc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ace:	682b      	ldr	r3, [r5, #0]
 8001ad0:	079f      	lsls	r7, r3, #30
 8001ad2:	f57f af3c 	bpl.w	800194e <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ad6:	f7ff f9ff 	bl	8000ed8 <HAL_GetTick>
 8001ada:	1b80      	subs	r0, r0, r6
 8001adc:	2802      	cmp	r0, #2
 8001ade:	d9f6      	bls.n	8001ace <HAL_RCC_OscConfig+0x19a>
 8001ae0:	e798      	b.n	8001a14 <HAL_RCC_OscConfig+0xe0>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ae2:	6962      	ldr	r2, [r4, #20]
 8001ae4:	4b4c      	ldr	r3, [pc, #304]	; (8001c18 <HAL_RCC_OscConfig+0x2e4>)
 8001ae6:	b17a      	cbz	r2, 8001b08 <HAL_RCC_OscConfig+0x1d4>
      __HAL_RCC_LSI_ENABLE();
 8001ae8:	2201      	movs	r2, #1
 8001aea:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001aec:	f7ff f9f4 	bl	8000ed8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001af0:	4d46      	ldr	r5, [pc, #280]	; (8001c0c <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8001af2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001af4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001af6:	0798      	lsls	r0, r3, #30
 8001af8:	f53f af2d 	bmi.w	8001956 <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001afc:	f7ff f9ec 	bl	8000ed8 <HAL_GetTick>
 8001b00:	1b80      	subs	r0, r0, r6
 8001b02:	2802      	cmp	r0, #2
 8001b04:	d9f6      	bls.n	8001af4 <HAL_RCC_OscConfig+0x1c0>
 8001b06:	e785      	b.n	8001a14 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_LSI_DISABLE();
 8001b08:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001b0a:	f7ff f9e5 	bl	8000ed8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b0e:	4d3f      	ldr	r5, [pc, #252]	; (8001c0c <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8001b10:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b12:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001b14:	0799      	lsls	r1, r3, #30
 8001b16:	f57f af1e 	bpl.w	8001956 <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b1a:	f7ff f9dd 	bl	8000ed8 <HAL_GetTick>
 8001b1e:	1b80      	subs	r0, r0, r6
 8001b20:	2802      	cmp	r0, #2
 8001b22:	d9f6      	bls.n	8001b12 <HAL_RCC_OscConfig+0x1de>
 8001b24:	e776      	b.n	8001a14 <HAL_RCC_OscConfig+0xe0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001b26:	f7ff f9d7 	bl	8000ed8 <HAL_GetTick>
 8001b2a:	1b80      	subs	r0, r0, r6
 8001b2c:	2802      	cmp	r0, #2
 8001b2e:	f67f af29 	bls.w	8001984 <HAL_RCC_OscConfig+0x50>
 8001b32:	e76f      	b.n	8001a14 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b34:	2b05      	cmp	r3, #5
 8001b36:	d104      	bne.n	8001b42 <HAL_RCC_OscConfig+0x20e>
 8001b38:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001b3a:	f043 0304 	orr.w	r3, r3, #4
 8001b3e:	672b      	str	r3, [r5, #112]	; 0x70
 8001b40:	e729      	b.n	8001996 <HAL_RCC_OscConfig+0x62>
 8001b42:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001b44:	f022 0201 	bic.w	r2, r2, #1
 8001b48:	672a      	str	r2, [r5, #112]	; 0x70
 8001b4a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001b4c:	f022 0204 	bic.w	r2, r2, #4
 8001b50:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f47f af23 	bne.w	800199e <HAL_RCC_OscConfig+0x6a>
      tickstart = HAL_GetTick();
 8001b58:	f7ff f9be 	bl	8000ed8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b5c:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001b60:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b62:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001b64:	0798      	lsls	r0, r3, #30
 8001b66:	f57f af24 	bpl.w	80019b2 <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b6a:	f7ff f9b5 	bl	8000ed8 <HAL_GetTick>
 8001b6e:	1b80      	subs	r0, r0, r6
 8001b70:	42b8      	cmp	r0, r7
 8001b72:	d9f6      	bls.n	8001b62 <HAL_RCC_OscConfig+0x22e>
 8001b74:	e74e      	b.n	8001a14 <HAL_RCC_OscConfig+0xe0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b76:	f7ff f9af 	bl	8000ed8 <HAL_GetTick>
 8001b7a:	1b80      	subs	r0, r0, r6
 8001b7c:	42b8      	cmp	r0, r7
 8001b7e:	f67f af14 	bls.w	80019aa <HAL_RCC_OscConfig+0x76>
 8001b82:	e747      	b.n	8001a14 <HAL_RCC_OscConfig+0xe0>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b84:	4d21      	ldr	r5, [pc, #132]	; (8001c0c <HAL_RCC_OscConfig+0x2d8>)
 8001b86:	68ab      	ldr	r3, [r5, #8]
 8001b88:	f003 030c 	and.w	r3, r3, #12
 8001b8c:	2b08      	cmp	r3, #8
 8001b8e:	f43f aed4 	beq.w	800193a <HAL_RCC_OscConfig+0x6>
 8001b92:	4e22      	ldr	r6, [pc, #136]	; (8001c1c <HAL_RCC_OscConfig+0x2e8>)
 8001b94:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b96:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001b98:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b9a:	d12a      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x2be>
        tickstart = HAL_GetTick();
 8001b9c:	f7ff f99c 	bl	8000ed8 <HAL_GetTick>
 8001ba0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ba2:	682b      	ldr	r3, [r5, #0]
 8001ba4:	0199      	lsls	r1, r3, #6
 8001ba6:	d41e      	bmi.n	8001be6 <HAL_RCC_OscConfig+0x2b2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ba8:	6a22      	ldr	r2, [r4, #32]
 8001baa:	69e3      	ldr	r3, [r4, #28]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001bb0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001bb4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001bb6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001bba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bbc:	4c13      	ldr	r4, [pc, #76]	; (8001c0c <HAL_RCC_OscConfig+0x2d8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bbe:	0852      	lsrs	r2, r2, #1
 8001bc0:	3a01      	subs	r2, #1
 8001bc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001bc6:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001bc8:	2301      	movs	r3, #1
 8001bca:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001bcc:	f7ff f984 	bl	8000ed8 <HAL_GetTick>
 8001bd0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bd2:	6823      	ldr	r3, [r4, #0]
 8001bd4:	019a      	lsls	r2, r3, #6
 8001bd6:	f53f aef0 	bmi.w	80019ba <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bda:	f7ff f97d 	bl	8000ed8 <HAL_GetTick>
 8001bde:	1b40      	subs	r0, r0, r5
 8001be0:	2802      	cmp	r0, #2
 8001be2:	d9f6      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x29e>
 8001be4:	e716      	b.n	8001a14 <HAL_RCC_OscConfig+0xe0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be6:	f7ff f977 	bl	8000ed8 <HAL_GetTick>
 8001bea:	1bc0      	subs	r0, r0, r7
 8001bec:	2802      	cmp	r0, #2
 8001bee:	d9d8      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x26e>
 8001bf0:	e710      	b.n	8001a14 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 8001bf2:	f7ff f971 	bl	8000ed8 <HAL_GetTick>
 8001bf6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bf8:	682b      	ldr	r3, [r5, #0]
 8001bfa:	019b      	lsls	r3, r3, #6
 8001bfc:	f57f aedd 	bpl.w	80019ba <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c00:	f7ff f96a 	bl	8000ed8 <HAL_GetTick>
 8001c04:	1b00      	subs	r0, r0, r4
 8001c06:	2802      	cmp	r0, #2
 8001c08:	d9f6      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x2c4>
 8001c0a:	e703      	b.n	8001a14 <HAL_RCC_OscConfig+0xe0>
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40007000 	.word	0x40007000
 8001c14:	42470000 	.word	0x42470000
 8001c18:	42470e80 	.word	0x42470e80
 8001c1c:	42470060 	.word	0x42470060

08001c20 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c20:	4913      	ldr	r1, [pc, #76]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001c22:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c24:	688b      	ldr	r3, [r1, #8]
 8001c26:	f003 030c 	and.w	r3, r3, #12
 8001c2a:	2b04      	cmp	r3, #4
 8001c2c:	d003      	beq.n	8001c36 <HAL_RCC_GetSysClockFreq+0x16>
 8001c2e:	2b08      	cmp	r3, #8
 8001c30:	d003      	beq.n	8001c3a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c32:	4810      	ldr	r0, [pc, #64]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001c34:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001c36:	4810      	ldr	r0, [pc, #64]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x58>)
 8001c38:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c3a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c3c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c3e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c40:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c44:	bf14      	ite	ne
 8001c46:	480c      	ldrne	r0, [pc, #48]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c48:	480a      	ldreq	r0, [pc, #40]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c4a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001c4e:	bf18      	it	ne
 8001c50:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c52:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c56:	fba1 0100 	umull	r0, r1, r1, r0
 8001c5a:	f7fe ff7f 	bl	8000b5c <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c5e:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x50>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001c66:	3301      	adds	r3, #1
 8001c68:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001c6a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c6e:	bd08      	pop	{r3, pc}
 8001c70:	40023800 	.word	0x40023800
 8001c74:	00f42400 	.word	0x00f42400
 8001c78:	017d7840 	.word	0x017d7840

08001c7c <HAL_RCC_ClockConfig>:
{
 8001c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c80:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001c82:	4604      	mov	r4, r0
 8001c84:	b910      	cbnz	r0, 8001c8c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001c86:	2001      	movs	r0, #1
 8001c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c8c:	4b44      	ldr	r3, [pc, #272]	; (8001da0 <HAL_RCC_ClockConfig+0x124>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	f002 020f 	and.w	r2, r2, #15
 8001c94:	428a      	cmp	r2, r1
 8001c96:	d328      	bcc.n	8001cea <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c98:	6821      	ldr	r1, [r4, #0]
 8001c9a:	078f      	lsls	r7, r1, #30
 8001c9c:	d42d      	bmi.n	8001cfa <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c9e:	07c8      	lsls	r0, r1, #31
 8001ca0:	d440      	bmi.n	8001d24 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ca2:	4b3f      	ldr	r3, [pc, #252]	; (8001da0 <HAL_RCC_ClockConfig+0x124>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	f002 020f 	and.w	r2, r2, #15
 8001caa:	4295      	cmp	r5, r2
 8001cac:	d366      	bcc.n	8001d7c <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cae:	6822      	ldr	r2, [r4, #0]
 8001cb0:	0751      	lsls	r1, r2, #29
 8001cb2:	d46c      	bmi.n	8001d8e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb4:	0713      	lsls	r3, r2, #28
 8001cb6:	d507      	bpl.n	8001cc8 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cb8:	4a3a      	ldr	r2, [pc, #232]	; (8001da4 <HAL_RCC_ClockConfig+0x128>)
 8001cba:	6921      	ldr	r1, [r4, #16]
 8001cbc:	6893      	ldr	r3, [r2, #8]
 8001cbe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001cc2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001cc6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cc8:	f7ff ffaa 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 8001ccc:	4b35      	ldr	r3, [pc, #212]	; (8001da4 <HAL_RCC_ClockConfig+0x128>)
 8001cce:	4a36      	ldr	r2, [pc, #216]	; (8001da8 <HAL_RCC_ClockConfig+0x12c>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001cd6:	5cd3      	ldrb	r3, [r2, r3]
 8001cd8:	40d8      	lsrs	r0, r3
 8001cda:	4b34      	ldr	r3, [pc, #208]	; (8001dac <HAL_RCC_ClockConfig+0x130>)
 8001cdc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001cde:	2000      	movs	r0, #0
 8001ce0:	f7ff f8c4 	bl	8000e6c <HAL_InitTick>
  return HAL_OK;
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cea:	b2ca      	uxtb	r2, r1
 8001cec:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 030f 	and.w	r3, r3, #15
 8001cf4:	4299      	cmp	r1, r3
 8001cf6:	d1c6      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xa>
 8001cf8:	e7ce      	b.n	8001c98 <HAL_RCC_ClockConfig+0x1c>
 8001cfa:	4b2a      	ldr	r3, [pc, #168]	; (8001da4 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cfc:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d00:	bf1e      	ittt	ne
 8001d02:	689a      	ldrne	r2, [r3, #8]
 8001d04:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001d08:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d0a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d0c:	bf42      	ittt	mi
 8001d0e:	689a      	ldrmi	r2, [r3, #8]
 8001d10:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001d14:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	68a0      	ldr	r0, [r4, #8]
 8001d1a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001d1e:	4302      	orrs	r2, r0
 8001d20:	609a      	str	r2, [r3, #8]
 8001d22:	e7bc      	b.n	8001c9e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d24:	6862      	ldr	r2, [r4, #4]
 8001d26:	4b1f      	ldr	r3, [pc, #124]	; (8001da4 <HAL_RCC_ClockConfig+0x128>)
 8001d28:	2a01      	cmp	r2, #1
 8001d2a:	d11d      	bne.n	8001d68 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d32:	d0a8      	beq.n	8001c86 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d34:	4e1b      	ldr	r6, [pc, #108]	; (8001da4 <HAL_RCC_ClockConfig+0x128>)
 8001d36:	68b3      	ldr	r3, [r6, #8]
 8001d38:	f023 0303 	bic.w	r3, r3, #3
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001d40:	f7ff f8ca 	bl	8000ed8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d44:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001d48:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4a:	68b3      	ldr	r3, [r6, #8]
 8001d4c:	6862      	ldr	r2, [r4, #4]
 8001d4e:	f003 030c 	and.w	r3, r3, #12
 8001d52:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001d56:	d0a4      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d58:	f7ff f8be 	bl	8000ed8 <HAL_GetTick>
 8001d5c:	1bc0      	subs	r0, r0, r7
 8001d5e:	4540      	cmp	r0, r8
 8001d60:	d9f3      	bls.n	8001d4a <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001d62:	2003      	movs	r0, #3
}
 8001d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d68:	1e91      	subs	r1, r2, #2
 8001d6a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d6c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d6e:	d802      	bhi.n	8001d76 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d70:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001d74:	e7dd      	b.n	8001d32 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d76:	f013 0f02 	tst.w	r3, #2
 8001d7a:	e7da      	b.n	8001d32 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7c:	b2ea      	uxtb	r2, r5
 8001d7e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	429d      	cmp	r5, r3
 8001d88:	f47f af7d 	bne.w	8001c86 <HAL_RCC_ClockConfig+0xa>
 8001d8c:	e78f      	b.n	8001cae <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d8e:	4905      	ldr	r1, [pc, #20]	; (8001da4 <HAL_RCC_ClockConfig+0x128>)
 8001d90:	68e0      	ldr	r0, [r4, #12]
 8001d92:	688b      	ldr	r3, [r1, #8]
 8001d94:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001d98:	4303      	orrs	r3, r0
 8001d9a:	608b      	str	r3, [r1, #8]
 8001d9c:	e78a      	b.n	8001cb4 <HAL_RCC_ClockConfig+0x38>
 8001d9e:	bf00      	nop
 8001da0:	40023c00 	.word	0x40023c00
 8001da4:	40023800 	.word	0x40023800
 8001da8:	08003509 	.word	0x08003509
 8001dac:	20000010 	.word	0x20000010

08001db0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001db0:	4b01      	ldr	r3, [pc, #4]	; (8001db8 <HAL_RCC_GetHCLKFreq+0x8>)
 8001db2:	6818      	ldr	r0, [r3, #0]
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	20000010 	.word	0x20000010

08001dbc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001dbc:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001dbe:	4a05      	ldr	r2, [pc, #20]	; (8001dd4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001dc6:	5cd3      	ldrb	r3, [r2, r3]
 8001dc8:	4a03      	ldr	r2, [pc, #12]	; (8001dd8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001dca:	6810      	ldr	r0, [r2, #0]
}
 8001dcc:	40d8      	lsrs	r0, r3
 8001dce:	4770      	bx	lr
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	08003519 	.word	0x08003519
 8001dd8:	20000010 	.word	0x20000010

08001ddc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ddc:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001dde:	4a05      	ldr	r2, [pc, #20]	; (8001df4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001de6:	5cd3      	ldrb	r3, [r2, r3]
 8001de8:	4a03      	ldr	r2, [pc, #12]	; (8001df8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001dea:	6810      	ldr	r0, [r2, #0]
}
 8001dec:	40d8      	lsrs	r0, r3
 8001dee:	4770      	bx	lr
 8001df0:	40023800 	.word	0x40023800
 8001df4:	08003519 	.word	0x08003519
 8001df8:	20000010 	.word	0x20000010

08001dfc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001dfc:	6a03      	ldr	r3, [r0, #32]
 8001dfe:	f023 0301 	bic.w	r3, r3, #1
 8001e02:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e04:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001e06:	6842      	ldr	r2, [r0, #4]
{
 8001e08:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e0a:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e0c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001e0e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001e12:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001e14:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001e16:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001e1a:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001e1c:	4c0c      	ldr	r4, [pc, #48]	; (8001e50 <TIM_OC1_SetConfig+0x54>)
 8001e1e:	42a0      	cmp	r0, r4
 8001e20:	d009      	beq.n	8001e36 <TIM_OC1_SetConfig+0x3a>
 8001e22:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e26:	42a0      	cmp	r0, r4
 8001e28:	d005      	beq.n	8001e36 <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e2a:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001e2c:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001e2e:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001e30:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001e32:	6203      	str	r3, [r0, #32]
} 
 8001e34:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8001e36:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e38:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001e3a:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001e3e:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e40:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001e42:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e46:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001e48:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e4c:	4322      	orrs	r2, r4
 8001e4e:	e7ec      	b.n	8001e2a <TIM_OC1_SetConfig+0x2e>
 8001e50:	40010000 	.word	0x40010000

08001e54 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e54:	6a03      	ldr	r3, [r0, #32]
 8001e56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e5a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e5c:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001e5e:	6842      	ldr	r2, [r0, #4]
{
 8001e60:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e62:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e64:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8001e66:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001e6a:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001e6c:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001e6e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001e72:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001e76:	4c0e      	ldr	r4, [pc, #56]	; (8001eb0 <TIM_OC3_SetConfig+0x5c>)
 8001e78:	42a0      	cmp	r0, r4
 8001e7a:	d009      	beq.n	8001e90 <TIM_OC3_SetConfig+0x3c>
 8001e7c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e80:	42a0      	cmp	r0, r4
 8001e82:	d005      	beq.n	8001e90 <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e84:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001e86:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001e88:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001e8a:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e8c:	6203      	str	r3, [r0, #32]
}
 8001e8e:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001e90:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001e92:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001e94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001e98:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001e9c:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001e9e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001ea2:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001ea4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001ea8:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8001eac:	e7ea      	b.n	8001e84 <TIM_OC3_SetConfig+0x30>
 8001eae:	bf00      	nop
 8001eb0:	40010000 	.word	0x40010000

08001eb4 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001eb4:	6a03      	ldr	r3, [r0, #32]
 8001eb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001eba:	6203      	str	r3, [r0, #32]
{
 8001ebc:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ebe:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001ec0:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001ec2:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ec4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001ec6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001eca:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001ece:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001ed0:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001ed4:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001ed8:	4d09      	ldr	r5, [pc, #36]	; (8001f00 <TIM_OC4_SetConfig+0x4c>)
 8001eda:	42a8      	cmp	r0, r5
 8001edc:	d009      	beq.n	8001ef2 <TIM_OC4_SetConfig+0x3e>
 8001ede:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ee2:	42a8      	cmp	r0, r5
 8001ee4:	d005      	beq.n	8001ef2 <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ee6:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001ee8:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001eea:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8001eec:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001eee:	6204      	str	r4, [r0, #32]
}
 8001ef0:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001ef2:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001ef4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001ef8:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8001efc:	e7f3      	b.n	8001ee6 <TIM_OC4_SetConfig+0x32>
 8001efe:	bf00      	nop
 8001f00:	40010000 	.word	0x40010000

08001f04 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f04:	6803      	ldr	r3, [r0, #0]
 8001f06:	68da      	ldr	r2, [r3, #12]
 8001f08:	f042 0201 	orr.w	r2, r2, #1
 8001f0c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	f042 0201 	orr.w	r2, r2, #1
 8001f14:	601a      	str	r2, [r3, #0]
}
 8001f16:	2000      	movs	r0, #0
 8001f18:	4770      	bx	lr

08001f1a <HAL_TIM_PWM_MspInit>:
 8001f1a:	4770      	bx	lr

08001f1c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001f1c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001f20:	2b01      	cmp	r3, #1
{
 8001f22:	b570      	push	{r4, r5, r6, lr}
 8001f24:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001f28:	d01c      	beq.n	8001f64 <HAL_TIM_ConfigClockSource+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8001f2a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 8001f2e:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8001f30:	2201      	movs	r2, #1
 8001f32:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 8001f36:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f38:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001f3c:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001f40:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8001f42:	680a      	ldr	r2, [r1, #0]
 8001f44:	2a40      	cmp	r2, #64	; 0x40
 8001f46:	d079      	beq.n	800203c <HAL_TIM_ConfigClockSource+0x120>
 8001f48:	d819      	bhi.n	8001f7e <HAL_TIM_ConfigClockSource+0x62>
 8001f4a:	2a10      	cmp	r2, #16
 8001f4c:	f000 8093 	beq.w	8002076 <HAL_TIM_ConfigClockSource+0x15a>
 8001f50:	d80a      	bhi.n	8001f68 <HAL_TIM_ConfigClockSource+0x4c>
 8001f52:	2a00      	cmp	r2, #0
 8001f54:	f000 8089 	beq.w	800206a <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8001f64:	4618      	mov	r0, r3
}
 8001f66:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001f68:	2a20      	cmp	r2, #32
 8001f6a:	f000 808a 	beq.w	8002082 <HAL_TIM_ConfigClockSource+0x166>
 8001f6e:	2a30      	cmp	r2, #48	; 0x30
 8001f70:	d1f2      	bne.n	8001f58 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001f72:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f74:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001f78:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8001f7c:	e036      	b.n	8001fec <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001f7e:	2a70      	cmp	r2, #112	; 0x70
 8001f80:	d036      	beq.n	8001ff0 <HAL_TIM_ConfigClockSource+0xd4>
 8001f82:	d81b      	bhi.n	8001fbc <HAL_TIM_ConfigClockSource+0xa0>
 8001f84:	2a50      	cmp	r2, #80	; 0x50
 8001f86:	d042      	beq.n	800200e <HAL_TIM_ConfigClockSource+0xf2>
 8001f88:	2a60      	cmp	r2, #96	; 0x60
 8001f8a:	d1e5      	bne.n	8001f58 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f8c:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001f8e:	684d      	ldr	r5, [r1, #4]
 8001f90:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f92:	f024 0410 	bic.w	r4, r4, #16
 8001f96:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f98:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001f9a:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f9c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001fa0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001fa4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001fa8:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001fac:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fae:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001fb0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001fb2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001fb6:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8001fba:	e017      	b.n	8001fec <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001fbc:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001fc0:	d011      	beq.n	8001fe6 <HAL_TIM_ConfigClockSource+0xca>
 8001fc2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001fc6:	d1c7      	bne.n	8001f58 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001fc8:	688a      	ldr	r2, [r1, #8]
 8001fca:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001fcc:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001fce:	68c9      	ldr	r1, [r1, #12]
 8001fd0:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fd2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001fd6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001fda:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001fdc:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fe4:	e002      	b.n	8001fec <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8001fec:	609a      	str	r2, [r3, #8]
 8001fee:	e7b3      	b.n	8001f58 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001ff0:	688a      	ldr	r2, [r1, #8]
 8001ff2:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001ff4:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001ff6:	68c9      	ldr	r1, [r1, #12]
 8001ff8:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ffa:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001ffe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002002:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8002004:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002006:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002008:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 800200c:	e7ee      	b.n	8001fec <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800200e:	684c      	ldr	r4, [r1, #4]
 8002010:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002012:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002014:	6a1d      	ldr	r5, [r3, #32]
 8002016:	f025 0501 	bic.w	r5, r5, #1
 800201a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800201c:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800201e:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002022:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002026:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800202a:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800202c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800202e:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002030:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002032:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002036:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 800203a:	e7d7      	b.n	8001fec <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800203c:	684c      	ldr	r4, [r1, #4]
 800203e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002040:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002042:	6a1d      	ldr	r5, [r3, #32]
 8002044:	f025 0501 	bic.w	r5, r5, #1
 8002048:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800204a:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800204c:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002050:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002054:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002058:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800205a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800205c:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800205e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002060:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002064:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8002068:	e7c0      	b.n	8001fec <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800206a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800206c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002070:	f042 0207 	orr.w	r2, r2, #7
 8002074:	e7ba      	b.n	8001fec <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002076:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002078:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800207c:	f042 0217 	orr.w	r2, r2, #23
 8002080:	e7b4      	b.n	8001fec <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002082:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002084:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002088:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 800208c:	e7ae      	b.n	8001fec <HAL_TIM_ConfigClockSource+0xd0>

0800208e <HAL_TIM_PeriodElapsedCallback>:
 800208e:	4770      	bx	lr

08002090 <HAL_TIM_OC_DelayElapsedCallback>:
 8002090:	4770      	bx	lr

08002092 <HAL_TIM_IC_CaptureCallback>:
 8002092:	4770      	bx	lr

08002094 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002094:	4770      	bx	lr

08002096 <HAL_TIM_TriggerCallback>:
 8002096:	4770      	bx	lr

08002098 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002098:	6803      	ldr	r3, [r0, #0]
 800209a:	691a      	ldr	r2, [r3, #16]
 800209c:	0791      	lsls	r1, r2, #30
{
 800209e:	b510      	push	{r4, lr}
 80020a0:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020a2:	d50e      	bpl.n	80020c2 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	0792      	lsls	r2, r2, #30
 80020a8:	d50b      	bpl.n	80020c2 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020aa:	f06f 0202 	mvn.w	r2, #2
 80020ae:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020b0:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020b2:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020b4:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020b6:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020b8:	d077      	beq.n	80021aa <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80020ba:	f7ff ffea 	bl	8002092 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020be:	2300      	movs	r3, #0
 80020c0:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020c2:	6823      	ldr	r3, [r4, #0]
 80020c4:	691a      	ldr	r2, [r3, #16]
 80020c6:	0750      	lsls	r0, r2, #29
 80020c8:	d510      	bpl.n	80020ec <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	0751      	lsls	r1, r2, #29
 80020ce:	d50d      	bpl.n	80020ec <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020d0:	f06f 0204 	mvn.w	r2, #4
 80020d4:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020d6:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020d8:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020da:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020de:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80020e0:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020e2:	d068      	beq.n	80021b6 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80020e4:	f7ff ffd5 	bl	8002092 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020e8:	2300      	movs	r3, #0
 80020ea:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020ec:	6823      	ldr	r3, [r4, #0]
 80020ee:	691a      	ldr	r2, [r3, #16]
 80020f0:	0712      	lsls	r2, r2, #28
 80020f2:	d50f      	bpl.n	8002114 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	0710      	lsls	r0, r2, #28
 80020f8:	d50c      	bpl.n	8002114 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020fa:	f06f 0208 	mvn.w	r2, #8
 80020fe:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002100:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002102:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002104:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002106:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8002108:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800210a:	d05a      	beq.n	80021c2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800210c:	f7ff ffc1 	bl	8002092 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002110:	2300      	movs	r3, #0
 8002112:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002114:	6823      	ldr	r3, [r4, #0]
 8002116:	691a      	ldr	r2, [r3, #16]
 8002118:	06d2      	lsls	r2, r2, #27
 800211a:	d510      	bpl.n	800213e <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800211c:	68da      	ldr	r2, [r3, #12]
 800211e:	06d0      	lsls	r0, r2, #27
 8002120:	d50d      	bpl.n	800213e <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002122:	f06f 0210 	mvn.w	r2, #16
 8002126:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002128:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800212a:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800212c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002130:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8002132:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002134:	d04b      	beq.n	80021ce <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002136:	f7ff ffac 	bl	8002092 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800213a:	2300      	movs	r3, #0
 800213c:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800213e:	6823      	ldr	r3, [r4, #0]
 8002140:	691a      	ldr	r2, [r3, #16]
 8002142:	07d1      	lsls	r1, r2, #31
 8002144:	d508      	bpl.n	8002158 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002146:	68da      	ldr	r2, [r3, #12]
 8002148:	07d2      	lsls	r2, r2, #31
 800214a:	d505      	bpl.n	8002158 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800214c:	f06f 0201 	mvn.w	r2, #1
 8002150:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002152:	4620      	mov	r0, r4
 8002154:	f7ff ff9b 	bl	800208e <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002158:	6823      	ldr	r3, [r4, #0]
 800215a:	691a      	ldr	r2, [r3, #16]
 800215c:	0610      	lsls	r0, r2, #24
 800215e:	d508      	bpl.n	8002172 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002160:	68da      	ldr	r2, [r3, #12]
 8002162:	0611      	lsls	r1, r2, #24
 8002164:	d505      	bpl.n	8002172 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002166:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800216a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800216c:	4620      	mov	r0, r4
 800216e:	f000 f9ce 	bl	800250e <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002172:	6823      	ldr	r3, [r4, #0]
 8002174:	691a      	ldr	r2, [r3, #16]
 8002176:	0652      	lsls	r2, r2, #25
 8002178:	d508      	bpl.n	800218c <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800217a:	68da      	ldr	r2, [r3, #12]
 800217c:	0650      	lsls	r0, r2, #25
 800217e:	d505      	bpl.n	800218c <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002180:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002184:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002186:	4620      	mov	r0, r4
 8002188:	f7ff ff85 	bl	8002096 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800218c:	6823      	ldr	r3, [r4, #0]
 800218e:	691a      	ldr	r2, [r3, #16]
 8002190:	0691      	lsls	r1, r2, #26
 8002192:	d522      	bpl.n	80021da <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	0692      	lsls	r2, r2, #26
 8002198:	d51f      	bpl.n	80021da <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800219a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 800219e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021a0:	611a      	str	r2, [r3, #16]
}
 80021a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80021a6:	f000 b9b1 	b.w	800250c <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021aa:	f7ff ff71 	bl	8002090 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021ae:	4620      	mov	r0, r4
 80021b0:	f7ff ff70 	bl	8002094 <HAL_TIM_PWM_PulseFinishedCallback>
 80021b4:	e783      	b.n	80020be <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021b6:	f7ff ff6b 	bl	8002090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021ba:	4620      	mov	r0, r4
 80021bc:	f7ff ff6a 	bl	8002094 <HAL_TIM_PWM_PulseFinishedCallback>
 80021c0:	e792      	b.n	80020e8 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021c2:	f7ff ff65 	bl	8002090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80021c6:	4620      	mov	r0, r4
 80021c8:	f7ff ff64 	bl	8002094 <HAL_TIM_PWM_PulseFinishedCallback>
 80021cc:	e7a0      	b.n	8002110 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ce:	f7ff ff5f 	bl	8002090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d2:	4620      	mov	r0, r4
 80021d4:	f7ff ff5e 	bl	8002094 <HAL_TIM_PWM_PulseFinishedCallback>
 80021d8:	e7af      	b.n	800213a <HAL_TIM_IRQHandler+0xa2>
 80021da:	bd10      	pop	{r4, pc}

080021dc <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80021dc:	4a2e      	ldr	r2, [pc, #184]	; (8002298 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 80021de:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80021e0:	4290      	cmp	r0, r2
 80021e2:	d012      	beq.n	800220a <TIM_Base_SetConfig+0x2e>
 80021e4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80021e8:	d00f      	beq.n	800220a <TIM_Base_SetConfig+0x2e>
 80021ea:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80021ee:	4290      	cmp	r0, r2
 80021f0:	d00b      	beq.n	800220a <TIM_Base_SetConfig+0x2e>
 80021f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021f6:	4290      	cmp	r0, r2
 80021f8:	d007      	beq.n	800220a <TIM_Base_SetConfig+0x2e>
 80021fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021fe:	4290      	cmp	r0, r2
 8002200:	d003      	beq.n	800220a <TIM_Base_SetConfig+0x2e>
 8002202:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002206:	4290      	cmp	r0, r2
 8002208:	d11d      	bne.n	8002246 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 800220a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800220c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002210:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002212:	4a21      	ldr	r2, [pc, #132]	; (8002298 <TIM_Base_SetConfig+0xbc>)
 8002214:	4290      	cmp	r0, r2
 8002216:	d104      	bne.n	8002222 <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002218:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800221a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800221e:	4313      	orrs	r3, r2
 8002220:	e028      	b.n	8002274 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002222:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002226:	d0f7      	beq.n	8002218 <TIM_Base_SetConfig+0x3c>
 8002228:	4a1c      	ldr	r2, [pc, #112]	; (800229c <TIM_Base_SetConfig+0xc0>)
 800222a:	4290      	cmp	r0, r2
 800222c:	d0f4      	beq.n	8002218 <TIM_Base_SetConfig+0x3c>
 800222e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002232:	4290      	cmp	r0, r2
 8002234:	d0f0      	beq.n	8002218 <TIM_Base_SetConfig+0x3c>
 8002236:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800223a:	4290      	cmp	r0, r2
 800223c:	d0ec      	beq.n	8002218 <TIM_Base_SetConfig+0x3c>
 800223e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002242:	4290      	cmp	r0, r2
 8002244:	d0e8      	beq.n	8002218 <TIM_Base_SetConfig+0x3c>
 8002246:	4a16      	ldr	r2, [pc, #88]	; (80022a0 <TIM_Base_SetConfig+0xc4>)
 8002248:	4290      	cmp	r0, r2
 800224a:	d0e5      	beq.n	8002218 <TIM_Base_SetConfig+0x3c>
 800224c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002250:	4290      	cmp	r0, r2
 8002252:	d0e1      	beq.n	8002218 <TIM_Base_SetConfig+0x3c>
 8002254:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002258:	4290      	cmp	r0, r2
 800225a:	d0dd      	beq.n	8002218 <TIM_Base_SetConfig+0x3c>
 800225c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002260:	4290      	cmp	r0, r2
 8002262:	d0d9      	beq.n	8002218 <TIM_Base_SetConfig+0x3c>
 8002264:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002268:	4290      	cmp	r0, r2
 800226a:	d0d5      	beq.n	8002218 <TIM_Base_SetConfig+0x3c>
 800226c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002270:	4290      	cmp	r0, r2
 8002272:	d0d1      	beq.n	8002218 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 8002274:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002276:	688b      	ldr	r3, [r1, #8]
 8002278:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800227a:	680b      	ldr	r3, [r1, #0]
 800227c:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800227e:	4b06      	ldr	r3, [pc, #24]	; (8002298 <TIM_Base_SetConfig+0xbc>)
 8002280:	4298      	cmp	r0, r3
 8002282:	d006      	beq.n	8002292 <TIM_Base_SetConfig+0xb6>
 8002284:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002288:	4298      	cmp	r0, r3
 800228a:	d002      	beq.n	8002292 <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 800228c:	2301      	movs	r3, #1
 800228e:	6143      	str	r3, [r0, #20]
}
 8002290:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002292:	690b      	ldr	r3, [r1, #16]
 8002294:	6303      	str	r3, [r0, #48]	; 0x30
 8002296:	e7f9      	b.n	800228c <TIM_Base_SetConfig+0xb0>
 8002298:	40010000 	.word	0x40010000
 800229c:	40000400 	.word	0x40000400
 80022a0:	40014000 	.word	0x40014000

080022a4 <HAL_TIM_Base_Init>:
{ 
 80022a4:	b510      	push	{r4, lr}
  if(htim == NULL)
 80022a6:	4604      	mov	r4, r0
 80022a8:	b1a0      	cbz	r0, 80022d4 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80022aa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80022ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80022b2:	b91b      	cbnz	r3, 80022bc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80022b4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80022b8:	f000 ff88 	bl	80031cc <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80022bc:	2302      	movs	r3, #2
 80022be:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80022c2:	6820      	ldr	r0, [r4, #0]
 80022c4:	1d21      	adds	r1, r4, #4
 80022c6:	f7ff ff89 	bl	80021dc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80022ca:	2301      	movs	r3, #1
 80022cc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80022d0:	2000      	movs	r0, #0
 80022d2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80022d4:	2001      	movs	r0, #1
}
 80022d6:	bd10      	pop	{r4, pc}

080022d8 <HAL_TIM_PWM_Init>:
{
 80022d8:	b510      	push	{r4, lr}
  if(htim == NULL)
 80022da:	4604      	mov	r4, r0
 80022dc:	b1a0      	cbz	r0, 8002308 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80022de:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80022e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80022e6:	b91b      	cbnz	r3, 80022f0 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80022e8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 80022ec:	f7ff fe15 	bl	8001f1a <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 80022f0:	2302      	movs	r3, #2
 80022f2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80022f6:	6820      	ldr	r0, [r4, #0]
 80022f8:	1d21      	adds	r1, r4, #4
 80022fa:	f7ff ff6f 	bl	80021dc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80022fe:	2301      	movs	r3, #1
 8002300:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8002304:	2000      	movs	r0, #0
 8002306:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002308:	2001      	movs	r0, #1
}  
 800230a:	bd10      	pop	{r4, pc}

0800230c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800230c:	6a03      	ldr	r3, [r0, #32]
 800230e:	f023 0310 	bic.w	r3, r3, #16
 8002312:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002314:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8002316:	6842      	ldr	r2, [r0, #4]
{
 8002318:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 800231a:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800231c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800231e:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002322:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002326:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002328:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800232c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002330:	4c0d      	ldr	r4, [pc, #52]	; (8002368 <TIM_OC2_SetConfig+0x5c>)
 8002332:	42a0      	cmp	r0, r4
 8002334:	d009      	beq.n	800234a <TIM_OC2_SetConfig+0x3e>
 8002336:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800233a:	42a0      	cmp	r0, r4
 800233c:	d005      	beq.n	800234a <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 800233e:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8002340:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002342:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002344:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002346:	6203      	str	r3, [r0, #32]
}
 8002348:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800234a:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800234c:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 800234e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002352:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002356:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002358:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800235c:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800235e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002362:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 8002366:	e7ea      	b.n	800233e <TIM_OC2_SetConfig+0x32>
 8002368:	40010000 	.word	0x40010000

0800236c <HAL_TIM_PWM_ConfigChannel>:
{
 800236c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800236e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002372:	2b01      	cmp	r3, #1
{
 8002374:	4604      	mov	r4, r0
 8002376:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800237a:	d025      	beq.n	80023c8 <HAL_TIM_PWM_ConfigChannel+0x5c>
 800237c:	2301      	movs	r3, #1
 800237e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8002382:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 8002386:	2a0c      	cmp	r2, #12
 8002388:	d818      	bhi.n	80023bc <HAL_TIM_PWM_ConfigChannel+0x50>
 800238a:	e8df f002 	tbb	[pc, r2]
 800238e:	1707      	.short	0x1707
 8002390:	171e1717 	.word	0x171e1717
 8002394:	172f1717 	.word	0x172f1717
 8002398:	1717      	.short	0x1717
 800239a:	40          	.byte	0x40
 800239b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800239c:	6820      	ldr	r0, [r4, #0]
 800239e:	f7ff fd2d 	bl	8001dfc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023a2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023a4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023a6:	699a      	ldr	r2, [r3, #24]
 80023a8:	f042 0208 	orr.w	r2, r2, #8
 80023ac:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80023ae:	699a      	ldr	r2, [r3, #24]
 80023b0:	f022 0204 	bic.w	r2, r2, #4
 80023b4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023b6:	699a      	ldr	r2, [r3, #24]
 80023b8:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023ba:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80023bc:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80023be:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80023c0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 80023c4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 80023c8:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023ca:	6820      	ldr	r0, [r4, #0]
 80023cc:	f7ff ff9e 	bl	800230c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023d0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023d2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023d4:	699a      	ldr	r2, [r3, #24]
 80023d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023dc:	699a      	ldr	r2, [r3, #24]
 80023de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023e4:	699a      	ldr	r2, [r3, #24]
 80023e6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80023ea:	e7e6      	b.n	80023ba <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023ec:	6820      	ldr	r0, [r4, #0]
 80023ee:	f7ff fd31 	bl	8001e54 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023f2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80023f4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023f6:	69da      	ldr	r2, [r3, #28]
 80023f8:	f042 0208 	orr.w	r2, r2, #8
 80023fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80023fe:	69da      	ldr	r2, [r3, #28]
 8002400:	f022 0204 	bic.w	r2, r2, #4
 8002404:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002406:	69da      	ldr	r2, [r3, #28]
 8002408:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800240a:	61da      	str	r2, [r3, #28]
    break;
 800240c:	e7d6      	b.n	80023bc <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800240e:	6820      	ldr	r0, [r4, #0]
 8002410:	f7ff fd50 	bl	8001eb4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002414:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002416:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002418:	69da      	ldr	r2, [r3, #28]
 800241a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800241e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002420:	69da      	ldr	r2, [r3, #28]
 8002422:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002426:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002428:	69da      	ldr	r2, [r3, #28]
 800242a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800242e:	e7ec      	b.n	800240a <HAL_TIM_PWM_ConfigChannel+0x9e>

08002430 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8002430:	6a03      	ldr	r3, [r0, #32]
{
 8002432:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8002434:	2401      	movs	r4, #1
 8002436:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8002438:	ea23 0304 	bic.w	r3, r3, r4
 800243c:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800243e:	6a03      	ldr	r3, [r0, #32]
 8002440:	408a      	lsls	r2, r1
 8002442:	431a      	orrs	r2, r3
 8002444:	6202      	str	r2, [r0, #32]
 8002446:	bd10      	pop	{r4, pc}

08002448 <HAL_TIM_PWM_Start>:
{
 8002448:	b510      	push	{r4, lr}
 800244a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800244c:	2201      	movs	r2, #1
 800244e:	6800      	ldr	r0, [r0, #0]
 8002450:	f7ff ffee 	bl	8002430 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8002454:	6823      	ldr	r3, [r4, #0]
 8002456:	4a08      	ldr	r2, [pc, #32]	; (8002478 <HAL_TIM_PWM_Start+0x30>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d003      	beq.n	8002464 <HAL_TIM_PWM_Start+0x1c>
 800245c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002460:	4293      	cmp	r3, r2
 8002462:	d103      	bne.n	800246c <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8002464:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002466:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800246a:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	f042 0201 	orr.w	r2, r2, #1
 8002472:	601a      	str	r2, [r3, #0]
} 
 8002474:	2000      	movs	r0, #0
 8002476:	bd10      	pop	{r4, pc}
 8002478:	40010000 	.word	0x40010000

0800247c <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 800247c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002480:	2b01      	cmp	r3, #1
{
 8002482:	b510      	push	{r4, lr}
 8002484:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8002488:	d018      	beq.n	80024bc <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 800248a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800248e:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8002490:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002492:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002494:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002496:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800249a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	4322      	orrs	r2, r4
 80024a0:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024a8:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 80024b0:	2301      	movs	r3, #1
 80024b2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80024b6:	2300      	movs	r3, #0
 80024b8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 80024bc:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 80024be:	bd10      	pop	{r4, pc}

080024c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80024c0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d01f      	beq.n	8002508 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80024c8:	68cb      	ldr	r3, [r1, #12]
 80024ca:	688a      	ldr	r2, [r1, #8]
 80024cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024d0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80024d2:	684a      	ldr	r2, [r1, #4]
 80024d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024d8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80024da:	680a      	ldr	r2, [r1, #0]
 80024dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80024e0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80024e2:	690a      	ldr	r2, [r1, #16]
 80024e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024e8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80024ea:	694a      	ldr	r2, [r1, #20]
 80024ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024f0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80024f2:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80024f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80024f8:	4313      	orrs	r3, r2
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80024fa:	6802      	ldr	r2, [r0, #0]
 80024fc:	6453      	str	r3, [r2, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 80024fe:	2300      	movs	r3, #0
 8002500:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8002504:	4618      	mov	r0, r3
 8002506:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002508:	2002      	movs	r0, #2
}
 800250a:	4770      	bx	lr

0800250c <HAL_TIMEx_CommutationCallback>:
 800250c:	4770      	bx	lr

0800250e <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800250e:	4770      	bx	lr

08002510 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002510:	6803      	ldr	r3, [r0, #0]
 8002512:	68da      	ldr	r2, [r3, #12]
 8002514:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002518:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800251a:	695a      	ldr	r2, [r3, #20]
 800251c:	f022 0201 	bic.w	r2, r2, #1
 8002520:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002522:	2320      	movs	r3, #32
 8002524:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8002528:	4770      	bx	lr
	...

0800252c <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800252c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8002530:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002532:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8002534:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002536:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002538:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800253c:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800253e:	6133      	str	r3, [r6, #16]
{
 8002540:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002542:	6883      	ldr	r3, [r0, #8]
 8002544:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8002546:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002548:	4303      	orrs	r3, r0
 800254a:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800254c:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002550:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002552:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002556:	430b      	orrs	r3, r1
 8002558:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800255a:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 800255c:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800255e:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8002560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8002564:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002566:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800256a:	6173      	str	r3, [r6, #20]
 800256c:	4b7a      	ldr	r3, [pc, #488]	; (8002758 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800256e:	d17c      	bne.n	800266a <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002570:	429e      	cmp	r6, r3
 8002572:	d003      	beq.n	800257c <UART_SetConfig+0x50>
 8002574:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002578:	429e      	cmp	r6, r3
 800257a:	d144      	bne.n	8002606 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800257c:	f7ff fc2e 	bl	8001ddc <HAL_RCC_GetPCLK2Freq>
 8002580:	2519      	movs	r5, #25
 8002582:	fb05 f300 	mul.w	r3, r5, r0
 8002586:	6860      	ldr	r0, [r4, #4]
 8002588:	f04f 0964 	mov.w	r9, #100	; 0x64
 800258c:	0040      	lsls	r0, r0, #1
 800258e:	fbb3 f3f0 	udiv	r3, r3, r0
 8002592:	fbb3 f3f9 	udiv	r3, r3, r9
 8002596:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800259a:	f7ff fc1f 	bl	8001ddc <HAL_RCC_GetPCLK2Freq>
 800259e:	6863      	ldr	r3, [r4, #4]
 80025a0:	4368      	muls	r0, r5
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	fbb0 f7f3 	udiv	r7, r0, r3
 80025a8:	f7ff fc18 	bl	8001ddc <HAL_RCC_GetPCLK2Freq>
 80025ac:	6863      	ldr	r3, [r4, #4]
 80025ae:	4368      	muls	r0, r5
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025b6:	fbb3 f3f9 	udiv	r3, r3, r9
 80025ba:	fb09 7313 	mls	r3, r9, r3, r7
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	3332      	adds	r3, #50	; 0x32
 80025c2:	fbb3 f3f9 	udiv	r3, r3, r9
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80025cc:	f7ff fc06 	bl	8001ddc <HAL_RCC_GetPCLK2Freq>
 80025d0:	6862      	ldr	r2, [r4, #4]
 80025d2:	4368      	muls	r0, r5
 80025d4:	0052      	lsls	r2, r2, #1
 80025d6:	fbb0 faf2 	udiv	sl, r0, r2
 80025da:	f7ff fbff 	bl	8001ddc <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80025de:	6863      	ldr	r3, [r4, #4]
 80025e0:	4368      	muls	r0, r5
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80025e8:	fbb3 f3f9 	udiv	r3, r3, r9
 80025ec:	fb09 a313 	mls	r3, r9, r3, sl
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	3332      	adds	r3, #50	; 0x32
 80025f4:	fbb3 f3f9 	udiv	r3, r3, r9
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80025fe:	443b      	add	r3, r7
 8002600:	60b3      	str	r3, [r6, #8]
 8002602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002606:	f7ff fbd9 	bl	8001dbc <HAL_RCC_GetPCLK1Freq>
 800260a:	2519      	movs	r5, #25
 800260c:	fb05 f300 	mul.w	r3, r5, r0
 8002610:	6860      	ldr	r0, [r4, #4]
 8002612:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002616:	0040      	lsls	r0, r0, #1
 8002618:	fbb3 f3f0 	udiv	r3, r3, r0
 800261c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002620:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002624:	f7ff fbca 	bl	8001dbc <HAL_RCC_GetPCLK1Freq>
 8002628:	6863      	ldr	r3, [r4, #4]
 800262a:	4368      	muls	r0, r5
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	fbb0 f7f3 	udiv	r7, r0, r3
 8002632:	f7ff fbc3 	bl	8001dbc <HAL_RCC_GetPCLK1Freq>
 8002636:	6863      	ldr	r3, [r4, #4]
 8002638:	4368      	muls	r0, r5
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002640:	fbb3 f3f9 	udiv	r3, r3, r9
 8002644:	fb09 7313 	mls	r3, r9, r3, r7
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	3332      	adds	r3, #50	; 0x32
 800264c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8002656:	f7ff fbb1 	bl	8001dbc <HAL_RCC_GetPCLK1Freq>
 800265a:	6862      	ldr	r2, [r4, #4]
 800265c:	4368      	muls	r0, r5
 800265e:	0052      	lsls	r2, r2, #1
 8002660:	fbb0 faf2 	udiv	sl, r0, r2
 8002664:	f7ff fbaa 	bl	8001dbc <HAL_RCC_GetPCLK1Freq>
 8002668:	e7b9      	b.n	80025de <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800266a:	429e      	cmp	r6, r3
 800266c:	d002      	beq.n	8002674 <UART_SetConfig+0x148>
 800266e:	4b3b      	ldr	r3, [pc, #236]	; (800275c <UART_SetConfig+0x230>)
 8002670:	429e      	cmp	r6, r3
 8002672:	d140      	bne.n	80026f6 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002674:	f7ff fbb2 	bl	8001ddc <HAL_RCC_GetPCLK2Freq>
 8002678:	6867      	ldr	r7, [r4, #4]
 800267a:	2519      	movs	r5, #25
 800267c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002680:	fb05 f300 	mul.w	r3, r5, r0
 8002684:	00bf      	lsls	r7, r7, #2
 8002686:	fbb3 f3f7 	udiv	r3, r3, r7
 800268a:	fbb3 f3f9 	udiv	r3, r3, r9
 800268e:	011f      	lsls	r7, r3, #4
 8002690:	f7ff fba4 	bl	8001ddc <HAL_RCC_GetPCLK2Freq>
 8002694:	6863      	ldr	r3, [r4, #4]
 8002696:	4368      	muls	r0, r5
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	fbb0 f8f3 	udiv	r8, r0, r3
 800269e:	f7ff fb9d 	bl	8001ddc <HAL_RCC_GetPCLK2Freq>
 80026a2:	6863      	ldr	r3, [r4, #4]
 80026a4:	4368      	muls	r0, r5
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ac:	fbb3 f3f9 	udiv	r3, r3, r9
 80026b0:	fb09 8313 	mls	r3, r9, r3, r8
 80026b4:	011b      	lsls	r3, r3, #4
 80026b6:	3332      	adds	r3, #50	; 0x32
 80026b8:	fbb3 f3f9 	udiv	r3, r3, r9
 80026bc:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80026c0:	f7ff fb8c 	bl	8001ddc <HAL_RCC_GetPCLK2Freq>
 80026c4:	6862      	ldr	r2, [r4, #4]
 80026c6:	4368      	muls	r0, r5
 80026c8:	0092      	lsls	r2, r2, #2
 80026ca:	fbb0 faf2 	udiv	sl, r0, r2
 80026ce:	f7ff fb85 	bl	8001ddc <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80026d2:	6863      	ldr	r3, [r4, #4]
 80026d4:	4368      	muls	r0, r5
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80026dc:	fbb3 f3f9 	udiv	r3, r3, r9
 80026e0:	fb09 a313 	mls	r3, r9, r3, sl
 80026e4:	011b      	lsls	r3, r3, #4
 80026e6:	3332      	adds	r3, #50	; 0x32
 80026e8:	fbb3 f3f9 	udiv	r3, r3, r9
 80026ec:	f003 030f 	and.w	r3, r3, #15
 80026f0:	ea43 0308 	orr.w	r3, r3, r8
 80026f4:	e783      	b.n	80025fe <UART_SetConfig+0xd2>
 80026f6:	f7ff fb61 	bl	8001dbc <HAL_RCC_GetPCLK1Freq>
 80026fa:	6867      	ldr	r7, [r4, #4]
 80026fc:	2519      	movs	r5, #25
 80026fe:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002702:	fb05 f300 	mul.w	r3, r5, r0
 8002706:	00bf      	lsls	r7, r7, #2
 8002708:	fbb3 f3f7 	udiv	r3, r3, r7
 800270c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002710:	011f      	lsls	r7, r3, #4
 8002712:	f7ff fb53 	bl	8001dbc <HAL_RCC_GetPCLK1Freq>
 8002716:	6863      	ldr	r3, [r4, #4]
 8002718:	4368      	muls	r0, r5
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	fbb0 f8f3 	udiv	r8, r0, r3
 8002720:	f7ff fb4c 	bl	8001dbc <HAL_RCC_GetPCLK1Freq>
 8002724:	6863      	ldr	r3, [r4, #4]
 8002726:	4368      	muls	r0, r5
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	fbb0 f3f3 	udiv	r3, r0, r3
 800272e:	fbb3 f3f9 	udiv	r3, r3, r9
 8002732:	fb09 8313 	mls	r3, r9, r3, r8
 8002736:	011b      	lsls	r3, r3, #4
 8002738:	3332      	adds	r3, #50	; 0x32
 800273a:	fbb3 f3f9 	udiv	r3, r3, r9
 800273e:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002742:	f7ff fb3b 	bl	8001dbc <HAL_RCC_GetPCLK1Freq>
 8002746:	6862      	ldr	r2, [r4, #4]
 8002748:	4368      	muls	r0, r5
 800274a:	0092      	lsls	r2, r2, #2
 800274c:	fbb0 faf2 	udiv	sl, r0, r2
 8002750:	f7ff fb34 	bl	8001dbc <HAL_RCC_GetPCLK1Freq>
 8002754:	e7bd      	b.n	80026d2 <UART_SetConfig+0x1a6>
 8002756:	bf00      	nop
 8002758:	40011000 	.word	0x40011000
 800275c:	40011400 	.word	0x40011400

08002760 <HAL_UART_Init>:
{
 8002760:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002762:	4604      	mov	r4, r0
 8002764:	b340      	cbz	r0, 80027b8 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002766:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800276a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800276e:	b91b      	cbnz	r3, 8002778 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002770:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002774:	f000 fe1e 	bl	80033b4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002778:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800277a:	2324      	movs	r3, #36	; 0x24
 800277c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002780:	68d3      	ldr	r3, [r2, #12]
 8002782:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002786:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002788:	4620      	mov	r0, r4
 800278a:	f7ff fecf 	bl	800252c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800278e:	6823      	ldr	r3, [r4, #0]
 8002790:	691a      	ldr	r2, [r3, #16]
 8002792:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002796:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002798:	695a      	ldr	r2, [r3, #20]
 800279a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800279e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027a6:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027a8:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80027aa:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ac:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80027ae:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80027b2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80027b6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80027b8:	2001      	movs	r0, #1
}
 80027ba:	bd10      	pop	{r4, pc}

080027bc <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 80027bc:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80027c0:	2b20      	cmp	r3, #32
 80027c2:	d11c      	bne.n	80027fe <HAL_UART_Receive_IT+0x42>
    if((pData == NULL ) || (Size == 0)) 
 80027c4:	b1c9      	cbz	r1, 80027fa <HAL_UART_Receive_IT+0x3e>
 80027c6:	b1c2      	cbz	r2, 80027fa <HAL_UART_Receive_IT+0x3e>
    __HAL_LOCK(huart);
 80027c8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d016      	beq.n	80027fe <HAL_UART_Receive_IT+0x42>
    huart->RxXferCount = Size;
 80027d0:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 80027d2:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027d4:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027d6:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027d8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027da:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027de:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 80027e0:	6281      	str	r1, [r0, #40]	; 0x28
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027e2:	6951      	ldr	r1, [r2, #20]
    __HAL_UNLOCK(huart);
 80027e4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027e8:	f041 0101 	orr.w	r1, r1, #1
 80027ec:	6151      	str	r1, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80027ee:	68d1      	ldr	r1, [r2, #12]
 80027f0:	f441 7190 	orr.w	r1, r1, #288	; 0x120
 80027f4:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 80027f6:	4618      	mov	r0, r3
 80027f8:	4770      	bx	lr
      return HAL_ERROR;
 80027fa:	2001      	movs	r0, #1
 80027fc:	4770      	bx	lr
    return HAL_BUSY; 
 80027fe:	2002      	movs	r0, #2
}
 8002800:	4770      	bx	lr

08002802 <HAL_UART_TxCpltCallback>:
 8002802:	4770      	bx	lr

08002804 <HAL_UART_RxCpltCallback>:
 8002804:	4770      	bx	lr

08002806 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8002806:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800280a:	2b22      	cmp	r3, #34	; 0x22
{
 800280c:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800280e:	d132      	bne.n	8002876 <UART_Receive_IT+0x70>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002810:	6883      	ldr	r3, [r0, #8]
 8002812:	6901      	ldr	r1, [r0, #16]
 8002814:	6802      	ldr	r2, [r0, #0]
 8002816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800281a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800281c:	d11f      	bne.n	800285e <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800281e:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002820:	b9c9      	cbnz	r1, 8002856 <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002822:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002826:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 800282a:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 800282c:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 800282e:	3c01      	subs	r4, #1
 8002830:	b2a4      	uxth	r4, r4
 8002832:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8002834:	b96c      	cbnz	r4, 8002852 <UART_Receive_IT+0x4c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002836:	6803      	ldr	r3, [r0, #0]
 8002838:	68da      	ldr	r2, [r3, #12]
 800283a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800283e:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002840:	695a      	ldr	r2, [r3, #20]
 8002842:	f022 0201 	bic.w	r2, r2, #1
 8002846:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002848:	2320      	movs	r3, #32
 800284a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 800284e:	f7ff ffd9 	bl	8002804 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8002852:	2000      	movs	r0, #0
}
 8002854:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	f823 2b01 	strh.w	r2, [r3], #1
 800285c:	e7e5      	b.n	800282a <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 800285e:	b921      	cbnz	r1, 800286a <UART_Receive_IT+0x64>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002860:	1c59      	adds	r1, r3, #1
 8002862:	6852      	ldr	r2, [r2, #4]
 8002864:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002866:	701a      	strb	r2, [r3, #0]
 8002868:	e7e0      	b.n	800282c <UART_Receive_IT+0x26>
 800286a:	6852      	ldr	r2, [r2, #4]
 800286c:	1c59      	adds	r1, r3, #1
 800286e:	6281      	str	r1, [r0, #40]	; 0x28
 8002870:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002874:	e7f7      	b.n	8002866 <UART_Receive_IT+0x60>
    return HAL_BUSY;
 8002876:	2002      	movs	r0, #2
 8002878:	bd10      	pop	{r4, pc}

0800287a <HAL_UART_ErrorCallback>:
 800287a:	4770      	bx	lr

0800287c <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800287c:	6803      	ldr	r3, [r0, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002880:	68d9      	ldr	r1, [r3, #12]
{
 8002882:	b570      	push	{r4, r5, r6, lr}
  if(errorflags == RESET)
 8002884:	0716      	lsls	r6, r2, #28
{
 8002886:	4604      	mov	r4, r0
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002888:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 800288a:	d107      	bne.n	800289c <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800288c:	0696      	lsls	r6, r2, #26
 800288e:	d55a      	bpl.n	8002946 <HAL_UART_IRQHandler+0xca>
 8002890:	068d      	lsls	r5, r1, #26
 8002892:	d558      	bpl.n	8002946 <HAL_UART_IRQHandler+0xca>
}
 8002894:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002898:	f7ff bfb5 	b.w	8002806 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800289c:	f015 0501 	ands.w	r5, r5, #1
 80028a0:	d102      	bne.n	80028a8 <HAL_UART_IRQHandler+0x2c>
 80028a2:	f411 7f90 	tst.w	r1, #288	; 0x120
 80028a6:	d04e      	beq.n	8002946 <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80028a8:	07d3      	lsls	r3, r2, #31
 80028aa:	d505      	bpl.n	80028b8 <HAL_UART_IRQHandler+0x3c>
 80028ac:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028ae:	bf42      	ittt	mi
 80028b0:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80028b2:	f043 0301 	orrmi.w	r3, r3, #1
 80028b6:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028b8:	0750      	lsls	r0, r2, #29
 80028ba:	d504      	bpl.n	80028c6 <HAL_UART_IRQHandler+0x4a>
 80028bc:	b11d      	cbz	r5, 80028c6 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80028c0:	f043 0302 	orr.w	r3, r3, #2
 80028c4:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028c6:	0793      	lsls	r3, r2, #30
 80028c8:	d504      	bpl.n	80028d4 <HAL_UART_IRQHandler+0x58>
 80028ca:	b11d      	cbz	r5, 80028d4 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80028ce:	f043 0304 	orr.w	r3, r3, #4
 80028d2:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028d4:	0716      	lsls	r6, r2, #28
 80028d6:	d504      	bpl.n	80028e2 <HAL_UART_IRQHandler+0x66>
 80028d8:	b11d      	cbz	r5, 80028e2 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80028dc:	f043 0308 	orr.w	r3, r3, #8
 80028e0:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d066      	beq.n	80029b6 <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028e8:	0695      	lsls	r5, r2, #26
 80028ea:	d504      	bpl.n	80028f6 <HAL_UART_IRQHandler+0x7a>
 80028ec:	0688      	lsls	r0, r1, #26
 80028ee:	d502      	bpl.n	80028f6 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 80028f0:	4620      	mov	r0, r4
 80028f2:	f7ff ff88 	bl	8002806 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80028f6:	6823      	ldr	r3, [r4, #0]
 80028f8:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80028fa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80028fc:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 80028fe:	4620      	mov	r0, r4
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002900:	d402      	bmi.n	8002908 <HAL_UART_IRQHandler+0x8c>
 8002902:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002906:	d01a      	beq.n	800293e <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8002908:	f7ff fe02 	bl	8002510 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800290c:	6823      	ldr	r3, [r4, #0]
 800290e:	695a      	ldr	r2, [r3, #20]
 8002910:	0652      	lsls	r2, r2, #25
 8002912:	d510      	bpl.n	8002936 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002914:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8002916:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002918:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800291c:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 800291e:	b150      	cbz	r0, 8002936 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002920:	4b25      	ldr	r3, [pc, #148]	; (80029b8 <HAL_UART_IRQHandler+0x13c>)
 8002922:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002924:	f7fe fb57 	bl	8000fd6 <HAL_DMA_Abort_IT>
 8002928:	2800      	cmp	r0, #0
 800292a:	d044      	beq.n	80029b6 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800292c:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800292e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002932:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002934:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002936:	4620      	mov	r0, r4
 8002938:	f7ff ff9f 	bl	800287a <HAL_UART_ErrorCallback>
 800293c:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800293e:	f7ff ff9c 	bl	800287a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002942:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002944:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002946:	0616      	lsls	r6, r2, #24
 8002948:	d527      	bpl.n	800299a <HAL_UART_IRQHandler+0x11e>
 800294a:	060d      	lsls	r5, r1, #24
 800294c:	d525      	bpl.n	800299a <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800294e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002952:	2a21      	cmp	r2, #33	; 0x21
 8002954:	d12f      	bne.n	80029b6 <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002956:	68a2      	ldr	r2, [r4, #8]
 8002958:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800295c:	6a22      	ldr	r2, [r4, #32]
 800295e:	d117      	bne.n	8002990 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002960:	8811      	ldrh	r1, [r2, #0]
 8002962:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002966:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002968:	6921      	ldr	r1, [r4, #16]
 800296a:	b979      	cbnz	r1, 800298c <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 800296c:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 800296e:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8002970:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002972:	3a01      	subs	r2, #1
 8002974:	b292      	uxth	r2, r2
 8002976:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002978:	b9ea      	cbnz	r2, 80029b6 <HAL_UART_IRQHandler+0x13a>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800297a:	68da      	ldr	r2, [r3, #12]
 800297c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002980:	60da      	str	r2, [r3, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002982:	68da      	ldr	r2, [r3, #12]
 8002984:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002988:	60da      	str	r2, [r3, #12]
 800298a:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 800298c:	3201      	adds	r2, #1
 800298e:	e7ee      	b.n	800296e <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002990:	1c51      	adds	r1, r2, #1
 8002992:	6221      	str	r1, [r4, #32]
 8002994:	7812      	ldrb	r2, [r2, #0]
 8002996:	605a      	str	r2, [r3, #4]
 8002998:	e7ea      	b.n	8002970 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800299a:	0650      	lsls	r0, r2, #25
 800299c:	d50b      	bpl.n	80029b6 <HAL_UART_IRQHandler+0x13a>
 800299e:	064a      	lsls	r2, r1, #25
 80029a0:	d509      	bpl.n	80029b6 <HAL_UART_IRQHandler+0x13a>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80029a2:	68da      	ldr	r2, [r3, #12]
 80029a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029a8:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80029aa:	2320      	movs	r3, #32
 80029ac:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80029b0:	4620      	mov	r0, r4
 80029b2:	f7ff ff26 	bl	8002802 <HAL_UART_TxCpltCallback>
 80029b6:	bd70      	pop	{r4, r5, r6, pc}
 80029b8:	080029bd 	.word	0x080029bd

080029bc <UART_DMAAbortOnError>:
{
 80029bc:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029be:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 80029c4:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80029c6:	f7ff ff58 	bl	800287a <HAL_UART_ErrorCallback>
 80029ca:	bd08      	pop	{r3, pc}

080029cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80029cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029d0:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80029d2:	4b2e      	ldr	r3, [pc, #184]	; (8002a8c <MX_GPIO_Init+0xc0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_Azul_GPIO_Port, Led_Azul_Pin, GPIO_PIN_SET);
 80029d4:	4f2e      	ldr	r7, [pc, #184]	; (8002a90 <MX_GPIO_Init+0xc4>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN1_Pin|IN2_Pin, GPIO_PIN_RESET);
 80029d6:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8002a98 <MX_GPIO_Init+0xcc>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IN3_Pin|IN4_Pin, GPIO_PIN_RESET);
 80029da:	4e2e      	ldr	r6, [pc, #184]	; (8002a94 <MX_GPIO_Init+0xc8>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80029dc:	2400      	movs	r4, #0
 80029de:	9401      	str	r4, [sp, #4]
 80029e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029e2:	f042 0210 	orr.w	r2, r2, #16
 80029e6:	631a      	str	r2, [r3, #48]	; 0x30
 80029e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029ea:	f002 0210 	and.w	r2, r2, #16
 80029ee:	9201      	str	r2, [sp, #4]
 80029f0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f2:	9402      	str	r4, [sp, #8]
 80029f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029f6:	f042 0201 	orr.w	r2, r2, #1
 80029fa:	631a      	str	r2, [r3, #48]	; 0x30
 80029fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029fe:	f002 0201 	and.w	r2, r2, #1
 8002a02:	9202      	str	r2, [sp, #8]
 8002a04:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a06:	9403      	str	r4, [sp, #12]
 8002a08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a0a:	f042 0204 	orr.w	r2, r2, #4
 8002a0e:	631a      	str	r2, [r3, #48]	; 0x30
 8002a10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a12:	f002 0204 	and.w	r2, r2, #4
 8002a16:	9203      	str	r2, [sp, #12]
 8002a18:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a1a:	9404      	str	r4, [sp, #16]
 8002a1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a1e:	f042 0202 	orr.w	r2, r2, #2
 8002a22:	631a      	str	r2, [r3, #48]	; 0x30
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(Led_Azul_GPIO_Port, Led_Azul_Pin, GPIO_PIN_SET);
 8002a2c:	4638      	mov	r0, r7
 8002a2e:	2201      	movs	r2, #1
 8002a30:	2104      	movs	r1, #4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a32:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(Led_Azul_GPIO_Port, Led_Azul_Pin, GPIO_PIN_SET);
 8002a34:	f7fe fbc2 	bl	80011bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, IN1_Pin|IN2_Pin, GPIO_PIN_RESET);
 8002a38:	4622      	mov	r2, r4
 8002a3a:	4640      	mov	r0, r8
 8002a3c:	2103      	movs	r1, #3
 8002a3e:	f7fe fbbd 	bl	80011bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, IN3_Pin|IN4_Pin, GPIO_PIN_RESET);
 8002a42:	4622      	mov	r2, r4
 8002a44:	4630      	mov	r0, r6
 8002a46:	2130      	movs	r1, #48	; 0x30
 8002a48:	f7fe fbb8 	bl	80011bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Led_Azul_Pin;
 8002a4c:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a4e:	2503      	movs	r5, #3
  GPIO_InitStruct.Pin = Led_Azul_Pin;
 8002a50:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(Led_Azul_GPIO_Port, &GPIO_InitStruct);
 8002a52:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002a54:	2311      	movs	r3, #17
  HAL_GPIO_Init(Led_Azul_GPIO_Port, &GPIO_InitStruct);
 8002a56:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002a58:	9306      	str	r3, [sp, #24]

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a5a:	2701      	movs	r7, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a5e:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(Led_Azul_GPIO_Port, &GPIO_InitStruct);
 8002a60:	f7fe facc 	bl	8000ffc <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a64:	a905      	add	r1, sp, #20
 8002a66:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin;
 8002a68:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a6a:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a6e:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a70:	f7fe fac4 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = IN3_Pin|IN4_Pin;
 8002a74:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a76:	a905      	add	r1, sp, #20
 8002a78:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = IN3_Pin|IN4_Pin;
 8002a7a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a7c:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a80:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a82:	f7fe fabb 	bl	8000ffc <HAL_GPIO_Init>

}
 8002a86:	b00a      	add	sp, #40	; 0x28
 8002a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	40021000 	.word	0x40021000
 8002a94:	40020800 	.word	0x40020800
 8002a98:	40020000 	.word	0x40020000

08002a9c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002a9c:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8002a9e:	480d      	ldr	r0, [pc, #52]	; (8002ad4 <MX_I2C1_Init+0x38>)
  hi2c1.Init.ClockSpeed = 400000;
 8002aa0:	4b0d      	ldr	r3, [pc, #52]	; (8002ad8 <MX_I2C1_Init+0x3c>)
 8002aa2:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8002ae0 <MX_I2C1_Init+0x44>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002aa6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 400000;
 8002aaa:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002ab2:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ab4:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ab6:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002ab8:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002aba:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002abc:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002abe:	f7fe fc7f 	bl	80013c0 <HAL_I2C_Init>
 8002ac2:	b128      	cbz	r0, 8002ad0 <MX_I2C1_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002ac4:	2142      	movs	r1, #66	; 0x42
 8002ac6:	4805      	ldr	r0, [pc, #20]	; (8002adc <MX_I2C1_Init+0x40>)
  }

}
 8002ac8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8002acc:	f000 b8e8 	b.w	8002ca0 <_Error_Handler>
 8002ad0:	bd08      	pop	{r3, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20000060 	.word	0x20000060
 8002ad8:	40005400 	.word	0x40005400
 8002adc:	080034fc 	.word	0x080034fc
 8002ae0:	00061a80 	.word	0x00061a80

08002ae4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002ae4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 8002ae6:	6802      	ldr	r2, [r0, #0]
 8002ae8:	4b10      	ldr	r3, [pc, #64]	; (8002b2c <HAL_I2C_MspInit+0x48>)
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d11a      	bne.n	8002b24 <HAL_I2C_MspInit+0x40>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002aee:	23c0      	movs	r3, #192	; 0xc0
 8002af0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002af2:	2312      	movs	r3, #18
 8002af4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002af6:	2301      	movs	r3, #1
 8002af8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002afa:	2303      	movs	r3, #3
 8002afc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002afe:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b00:	eb0d 0103 	add.w	r1, sp, r3
 8002b04:	480a      	ldr	r0, [pc, #40]	; (8002b30 <HAL_I2C_MspInit+0x4c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b06:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b08:	f7fe fa78 	bl	8000ffc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	4b08      	ldr	r3, [pc, #32]	; (8002b34 <HAL_I2C_MspInit+0x50>)
 8002b12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b14:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002b18:	641a      	str	r2, [r3, #64]	; 0x40
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002b24:	b007      	add	sp, #28
 8002b26:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b2a:	bf00      	nop
 8002b2c:	40005400 	.word	0x40005400
 8002b30:	40020400 	.word	0x40020400
 8002b34:	40023800 	.word	0x40023800

08002b38 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8002b38:	b510      	push	{r4, lr}
 8002b3a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	4a21      	ldr	r2, [pc, #132]	; (8002bc4 <SystemClock_Config+0x8c>)
 8002b40:	9301      	str	r3, [sp, #4]
 8002b42:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002b44:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002b48:	6411      	str	r1, [r2, #64]	; 0x40
 8002b4a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b4c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002b50:	9201      	str	r2, [sp, #4]
 8002b52:	9a01      	ldr	r2, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b54:	4a1c      	ldr	r2, [pc, #112]	; (8002bc8 <SystemClock_Config+0x90>)
 8002b56:	9302      	str	r3, [sp, #8]
 8002b58:	6811      	ldr	r1, [r2, #0]
 8002b5a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002b5e:	6011      	str	r1, [r2, #0]
 8002b60:	6812      	ldr	r2, [r2, #0]
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002b62:	930e      	str	r3, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b64:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002b68:	9202      	str	r2, [sp, #8]
 8002b6a:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b70:	2201      	movs	r2, #1
 8002b72:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b74:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002b76:	2210      	movs	r2, #16
 8002b78:	920c      	str	r2, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b7a:	f7fe fedb 	bl	8001934 <HAL_RCC_OscConfig>
 8002b7e:	4601      	mov	r1, r0
 8002b80:	b100      	cbz	r0, 8002b84 <SystemClock_Config+0x4c>
 8002b82:	e7fe      	b.n	8002b82 <SystemClock_Config+0x4a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b84:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002b86:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b88:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b8a:	9006      	str	r0, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b8c:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002b8e:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b90:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002b92:	f7ff f873 	bl	8001c7c <HAL_RCC_ClockConfig>
 8002b96:	4604      	mov	r4, r0
 8002b98:	b100      	cbz	r0, 8002b9c <SystemClock_Config+0x64>
 8002b9a:	e7fe      	b.n	8002b9a <SystemClock_Config+0x62>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002b9c:	f7ff f908 	bl	8001db0 <HAL_RCC_GetHCLKFreq>
 8002ba0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ba4:	fbb0 f0f3 	udiv	r0, r0, r3
 8002ba8:	f7fe f9ee 	bl	8000f88 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002bac:	2004      	movs	r0, #4
 8002bae:	f7fe fa01 	bl	8000fb4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002bb2:	4622      	mov	r2, r4
 8002bb4:	4621      	mov	r1, r4
 8002bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8002bba:	f7fe f9a5 	bl	8000f08 <HAL_NVIC_SetPriority>
}
 8002bbe:	b014      	add	sp, #80	; 0x50
 8002bc0:	bd10      	pop	{r4, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	40007000 	.word	0x40007000

08002bcc <configurarMPU6050>:
  HAL_NVIC_SetPriority(TIM3_IRQn, 1, 1);
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
}

/* USER CODE BEGIN 4 */
void configurarMPU6050(){
 8002bcc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	   DatoEnviado[0]=0x6B;
 8002bd0:	4c13      	ldr	r4, [pc, #76]	; (8002c20 <configurarMPU6050+0x54>)
	   DatoEnviado[1]=0x00;
	   HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)MPU6050_AD,DatoEnviado,2,100);
 8002bd2:	4d14      	ldr	r5, [pc, #80]	; (8002c24 <configurarMPU6050+0x58>)
	   DatoEnviado[0]=0x6B;
 8002bd4:	236b      	movs	r3, #107	; 0x6b
	   HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)MPU6050_AD,DatoEnviado,2,100);
 8002bd6:	2664      	movs	r6, #100	; 0x64
	   DatoEnviado[0]=0x6B;
 8002bd8:	7023      	strb	r3, [r4, #0]
	   DatoEnviado[1]=0x00;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	7063      	strb	r3, [r4, #1]
	   HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)MPU6050_AD,DatoEnviado,2,100);
 8002bde:	4622      	mov	r2, r4
 8002be0:	9600      	str	r6, [sp, #0]
 8002be2:	2302      	movs	r3, #2
 8002be4:	21d0      	movs	r1, #208	; 0xd0
 8002be6:	4628      	mov	r0, r5
 8002be8:	f7fe fc58 	bl	800149c <HAL_I2C_Master_Transmit>
	   DatoEnviado[0]=0x19;
 8002bec:	f04f 0819 	mov.w	r8, #25
	   DatoEnviado[1]=0x07;
 8002bf0:	2707      	movs	r7, #7
	   HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)MPU6050_AD,DatoEnviado,2,100);
 8002bf2:	4622      	mov	r2, r4
 8002bf4:	9600      	str	r6, [sp, #0]
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	21d0      	movs	r1, #208	; 0xd0
 8002bfa:	4628      	mov	r0, r5
	   DatoEnviado[0]=0x19;
 8002bfc:	f884 8000 	strb.w	r8, [r4]
	   DatoEnviado[1]=0x07;
 8002c00:	7067      	strb	r7, [r4, #1]
	   HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)MPU6050_AD,DatoEnviado,2,100);
 8002c02:	f7fe fc4b 	bl	800149c <HAL_I2C_Master_Transmit>
	   DatoEnviado[0]=0x19;
	   DatoEnviado[1]=0x07;
	   HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)MPU6050_AD,DatoEnviado,2,100);
 8002c06:	9600      	str	r6, [sp, #0]
 8002c08:	2302      	movs	r3, #2
 8002c0a:	4622      	mov	r2, r4
 8002c0c:	21d0      	movs	r1, #208	; 0xd0
 8002c0e:	4628      	mov	r0, r5
	   DatoEnviado[0]=0x19;
 8002c10:	f884 8000 	strb.w	r8, [r4]
	   DatoEnviado[1]=0x07;
 8002c14:	7067      	strb	r7, [r4, #1]
	   HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)MPU6050_AD,DatoEnviado,2,100);
 8002c16:	f7fe fc41 	bl	800149c <HAL_I2C_Master_Transmit>
}
 8002c1a:	b002      	add	sp, #8
 8002c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c20:	200000c3 	.word	0x200000c3
 8002c24:	20000060 	.word	0x20000060

08002c28 <main>:
{
 8002c28:	b508      	push	{r3, lr}
  HAL_Init();
 8002c2a:	f7fe f933 	bl	8000e94 <HAL_Init>
  SystemClock_Config();
 8002c2e:	f7ff ff83 	bl	8002b38 <SystemClock_Config>
  MX_GPIO_Init();
 8002c32:	f7ff fecb 	bl	80029cc <MX_GPIO_Init>
  MX_I2C1_Init();
 8002c36:	f7ff ff31 	bl	8002a9c <MX_I2C1_Init>
  MX_TIM1_Init();
 8002c3a:	f000 fb0b 	bl	8003254 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002c3e:	f000 fa91 	bl	8003164 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8002c42:	f000 fb97 	bl	8003374 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8002c46:	f000 fb75 	bl	8003334 <MX_USART2_UART_Init>
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	4611      	mov	r1, r2
 8002c4e:	2026      	movs	r0, #38	; 0x26
 8002c50:	f7fe f95a 	bl	8000f08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c54:	2026      	movs	r0, #38	; 0x26
 8002c56:	f7fe f98b 	bl	8000f70 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM3_IRQn, 1, 1);
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	4611      	mov	r1, r2
 8002c5e:	201d      	movs	r0, #29
 8002c60:	f7fe f952 	bl	8000f08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002c64:	201d      	movs	r0, #29
 8002c66:	f7fe f983 	bl	8000f70 <HAL_NVIC_EnableIRQ>
  configurarMPU6050();
 8002c6a:	f7ff ffaf 	bl	8002bcc <configurarMPU6050>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8002c6e:	2100      	movs	r1, #0
 8002c70:	4808      	ldr	r0, [pc, #32]	; (8002c94 <main+0x6c>)
 8002c72:	f7ff fbe9 	bl	8002448 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8002c76:	2104      	movs	r1, #4
 8002c78:	4806      	ldr	r0, [pc, #24]	; (8002c94 <main+0x6c>)
 8002c7a:	f7ff fbe5 	bl	8002448 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8002c7e:	4806      	ldr	r0, [pc, #24]	; (8002c98 <main+0x70>)
 8002c80:	f7ff f940 	bl	8001f04 <HAL_TIM_Base_Start_IT>
  __HAL_UART_ENABLE_IT(&huart2,UART_IT_RXNE);
 8002c84:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <main+0x74>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	68d3      	ldr	r3, [r2, #12]
 8002c8a:	f043 0320 	orr.w	r3, r3, #32
 8002c8e:	60d3      	str	r3, [r2, #12]
 8002c90:	e7fe      	b.n	8002c90 <main+0x68>
 8002c92:	bf00      	nop
 8002c94:	2000010c 	.word	0x2000010c
 8002c98:	200000d0 	.word	0x200000d0
 8002c9c:	20000188 	.word	0x20000188

08002ca0 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8002ca0:	e7fe      	b.n	8002ca0 <_Error_Handler>

08002ca2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ca2:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002ca4:	2004      	movs	r0, #4
 8002ca6:	f7fe f91d 	bl	8000ee4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002caa:	2200      	movs	r2, #0
 8002cac:	4611      	mov	r1, r2
 8002cae:	f06f 000b 	mvn.w	r0, #11
 8002cb2:	f7fe f929 	bl	8000f08 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	4611      	mov	r1, r2
 8002cba:	f06f 000a 	mvn.w	r0, #10
 8002cbe:	f7fe f923 	bl	8000f08 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	f06f 0009 	mvn.w	r0, #9
 8002cca:	f7fe f91d 	bl	8000f08 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002cce:	2200      	movs	r2, #0
 8002cd0:	4611      	mov	r1, r2
 8002cd2:	f06f 0004 	mvn.w	r0, #4
 8002cd6:	f7fe f917 	bl	8000f08 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002cda:	2200      	movs	r2, #0
 8002cdc:	4611      	mov	r1, r2
 8002cde:	f06f 0003 	mvn.w	r0, #3
 8002ce2:	f7fe f911 	bl	8000f08 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	4611      	mov	r1, r2
 8002cea:	f06f 0001 	mvn.w	r0, #1
 8002cee:	f7fe f90b 	bl	8000f08 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	4611      	mov	r1, r2
 8002cf6:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002cfe:	f7fe b903 	b.w	8000f08 <HAL_NVIC_SetPriority>

08002d02 <NMI_Handler>:
 8002d02:	4770      	bx	lr

08002d04 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002d04:	e7fe      	b.n	8002d04 <HardFault_Handler>

08002d06 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002d06:	e7fe      	b.n	8002d06 <MemManage_Handler>

08002d08 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002d08:	e7fe      	b.n	8002d08 <BusFault_Handler>

08002d0a <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002d0a:	e7fe      	b.n	8002d0a <UsageFault_Handler>

08002d0c <SVC_Handler>:
 8002d0c:	4770      	bx	lr

08002d0e <DebugMon_Handler>:
 8002d0e:	4770      	bx	lr

08002d10 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002d10:	4770      	bx	lr

08002d12 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002d12:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d14:	f7fe f8d8 	bl	8000ec8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002d1c:	f7fe b957 	b.w	8000fce <HAL_SYSTICK_IRQHandler>

08002d20 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 8002d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */
HAL_UART_Receive_IT(&huart2,DatoSerial,1);
 8002d24:	4c5b      	ldr	r4, [pc, #364]	; (8002e94 <USART2_IRQHandler+0x174>)
  HAL_UART_IRQHandler(&huart2);
 8002d26:	485c      	ldr	r0, [pc, #368]	; (8002e98 <USART2_IRQHandler+0x178>)
 8002d28:	f7ff fda8 	bl	800287c <HAL_UART_IRQHandler>
HAL_UART_Receive_IT(&huart2,DatoSerial,1);
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	4621      	mov	r1, r4
 8002d30:	4859      	ldr	r0, [pc, #356]	; (8002e98 <USART2_IRQHandler+0x178>)
 8002d32:	f7ff fd43 	bl	80027bc <HAL_UART_Receive_IT>
if(DatoSerial[0]=='a'){
 8002d36:	7823      	ldrb	r3, [r4, #0]
 8002d38:	2b61      	cmp	r3, #97	; 0x61
 8002d3a:	d127      	bne.n	8002d8c <USART2_IRQHandler+0x6c>
 8002d3c:	4c57      	ldr	r4, [pc, #348]	; (8002e9c <USART2_IRQHandler+0x17c>)
for(int i=0;i<=110000;i++){

	 	 	 __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,600);
	 	 HAL_GPIO_WritePin(GPIOA,IN1_Pin,GPIO_PIN_RESET);	///MANDAR UNO AL PIN IN1 DEL PUENTE H
 8002d3e:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8002eac <USART2_IRQHandler+0x18c>
	 	 HAL_GPIO_WritePin(GPIOA,IN2_Pin,GPIO_PIN_SET);
	 	 __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,600);
	 	 HAL_GPIO_WritePin(GPIOC,IN3_Pin,GPIO_PIN_RESET);	///MANDAR UNO AL PIN IN1 DEL PUENTE H
 8002d42:	4d57      	ldr	r5, [pc, #348]	; (8002ea0 <USART2_IRQHandler+0x180>)
	 	 	 __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,600);
 8002d44:	4f57      	ldr	r7, [pc, #348]	; (8002ea4 <USART2_IRQHandler+0x184>)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	f44f 7616 	mov.w	r6, #600	; 0x258
 8002d4c:	635e      	str	r6, [r3, #52]	; 0x34
	 	 HAL_GPIO_WritePin(GPIOA,IN1_Pin,GPIO_PIN_RESET);	///MANDAR UNO AL PIN IN1 DEL PUENTE H
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2101      	movs	r1, #1
 8002d52:	4640      	mov	r0, r8
 8002d54:	f7fe fa32 	bl	80011bc <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(GPIOA,IN2_Pin,GPIO_PIN_SET);
 8002d58:	2201      	movs	r2, #1
 8002d5a:	2102      	movs	r1, #2
 8002d5c:	4640      	mov	r0, r8
 8002d5e:	f7fe fa2d 	bl	80011bc <HAL_GPIO_WritePin>
	 	 __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,600);
 8002d62:	683b      	ldr	r3, [r7, #0]
	 	 HAL_GPIO_WritePin(GPIOC,IN3_Pin,GPIO_PIN_RESET);	///MANDAR UNO AL PIN IN1 DEL PUENTE H
 8002d64:	2200      	movs	r2, #0
	 	 __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,600);
 8002d66:	639e      	str	r6, [r3, #56]	; 0x38
	 	 HAL_GPIO_WritePin(GPIOC,IN3_Pin,GPIO_PIN_RESET);	///MANDAR UNO AL PIN IN1 DEL PUENTE H
 8002d68:	2110      	movs	r1, #16
 8002d6a:	4628      	mov	r0, r5
 8002d6c:	f7fe fa26 	bl	80011bc <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(GPIOC,IN4_Pin,GPIO_PIN_SET);
 8002d70:	2201      	movs	r2, #1
 8002d72:	2120      	movs	r1, #32
 8002d74:	4628      	mov	r0, r5
 8002d76:	f7fe fa21 	bl	80011bc <HAL_GPIO_WritePin>
	 	HAL_GPIO_WritePin(Led_Azul_GPIO_Port,Led_Azul_Pin,GPIO_PIN_RESET);
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	2104      	movs	r1, #4
 8002d7e:	484a      	ldr	r0, [pc, #296]	; (8002ea8 <USART2_IRQHandler+0x188>)
 8002d80:	f7fe fa1c 	bl	80011bc <HAL_GPIO_WritePin>
for(int i=0;i<=110000;i++){
 8002d84:	3c01      	subs	r4, #1
 8002d86:	d1dd      	bne.n	8002d44 <USART2_IRQHandler+0x24>
 8002d88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}




}
else if(DatoSerial[0]=='b'){
 8002d8c:	2b62      	cmp	r3, #98	; 0x62
 8002d8e:	d127      	bne.n	8002de0 <USART2_IRQHandler+0xc0>
 8002d90:	4c42      	ldr	r4, [pc, #264]	; (8002e9c <USART2_IRQHandler+0x17c>)
	for(int i=0;i<=110000;i++){
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,600);
	 	HAL_GPIO_WritePin(GPIOA,IN1_Pin,GPIO_PIN_SET);	///MANDAR CERO AL PIN IN1 DEL PUENTE H
 8002d92:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8002eac <USART2_IRQHandler+0x18c>
	 	HAL_GPIO_WritePin(GPIOA,IN2_Pin,GPIO_PIN_RESET);
	    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,600);
	    HAL_GPIO_WritePin(GPIOC,IN3_Pin,GPIO_PIN_SET);	///MANDAR CERO AL PIN IN1 DEL PUENTE H
 8002d96:	4d42      	ldr	r5, [pc, #264]	; (8002ea0 <USART2_IRQHandler+0x180>)
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,600);
 8002d98:	4f42      	ldr	r7, [pc, #264]	; (8002ea4 <USART2_IRQHandler+0x184>)
 8002d9a:	683b      	ldr	r3, [r7, #0]
	 	HAL_GPIO_WritePin(GPIOA,IN1_Pin,GPIO_PIN_SET);	///MANDAR CERO AL PIN IN1 DEL PUENTE H
 8002d9c:	2201      	movs	r2, #1
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,600);
 8002d9e:	f44f 7616 	mov.w	r6, #600	; 0x258
 8002da2:	635e      	str	r6, [r3, #52]	; 0x34
	 	HAL_GPIO_WritePin(GPIOA,IN1_Pin,GPIO_PIN_SET);	///MANDAR CERO AL PIN IN1 DEL PUENTE H
 8002da4:	4611      	mov	r1, r2
 8002da6:	4640      	mov	r0, r8
 8002da8:	f7fe fa08 	bl	80011bc <HAL_GPIO_WritePin>
	 	HAL_GPIO_WritePin(GPIOA,IN2_Pin,GPIO_PIN_RESET);
 8002dac:	2200      	movs	r2, #0
 8002dae:	2102      	movs	r1, #2
 8002db0:	4640      	mov	r0, r8
 8002db2:	f7fe fa03 	bl	80011bc <HAL_GPIO_WritePin>
	    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,600);
 8002db6:	683b      	ldr	r3, [r7, #0]
	    HAL_GPIO_WritePin(GPIOC,IN3_Pin,GPIO_PIN_SET);	///MANDAR CERO AL PIN IN1 DEL PUENTE H
 8002db8:	2201      	movs	r2, #1
	    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,600);
 8002dba:	639e      	str	r6, [r3, #56]	; 0x38
	    HAL_GPIO_WritePin(GPIOC,IN3_Pin,GPIO_PIN_SET);	///MANDAR CERO AL PIN IN1 DEL PUENTE H
 8002dbc:	2110      	movs	r1, #16
 8002dbe:	4628      	mov	r0, r5
 8002dc0:	f7fe f9fc 	bl	80011bc <HAL_GPIO_WritePin>
	 	HAL_GPIO_WritePin(GPIOC,IN4_Pin,GPIO_PIN_RESET);
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	2120      	movs	r1, #32
 8002dc8:	4628      	mov	r0, r5
 8002dca:	f7fe f9f7 	bl	80011bc <HAL_GPIO_WritePin>
	 	HAL_GPIO_WritePin(Led_Azul_GPIO_Port,Led_Azul_Pin,GPIO_PIN_RESET);
 8002dce:	2200      	movs	r2, #0
 8002dd0:	2104      	movs	r1, #4
 8002dd2:	4835      	ldr	r0, [pc, #212]	; (8002ea8 <USART2_IRQHandler+0x188>)
 8002dd4:	f7fe f9f2 	bl	80011bc <HAL_GPIO_WritePin>
	for(int i=0;i<=110000;i++){
 8002dd8:	3c01      	subs	r4, #1
 8002dda:	d1dd      	bne.n	8002d98 <USART2_IRQHandler+0x78>
 8002ddc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}


}

else if(DatoSerial[0]=='d'){
 8002de0:	2b64      	cmp	r3, #100	; 0x64
 8002de2:	d129      	bne.n	8002e38 <USART2_IRQHandler+0x118>
 8002de4:	4c2d      	ldr	r4, [pc, #180]	; (8002e9c <USART2_IRQHandler+0x17c>)
	for(int i=0;i<=110000;i++){
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,600);
	 	HAL_GPIO_WritePin(GPIOA,IN1_Pin,GPIO_PIN_SET);	///MANDAR CERO AL PIN IN1 DEL PUENTE H
 8002de6:	4f31      	ldr	r7, [pc, #196]	; (8002eac <USART2_IRQHandler+0x18c>)
	 	HAL_GPIO_WritePin(GPIOA,IN2_Pin,GPIO_PIN_RESET);
	    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
	    HAL_GPIO_WritePin(GPIOC,IN3_Pin,GPIO_PIN_SET);	///MANDAR CERO AL PIN IN1 DEL PUENTE H
 8002de8:	4e2d      	ldr	r6, [pc, #180]	; (8002ea0 <USART2_IRQHandler+0x180>)
	 	HAL_GPIO_WritePin(GPIOC,IN4_Pin,GPIO_PIN_RESET);
	 	HAL_GPIO_WritePin(Led_Azul_GPIO_Port,Led_Azul_Pin,GPIO_PIN_RESET);
 8002dea:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8002ea8 <USART2_IRQHandler+0x188>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,600);
 8002dee:	4d2d      	ldr	r5, [pc, #180]	; (8002ea4 <USART2_IRQHandler+0x184>)
 8002df0:	682b      	ldr	r3, [r5, #0]
 8002df2:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002df6:	635a      	str	r2, [r3, #52]	; 0x34
	 	HAL_GPIO_WritePin(GPIOA,IN1_Pin,GPIO_PIN_SET);	///MANDAR CERO AL PIN IN1 DEL PUENTE H
 8002df8:	2201      	movs	r2, #1
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	4638      	mov	r0, r7
 8002dfe:	f7fe f9dd 	bl	80011bc <HAL_GPIO_WritePin>
	 	HAL_GPIO_WritePin(GPIOA,IN2_Pin,GPIO_PIN_RESET);
 8002e02:	2200      	movs	r2, #0
 8002e04:	2102      	movs	r1, #2
 8002e06:	4638      	mov	r0, r7
 8002e08:	f7fe f9d8 	bl	80011bc <HAL_GPIO_WritePin>
	    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002e0c:	682b      	ldr	r3, [r5, #0]
 8002e0e:	2500      	movs	r5, #0
 8002e10:	639d      	str	r5, [r3, #56]	; 0x38
	    HAL_GPIO_WritePin(GPIOC,IN3_Pin,GPIO_PIN_SET);	///MANDAR CERO AL PIN IN1 DEL PUENTE H
 8002e12:	2201      	movs	r2, #1
 8002e14:	2110      	movs	r1, #16
 8002e16:	4630      	mov	r0, r6
 8002e18:	f7fe f9d0 	bl	80011bc <HAL_GPIO_WritePin>
	 	HAL_GPIO_WritePin(GPIOC,IN4_Pin,GPIO_PIN_RESET);
 8002e1c:	462a      	mov	r2, r5
 8002e1e:	2120      	movs	r1, #32
 8002e20:	4630      	mov	r0, r6
 8002e22:	f7fe f9cb 	bl	80011bc <HAL_GPIO_WritePin>
	 	HAL_GPIO_WritePin(Led_Azul_GPIO_Port,Led_Azul_Pin,GPIO_PIN_RESET);
 8002e26:	462a      	mov	r2, r5
 8002e28:	2104      	movs	r1, #4
 8002e2a:	4640      	mov	r0, r8
 8002e2c:	f7fe f9c6 	bl	80011bc <HAL_GPIO_WritePin>
	for(int i=0;i<=110000;i++){
 8002e30:	3c01      	subs	r4, #1
 8002e32:	d1dc      	bne.n	8002dee <USART2_IRQHandler+0xce>
 8002e34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}


}
else if(DatoSerial[0]=='e'){
 8002e38:	2b65      	cmp	r3, #101	; 0x65
 8002e3a:	d128      	bne.n	8002e8e <USART2_IRQHandler+0x16e>
 8002e3c:	4d17      	ldr	r5, [pc, #92]	; (8002e9c <USART2_IRQHandler+0x17c>)
	for(int i=0;i<=110000;i++){
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
	 	HAL_GPIO_WritePin(GPIOA,IN1_Pin,GPIO_PIN_SET);	///MANDAR CERO AL PIN IN1 DEL PUENTE H
 8002e3e:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8002eac <USART2_IRQHandler+0x18c>
	 	HAL_GPIO_WritePin(GPIOA,IN2_Pin,GPIO_PIN_RESET);
	    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,600);
	    HAL_GPIO_WritePin(GPIOC,IN3_Pin,GPIO_PIN_SET);	///MANDAR CERO AL PIN IN1 DEL PUENTE H
 8002e42:	4e17      	ldr	r6, [pc, #92]	; (8002ea0 <USART2_IRQHandler+0x180>)
	 	HAL_GPIO_WritePin(GPIOC,IN4_Pin,GPIO_PIN_RESET);
	 	HAL_GPIO_WritePin(Led_Azul_GPIO_Port,Led_Azul_Pin,GPIO_PIN_RESET);
 8002e44:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8002ea8 <USART2_IRQHandler+0x188>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002e48:	4f16      	ldr	r7, [pc, #88]	; (8002ea4 <USART2_IRQHandler+0x184>)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	2400      	movs	r4, #0
	 	HAL_GPIO_WritePin(GPIOA,IN1_Pin,GPIO_PIN_SET);	///MANDAR CERO AL PIN IN1 DEL PUENTE H
 8002e4e:	2201      	movs	r2, #1
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002e50:	635c      	str	r4, [r3, #52]	; 0x34
	 	HAL_GPIO_WritePin(GPIOA,IN1_Pin,GPIO_PIN_SET);	///MANDAR CERO AL PIN IN1 DEL PUENTE H
 8002e52:	4611      	mov	r1, r2
 8002e54:	4640      	mov	r0, r8
 8002e56:	f7fe f9b1 	bl	80011bc <HAL_GPIO_WritePin>
	 	HAL_GPIO_WritePin(GPIOA,IN2_Pin,GPIO_PIN_RESET);
 8002e5a:	4622      	mov	r2, r4
 8002e5c:	2102      	movs	r1, #2
 8002e5e:	4640      	mov	r0, r8
 8002e60:	f7fe f9ac 	bl	80011bc <HAL_GPIO_WritePin>
	    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,600);
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002e6a:	639a      	str	r2, [r3, #56]	; 0x38
	    HAL_GPIO_WritePin(GPIOC,IN3_Pin,GPIO_PIN_SET);	///MANDAR CERO AL PIN IN1 DEL PUENTE H
 8002e6c:	2110      	movs	r1, #16
 8002e6e:	2201      	movs	r2, #1
 8002e70:	4630      	mov	r0, r6
 8002e72:	f7fe f9a3 	bl	80011bc <HAL_GPIO_WritePin>
	 	HAL_GPIO_WritePin(GPIOC,IN4_Pin,GPIO_PIN_RESET);
 8002e76:	4622      	mov	r2, r4
 8002e78:	2120      	movs	r1, #32
 8002e7a:	4630      	mov	r0, r6
 8002e7c:	f7fe f99e 	bl	80011bc <HAL_GPIO_WritePin>
	 	HAL_GPIO_WritePin(Led_Azul_GPIO_Port,Led_Azul_Pin,GPIO_PIN_RESET);
 8002e80:	4622      	mov	r2, r4
 8002e82:	2104      	movs	r1, #4
 8002e84:	4648      	mov	r0, r9
 8002e86:	f7fe f999 	bl	80011bc <HAL_GPIO_WritePin>
	for(int i=0;i<=110000;i++){
 8002e8a:	3d01      	subs	r5, #1
 8002e8c:	d1dc      	bne.n	8002e48 <USART2_IRQHandler+0x128>
 8002e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e92:	bf00      	nop
 8002e94:	200000c5 	.word	0x200000c5
 8002e98:	20000188 	.word	0x20000188
 8002e9c:	0001adb1 	.word	0x0001adb1
 8002ea0:	40020800 	.word	0x40020800
 8002ea4:	2000010c 	.word	0x2000010c
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	40020000 	.word	0x40020000

08002eb0 <pedirDatosMPU>:
  /* USER CODE END USART2_IRQn 1 */
}

/* USER CODE BEGIN 1 */

float pedirDatosMPU(){
 8002eb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	  float AY;
	  DatoEnviado[0]=0x3B;
 8002eb2:	4a12      	ldr	r2, [pc, #72]	; (8002efc <pedirDatosMPU+0x4c>)
	  DatoEnviado[1]=0x00;
	  HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)MPU6050_AD,&DatoEnviado[0],1,100);
 8002eb4:	4d12      	ldr	r5, [pc, #72]	; (8002f00 <pedirDatosMPU+0x50>)
	  HAL_I2C_Master_Receive(&hi2c1,(uint16_t)MPU6050_AD,DatoRecibido,14,100);
 8002eb6:	4c13      	ldr	r4, [pc, #76]	; (8002f04 <pedirDatosMPU+0x54>)
	  DatoEnviado[0]=0x3B;
 8002eb8:	233b      	movs	r3, #59	; 0x3b
 8002eba:	7013      	strb	r3, [r2, #0]
	  HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)MPU6050_AD,&DatoEnviado[0],1,100);
 8002ebc:	2664      	movs	r6, #100	; 0x64
	  DatoEnviado[1]=0x00;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	7053      	strb	r3, [r2, #1]
	  HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)MPU6050_AD,&DatoEnviado[0],1,100);
 8002ec2:	21d0      	movs	r1, #208	; 0xd0
 8002ec4:	9600      	str	r6, [sp, #0]
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	4628      	mov	r0, r5
 8002eca:	f7fe fae7 	bl	800149c <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c1,(uint16_t)MPU6050_AD,DatoRecibido,14,100);
 8002ece:	4622      	mov	r2, r4
 8002ed0:	9600      	str	r6, [sp, #0]
 8002ed2:	230e      	movs	r3, #14
 8002ed4:	21d0      	movs	r1, #208	; 0xd0
 8002ed6:	4628      	mov	r0, r5
 8002ed8:	f7fe fbb6 	bl	8001648 <HAL_I2C_Master_Receive>
	  AY=(float)(((int16_t)(DatoRecibido[2]<<8|DatoRecibido[3]))/(float)1638);
 8002edc:	78a2      	ldrb	r2, [r4, #2]
 8002ede:	78e3      	ldrb	r3, [r4, #3]
	  return AY;
}
 8002ee0:	eddf 7a09 	vldr	s15, [pc, #36]	; 8002f08 <pedirDatosMPU+0x58>
	  AY=(float)(((int16_t)(DatoRecibido[2]<<8|DatoRecibido[3]))/(float)1638);
 8002ee4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002ee8:	b21b      	sxth	r3, r3
 8002eea:	ee00 3a10 	vmov	s0, r3
 8002eee:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
}
 8002ef2:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8002ef6:	b002      	add	sp, #8
 8002ef8:	bd70      	pop	{r4, r5, r6, pc}
 8002efa:	bf00      	nop
 8002efc:	200000c3 	.word	0x200000c3
 8002f00:	20000060 	.word	0x20000060
 8002f04:	200000b4 	.word	0x200000b4
 8002f08:	44ccc000 	.word	0x44ccc000
 8002f0c:	00000000 	.word	0x00000000

08002f10 <motores>:

void motores(double U){
 8002f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f12:	ec55 4b10 	vmov	r4, r5, d0
	if (U < -1500){
 8002f16:	a33c      	add	r3, pc, #240	; (adr r3, 8003008 <motores+0xf8>)
 8002f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f1c:	ee10 0a10 	vmov	r0, s0
 8002f20:	4629      	mov	r1, r5
 8002f22:	f7fd fd7b 	bl	8000a1c <__aeabi_dcmplt>
 8002f26:	2800      	cmp	r0, #0
 8002f28:	d162      	bne.n	8002ff0 <motores+0xe0>
		U=-1500;
	}
	if (U >1500){
 8002f2a:	a33e      	add	r3, pc, #248	; (adr r3, 8003024 <motores+0x114>)
 8002f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f30:	4620      	mov	r0, r4
 8002f32:	4629      	mov	r1, r5
 8002f34:	f7fd fd90 	bl	8000a58 <__aeabi_dcmpgt>
 8002f38:	b110      	cbz	r0, 8002f40 <motores+0x30>
			U=1500;
 8002f3a:	a53a      	add	r5, pc, #232	; (adr r5, 8003024 <motores+0x114>)
 8002f3c:	e9d5 4500 	ldrd	r4, r5, [r5]
			}

	atras=0;
 8002f40:	4e33      	ldr	r6, [pc, #204]	; (8003010 <motores+0x100>)
 8002f42:	4f34      	ldr	r7, [pc, #208]	; (8003014 <motores+0x104>)
 8002f44:	2300      	movs	r3, #0
 8002f46:	6033      	str	r3, [r6, #0]
	adelante=0;
	if (U>0){
 8002f48:	2200      	movs	r2, #0
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	4620      	mov	r0, r4
 8002f4e:	4629      	mov	r1, r5
 8002f50:	f7fd fd82 	bl	8000a58 <__aeabi_dcmpgt>
 8002f54:	2800      	cmp	r0, #0
 8002f56:	d14f      	bne.n	8002ff8 <motores+0xe8>
		adelante=U;       // PWM de los motores atras y adelante (las dos ruedas funcionan al tiempo)
 8002f58:	6038      	str	r0, [r7, #0]
		}
	if (U<0){
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	4620      	mov	r0, r4
 8002f60:	4629      	mov	r1, r5
 8002f62:	f7fd fd5b 	bl	8000a1c <__aeabi_dcmplt>
 8002f66:	b128      	cbz	r0, 8002f74 <motores+0x64>
		atras =fabs(U);
 8002f68:	4620      	mov	r0, r4
 8002f6a:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
 8002f6e:	f7fd fd7d 	bl	8000a6c <__aeabi_d2iz>
 8002f72:	6030      	str	r0, [r6, #0]
		}
	if (adelante != 0){
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	b1db      	cbz	r3, 8002fb0 <motores+0xa0>
	     if (atras == 0 ){
 8002f78:	6834      	ldr	r4, [r6, #0]
 8002f7a:	b9cc      	cbnz	r4, 8002fb0 <motores+0xa0>
	    	 __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,adelante);
 8002f7c:	4d26      	ldr	r5, [pc, #152]	; (8003018 <motores+0x108>)
		 	 HAL_GPIO_WritePin(GPIOA,IN1_Pin,GPIO_PIN_RESET);	///MANDAR UNO AL PIN IN1 DEL PUENTE H
 8002f7e:	4827      	ldr	r0, [pc, #156]	; (800301c <motores+0x10c>)
	    	 __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,adelante);
 8002f80:	682a      	ldr	r2, [r5, #0]
		 	 HAL_GPIO_WritePin(GPIOA,IN1_Pin,GPIO_PIN_RESET);	///MANDAR UNO AL PIN IN1 DEL PUENTE H
 8002f82:	2101      	movs	r1, #1
	    	 __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,adelante);
 8002f84:	6353      	str	r3, [r2, #52]	; 0x34
		 	 HAL_GPIO_WritePin(GPIOA,IN1_Pin,GPIO_PIN_RESET);	///MANDAR UNO AL PIN IN1 DEL PUENTE H
 8002f86:	4622      	mov	r2, r4
 8002f88:	f7fe f918 	bl	80011bc <HAL_GPIO_WritePin>
		 	 HAL_GPIO_WritePin(GPIOA,IN2_Pin,GPIO_PIN_SET);
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	2102      	movs	r1, #2
 8002f90:	4822      	ldr	r0, [pc, #136]	; (800301c <motores+0x10c>)
 8002f92:	f7fe f913 	bl	80011bc <HAL_GPIO_WritePin>
		 	 __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,adelante);
 8002f96:	682b      	ldr	r3, [r5, #0]
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	639a      	str	r2, [r3, #56]	; 0x38
		 	 HAL_GPIO_WritePin(GPIOC,IN3_Pin,GPIO_PIN_RESET);	///MANDAR UNO AL PIN IN1 DEL PUENTE H
 8002f9c:	2110      	movs	r1, #16
 8002f9e:	4622      	mov	r2, r4
 8002fa0:	481f      	ldr	r0, [pc, #124]	; (8003020 <motores+0x110>)
 8002fa2:	f7fe f90b 	bl	80011bc <HAL_GPIO_WritePin>
		 	 HAL_GPIO_WritePin(GPIOC,IN4_Pin,GPIO_PIN_SET);
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	2120      	movs	r1, #32
 8002faa:	481d      	ldr	r0, [pc, #116]	; (8003020 <motores+0x110>)
 8002fac:	f7fe f906 	bl	80011bc <HAL_GPIO_WritePin>
	     }
	  }

	if (atras != 0){
 8002fb0:	6833      	ldr	r3, [r6, #0]
 8002fb2:	b333      	cbz	r3, 8003002 <motores+0xf2>
		if (adelante == 0){
 8002fb4:	683c      	ldr	r4, [r7, #0]
 8002fb6:	bb24      	cbnz	r4, 8003002 <motores+0xf2>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,atras);
 8002fb8:	4d17      	ldr	r5, [pc, #92]	; (8003018 <motores+0x108>)
		 	HAL_GPIO_WritePin(GPIOA,IN1_Pin,GPIO_PIN_SET);	///MANDAR CERO AL PIN IN1 DEL PUENTE H
 8002fba:	4818      	ldr	r0, [pc, #96]	; (800301c <motores+0x10c>)
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,atras);
 8002fbc:	682a      	ldr	r2, [r5, #0]
 8002fbe:	6353      	str	r3, [r2, #52]	; 0x34
		 	HAL_GPIO_WritePin(GPIOA,IN1_Pin,GPIO_PIN_SET);	///MANDAR CERO AL PIN IN1 DEL PUENTE H
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	f7fe f8fa 	bl	80011bc <HAL_GPIO_WritePin>
		 	HAL_GPIO_WritePin(GPIOA,IN2_Pin,GPIO_PIN_RESET);
 8002fc8:	4622      	mov	r2, r4
 8002fca:	2102      	movs	r1, #2
 8002fcc:	4813      	ldr	r0, [pc, #76]	; (800301c <motores+0x10c>)
 8002fce:	f7fe f8f5 	bl	80011bc <HAL_GPIO_WritePin>
		    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,atras);
 8002fd2:	682b      	ldr	r3, [r5, #0]
 8002fd4:	6832      	ldr	r2, [r6, #0]
 8002fd6:	639a      	str	r2, [r3, #56]	; 0x38
		    HAL_GPIO_WritePin(GPIOC,IN3_Pin,GPIO_PIN_SET);	///MANDAR CERO AL PIN IN1 DEL PUENTE H
 8002fd8:	2110      	movs	r1, #16
 8002fda:	2201      	movs	r2, #1
 8002fdc:	4810      	ldr	r0, [pc, #64]	; (8003020 <motores+0x110>)
 8002fde:	f7fe f8ed 	bl	80011bc <HAL_GPIO_WritePin>
		 	HAL_GPIO_WritePin(GPIOC,IN4_Pin,GPIO_PIN_RESET);
 8002fe2:	4622      	mov	r2, r4
 8002fe4:	2120      	movs	r1, #32
 8002fe6:	480e      	ldr	r0, [pc, #56]	; (8003020 <motores+0x110>)
				}
			}
}
 8002fe8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		 	HAL_GPIO_WritePin(GPIOC,IN4_Pin,GPIO_PIN_RESET);
 8002fec:	f7fe b8e6 	b.w	80011bc <HAL_GPIO_WritePin>
		U=-1500;
 8002ff0:	a505      	add	r5, pc, #20	; (adr r5, 8003008 <motores+0xf8>)
 8002ff2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8002ff6:	e7a3      	b.n	8002f40 <motores+0x30>
		adelante=U;       // PWM de los motores atras y adelante (las dos ruedas funcionan al tiempo)
 8002ff8:	4620      	mov	r0, r4
 8002ffa:	4629      	mov	r1, r5
 8002ffc:	f7fd fd36 	bl	8000a6c <__aeabi_d2iz>
 8003000:	e7aa      	b.n	8002f58 <motores+0x48>
 8003002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003004:	f3af 8000 	nop.w
 8003008:	00000000 	.word	0x00000000
 800300c:	c0977000 	.word	0xc0977000
 8003010:	2000004c 	.word	0x2000004c
 8003014:	20000048 	.word	0x20000048
 8003018:	2000010c 	.word	0x2000010c
 800301c:	40020000 	.word	0x40020000
 8003020:	40020800 	.word	0x40020800
 8003024:	00000000 	.word	0x00000000
 8003028:	40977000 	.word	0x40977000

0800302c <TIM3_IRQHandler>:
{
 800302c:	b5d0      	push	{r4, r6, r7, lr}
  HAL_TIM_IRQHandler(&htim3);
 800302e:	4831      	ldr	r0, [pc, #196]	; (80030f4 <TIM3_IRQHandler+0xc8>)
 x[0]=Ref-Y;
 8003030:	4c31      	ldr	r4, [pc, #196]	; (80030f8 <TIM3_IRQHandler+0xcc>)
{
 8003032:	ed2d 8b02 	vpush	{d8}
  HAL_TIM_IRQHandler(&htim3);
 8003036:	f7ff f82f 	bl	8002098 <HAL_TIM_IRQHandler>
 Y=pedirDatosMPU();
 800303a:	f7ff ff39 	bl	8002eb0 <pedirDatosMPU>
 800303e:	ee10 0a10 	vmov	r0, s0
 8003042:	f7fd fa25 	bl	8000490 <__aeabi_f2d>
 8003046:	460b      	mov	r3, r1
 8003048:	492c      	ldr	r1, [pc, #176]	; (80030fc <TIM3_IRQHandler+0xd0>)
 800304a:	4602      	mov	r2, r0
 800304c:	e9c1 2300 	strd	r2, r3, [r1]
 x[0]=Ref-Y;
 8003050:	492b      	ldr	r1, [pc, #172]	; (8003100 <TIM3_IRQHandler+0xd4>)
 8003052:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003056:	f7fd f8bb 	bl	80001d0 <__aeabi_dsub>
 800305a:	f7fd fd2f 	bl	8000abc <__aeabi_d2f>
 x[2]=x[0]+x[2];
 800305e:	edd4 7a02 	vldr	s15, [r4, #8]
 x[0]=Ref-Y;
 8003062:	6020      	str	r0, [r4, #0]
 8003064:	ee08 0a10 	vmov	s16, r0
 x[2]=x[0]+x[2];
 8003068:	ee78 7a27 	vadd.f32	s15, s16, s15
 800306c:	edc4 7a02 	vstr	s15, [r4, #8]
 u=Kp*x[0]+Ki*(x[2])+Kd*(x[0]-x[1]);
 8003070:	ee17 0a90 	vmov	r0, s15
 8003074:	f7fd fa0c 	bl	8000490 <__aeabi_f2d>
 8003078:	4b22      	ldr	r3, [pc, #136]	; (8003104 <TIM3_IRQHandler+0xd8>)
 800307a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307e:	f7fd fa5b 	bl	8000538 <__aeabi_dmul>
 8003082:	4b21      	ldr	r3, [pc, #132]	; (8003108 <TIM3_IRQHandler+0xdc>)
 8003084:	edd3 7a00 	vldr	s15, [r3]
 8003088:	ee68 7a27 	vmul.f32	s15, s16, s15
 800308c:	4606      	mov	r6, r0
 800308e:	ee17 0a90 	vmov	r0, s15
 8003092:	460f      	mov	r7, r1
 8003094:	f7fd f9fc 	bl	8000490 <__aeabi_f2d>
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	4630      	mov	r0, r6
 800309e:	4639      	mov	r1, r7
 80030a0:	f7fd f898 	bl	80001d4 <__adddf3>
 80030a4:	edd4 7a01 	vldr	s15, [r4, #4]
 80030a8:	4b18      	ldr	r3, [pc, #96]	; (800310c <TIM3_IRQHandler+0xe0>)
 80030aa:	ee38 8a67 	vsub.f32	s16, s16, s15
 80030ae:	edd3 7a00 	vldr	s15, [r3]
 80030b2:	ee68 7a27 	vmul.f32	s15, s16, s15
 80030b6:	4606      	mov	r6, r0
 80030b8:	ee17 0a90 	vmov	r0, s15
 80030bc:	460f      	mov	r7, r1
 80030be:	f7fd f9e7 	bl	8000490 <__aeabi_f2d>
 80030c2:	4602      	mov	r2, r0
 80030c4:	460b      	mov	r3, r1
 80030c6:	4630      	mov	r0, r6
 80030c8:	4639      	mov	r1, r7
 80030ca:	f7fd f883 	bl	80001d4 <__adddf3>
 80030ce:	4b10      	ldr	r3, [pc, #64]	; (8003110 <TIM3_IRQHandler+0xe4>)
 motores(u);
 80030d0:	ec41 0b10 	vmov	d0, r0, r1
 u=Kp*x[0]+Ki*(x[2])+Kd*(x[0]-x[1]);
 80030d4:	e9c3 0100 	strd	r0, r1, [r3]
 motores(u);
 80030d8:	f7ff ff1a 	bl	8002f10 <motores>
}
 80030dc:	ecbd 8b02 	vpop	{d8}
 x[1]=x[0];
 80030e0:	6823      	ldr	r3, [r4, #0]
 80030e2:	6063      	str	r3, [r4, #4]
 HAL_GPIO_WritePin(Led_Azul_GPIO_Port,Led_Azul_Pin,GPIO_PIN_SET);
 80030e4:	2201      	movs	r2, #1
 80030e6:	2104      	movs	r1, #4
 80030e8:	480a      	ldr	r0, [pc, #40]	; (8003114 <TIM3_IRQHandler+0xe8>)
}
 80030ea:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 HAL_GPIO_WritePin(Led_Azul_GPIO_Port,Led_Azul_Pin,GPIO_PIN_SET);
 80030ee:	f7fe b865 	b.w	80011bc <HAL_GPIO_WritePin>
 80030f2:	bf00      	nop
 80030f4:	200000d0 	.word	0x200000d0
 80030f8:	20000050 	.word	0x20000050
 80030fc:	20000040 	.word	0x20000040
 8003100:	20000008 	.word	0x20000008
 8003104:	20000038 	.word	0x20000038
 8003108:	20000004 	.word	0x20000004
 800310c:	20000000 	.word	0x20000000
 8003110:	200000c8 	.word	0x200000c8
 8003114:	40021000 	.word	0x40021000

08003118 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003118:	490f      	ldr	r1, [pc, #60]	; (8003158 <SystemInit+0x40>)
 800311a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800311e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003126:	4b0d      	ldr	r3, [pc, #52]	; (800315c <SystemInit+0x44>)
 8003128:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800312a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800312c:	f042 0201 	orr.w	r2, r2, #1
 8003130:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003132:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800313a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800313e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003140:	4a07      	ldr	r2, [pc, #28]	; (8003160 <SystemInit+0x48>)
 8003142:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800314a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800314c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800314e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003152:	608b      	str	r3, [r1, #8]
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	e000ed00 	.word	0xe000ed00
 800315c:	40023800 	.word	0x40023800
 8003160:	24003010 	.word	0x24003010

08003164 <MX_TIM3_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003164:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
 8003166:	4816      	ldr	r0, [pc, #88]	; (80031c0 <MX_TIM3_Init+0x5c>)
  htim3.Init.Prescaler = 159;
 8003168:	4916      	ldr	r1, [pc, #88]	; (80031c4 <MX_TIM3_Init+0x60>)
 800316a:	239f      	movs	r3, #159	; 0x9f
 800316c:	e880 000a 	stmia.w	r0, {r1, r3}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 9;
 8003170:	2209      	movs	r2, #9
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003172:	2300      	movs	r3, #0
 8003174:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 9;
 8003176:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003178:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800317a:	f7ff f893 	bl	80022a4 <HAL_TIM_Base_Init>
 800317e:	b118      	cbz	r0, 8003188 <MX_TIM3_Init+0x24>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003180:	2184      	movs	r1, #132	; 0x84
 8003182:	4811      	ldr	r0, [pc, #68]	; (80031c8 <MX_TIM3_Init+0x64>)
 8003184:	f7ff fd8c 	bl	8002ca0 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003188:	a906      	add	r1, sp, #24
 800318a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800318e:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003192:	480b      	ldr	r0, [pc, #44]	; (80031c0 <MX_TIM3_Init+0x5c>)
 8003194:	f7fe fec2 	bl	8001f1c <HAL_TIM_ConfigClockSource>
 8003198:	b118      	cbz	r0, 80031a2 <MX_TIM3_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800319a:	218a      	movs	r1, #138	; 0x8a
 800319c:	480a      	ldr	r0, [pc, #40]	; (80031c8 <MX_TIM3_Init+0x64>)
 800319e:	f7ff fd7f 	bl	8002ca0 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031a2:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80031a4:	4669      	mov	r1, sp
 80031a6:	4806      	ldr	r0, [pc, #24]	; (80031c0 <MX_TIM3_Init+0x5c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031a8:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031aa:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80031ac:	f7ff f966 	bl	800247c <HAL_TIMEx_MasterConfigSynchronization>
 80031b0:	b118      	cbz	r0, 80031ba <MX_TIM3_Init+0x56>
  {
    _Error_Handler(__FILE__, __LINE__);
 80031b2:	2191      	movs	r1, #145	; 0x91
 80031b4:	4804      	ldr	r0, [pc, #16]	; (80031c8 <MX_TIM3_Init+0x64>)
 80031b6:	f7ff fd73 	bl	8002ca0 <_Error_Handler>
  }

}
 80031ba:	b007      	add	sp, #28
 80031bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80031c0:	200000d0 	.word	0x200000d0
 80031c4:	40000400 	.word	0x40000400
 80031c8:	08003521 	.word	0x08003521

080031cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 80031cc:	6803      	ldr	r3, [r0, #0]
 80031ce:	4a11      	ldr	r2, [pc, #68]	; (8003214 <HAL_TIM_Base_MspInit+0x48>)
 80031d0:	4293      	cmp	r3, r2
{
 80031d2:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM1)
 80031d4:	d10d      	bne.n	80031f2 <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80031d6:	2300      	movs	r3, #0
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	4b0f      	ldr	r3, [pc, #60]	; (8003218 <HAL_TIM_Base_MspInit+0x4c>)
 80031dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031de:	f042 0201 	orr.w	r2, r2, #1
 80031e2:	645a      	str	r2, [r3, #68]	; 0x44
 80031e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80031ee:	b002      	add	sp, #8
 80031f0:	4770      	bx	lr
  else if(tim_baseHandle->Instance==TIM3)
 80031f2:	4a0a      	ldr	r2, [pc, #40]	; (800321c <HAL_TIM_Base_MspInit+0x50>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d1fa      	bne.n	80031ee <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031f8:	2300      	movs	r3, #0
 80031fa:	9301      	str	r3, [sp, #4]
 80031fc:	4b06      	ldr	r3, [pc, #24]	; (8003218 <HAL_TIM_Base_MspInit+0x4c>)
 80031fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003200:	f042 0202 	orr.w	r2, r2, #2
 8003204:	641a      	str	r2, [r3, #64]	; 0x40
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	9301      	str	r3, [sp, #4]
 800320e:	9b01      	ldr	r3, [sp, #4]
}
 8003210:	e7ed      	b.n	80031ee <HAL_TIM_Base_MspInit+0x22>
 8003212:	bf00      	nop
 8003214:	40010000 	.word	0x40010000
 8003218:	40023800 	.word	0x40023800
 800321c:	40000400 	.word	0x40000400

08003220 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003220:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM1)
 8003222:	6802      	ldr	r2, [r0, #0]
 8003224:	4b09      	ldr	r3, [pc, #36]	; (800324c <HAL_TIM_MspPostInit+0x2c>)
 8003226:	429a      	cmp	r2, r3
 8003228:	d10d      	bne.n	8003246 <HAL_TIM_MspPostInit+0x26>
  
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800322a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800322e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003230:	2302      	movs	r3, #2
 8003232:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003234:	2300      	movs	r3, #0
 8003236:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003238:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800323a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800323c:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800323e:	4804      	ldr	r0, [pc, #16]	; (8003250 <HAL_TIM_MspPostInit+0x30>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003240:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003242:	f7fd fedb 	bl	8000ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003246:	b007      	add	sp, #28
 8003248:	f85d fb04 	ldr.w	pc, [sp], #4
 800324c:	40010000 	.word	0x40010000
 8003250:	40021000 	.word	0x40021000

08003254 <MX_TIM1_Init>:
{
 8003254:	b510      	push	{r4, lr}
  htim1.Instance = TIM1;
 8003256:	4834      	ldr	r0, [pc, #208]	; (8003328 <MX_TIM1_Init+0xd4>)
  htim1.Init.Prescaler = 177;
 8003258:	4a34      	ldr	r2, [pc, #208]	; (800332c <MX_TIM1_Init+0xd8>)
 800325a:	23b1      	movs	r3, #177	; 0xb1
 800325c:	e880 000c 	stmia.w	r0, {r2, r3}
{
 8003260:	b094      	sub	sp, #80	; 0x50
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003262:	2300      	movs	r3, #0
  htim1.Init.Period = 1800;
 8003264:	f44f 62e1 	mov.w	r2, #1800	; 0x708
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003268:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 1800;
 800326a:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800326c:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800326e:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003270:	f7ff f818 	bl	80022a4 <HAL_TIM_Base_Init>
 8003274:	b118      	cbz	r0, 800327e <MX_TIM1_Init+0x2a>
    _Error_Handler(__FILE__, __LINE__);
 8003276:	2142      	movs	r1, #66	; 0x42
 8003278:	482d      	ldr	r0, [pc, #180]	; (8003330 <MX_TIM1_Init+0xdc>)
 800327a:	f7ff fd11 	bl	8002ca0 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800327e:	a914      	add	r1, sp, #80	; 0x50
 8003280:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003284:	f841 3d48 	str.w	r3, [r1, #-72]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003288:	4827      	ldr	r0, [pc, #156]	; (8003328 <MX_TIM1_Init+0xd4>)
 800328a:	f7fe fe47 	bl	8001f1c <HAL_TIM_ConfigClockSource>
 800328e:	b118      	cbz	r0, 8003298 <MX_TIM1_Init+0x44>
    _Error_Handler(__FILE__, __LINE__);
 8003290:	2148      	movs	r1, #72	; 0x48
 8003292:	4827      	ldr	r0, [pc, #156]	; (8003330 <MX_TIM1_Init+0xdc>)
 8003294:	f7ff fd04 	bl	8002ca0 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003298:	4823      	ldr	r0, [pc, #140]	; (8003328 <MX_TIM1_Init+0xd4>)
 800329a:	f7ff f81d 	bl	80022d8 <HAL_TIM_PWM_Init>
 800329e:	b118      	cbz	r0, 80032a8 <MX_TIM1_Init+0x54>
    _Error_Handler(__FILE__, __LINE__);
 80032a0:	214d      	movs	r1, #77	; 0x4d
 80032a2:	4823      	ldr	r0, [pc, #140]	; (8003330 <MX_TIM1_Init+0xdc>)
 80032a4:	f7ff fcfc 	bl	8002ca0 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032a8:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80032aa:	4669      	mov	r1, sp
 80032ac:	481e      	ldr	r0, [pc, #120]	; (8003328 <MX_TIM1_Init+0xd4>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032ae:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032b0:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80032b2:	f7ff f8e3 	bl	800247c <HAL_TIMEx_MasterConfigSynchronization>
 80032b6:	b118      	cbz	r0, 80032c0 <MX_TIM1_Init+0x6c>
    _Error_Handler(__FILE__, __LINE__);
 80032b8:	2154      	movs	r1, #84	; 0x54
 80032ba:	481d      	ldr	r0, [pc, #116]	; (8003330 <MX_TIM1_Init+0xdc>)
 80032bc:	f7ff fcf0 	bl	8002ca0 <_Error_Handler>
  sConfigOC.Pulse = 0;
 80032c0:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032c2:	2460      	movs	r4, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032c4:	a906      	add	r1, sp, #24
 80032c6:	4818      	ldr	r0, [pc, #96]	; (8003328 <MX_TIM1_Init+0xd4>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032c8:	9406      	str	r4, [sp, #24]
  sConfigOC.Pulse = 0;
 80032ca:	9207      	str	r2, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032cc:	9208      	str	r2, [sp, #32]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80032ce:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032d0:	920a      	str	r2, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80032d2:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80032d4:	920c      	str	r2, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032d6:	f7ff f849 	bl	800236c <HAL_TIM_PWM_ConfigChannel>
 80032da:	b118      	cbz	r0, 80032e4 <MX_TIM1_Init+0x90>
    _Error_Handler(__FILE__, __LINE__);
 80032dc:	4621      	mov	r1, r4
 80032de:	4814      	ldr	r0, [pc, #80]	; (8003330 <MX_TIM1_Init+0xdc>)
 80032e0:	f7ff fcde 	bl	8002ca0 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80032e4:	2204      	movs	r2, #4
 80032e6:	a906      	add	r1, sp, #24
 80032e8:	480f      	ldr	r0, [pc, #60]	; (8003328 <MX_TIM1_Init+0xd4>)
 80032ea:	f7ff f83f 	bl	800236c <HAL_TIM_PWM_ConfigChannel>
 80032ee:	b118      	cbz	r0, 80032f8 <MX_TIM1_Init+0xa4>
    _Error_Handler(__FILE__, __LINE__);
 80032f0:	2165      	movs	r1, #101	; 0x65
 80032f2:	480f      	ldr	r0, [pc, #60]	; (8003330 <MX_TIM1_Init+0xdc>)
 80032f4:	f7ff fcd4 	bl	8002ca0 <_Error_Handler>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80032f8:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80032fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80032fe:	a90d      	add	r1, sp, #52	; 0x34
 8003300:	4809      	ldr	r0, [pc, #36]	; (8003328 <MX_TIM1_Init+0xd4>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003302:	930d      	str	r3, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003304:	930e      	str	r3, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003306:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.DeadTime = 0;
 8003308:	9310      	str	r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800330a:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800330c:	9212      	str	r2, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800330e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003310:	f7ff f8d6 	bl	80024c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003314:	b118      	cbz	r0, 800331e <MX_TIM1_Init+0xca>
    _Error_Handler(__FILE__, __LINE__);
 8003316:	2171      	movs	r1, #113	; 0x71
 8003318:	4805      	ldr	r0, [pc, #20]	; (8003330 <MX_TIM1_Init+0xdc>)
 800331a:	f7ff fcc1 	bl	8002ca0 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 800331e:	4802      	ldr	r0, [pc, #8]	; (8003328 <MX_TIM1_Init+0xd4>)
 8003320:	f7ff ff7e 	bl	8003220 <HAL_TIM_MspPostInit>
}
 8003324:	b014      	add	sp, #80	; 0x50
 8003326:	bd10      	pop	{r4, pc}
 8003328:	2000010c 	.word	0x2000010c
 800332c:	40010000 	.word	0x40010000
 8003330:	08003521 	.word	0x08003521

08003334 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003334:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8003336:	480c      	ldr	r0, [pc, #48]	; (8003368 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 9600;
 8003338:	4b0c      	ldr	r3, [pc, #48]	; (800336c <MX_USART2_UART_Init+0x38>)
 800333a:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
 800333e:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003342:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003344:	2300      	movs	r3, #0
 8003346:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003348:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800334a:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800334c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800334e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003350:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003352:	f7ff fa05 	bl	8002760 <HAL_UART_Init>
 8003356:	b128      	cbz	r0, 8003364 <MX_USART2_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003358:	2143      	movs	r1, #67	; 0x43
 800335a:	4805      	ldr	r0, [pc, #20]	; (8003370 <MX_USART2_UART_Init+0x3c>)
  }

}
 800335c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8003360:	f7ff bc9e 	b.w	8002ca0 <_Error_Handler>
 8003364:	bd08      	pop	{r3, pc}
 8003366:	bf00      	nop
 8003368:	20000188 	.word	0x20000188
 800336c:	40004400 	.word	0x40004400
 8003370:	0800352e 	.word	0x0800352e

08003374 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003374:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 8003376:	480c      	ldr	r0, [pc, #48]	; (80033a8 <MX_USART3_UART_Init+0x34>)
  huart3.Init.BaudRate = 115200;
 8003378:	4b0c      	ldr	r3, [pc, #48]	; (80033ac <MX_USART3_UART_Init+0x38>)
 800337a:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 800337e:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003382:	220c      	movs	r2, #12
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003384:	2300      	movs	r3, #0
 8003386:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003388:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800338a:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800338c:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800338e:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003390:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003392:	f7ff f9e5 	bl	8002760 <HAL_UART_Init>
 8003396:	b128      	cbz	r0, 80033a4 <MX_USART3_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003398:	2156      	movs	r1, #86	; 0x56
 800339a:	4805      	ldr	r0, [pc, #20]	; (80033b0 <MX_USART3_UART_Init+0x3c>)
  }

}
 800339c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80033a0:	f7ff bc7e 	b.w	8002ca0 <_Error_Handler>
 80033a4:	bd08      	pop	{r3, pc}
 80033a6:	bf00      	nop
 80033a8:	20000148 	.word	0x20000148
 80033ac:	40004800 	.word	0x40004800
 80033b0:	0800352e 	.word	0x0800352e

080033b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80033b4:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 80033b6:	6803      	ldr	r3, [r0, #0]
 80033b8:	4a1e      	ldr	r2, [pc, #120]	; (8003434 <HAL_UART_MspInit+0x80>)
 80033ba:	4293      	cmp	r3, r2
{
 80033bc:	b089      	sub	sp, #36	; 0x24
  if(uartHandle->Instance==USART2)
 80033be:	d11c      	bne.n	80033fa <HAL_UART_MspInit+0x46>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80033c0:	2300      	movs	r3, #0
 80033c2:	9301      	str	r3, [sp, #4]
 80033c4:	4b1c      	ldr	r3, [pc, #112]	; (8003438 <HAL_UART_MspInit+0x84>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033c6:	481d      	ldr	r0, [pc, #116]	; (800343c <HAL_UART_MspInit+0x88>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80033c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033ca:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80033ce:	641a      	str	r2, [r3, #64]	; 0x40
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d6:	9301      	str	r3, [sp, #4]
 80033d8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80033da:	230c      	movs	r3, #12
 80033dc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033de:	2302      	movs	r3, #2
 80033e0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033e2:	2301      	movs	r3, #1
 80033e4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033e6:	2303      	movs	r3, #3
 80033e8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033ea:	2307      	movs	r3, #7
 80033ec:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ee:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033f0:	f7fd fe04 	bl	8000ffc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80033f4:	b009      	add	sp, #36	; 0x24
 80033f6:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(uartHandle->Instance==USART3)
 80033fa:	4a11      	ldr	r2, [pc, #68]	; (8003440 <HAL_UART_MspInit+0x8c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d1f9      	bne.n	80033f4 <HAL_UART_MspInit+0x40>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003400:	2300      	movs	r3, #0
 8003402:	9302      	str	r3, [sp, #8]
 8003404:	4b0c      	ldr	r3, [pc, #48]	; (8003438 <HAL_UART_MspInit+0x84>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003406:	480f      	ldr	r0, [pc, #60]	; (8003444 <HAL_UART_MspInit+0x90>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8003408:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800340a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800340e:	641a      	str	r2, [r3, #64]	; 0x40
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003416:	9302      	str	r3, [sp, #8]
 8003418:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800341a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800341e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003420:	2302      	movs	r3, #2
 8003422:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003424:	2301      	movs	r3, #1
 8003426:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003428:	2303      	movs	r3, #3
 800342a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800342c:	2307      	movs	r3, #7
 800342e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003430:	a903      	add	r1, sp, #12
 8003432:	e7dd      	b.n	80033f0 <HAL_UART_MspInit+0x3c>
 8003434:	40004400 	.word	0x40004400
 8003438:	40023800 	.word	0x40023800
 800343c:	40020000 	.word	0x40020000
 8003440:	40004800 	.word	0x40004800
 8003444:	40020400 	.word	0x40020400

08003448 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003448:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003480 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800344c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800344e:	e003      	b.n	8003458 <LoopCopyDataInit>

08003450 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003450:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003452:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003454:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003456:	3104      	adds	r1, #4

08003458 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003458:	480b      	ldr	r0, [pc, #44]	; (8003488 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800345a:	4b0c      	ldr	r3, [pc, #48]	; (800348c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800345c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800345e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003460:	d3f6      	bcc.n	8003450 <CopyDataInit>
  ldr  r2, =_sbss
 8003462:	4a0b      	ldr	r2, [pc, #44]	; (8003490 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003464:	e002      	b.n	800346c <LoopFillZerobss>

08003466 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003466:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003468:	f842 3b04 	str.w	r3, [r2], #4

0800346c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800346c:	4b09      	ldr	r3, [pc, #36]	; (8003494 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800346e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003470:	d3f9      	bcc.n	8003466 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003472:	f7ff fe51 	bl	8003118 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003476:	f000 f811 	bl	800349c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800347a:	f7ff fbd5 	bl	8002c28 <main>
  bx  lr    
 800347e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003480:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003484:	08003550 	.word	0x08003550
  ldr  r0, =_sdata
 8003488:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800348c:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8003490:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8003494:	200001c8 	.word	0x200001c8

08003498 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003498:	e7fe      	b.n	8003498 <ADC_IRQHandler>
	...

0800349c <__libc_init_array>:
 800349c:	b570      	push	{r4, r5, r6, lr}
 800349e:	4e0d      	ldr	r6, [pc, #52]	; (80034d4 <__libc_init_array+0x38>)
 80034a0:	4c0d      	ldr	r4, [pc, #52]	; (80034d8 <__libc_init_array+0x3c>)
 80034a2:	1ba4      	subs	r4, r4, r6
 80034a4:	10a4      	asrs	r4, r4, #2
 80034a6:	2500      	movs	r5, #0
 80034a8:	42a5      	cmp	r5, r4
 80034aa:	d109      	bne.n	80034c0 <__libc_init_array+0x24>
 80034ac:	4e0b      	ldr	r6, [pc, #44]	; (80034dc <__libc_init_array+0x40>)
 80034ae:	4c0c      	ldr	r4, [pc, #48]	; (80034e0 <__libc_init_array+0x44>)
 80034b0:	f000 f818 	bl	80034e4 <_init>
 80034b4:	1ba4      	subs	r4, r4, r6
 80034b6:	10a4      	asrs	r4, r4, #2
 80034b8:	2500      	movs	r5, #0
 80034ba:	42a5      	cmp	r5, r4
 80034bc:	d105      	bne.n	80034ca <__libc_init_array+0x2e>
 80034be:	bd70      	pop	{r4, r5, r6, pc}
 80034c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034c4:	4798      	blx	r3
 80034c6:	3501      	adds	r5, #1
 80034c8:	e7ee      	b.n	80034a8 <__libc_init_array+0xc>
 80034ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034ce:	4798      	blx	r3
 80034d0:	3501      	adds	r5, #1
 80034d2:	e7f2      	b.n	80034ba <__libc_init_array+0x1e>
 80034d4:	08003548 	.word	0x08003548
 80034d8:	08003548 	.word	0x08003548
 80034dc:	08003548 	.word	0x08003548
 80034e0:	0800354c 	.word	0x0800354c

080034e4 <_init>:
 80034e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034e6:	bf00      	nop
 80034e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ea:	bc08      	pop	{r3}
 80034ec:	469e      	mov	lr, r3
 80034ee:	4770      	bx	lr

080034f0 <_fini>:
 80034f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034f2:	bf00      	nop
 80034f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034f6:	bc08      	pop	{r3}
 80034f8:	469e      	mov	lr, r3
 80034fa:	4770      	bx	lr
