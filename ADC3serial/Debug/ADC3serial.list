
C:\Users\LENOVO\Documents\ADC3serial\Debug\ADC3serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000546c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  08005600  08005600  00015600  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080058e0  080058e0  000158e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080058e8  080058e8  000158e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080058ec  080058ec  000158ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000674  20000000  080058f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020674  2**0
                  CONTENTS
  8 .bss          00000158  20000674  20000674  00020674  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200007cc  200007cc  00020674  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020674  2**0
                  CONTENTS, READONLY
 11 .debug_info   000110a5  00000000  00000000  000206a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000275d  00000000  00000000  00031749  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000327c  00000000  00000000  00033ea6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000678  00000000  00000000  00037128  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000848  00000000  00000000  000377a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00004524  00000000  00000000  00037fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000029c9  00000000  00000000  0003c50c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0003eed5  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001aa0  00000000  00000000  0003ef54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000674 	.word	0x20000674
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080055e4 	.word	0x080055e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000678 	.word	0x20000678
 80001cc:	080055e4 	.word	0x080055e4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b97a 	b.w	8000eac <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	460d      	mov	r5, r1
 8000bd8:	4604      	mov	r4, r0
 8000bda:	9e08      	ldr	r6, [sp, #32]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d151      	bne.n	8000c84 <__udivmoddi4+0xb4>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4617      	mov	r7, r2
 8000be4:	d96d      	bls.n	8000cc2 <__udivmoddi4+0xf2>
 8000be6:	fab2 fe82 	clz	lr, r2
 8000bea:	f1be 0f00 	cmp.w	lr, #0
 8000bee:	d00b      	beq.n	8000c08 <__udivmoddi4+0x38>
 8000bf0:	f1ce 0c20 	rsb	ip, lr, #32
 8000bf4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000bf8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bfc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c00:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c04:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c08:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c0c:	0c25      	lsrs	r5, r4, #16
 8000c0e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c12:	fa1f f987 	uxth.w	r9, r7
 8000c16:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c1a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c1e:	fb08 f309 	mul.w	r3, r8, r9
 8000c22:	42ab      	cmp	r3, r5
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x6c>
 8000c26:	19ed      	adds	r5, r5, r7
 8000c28:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c2c:	f080 8123 	bcs.w	8000e76 <__udivmoddi4+0x2a6>
 8000c30:	42ab      	cmp	r3, r5
 8000c32:	f240 8120 	bls.w	8000e76 <__udivmoddi4+0x2a6>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	443d      	add	r5, r7
 8000c3c:	1aed      	subs	r5, r5, r3
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c44:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c4c:	fb00 f909 	mul.w	r9, r0, r9
 8000c50:	45a1      	cmp	r9, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x98>
 8000c54:	19e4      	adds	r4, r4, r7
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5a:	f080 810a 	bcs.w	8000e72 <__udivmoddi4+0x2a2>
 8000c5e:	45a1      	cmp	r9, r4
 8000c60:	f240 8107 	bls.w	8000e72 <__udivmoddi4+0x2a2>
 8000c64:	3802      	subs	r0, #2
 8000c66:	443c      	add	r4, r7
 8000c68:	eba4 0409 	sub.w	r4, r4, r9
 8000c6c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c70:	2100      	movs	r1, #0
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d061      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000c76:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	6034      	str	r4, [r6, #0]
 8000c7e:	6073      	str	r3, [r6, #4]
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	428b      	cmp	r3, r1
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0xc8>
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	d054      	beq.n	8000d36 <__udivmoddi4+0x166>
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c92:	4608      	mov	r0, r1
 8000c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c98:	fab3 f183 	clz	r1, r3
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	f040 808e 	bne.w	8000dbe <__udivmoddi4+0x1ee>
 8000ca2:	42ab      	cmp	r3, r5
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xdc>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80fa 	bhi.w	8000ea0 <__udivmoddi4+0x2d0>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb65 0503 	sbc.w	r5, r5, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	46ac      	mov	ip, r5
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d03f      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000cba:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	b912      	cbnz	r2, 8000cca <__udivmoddi4+0xfa>
 8000cc4:	2701      	movs	r7, #1
 8000cc6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cca:	fab7 fe87 	clz	lr, r7
 8000cce:	f1be 0f00 	cmp.w	lr, #0
 8000cd2:	d134      	bne.n	8000d3e <__udivmoddi4+0x16e>
 8000cd4:	1beb      	subs	r3, r5, r7
 8000cd6:	0c3a      	lsrs	r2, r7, #16
 8000cd8:	fa1f fc87 	uxth.w	ip, r7
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fbb3 f8f2 	udiv	r8, r3, r2
 8000ce2:	0c25      	lsrs	r5, r4, #16
 8000ce4:	fb02 3318 	mls	r3, r2, r8, r3
 8000ce8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cec:	fb0c f308 	mul.w	r3, ip, r8
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x134>
 8000cf4:	19ed      	adds	r5, r5, r7
 8000cf6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x132>
 8000cfc:	42ab      	cmp	r3, r5
 8000cfe:	f200 80d1 	bhi.w	8000ea4 <__udivmoddi4+0x2d4>
 8000d02:	4680      	mov	r8, r0
 8000d04:	1aed      	subs	r5, r5, r3
 8000d06:	b2a3      	uxth	r3, r4
 8000d08:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d0c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d10:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d14:	fb0c fc00 	mul.w	ip, ip, r0
 8000d18:	45a4      	cmp	ip, r4
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x15c>
 8000d1c:	19e4      	adds	r4, r4, r7
 8000d1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x15a>
 8000d24:	45a4      	cmp	ip, r4
 8000d26:	f200 80b8 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	eba4 040c 	sub.w	r4, r4, ip
 8000d30:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d34:	e79d      	b.n	8000c72 <__udivmoddi4+0xa2>
 8000d36:	4631      	mov	r1, r6
 8000d38:	4630      	mov	r0, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	f1ce 0420 	rsb	r4, lr, #32
 8000d42:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d46:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d4a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d4e:	0c3a      	lsrs	r2, r7, #16
 8000d50:	fa25 f404 	lsr.w	r4, r5, r4
 8000d54:	ea48 0803 	orr.w	r8, r8, r3
 8000d58:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d5c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d60:	fb02 4411 	mls	r4, r2, r1, r4
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d6c:	fb01 f30c 	mul.w	r3, r1, ip
 8000d70:	42ab      	cmp	r3, r5
 8000d72:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d76:	d909      	bls.n	8000d8c <__udivmoddi4+0x1bc>
 8000d78:	19ed      	adds	r5, r5, r7
 8000d7a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d7e:	f080 808a 	bcs.w	8000e96 <__udivmoddi4+0x2c6>
 8000d82:	42ab      	cmp	r3, r5
 8000d84:	f240 8087 	bls.w	8000e96 <__udivmoddi4+0x2c6>
 8000d88:	3902      	subs	r1, #2
 8000d8a:	443d      	add	r5, r7
 8000d8c:	1aeb      	subs	r3, r5, r3
 8000d8e:	fa1f f588 	uxth.w	r5, r8
 8000d92:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d96:	fb02 3310 	mls	r3, r2, r0, r3
 8000d9a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d9e:	fb00 f30c 	mul.w	r3, r0, ip
 8000da2:	42ab      	cmp	r3, r5
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x1e6>
 8000da6:	19ed      	adds	r5, r5, r7
 8000da8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dac:	d26f      	bcs.n	8000e8e <__udivmoddi4+0x2be>
 8000dae:	42ab      	cmp	r3, r5
 8000db0:	d96d      	bls.n	8000e8e <__udivmoddi4+0x2be>
 8000db2:	3802      	subs	r0, #2
 8000db4:	443d      	add	r5, r7
 8000db6:	1aeb      	subs	r3, r5, r3
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	e78f      	b.n	8000cde <__udivmoddi4+0x10e>
 8000dbe:	f1c1 0720 	rsb	r7, r1, #32
 8000dc2:	fa22 f807 	lsr.w	r8, r2, r7
 8000dc6:	408b      	lsls	r3, r1
 8000dc8:	fa05 f401 	lsl.w	r4, r5, r1
 8000dcc:	ea48 0303 	orr.w	r3, r8, r3
 8000dd0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000dd4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dde:	fbb5 f9fc 	udiv	r9, r5, ip
 8000de2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000de6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000dea:	fa1f f883 	uxth.w	r8, r3
 8000dee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000df2:	fb09 f408 	mul.w	r4, r9, r8
 8000df6:	42ac      	cmp	r4, r5
 8000df8:	fa02 f201 	lsl.w	r2, r2, r1
 8000dfc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x244>
 8000e02:	18ed      	adds	r5, r5, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	d243      	bcs.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0a:	42ac      	cmp	r4, r5
 8000e0c:	d941      	bls.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e12:	441d      	add	r5, r3
 8000e14:	1b2d      	subs	r5, r5, r4
 8000e16:	fa1f fe8e 	uxth.w	lr, lr
 8000e1a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e1e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e22:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e26:	fb00 f808 	mul.w	r8, r0, r8
 8000e2a:	45a0      	cmp	r8, r4
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x26e>
 8000e2e:	18e4      	adds	r4, r4, r3
 8000e30:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e34:	d229      	bcs.n	8000e8a <__udivmoddi4+0x2ba>
 8000e36:	45a0      	cmp	r8, r4
 8000e38:	d927      	bls.n	8000e8a <__udivmoddi4+0x2ba>
 8000e3a:	3802      	subs	r0, #2
 8000e3c:	441c      	add	r4, r3
 8000e3e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e42:	eba4 0408 	sub.w	r4, r4, r8
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	454c      	cmp	r4, r9
 8000e4c:	46c6      	mov	lr, r8
 8000e4e:	464d      	mov	r5, r9
 8000e50:	d315      	bcc.n	8000e7e <__udivmoddi4+0x2ae>
 8000e52:	d012      	beq.n	8000e7a <__udivmoddi4+0x2aa>
 8000e54:	b156      	cbz	r6, 8000e6c <__udivmoddi4+0x29c>
 8000e56:	ebba 030e 	subs.w	r3, sl, lr
 8000e5a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e62:	40cb      	lsrs	r3, r1
 8000e64:	431f      	orrs	r7, r3
 8000e66:	40cc      	lsrs	r4, r1
 8000e68:	6037      	str	r7, [r6, #0]
 8000e6a:	6074      	str	r4, [r6, #4]
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	4618      	mov	r0, r3
 8000e74:	e6f8      	b.n	8000c68 <__udivmoddi4+0x98>
 8000e76:	4690      	mov	r8, r2
 8000e78:	e6e0      	b.n	8000c3c <__udivmoddi4+0x6c>
 8000e7a:	45c2      	cmp	sl, r8
 8000e7c:	d2ea      	bcs.n	8000e54 <__udivmoddi4+0x284>
 8000e7e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e82:	eb69 0503 	sbc.w	r5, r9, r3
 8000e86:	3801      	subs	r0, #1
 8000e88:	e7e4      	b.n	8000e54 <__udivmoddi4+0x284>
 8000e8a:	4628      	mov	r0, r5
 8000e8c:	e7d7      	b.n	8000e3e <__udivmoddi4+0x26e>
 8000e8e:	4640      	mov	r0, r8
 8000e90:	e791      	b.n	8000db6 <__udivmoddi4+0x1e6>
 8000e92:	4681      	mov	r9, r0
 8000e94:	e7be      	b.n	8000e14 <__udivmoddi4+0x244>
 8000e96:	4601      	mov	r1, r0
 8000e98:	e778      	b.n	8000d8c <__udivmoddi4+0x1bc>
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	e745      	b.n	8000d2c <__udivmoddi4+0x15c>
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	e708      	b.n	8000cb6 <__udivmoddi4+0xe6>
 8000ea4:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea8:	443d      	add	r5, r7
 8000eaa:	e72b      	b.n	8000d04 <__udivmoddi4+0x134>

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <HAL_InitTick+0x24>)
{
 8000eb4:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000eb6:	6818      	ldr	r0, [r3, #0]
 8000eb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ebc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ec0:	f000 fae8 	bl	8001494 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	4621      	mov	r1, r4
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ecc:	f000 faa2 	bl	8001414 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	bd10      	pop	{r4, pc}
 8000ed4:	20000000 	.word	0x20000000

08000ed8 <HAL_Init>:
{
 8000ed8:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eda:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <HAL_Init+0x30>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ee2:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000eea:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ef2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef4:	2003      	movs	r0, #3
 8000ef6:	f000 fa7b 	bl	80013f0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000efa:	2000      	movs	r0, #0
 8000efc:	f7ff ffd8 	bl	8000eb0 <HAL_InitTick>
  HAL_MspInit();
 8000f00:	f001 fb73 	bl	80025ea <HAL_MspInit>
}
 8000f04:	2000      	movs	r0, #0
 8000f06:	bd08      	pop	{r3, pc}
 8000f08:	40023c00 	.word	0x40023c00

08000f0c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000f0c:	4a02      	ldr	r2, [pc, #8]	; (8000f18 <HAL_IncTick+0xc>)
 8000f0e:	6813      	ldr	r3, [r2, #0]
 8000f10:	3301      	adds	r3, #1
 8000f12:	6013      	str	r3, [r2, #0]
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	200006c8 	.word	0x200006c8

08000f1c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f1c:	4b01      	ldr	r3, [pc, #4]	; (8000f24 <HAL_GetTick+0x8>)
 8000f1e:	6818      	ldr	r0, [r3, #0]
}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	200006c8 	.word	0x200006c8

08000f28 <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f28:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f2a:	4604      	mov	r4, r0
 8000f2c:	2800      	cmp	r0, #0
 8000f2e:	f000 809f 	beq.w	8001070 <HAL_ADC_Init+0x148>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f32:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000f34:	b923      	cbnz	r3, 8000f40 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f36:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f38:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f3c:	f001 fa14 	bl	8002368 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f42:	06db      	lsls	r3, r3, #27
 8000f44:	f100 8092 	bmi.w	800106c <HAL_ADC_Init+0x144>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f4a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f4e:	f023 0302 	bic.w	r3, r3, #2
 8000f52:	f043 0302 	orr.w	r3, r3, #2
 8000f56:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000f58:	4b46      	ldr	r3, [pc, #280]	; (8001074 <HAL_ADC_Init+0x14c>)
 8000f5a:	685a      	ldr	r2, [r3, #4]
 8000f5c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000f60:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000f62:	685a      	ldr	r2, [r3, #4]
 8000f64:	6861      	ldr	r1, [r4, #4]
 8000f66:	430a      	orrs	r2, r1
 8000f68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000f6a:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000f6c:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000f6e:	685a      	ldr	r2, [r3, #4]
 8000f70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000f76:	685a      	ldr	r2, [r3, #4]
 8000f78:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000f7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000f7e:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000f80:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000f82:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000f86:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000f88:	685a      	ldr	r2, [r3, #4]
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000f8e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000f90:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000f92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000f98:	689a      	ldr	r2, [r3, #8]
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f9e:	4936      	ldr	r1, [pc, #216]	; (8001078 <HAL_ADC_Init+0x150>)
 8000fa0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000fa2:	428a      	cmp	r2, r1
 8000fa4:	d056      	beq.n	8001054 <HAL_ADC_Init+0x12c>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000fa6:	6899      	ldr	r1, [r3, #8]
 8000fa8:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000fac:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000fae:	6899      	ldr	r1, [r3, #8]
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000fb4:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000fb6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000fb8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000fbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000fbe:	689a      	ldr	r2, [r3, #8]
 8000fc0:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000fc2:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000fc4:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000fc6:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000fc8:	f022 0202 	bic.w	r2, r2, #2
 8000fcc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000fce:	689a      	ldr	r2, [r3, #8]
 8000fd0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000fd4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000fd6:	6a22      	ldr	r2, [r4, #32]
 8000fd8:	2a00      	cmp	r2, #0
 8000fda:	d043      	beq.n	8001064 <HAL_ADC_Init+0x13c>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000fdc:	685a      	ldr	r2, [r3, #4]
 8000fde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000fe2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000fe4:	685a      	ldr	r2, [r3, #4]
 8000fe6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000fea:	605a      	str	r2, [r3, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fec:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000ff0:	fa92 f2a2 	rbit	r2, r2
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000ff4:	fab2 f182 	clz	r1, r2
 8000ff8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ffa:	6858      	ldr	r0, [r3, #4]
 8000ffc:	3a01      	subs	r2, #1
 8000ffe:	408a      	lsls	r2, r1
 8001000:	4302      	orrs	r2, r0
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001002:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001006:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001008:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800100c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800100e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001010:	3901      	subs	r1, #1
 8001012:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8001016:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001018:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800101a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800101c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001020:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8001022:	689a      	ldr	r2, [r3, #8]
 8001024:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8001028:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800102a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800102c:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800102e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001032:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001034:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001036:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001038:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 800103c:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800103e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001040:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001042:	f023 0303 	bic.w	r3, r3, #3
 8001046:	f043 0301 	orr.w	r3, r3, #1
 800104a:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800104c:	2300      	movs	r3, #0
 800104e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8001052:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001054:	689a      	ldr	r2, [r3, #8]
 8001056:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800105a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800105c:	689a      	ldr	r2, [r3, #8]
 800105e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001062:	e7ae      	b.n	8000fc2 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001064:	685a      	ldr	r2, [r3, #4]
 8001066:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800106a:	e7ca      	b.n	8001002 <HAL_ADC_Init+0xda>
    tmp_hal_status = HAL_ERROR;
 800106c:	2001      	movs	r0, #1
 800106e:	e7ed      	b.n	800104c <HAL_ADC_Init+0x124>
    return HAL_ERROR;
 8001070:	2001      	movs	r0, #1
}
 8001072:	bd10      	pop	{r4, pc}
 8001074:	40012300 	.word	0x40012300
 8001078:	0f000001 	.word	0x0f000001

0800107c <HAL_ADC_Start>:
{
 800107c:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 800107e:	2300      	movs	r3, #0
 8001080:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001082:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001086:	2b01      	cmp	r3, #1
 8001088:	d04e      	beq.n	8001128 <HAL_ADC_Start+0xac>
 800108a:	2301      	movs	r3, #1
 800108c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001090:	6803      	ldr	r3, [r0, #0]
 8001092:	689a      	ldr	r2, [r3, #8]
 8001094:	07d1      	lsls	r1, r2, #31
 8001096:	d505      	bpl.n	80010a4 <HAL_ADC_Start+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001098:	689a      	ldr	r2, [r3, #8]
 800109a:	07d2      	lsls	r2, r2, #31
 800109c:	d414      	bmi.n	80010c8 <HAL_ADC_Start+0x4c>
  return HAL_OK;
 800109e:	2000      	movs	r0, #0
}
 80010a0:	b002      	add	sp, #8
 80010a2:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 80010a4:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010a6:	4921      	ldr	r1, [pc, #132]	; (800112c <HAL_ADC_Start+0xb0>)
    __HAL_ADC_ENABLE(hadc);
 80010a8:	f042 0201 	orr.w	r2, r2, #1
 80010ac:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010ae:	4a20      	ldr	r2, [pc, #128]	; (8001130 <HAL_ADC_Start+0xb4>)
 80010b0:	6812      	ldr	r2, [r2, #0]
 80010b2:	fbb2 f2f1 	udiv	r2, r2, r1
 80010b6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 80010ba:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 80010bc:	9a01      	ldr	r2, [sp, #4]
 80010be:	2a00      	cmp	r2, #0
 80010c0:	d0ea      	beq.n	8001098 <HAL_ADC_Start+0x1c>
      counter--;
 80010c2:	9a01      	ldr	r2, [sp, #4]
 80010c4:	3a01      	subs	r2, #1
 80010c6:	e7f8      	b.n	80010ba <HAL_ADC_Start+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 80010c8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80010ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80010ce:	f022 0201 	bic.w	r2, r2, #1
 80010d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010d6:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010d8:	685a      	ldr	r2, [r3, #4]
 80010da:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010dc:	bf41      	itttt	mi
 80010de:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 80010e0:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80010e4:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80010e8:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010ea:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80010ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010f0:	bf1c      	itt	ne
 80010f2:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 80010f4:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80010f8:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 80010fa:	2200      	movs	r2, #0
 80010fc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001100:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001104:	601a      	str	r2, [r3, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001106:	4a0b      	ldr	r2, [pc, #44]	; (8001134 <HAL_ADC_Start+0xb8>)
 8001108:	6852      	ldr	r2, [r2, #4]
 800110a:	06d2      	lsls	r2, r2, #27
 800110c:	d108      	bne.n	8001120 <HAL_ADC_Start+0xa4>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800110e:	6898      	ldr	r0, [r3, #8]
 8001110:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8001114:	d1c3      	bne.n	800109e <HAL_ADC_Start+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001116:	689a      	ldr	r2, [r3, #8]
 8001118:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	e7bf      	b.n	80010a0 <HAL_ADC_Start+0x24>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001120:	4a05      	ldr	r2, [pc, #20]	; (8001138 <HAL_ADC_Start+0xbc>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d1bb      	bne.n	800109e <HAL_ADC_Start+0x22>
 8001126:	e7f2      	b.n	800110e <HAL_ADC_Start+0x92>
  __HAL_LOCK(hadc);
 8001128:	2002      	movs	r0, #2
 800112a:	e7b9      	b.n	80010a0 <HAL_ADC_Start+0x24>
 800112c:	000f4240 	.word	0x000f4240
 8001130:	20000000 	.word	0x20000000
 8001134:	40012300 	.word	0x40012300
 8001138:	40012000 	.word	0x40012000

0800113c <HAL_ADC_Start_DMA>:
{
 800113c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800113e:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 8001140:	2200      	movs	r2, #0
 8001142:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001144:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8001148:	2a01      	cmp	r2, #1
{
 800114a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800114c:	d065      	beq.n	800121a <HAL_ADC_Start_DMA+0xde>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800114e:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hadc);
 8001150:	2201      	movs	r2, #1
 8001152:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001156:	68aa      	ldr	r2, [r5, #8]
 8001158:	07d2      	lsls	r2, r2, #31
 800115a:	d505      	bpl.n	8001168 <HAL_ADC_Start_DMA+0x2c>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800115c:	68aa      	ldr	r2, [r5, #8]
 800115e:	07d0      	lsls	r0, r2, #31
 8001160:	d415      	bmi.n	800118e <HAL_ADC_Start_DMA+0x52>
  return HAL_OK;
 8001162:	2000      	movs	r0, #0
}
 8001164:	b003      	add	sp, #12
 8001166:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8001168:	68aa      	ldr	r2, [r5, #8]
 800116a:	f042 0201 	orr.w	r2, r2, #1
 800116e:	60aa      	str	r2, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001170:	4a2b      	ldr	r2, [pc, #172]	; (8001220 <HAL_ADC_Start_DMA+0xe4>)
 8001172:	6810      	ldr	r0, [r2, #0]
 8001174:	4a2b      	ldr	r2, [pc, #172]	; (8001224 <HAL_ADC_Start_DMA+0xe8>)
 8001176:	fbb0 f0f2 	udiv	r0, r0, r2
 800117a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800117e:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 8001180:	9a01      	ldr	r2, [sp, #4]
 8001182:	2a00      	cmp	r2, #0
 8001184:	d0ea      	beq.n	800115c <HAL_ADC_Start_DMA+0x20>
      counter--;
 8001186:	9a01      	ldr	r2, [sp, #4]
 8001188:	3a01      	subs	r2, #1
 800118a:	9201      	str	r2, [sp, #4]
 800118c:	e7f8      	b.n	8001180 <HAL_ADC_Start_DMA+0x44>
    ADC_STATE_CLR_SET(hadc->State,
 800118e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001190:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8001194:	f020 0001 	bic.w	r0, r0, #1
 8001198:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800119c:	6420      	str	r0, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800119e:	686a      	ldr	r2, [r5, #4]
 80011a0:	0552      	lsls	r2, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011a2:	bf41      	itttt	mi
 80011a4:	6c20      	ldrmi	r0, [r4, #64]	; 0x40
 80011a6:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 80011aa:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 80011ae:	6420      	strmi	r0, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011b0:	6c22      	ldr	r2, [r4, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80011b2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011b8:	bf1c      	itt	ne
 80011ba:	6c62      	ldrne	r2, [r4, #68]	; 0x44
 80011bc:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80011c0:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 80011c2:	2200      	movs	r2, #0
 80011c4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80011c8:	4a17      	ldr	r2, [pc, #92]	; (8001228 <HAL_ADC_Start_DMA+0xec>)
 80011ca:	63c2      	str	r2, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80011cc:	4a17      	ldr	r2, [pc, #92]	; (800122c <HAL_ADC_Start_DMA+0xf0>)
 80011ce:	6402      	str	r2, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80011d0:	4a17      	ldr	r2, [pc, #92]	; (8001230 <HAL_ADC_Start_DMA+0xf4>)
 80011d2:	64c2      	str	r2, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011d4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011d8:	602a      	str	r2, [r5, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80011da:	686a      	ldr	r2, [r5, #4]
 80011dc:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80011e0:	606a      	str	r2, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80011e2:	68aa      	ldr	r2, [r5, #8]
 80011e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011e8:	60aa      	str	r2, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80011ea:	460a      	mov	r2, r1
 80011ec:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 80011f0:	f000 fa0c 	bl	800160c <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011f4:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <HAL_ADC_Start_DMA+0xf8>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f013 0f1f 	tst.w	r3, #31
 80011fc:	6823      	ldr	r3, [r4, #0]
 80011fe:	d108      	bne.n	8001212 <HAL_ADC_Start_DMA+0xd6>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001200:	6898      	ldr	r0, [r3, #8]
 8001202:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8001206:	d1ac      	bne.n	8001162 <HAL_ADC_Start_DMA+0x26>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001208:	689a      	ldr	r2, [r3, #8]
 800120a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	e7a8      	b.n	8001164 <HAL_ADC_Start_DMA+0x28>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001212:	4a09      	ldr	r2, [pc, #36]	; (8001238 <HAL_ADC_Start_DMA+0xfc>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d1a4      	bne.n	8001162 <HAL_ADC_Start_DMA+0x26>
 8001218:	e7f2      	b.n	8001200 <HAL_ADC_Start_DMA+0xc4>
  __HAL_LOCK(hadc);
 800121a:	2002      	movs	r0, #2
 800121c:	e7a2      	b.n	8001164 <HAL_ADC_Start_DMA+0x28>
 800121e:	bf00      	nop
 8001220:	20000000 	.word	0x20000000
 8001224:	000f4240 	.word	0x000f4240
 8001228:	0800123f 	.word	0x0800123f
 800122c:	080012a1 	.word	0x080012a1
 8001230:	080012ad 	.word	0x080012ad
 8001234:	40012300 	.word	0x40012300
 8001238:	40012000 	.word	0x40012000

0800123c <HAL_ADC_ConvCpltCallback>:
 800123c:	4770      	bx	lr

0800123e <ADC_DMAConvCplt>:
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800123e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001240:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001242:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8001246:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001248:	d124      	bne.n	8001294 <ADC_DMAConvCplt+0x56>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800124a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800124c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001250:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	6891      	ldr	r1, [r2, #8]
 8001256:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 800125a:	d117      	bne.n	800128c <ADC_DMAConvCplt+0x4e>
 800125c:	6999      	ldr	r1, [r3, #24]
 800125e:	b9a9      	cbnz	r1, 800128c <ADC_DMAConvCplt+0x4e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001260:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001262:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 8001266:	d002      	beq.n	800126e <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001268:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800126a:	0549      	lsls	r1, r1, #21
 800126c:	d40e      	bmi.n	800128c <ADC_DMAConvCplt+0x4e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800126e:	6851      	ldr	r1, [r2, #4]
 8001270:	f021 0120 	bic.w	r1, r1, #32
 8001274:	6051      	str	r1, [r2, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001276:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001278:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800127c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800127e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001280:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001282:	bf5e      	ittt	pl
 8001284:	6c1a      	ldrpl	r2, [r3, #64]	; 0x40
 8001286:	f042 0201 	orrpl.w	r2, r2, #1
 800128a:	641a      	strpl	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ffd5 	bl	800123c <HAL_ADC_ConvCpltCallback>
 8001292:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  }
}
 8001296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800129a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129c:	4718      	bx	r3

0800129e <HAL_ADC_ConvHalfCpltCallback>:
 800129e:	4770      	bx	lr

080012a0 <ADC_DMAHalfConvCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80012a0:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  /* Conversion complete callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80012a2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80012a4:	f7ff fffb 	bl	800129e <HAL_ADC_ConvHalfCpltCallback>
 80012a8:	bd08      	pop	{r3, pc}

080012aa <HAL_ADC_ErrorCallback>:
{
 80012aa:	4770      	bx	lr

080012ac <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80012ac:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80012ae:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80012b0:	2340      	movs	r3, #64	; 0x40
 80012b2:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80012b4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80012b6:	f043 0304 	orr.w	r3, r3, #4
 80012ba:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_ADC_ErrorCallback(hadc); 
 80012bc:	f7ff fff5 	bl	80012aa <HAL_ADC_ErrorCallback>
 80012c0:	bd08      	pop	{r3, pc}
	...

080012c4 <HAL_ADC_ConfigChannel>:
{
 80012c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 80012c6:	2300      	movs	r3, #0
 80012c8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80012ca:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	f000 8083 	beq.w	80013da <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012d4:	680d      	ldr	r5, [r1, #0]
 80012d6:	6804      	ldr	r4, [r0, #0]
 80012d8:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 80012da:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012dc:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 80012de:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80012e2:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012e4:	d92a      	bls.n	800133c <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012e6:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80012ea:	68e7      	ldr	r7, [r4, #12]
 80012ec:	3b1e      	subs	r3, #30
 80012ee:	f04f 0e07 	mov.w	lr, #7
 80012f2:	fa0e fe03 	lsl.w	lr, lr, r3
 80012f6:	ea27 070e 	bic.w	r7, r7, lr
 80012fa:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012fc:	68e7      	ldr	r7, [r4, #12]
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	433b      	orrs	r3, r7
 8001304:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8001306:	684a      	ldr	r2, [r1, #4]
 8001308:	2a06      	cmp	r2, #6
 800130a:	ea4f 0382 	mov.w	r3, r2, lsl #2
 800130e:	d825      	bhi.n	800135c <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001310:	4413      	add	r3, r2
 8001312:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8001314:	1f59      	subs	r1, r3, #5
 8001316:	231f      	movs	r3, #31
 8001318:	408b      	lsls	r3, r1
 800131a:	ea27 0303 	bic.w	r3, r7, r3
 800131e:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001320:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001322:	fa06 f101 	lsl.w	r1, r6, r1
 8001326:	4311      	orrs	r1, r2
 8001328:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800132a:	4b2d      	ldr	r3, [pc, #180]	; (80013e0 <HAL_ADC_ConfigChannel+0x11c>)
 800132c:	429c      	cmp	r4, r3
 800132e:	d034      	beq.n	800139a <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 8001330:	2300      	movs	r3, #0
 8001332:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001336:	4618      	mov	r0, r3
}
 8001338:	b003      	add	sp, #12
 800133a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800133c:	6927      	ldr	r7, [r4, #16]
 800133e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001342:	f04f 0e07 	mov.w	lr, #7
 8001346:	fa0e fe03 	lsl.w	lr, lr, r3
 800134a:	ea27 070e 	bic.w	r7, r7, lr
 800134e:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001350:	6927      	ldr	r7, [r4, #16]
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	433b      	orrs	r3, r7
 8001358:	6123      	str	r3, [r4, #16]
 800135a:	e7d4      	b.n	8001306 <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 800135c:	2a0c      	cmp	r2, #12
 800135e:	d80e      	bhi.n	800137e <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001360:	4413      	add	r3, r2
 8001362:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001364:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8001368:	231f      	movs	r3, #31
 800136a:	4093      	lsls	r3, r2
 800136c:	ea21 0303 	bic.w	r3, r1, r3
 8001370:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001372:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001374:	fa06 f202 	lsl.w	r2, r6, r2
 8001378:	431a      	orrs	r2, r3
 800137a:	6322      	str	r2, [r4, #48]	; 0x30
 800137c:	e7d5      	b.n	800132a <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800137e:	4413      	add	r3, r2
 8001380:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001382:	3b41      	subs	r3, #65	; 0x41
 8001384:	221f      	movs	r2, #31
 8001386:	409a      	lsls	r2, r3
 8001388:	ea21 0202 	bic.w	r2, r1, r2
 800138c:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800138e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001390:	fa06 f103 	lsl.w	r1, r6, r3
 8001394:	4311      	orrs	r1, r2
 8001396:	62e1      	str	r1, [r4, #44]	; 0x2c
 8001398:	e7c7      	b.n	800132a <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800139a:	2d12      	cmp	r5, #18
 800139c:	d104      	bne.n	80013a8 <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800139e:	4a11      	ldr	r2, [pc, #68]	; (80013e4 <HAL_ADC_ConfigChannel+0x120>)
 80013a0:	6853      	ldr	r3, [r2, #4]
 80013a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013a6:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013a8:	f1a5 0310 	sub.w	r3, r5, #16
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d8bf      	bhi.n	8001330 <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80013b0:	4a0c      	ldr	r2, [pc, #48]	; (80013e4 <HAL_ADC_ConfigChannel+0x120>)
 80013b2:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80013b4:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80013b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013ba:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80013bc:	d1b8      	bne.n	8001330 <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013be:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <HAL_ADC_ConfigChannel+0x124>)
 80013c0:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <HAL_ADC_ConfigChannel+0x128>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80013c8:	230a      	movs	r3, #10
 80013ca:	4353      	muls	r3, r2
        counter--;
 80013cc:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80013ce:	9b01      	ldr	r3, [sp, #4]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0ad      	beq.n	8001330 <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 80013d4:	9b01      	ldr	r3, [sp, #4]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	e7f8      	b.n	80013cc <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 80013da:	2002      	movs	r0, #2
 80013dc:	e7ac      	b.n	8001338 <HAL_ADC_ConfigChannel+0x74>
 80013de:	bf00      	nop
 80013e0:	40012000 	.word	0x40012000
 80013e4:	40012300 	.word	0x40012300
 80013e8:	20000000 	.word	0x20000000
 80013ec:	000f4240 	.word	0x000f4240

080013f0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f0:	4a07      	ldr	r2, [pc, #28]	; (8001410 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80013f2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013f4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80013f8:	041b      	lsls	r3, r3, #16
 80013fa:	0c1b      	lsrs	r3, r3, #16
 80013fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001400:	0200      	lsls	r0, r0, #8
 8001402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001406:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800140a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800140c:	60d3      	str	r3, [r2, #12]
 800140e:	4770      	bx	lr
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001414:	4b17      	ldr	r3, [pc, #92]	; (8001474 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001416:	b530      	push	{r4, r5, lr}
 8001418:	68dc      	ldr	r4, [r3, #12]
 800141a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800141e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001422:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001424:	2b04      	cmp	r3, #4
 8001426:	bf28      	it	cs
 8001428:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800142a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800142c:	f04f 0501 	mov.w	r5, #1
 8001430:	fa05 f303 	lsl.w	r3, r5, r3
 8001434:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001438:	bf8c      	ite	hi
 800143a:	3c03      	subhi	r4, #3
 800143c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143e:	4019      	ands	r1, r3
 8001440:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001442:	fa05 f404 	lsl.w	r4, r5, r4
 8001446:	3c01      	subs	r4, #1
 8001448:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800144a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800144c:	ea42 0201 	orr.w	r2, r2, r1
 8001450:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001454:	bfaf      	iteee	ge
 8001456:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145a:	f000 000f 	andlt.w	r0, r0, #15
 800145e:	4b06      	ldrlt	r3, [pc, #24]	; (8001478 <HAL_NVIC_SetPriority+0x64>)
 8001460:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001462:	bfa5      	ittet	ge
 8001464:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001468:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001470:	bd30      	pop	{r4, r5, pc}
 8001472:	bf00      	nop
 8001474:	e000ed00 	.word	0xe000ed00
 8001478:	e000ed14 	.word	0xe000ed14

0800147c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800147c:	0942      	lsrs	r2, r0, #5
 800147e:	2301      	movs	r3, #1
 8001480:	f000 001f 	and.w	r0, r0, #31
 8001484:	fa03 f000 	lsl.w	r0, r3, r0
 8001488:	4b01      	ldr	r3, [pc, #4]	; (8001490 <HAL_NVIC_EnableIRQ+0x14>)
 800148a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800148e:	4770      	bx	lr
 8001490:	e000e100 	.word	0xe000e100

08001494 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001494:	3801      	subs	r0, #1
 8001496:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800149a:	d20a      	bcs.n	80014b2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800149c:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149e:	4a07      	ldr	r2, [pc, #28]	; (80014bc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014a0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a2:	21f0      	movs	r1, #240	; 0xf0
 80014a4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014aa:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014ac:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80014b2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	e000e010 	.word	0xe000e010
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80014c0:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80014c2:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80014c4:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80014c6:	bf0c      	ite	eq
 80014c8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80014cc:	f022 0204 	bicne.w	r2, r2, #4
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	4770      	bx	lr
 80014d4:	e000e010 	.word	0xe000e010

080014d8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80014d8:	4770      	bx	lr

080014da <HAL_SYSTICK_IRQHandler>:
{
 80014da:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80014dc:	f7ff fffc 	bl	80014d8 <HAL_SYSTICK_Callback>
 80014e0:	bd08      	pop	{r3, pc}
	...

080014e4 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80014e4:	6803      	ldr	r3, [r0, #0]
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80014ec:	f023 0303 	bic.w	r3, r3, #3
 80014f0:	2118      	movs	r1, #24
 80014f2:	3a10      	subs	r2, #16
 80014f4:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80014f8:	4904      	ldr	r1, [pc, #16]	; (800150c <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80014fa:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80014fc:	bf88      	it	hi
 80014fe:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001500:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001502:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001504:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 8001506:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	08005600 	.word	0x08005600

08001510 <HAL_DMA_Init>:
{
 8001510:	b570      	push	{r4, r5, r6, lr}
 8001512:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001514:	f7ff fd02 	bl	8000f1c <HAL_GetTick>
 8001518:	4605      	mov	r5, r0
  if(hdma == NULL)
 800151a:	2c00      	cmp	r4, #0
 800151c:	d071      	beq.n	8001602 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 800151e:	2300      	movs	r3, #0
 8001520:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8001524:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8001526:	2302      	movs	r3, #2
 8001528:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800152c:	6813      	ldr	r3, [r2, #0]
 800152e:	f023 0301 	bic.w	r3, r3, #1
 8001532:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001534:	6821      	ldr	r1, [r4, #0]
 8001536:	680b      	ldr	r3, [r1, #0]
 8001538:	07d8      	lsls	r0, r3, #31
 800153a:	d43c      	bmi.n	80015b6 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 800153c:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800153e:	4d32      	ldr	r5, [pc, #200]	; (8001608 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001540:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001542:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001544:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001546:	68a3      	ldr	r3, [r4, #8]
 8001548:	4313      	orrs	r3, r2
 800154a:	68e2      	ldr	r2, [r4, #12]
 800154c:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800154e:	6922      	ldr	r2, [r4, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	6962      	ldr	r2, [r4, #20]
 8001554:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001556:	69e2      	ldr	r2, [r4, #28]
 8001558:	4303      	orrs	r3, r0
 800155a:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 800155c:	6a22      	ldr	r2, [r4, #32]
 800155e:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001560:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001562:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001564:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001568:	bf01      	itttt	eq
 800156a:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 800156c:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 800156e:	4335      	orreq	r5, r6
 8001570:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8001572:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8001574:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001576:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001578:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 800157c:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001580:	d10b      	bne.n	800159a <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8001582:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001584:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8001586:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001588:	b13d      	cbz	r5, 800159a <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800158a:	b9f8      	cbnz	r0, 80015cc <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 800158c:	2a01      	cmp	r2, #1
 800158e:	d02d      	beq.n	80015ec <HAL_DMA_Init+0xdc>
 8001590:	d301      	bcc.n	8001596 <HAL_DMA_Init+0x86>
 8001592:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001594:	d101      	bne.n	800159a <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001596:	01ea      	lsls	r2, r5, #7
 8001598:	d42b      	bmi.n	80015f2 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 800159a:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800159c:	4620      	mov	r0, r4
 800159e:	f7ff ffa1 	bl	80014e4 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015a2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80015a4:	233f      	movs	r3, #63	; 0x3f
 80015a6:	4093      	lsls	r3, r2
 80015a8:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015aa:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80015ac:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015ae:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80015b0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80015b4:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015b6:	f7ff fcb1 	bl	8000f1c <HAL_GetTick>
 80015ba:	1b40      	subs	r0, r0, r5
 80015bc:	2805      	cmp	r0, #5
 80015be:	d9b9      	bls.n	8001534 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015c0:	2320      	movs	r3, #32
 80015c2:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015c4:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 80015c6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80015ca:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80015cc:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80015d0:	d113      	bne.n	80015fa <HAL_DMA_Init+0xea>
    switch (tmp)
 80015d2:	2a03      	cmp	r2, #3
 80015d4:	d8e1      	bhi.n	800159a <HAL_DMA_Init+0x8a>
 80015d6:	a001      	add	r0, pc, #4	; (adr r0, 80015dc <HAL_DMA_Init+0xcc>)
 80015d8:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80015dc:	080015f3 	.word	0x080015f3
 80015e0:	08001597 	.word	0x08001597
 80015e4:	080015f3 	.word	0x080015f3
 80015e8:	080015ed 	.word	0x080015ed
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015ec:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80015f0:	d1d3      	bne.n	800159a <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015f2:	2340      	movs	r3, #64	; 0x40
 80015f4:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80015f6:	2001      	movs	r0, #1
 80015f8:	e7e5      	b.n	80015c6 <HAL_DMA_Init+0xb6>
    switch (tmp)
 80015fa:	2a02      	cmp	r2, #2
 80015fc:	d9f9      	bls.n	80015f2 <HAL_DMA_Init+0xe2>
 80015fe:	2a03      	cmp	r2, #3
 8001600:	e7c8      	b.n	8001594 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8001602:	2001      	movs	r0, #1
 8001604:	bd70      	pop	{r4, r5, r6, pc}
 8001606:	bf00      	nop
 8001608:	f010803f 	.word	0xf010803f

0800160c <HAL_DMA_Start_IT>:
{
 800160c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 800160e:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8001612:	2c01      	cmp	r4, #1
 8001614:	d036      	beq.n	8001684 <HAL_DMA_Start_IT+0x78>
 8001616:	2401      	movs	r4, #1
 8001618:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800161c:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001620:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 8001622:	2c01      	cmp	r4, #1
 8001624:	f04f 0500 	mov.w	r5, #0
 8001628:	f04f 0402 	mov.w	r4, #2
 800162c:	d128      	bne.n	8001680 <HAL_DMA_Start_IT+0x74>
    hdma->State = HAL_DMA_STATE_BUSY;
 800162e:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001632:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001634:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001636:	6825      	ldr	r5, [r4, #0]
 8001638:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 800163c:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800163e:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001640:	6883      	ldr	r3, [r0, #8]
 8001642:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8001644:	bf0e      	itee	eq
 8001646:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8001648:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 800164a:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800164c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 800164e:	bf08      	it	eq
 8001650:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001652:	233f      	movs	r3, #63	; 0x3f
 8001654:	4093      	lsls	r3, r2
 8001656:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001658:	6823      	ldr	r3, [r4, #0]
 800165a:	f043 0316 	orr.w	r3, r3, #22
 800165e:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001660:	6963      	ldr	r3, [r4, #20]
 8001662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001666:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8001668:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800166a:	b11b      	cbz	r3, 8001674 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 800166c:	6823      	ldr	r3, [r4, #0]
 800166e:	f043 0308 	orr.w	r3, r3, #8
 8001672:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001674:	6823      	ldr	r3, [r4, #0]
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800167c:	2000      	movs	r0, #0
 800167e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8001680:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8001684:	2002      	movs	r0, #2
}
 8001686:	bd70      	pop	{r4, r5, r6, pc}

08001688 <HAL_DMA_IRQHandler>:
{
 8001688:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 800168a:	2300      	movs	r3, #0
 800168c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800168e:	4b5a      	ldr	r3, [pc, #360]	; (80017f8 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001690:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8001692:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001694:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8001696:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001698:	2208      	movs	r2, #8
 800169a:	409a      	lsls	r2, r3
 800169c:	4216      	tst	r6, r2
{
 800169e:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016a0:	d00c      	beq.n	80016bc <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80016a2:	6801      	ldr	r1, [r0, #0]
 80016a4:	6808      	ldr	r0, [r1, #0]
 80016a6:	0740      	lsls	r0, r0, #29
 80016a8:	d508      	bpl.n	80016bc <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80016aa:	6808      	ldr	r0, [r1, #0]
 80016ac:	f020 0004 	bic.w	r0, r0, #4
 80016b0:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80016b2:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80016b4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80016b6:	f042 0201 	orr.w	r2, r2, #1
 80016ba:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80016bc:	4a4f      	ldr	r2, [pc, #316]	; (80017fc <HAL_DMA_IRQHandler+0x174>)
 80016be:	409a      	lsls	r2, r3
 80016c0:	4216      	tst	r6, r2
 80016c2:	d008      	beq.n	80016d6 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80016c4:	6821      	ldr	r1, [r4, #0]
 80016c6:	6949      	ldr	r1, [r1, #20]
 80016c8:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80016ca:	bf41      	itttt	mi
 80016cc:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80016ce:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80016d0:	f042 0202 	orrmi.w	r2, r2, #2
 80016d4:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80016d6:	4a4a      	ldr	r2, [pc, #296]	; (8001800 <HAL_DMA_IRQHandler+0x178>)
 80016d8:	409a      	lsls	r2, r3
 80016da:	4216      	tst	r6, r2
 80016dc:	d008      	beq.n	80016f0 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80016de:	6821      	ldr	r1, [r4, #0]
 80016e0:	6809      	ldr	r1, [r1, #0]
 80016e2:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80016e4:	bf41      	itttt	mi
 80016e6:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80016e8:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80016ea:	f042 0204 	orrmi.w	r2, r2, #4
 80016ee:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80016f0:	2210      	movs	r2, #16
 80016f2:	409a      	lsls	r2, r3
 80016f4:	4216      	tst	r6, r2
 80016f6:	d010      	beq.n	800171a <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80016f8:	6823      	ldr	r3, [r4, #0]
 80016fa:	6819      	ldr	r1, [r3, #0]
 80016fc:	0709      	lsls	r1, r1, #28
 80016fe:	d50c      	bpl.n	800171a <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001700:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	0350      	lsls	r0, r2, #13
 8001706:	d535      	bpl.n	8001774 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	0319      	lsls	r1, r3, #12
 800170c:	d401      	bmi.n	8001712 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 800170e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001710:	e000      	b.n	8001714 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001712:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8001714:	b10b      	cbz	r3, 800171a <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8001716:	4620      	mov	r0, r4
 8001718:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800171a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800171c:	2220      	movs	r2, #32
 800171e:	408a      	lsls	r2, r1
 8001720:	4216      	tst	r6, r2
 8001722:	d038      	beq.n	8001796 <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001724:	6823      	ldr	r3, [r4, #0]
 8001726:	6818      	ldr	r0, [r3, #0]
 8001728:	06c6      	lsls	r6, r0, #27
 800172a:	d534      	bpl.n	8001796 <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800172c:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800172e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8001732:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001734:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001736:	d125      	bne.n	8001784 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001738:	f022 0216 	bic.w	r2, r2, #22
 800173c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800173e:	695a      	ldr	r2, [r3, #20]
 8001740:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001744:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001746:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001748:	b90a      	cbnz	r2, 800174e <HAL_DMA_IRQHandler+0xc6>
 800174a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800174c:	b11a      	cbz	r2, 8001756 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	f022 0208 	bic.w	r2, r2, #8
 8001754:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001756:	233f      	movs	r3, #63	; 0x3f
 8001758:	408b      	lsls	r3, r1
 800175a:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 800175c:	2300      	movs	r3, #0
 800175e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001762:	2301      	movs	r3, #1
 8001764:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001768:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 800176a:	b10b      	cbz	r3, 8001770 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 800176c:	4620      	mov	r0, r4
 800176e:	4798      	blx	r3
}
 8001770:	b003      	add	sp, #12
 8001772:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001778:	bf5e      	ittt	pl
 800177a:	681a      	ldrpl	r2, [r3, #0]
 800177c:	f022 0208 	bicpl.w	r2, r2, #8
 8001780:	601a      	strpl	r2, [r3, #0]
 8001782:	e7c4      	b.n	800170e <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001784:	0350      	lsls	r0, r2, #13
 8001786:	d528      	bpl.n	80017da <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	0319      	lsls	r1, r3, #12
 800178c:	d432      	bmi.n	80017f4 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 800178e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8001790:	b10b      	cbz	r3, 8001796 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8001792:	4620      	mov	r0, r4
 8001794:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001796:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001798:	2b00      	cmp	r3, #0
 800179a:	d0e9      	beq.n	8001770 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800179c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800179e:	07da      	lsls	r2, r3, #31
 80017a0:	d519      	bpl.n	80017d6 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 80017a2:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 80017a4:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 80017a6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80017aa:	6813      	ldr	r3, [r2, #0]
 80017ac:	f023 0301 	bic.w	r3, r3, #1
 80017b0:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80017b2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80017b6:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 80017ba:	9b01      	ldr	r3, [sp, #4]
 80017bc:	3301      	adds	r3, #1
 80017be:	429f      	cmp	r7, r3
 80017c0:	9301      	str	r3, [sp, #4]
 80017c2:	d302      	bcc.n	80017ca <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80017c4:	6813      	ldr	r3, [r2, #0]
 80017c6:	07db      	lsls	r3, r3, #31
 80017c8:	d4f7      	bmi.n	80017ba <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 80017ca:	2300      	movs	r3, #0
 80017cc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80017d0:	2301      	movs	r3, #1
 80017d2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80017d6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80017d8:	e7c7      	b.n	800176a <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80017e0:	d108      	bne.n	80017f4 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017e2:	6819      	ldr	r1, [r3, #0]
 80017e4:	f021 0110 	bic.w	r1, r1, #16
 80017e8:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80017ea:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80017ec:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80017f0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80017f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80017f6:	e7cb      	b.n	8001790 <HAL_DMA_IRQHandler+0x108>
 80017f8:	20000000 	.word	0x20000000
 80017fc:	00800001 	.word	0x00800001
 8001800:	00800004 	.word	0x00800004

08001804 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001808:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800180a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80019bc <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001810:	4a68      	ldr	r2, [pc, #416]	; (80019b4 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001812:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80019c0 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001816:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001818:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800181a:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800181e:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001820:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001824:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8001828:	45b6      	cmp	lr, r6
 800182a:	f040 80ae 	bne.w	800198a <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800182e:	684c      	ldr	r4, [r1, #4]
 8001830:	f024 0710 	bic.w	r7, r4, #16
 8001834:	2f02      	cmp	r7, #2
 8001836:	d116      	bne.n	8001866 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8001838:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800183c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001840:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001844:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001848:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800184c:	f04f 0c0f 	mov.w	ip, #15
 8001850:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001854:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001858:	690d      	ldr	r5, [r1, #16]
 800185a:	fa05 f50b 	lsl.w	r5, r5, fp
 800185e:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8001862:	f8ca 5020 	str.w	r5, [sl, #32]
 8001866:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800186a:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800186c:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001870:	fa05 f50a 	lsl.w	r5, r5, sl
 8001874:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001876:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800187a:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800187e:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001882:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001884:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001888:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 800188a:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800188e:	d811      	bhi.n	80018b4 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001890:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001892:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001896:	68cf      	ldr	r7, [r1, #12]
 8001898:	fa07 fc0a 	lsl.w	ip, r7, sl
 800189c:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80018a0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80018a2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018a4:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018a8:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80018ac:	409f      	lsls	r7, r3
 80018ae:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80018b2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80018b4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018b6:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018b8:	688f      	ldr	r7, [r1, #8]
 80018ba:	fa07 f70a 	lsl.w	r7, r7, sl
 80018be:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80018c0:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018c2:	00e5      	lsls	r5, r4, #3
 80018c4:	d561      	bpl.n	800198a <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c6:	f04f 0b00 	mov.w	fp, #0
 80018ca:	f8cd b00c 	str.w	fp, [sp, #12]
 80018ce:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018d2:	4d39      	ldr	r5, [pc, #228]	; (80019b8 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d4:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80018d8:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80018dc:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80018e0:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80018e4:	9703      	str	r7, [sp, #12]
 80018e6:	9f03      	ldr	r7, [sp, #12]
 80018e8:	f023 0703 	bic.w	r7, r3, #3
 80018ec:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80018f0:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018f4:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80018f8:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018fc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001900:	f04f 0e0f 	mov.w	lr, #15
 8001904:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001908:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800190a:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800190e:	d043      	beq.n	8001998 <HAL_GPIO_Init+0x194>
 8001910:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001914:	42a8      	cmp	r0, r5
 8001916:	d041      	beq.n	800199c <HAL_GPIO_Init+0x198>
 8001918:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800191c:	42a8      	cmp	r0, r5
 800191e:	d03f      	beq.n	80019a0 <HAL_GPIO_Init+0x19c>
 8001920:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001924:	42a8      	cmp	r0, r5
 8001926:	d03d      	beq.n	80019a4 <HAL_GPIO_Init+0x1a0>
 8001928:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800192c:	42a8      	cmp	r0, r5
 800192e:	d03b      	beq.n	80019a8 <HAL_GPIO_Init+0x1a4>
 8001930:	4548      	cmp	r0, r9
 8001932:	d03b      	beq.n	80019ac <HAL_GPIO_Init+0x1a8>
 8001934:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001938:	42a8      	cmp	r0, r5
 800193a:	d039      	beq.n	80019b0 <HAL_GPIO_Init+0x1ac>
 800193c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001940:	42a8      	cmp	r0, r5
 8001942:	bf14      	ite	ne
 8001944:	2508      	movne	r5, #8
 8001946:	2507      	moveq	r5, #7
 8001948:	fa05 f50c 	lsl.w	r5, r5, ip
 800194c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001950:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001952:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001954:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001956:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800195a:	bf0c      	ite	eq
 800195c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800195e:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001960:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8001962:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001964:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001968:	bf0c      	ite	eq
 800196a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800196c:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800196e:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001970:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001972:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001976:	bf0c      	ite	eq
 8001978:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800197a:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 800197c:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800197e:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001980:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001982:	bf54      	ite	pl
 8001984:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001986:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001988:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800198a:	3301      	adds	r3, #1
 800198c:	2b10      	cmp	r3, #16
 800198e:	f47f af44 	bne.w	800181a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001992:	b005      	add	sp, #20
 8001994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001998:	465d      	mov	r5, fp
 800199a:	e7d5      	b.n	8001948 <HAL_GPIO_Init+0x144>
 800199c:	2501      	movs	r5, #1
 800199e:	e7d3      	b.n	8001948 <HAL_GPIO_Init+0x144>
 80019a0:	2502      	movs	r5, #2
 80019a2:	e7d1      	b.n	8001948 <HAL_GPIO_Init+0x144>
 80019a4:	2503      	movs	r5, #3
 80019a6:	e7cf      	b.n	8001948 <HAL_GPIO_Init+0x144>
 80019a8:	2504      	movs	r5, #4
 80019aa:	e7cd      	b.n	8001948 <HAL_GPIO_Init+0x144>
 80019ac:	2505      	movs	r5, #5
 80019ae:	e7cb      	b.n	8001948 <HAL_GPIO_Init+0x144>
 80019b0:	2506      	movs	r5, #6
 80019b2:	e7c9      	b.n	8001948 <HAL_GPIO_Init+0x144>
 80019b4:	40013c00 	.word	0x40013c00
 80019b8:	40020000 	.word	0x40020000
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40021400 	.word	0x40021400

080019c4 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019c4:	6803      	ldr	r3, [r0, #0]
{
 80019c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80019c8:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ca:	07d8      	lsls	r0, r3, #31
 80019cc:	d43b      	bmi.n	8001a46 <HAL_RCC_OscConfig+0x82>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ce:	6823      	ldr	r3, [r4, #0]
 80019d0:	0799      	lsls	r1, r3, #30
 80019d2:	f100 8086 	bmi.w	8001ae2 <HAL_RCC_OscConfig+0x11e>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019d6:	6823      	ldr	r3, [r4, #0]
 80019d8:	071e      	lsls	r6, r3, #28
 80019da:	f100 80d1 	bmi.w	8001b80 <HAL_RCC_OscConfig+0x1bc>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019de:	6823      	ldr	r3, [r4, #0]
 80019e0:	075d      	lsls	r5, r3, #29
 80019e2:	d52a      	bpl.n	8001a3a <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80019e4:	2300      	movs	r3, #0
 80019e6:	9301      	str	r3, [sp, #4]
 80019e8:	4b8e      	ldr	r3, [pc, #568]	; (8001c24 <HAL_RCC_OscConfig+0x260>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80019ea:	4d8f      	ldr	r5, [pc, #572]	; (8001c28 <HAL_RCC_OscConfig+0x264>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80019ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019f2:	641a      	str	r2, [r3, #64]	; 0x40
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fa:	9301      	str	r3, [sp, #4]
 80019fc:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80019fe:	682b      	ldr	r3, [r5, #0]
 8001a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a04:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8001a06:	f7ff fa89 	bl	8000f1c <HAL_GetTick>
 8001a0a:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001a0c:	682b      	ldr	r3, [r5, #0]
 8001a0e:	05da      	lsls	r2, r3, #23
 8001a10:	f140 80d8 	bpl.w	8001bc4 <HAL_RCC_OscConfig+0x200>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a14:	68a3      	ldr	r3, [r4, #8]
 8001a16:	4d83      	ldr	r5, [pc, #524]	; (8001c24 <HAL_RCC_OscConfig+0x260>)
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	f040 80da 	bne.w	8001bd2 <HAL_RCC_OscConfig+0x20e>
 8001a1e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	672b      	str	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a26:	f7ff fa79 	bl	8000f1c <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a2a:	4d7e      	ldr	r5, [pc, #504]	; (8001c24 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 8001a2c:	4606      	mov	r6, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a2e:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a32:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001a34:	079b      	lsls	r3, r3, #30
 8001a36:	f140 80ed 	bpl.w	8001c14 <HAL_RCC_OscConfig+0x250>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a3a:	69a2      	ldr	r2, [r4, #24]
 8001a3c:	2a00      	cmp	r2, #0
 8001a3e:	f040 80f9 	bne.w	8001c34 <HAL_RCC_OscConfig+0x270>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001a42:	2000      	movs	r0, #0
 8001a44:	e015      	b.n	8001a72 <HAL_RCC_OscConfig+0xae>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a46:	4b77      	ldr	r3, [pc, #476]	; (8001c24 <HAL_RCC_OscConfig+0x260>)
 8001a48:	689a      	ldr	r2, [r3, #8]
 8001a4a:	f002 020c 	and.w	r2, r2, #12
 8001a4e:	2a04      	cmp	r2, #4
 8001a50:	d007      	beq.n	8001a62 <HAL_RCC_OscConfig+0x9e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a58:	2a08      	cmp	r2, #8
 8001a5a:	d10c      	bne.n	8001a76 <HAL_RCC_OscConfig+0xb2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	025a      	lsls	r2, r3, #9
 8001a60:	d509      	bpl.n	8001a76 <HAL_RCC_OscConfig+0xb2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a62:	4b70      	ldr	r3, [pc, #448]	; (8001c24 <HAL_RCC_OscConfig+0x260>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	039b      	lsls	r3, r3, #14
 8001a68:	d5b1      	bpl.n	80019ce <HAL_RCC_OscConfig+0xa>
 8001a6a:	6863      	ldr	r3, [r4, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1ae      	bne.n	80019ce <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 8001a70:	2001      	movs	r0, #1
}
 8001a72:	b003      	add	sp, #12
 8001a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a76:	6863      	ldr	r3, [r4, #4]
 8001a78:	4d6a      	ldr	r5, [pc, #424]	; (8001c24 <HAL_RCC_OscConfig+0x260>)
 8001a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a7e:	d111      	bne.n	8001aa4 <HAL_RCC_OscConfig+0xe0>
 8001a80:	682b      	ldr	r3, [r5, #0]
 8001a82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a86:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001a88:	f7ff fa48 	bl	8000f1c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8c:	4d65      	ldr	r5, [pc, #404]	; (8001c24 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 8001a8e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a90:	682b      	ldr	r3, [r5, #0]
 8001a92:	039f      	lsls	r7, r3, #14
 8001a94:	d49b      	bmi.n	80019ce <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a96:	f7ff fa41 	bl	8000f1c <HAL_GetTick>
 8001a9a:	1b80      	subs	r0, r0, r6
 8001a9c:	2864      	cmp	r0, #100	; 0x64
 8001a9e:	d9f7      	bls.n	8001a90 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8001aa0:	2003      	movs	r0, #3
 8001aa2:	e7e6      	b.n	8001a72 <HAL_RCC_OscConfig+0xae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aa8:	d104      	bne.n	8001ab4 <HAL_RCC_OscConfig+0xf0>
 8001aaa:	682b      	ldr	r3, [r5, #0]
 8001aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab0:	602b      	str	r3, [r5, #0]
 8001ab2:	e7e5      	b.n	8001a80 <HAL_RCC_OscConfig+0xbc>
 8001ab4:	682a      	ldr	r2, [r5, #0]
 8001ab6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001aba:	602a      	str	r2, [r5, #0]
 8001abc:	682a      	ldr	r2, [r5, #0]
 8001abe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ac2:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1df      	bne.n	8001a88 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8001ac8:	f7ff fa28 	bl	8000f1c <HAL_GetTick>
 8001acc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ace:	682b      	ldr	r3, [r5, #0]
 8001ad0:	0398      	lsls	r0, r3, #14
 8001ad2:	f57f af7c 	bpl.w	80019ce <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ad6:	f7ff fa21 	bl	8000f1c <HAL_GetTick>
 8001ada:	1b80      	subs	r0, r0, r6
 8001adc:	2864      	cmp	r0, #100	; 0x64
 8001ade:	d9f6      	bls.n	8001ace <HAL_RCC_OscConfig+0x10a>
 8001ae0:	e7de      	b.n	8001aa0 <HAL_RCC_OscConfig+0xdc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ae2:	4b50      	ldr	r3, [pc, #320]	; (8001c24 <HAL_RCC_OscConfig+0x260>)
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	f012 0f0c 	tst.w	r2, #12
 8001aea:	d007      	beq.n	8001afc <HAL_RCC_OscConfig+0x138>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aec:	689a      	ldr	r2, [r3, #8]
 8001aee:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001af2:	2a08      	cmp	r2, #8
 8001af4:	d116      	bne.n	8001b24 <HAL_RCC_OscConfig+0x160>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	0259      	lsls	r1, r3, #9
 8001afa:	d413      	bmi.n	8001b24 <HAL_RCC_OscConfig+0x160>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001afc:	4b49      	ldr	r3, [pc, #292]	; (8001c24 <HAL_RCC_OscConfig+0x260>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	0792      	lsls	r2, r2, #30
 8001b02:	d502      	bpl.n	8001b0a <HAL_RCC_OscConfig+0x146>
 8001b04:	68e2      	ldr	r2, [r4, #12]
 8001b06:	2a01      	cmp	r2, #1
 8001b08:	d1b2      	bne.n	8001a70 <HAL_RCC_OscConfig+0xac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0a:	6818      	ldr	r0, [r3, #0]
 8001b0c:	22f8      	movs	r2, #248	; 0xf8
 8001b0e:	fa92 f2a2 	rbit	r2, r2
 8001b12:	fab2 f182 	clz	r1, r2
 8001b16:	6922      	ldr	r2, [r4, #16]
 8001b18:	408a      	lsls	r2, r1
 8001b1a:	f020 01f8 	bic.w	r1, r0, #248	; 0xf8
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b22:	e758      	b.n	80019d6 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b24:	68e2      	ldr	r2, [r4, #12]
 8001b26:	4b41      	ldr	r3, [pc, #260]	; (8001c2c <HAL_RCC_OscConfig+0x268>)
 8001b28:	b1da      	cbz	r2, 8001b62 <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_HSI_ENABLE();
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b2e:	f7ff f9f5 	bl	8000f1c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b32:	4d3c      	ldr	r5, [pc, #240]	; (8001c24 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 8001b34:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b36:	682b      	ldr	r3, [r5, #0]
 8001b38:	079b      	lsls	r3, r3, #30
 8001b3a:	d50c      	bpl.n	8001b56 <HAL_RCC_OscConfig+0x192>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3c:	6829      	ldr	r1, [r5, #0]
 8001b3e:	23f8      	movs	r3, #248	; 0xf8
 8001b40:	fa93 f3a3 	rbit	r3, r3
 8001b44:	fab3 f283 	clz	r2, r3
 8001b48:	6923      	ldr	r3, [r4, #16]
 8001b4a:	4093      	lsls	r3, r2
 8001b4c:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8001b50:	4313      	orrs	r3, r2
 8001b52:	602b      	str	r3, [r5, #0]
 8001b54:	e73f      	b.n	80019d6 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b56:	f7ff f9e1 	bl	8000f1c <HAL_GetTick>
 8001b5a:	1b80      	subs	r0, r0, r6
 8001b5c:	2802      	cmp	r0, #2
 8001b5e:	d9ea      	bls.n	8001b36 <HAL_RCC_OscConfig+0x172>
 8001b60:	e79e      	b.n	8001aa0 <HAL_RCC_OscConfig+0xdc>
        __HAL_RCC_HSI_DISABLE();
 8001b62:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b64:	f7ff f9da 	bl	8000f1c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b68:	4d2e      	ldr	r5, [pc, #184]	; (8001c24 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 8001b6a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b6c:	682b      	ldr	r3, [r5, #0]
 8001b6e:	079f      	lsls	r7, r3, #30
 8001b70:	f57f af31 	bpl.w	80019d6 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b74:	f7ff f9d2 	bl	8000f1c <HAL_GetTick>
 8001b78:	1b80      	subs	r0, r0, r6
 8001b7a:	2802      	cmp	r0, #2
 8001b7c:	d9f6      	bls.n	8001b6c <HAL_RCC_OscConfig+0x1a8>
 8001b7e:	e78f      	b.n	8001aa0 <HAL_RCC_OscConfig+0xdc>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b80:	6962      	ldr	r2, [r4, #20]
 8001b82:	4b2b      	ldr	r3, [pc, #172]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	b17a      	cbz	r2, 8001ba6 <HAL_RCC_OscConfig+0x1e2>
      __HAL_RCC_LSI_ENABLE();
 8001b86:	2201      	movs	r2, #1
 8001b88:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001b8a:	f7ff f9c7 	bl	8000f1c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b8e:	4d25      	ldr	r5, [pc, #148]	; (8001c24 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 8001b90:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b92:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001b94:	0798      	lsls	r0, r3, #30
 8001b96:	f53f af22 	bmi.w	80019de <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b9a:	f7ff f9bf 	bl	8000f1c <HAL_GetTick>
 8001b9e:	1b80      	subs	r0, r0, r6
 8001ba0:	2802      	cmp	r0, #2
 8001ba2:	d9f6      	bls.n	8001b92 <HAL_RCC_OscConfig+0x1ce>
 8001ba4:	e77c      	b.n	8001aa0 <HAL_RCC_OscConfig+0xdc>
      __HAL_RCC_LSI_DISABLE();
 8001ba6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001ba8:	f7ff f9b8 	bl	8000f1c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bac:	4d1d      	ldr	r5, [pc, #116]	; (8001c24 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 8001bae:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001bb2:	0799      	lsls	r1, r3, #30
 8001bb4:	f57f af13 	bpl.w	80019de <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bb8:	f7ff f9b0 	bl	8000f1c <HAL_GetTick>
 8001bbc:	1b80      	subs	r0, r0, r6
 8001bbe:	2802      	cmp	r0, #2
 8001bc0:	d9f6      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x1ec>
 8001bc2:	e76d      	b.n	8001aa0 <HAL_RCC_OscConfig+0xdc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001bc4:	f7ff f9aa 	bl	8000f1c <HAL_GetTick>
 8001bc8:	1b80      	subs	r0, r0, r6
 8001bca:	2802      	cmp	r0, #2
 8001bcc:	f67f af1e 	bls.w	8001a0c <HAL_RCC_OscConfig+0x48>
 8001bd0:	e766      	b.n	8001aa0 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bd2:	2b05      	cmp	r3, #5
 8001bd4:	d104      	bne.n	8001be0 <HAL_RCC_OscConfig+0x21c>
 8001bd6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001bd8:	f043 0304 	orr.w	r3, r3, #4
 8001bdc:	672b      	str	r3, [r5, #112]	; 0x70
 8001bde:	e71e      	b.n	8001a1e <HAL_RCC_OscConfig+0x5a>
 8001be0:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001be2:	f022 0201 	bic.w	r2, r2, #1
 8001be6:	672a      	str	r2, [r5, #112]	; 0x70
 8001be8:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001bea:	f022 0204 	bic.w	r2, r2, #4
 8001bee:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f47f af18 	bne.w	8001a26 <HAL_RCC_OscConfig+0x62>
      tickstart = HAL_GetTick();
 8001bf6:	f7ff f991 	bl	8000f1c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bfa:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001bfe:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c00:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001c02:	0798      	lsls	r0, r3, #30
 8001c04:	f57f af19 	bpl.w	8001a3a <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c08:	f7ff f988 	bl	8000f1c <HAL_GetTick>
 8001c0c:	1b80      	subs	r0, r0, r6
 8001c0e:	42b8      	cmp	r0, r7
 8001c10:	d9f6      	bls.n	8001c00 <HAL_RCC_OscConfig+0x23c>
 8001c12:	e745      	b.n	8001aa0 <HAL_RCC_OscConfig+0xdc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c14:	f7ff f982 	bl	8000f1c <HAL_GetTick>
 8001c18:	1b80      	subs	r0, r0, r6
 8001c1a:	42b8      	cmp	r0, r7
 8001c1c:	f67f af09 	bls.w	8001a32 <HAL_RCC_OscConfig+0x6e>
 8001c20:	e73e      	b.n	8001aa0 <HAL_RCC_OscConfig+0xdc>
 8001c22:	bf00      	nop
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40007000 	.word	0x40007000
 8001c2c:	42470000 	.word	0x42470000
 8001c30:	42470e80 	.word	0x42470e80
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c34:	4d2b      	ldr	r5, [pc, #172]	; (8001ce4 <HAL_RCC_OscConfig+0x320>)
 8001c36:	68ab      	ldr	r3, [r5, #8]
 8001c38:	f003 030c 	and.w	r3, r3, #12
 8001c3c:	2b08      	cmp	r3, #8
 8001c3e:	f43f af17 	beq.w	8001a70 <HAL_RCC_OscConfig+0xac>
 8001c42:	4e29      	ldr	r6, [pc, #164]	; (8001ce8 <HAL_RCC_OscConfig+0x324>)
 8001c44:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c46:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001c48:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c4a:	d13e      	bne.n	8001cca <HAL_RCC_OscConfig+0x306>
        tickstart = HAL_GetTick();
 8001c4c:	f7ff f966 	bl	8000f1c <HAL_GetTick>
 8001c50:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c52:	682b      	ldr	r3, [r5, #0]
 8001c54:	0199      	lsls	r1, r3, #6
 8001c56:	d432      	bmi.n	8001cbe <HAL_RCC_OscConfig+0x2fa>
 8001c58:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8001c5c:	fa97 f7a7 	rbit	r7, r7
 8001c60:	f44f 3240 	mov.w	r2, #196608	; 0x30000
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c64:	fab7 f787 	clz	r7, r7
 8001c68:	fa92 f2a2 	rbit	r2, r2
 8001c6c:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8001c70:	fab2 f082 	clz	r0, r2
 8001c74:	fa91 f1a1 	rbit	r1, r1
 8001c78:	6a22      	ldr	r2, [r4, #32]
 8001c7a:	69e3      	ldr	r3, [r4, #28]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c80:	fa02 f707 	lsl.w	r7, r2, r7
 8001c84:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001c86:	0852      	lsrs	r2, r2, #1
 8001c88:	3a01      	subs	r2, #1
 8001c8a:	4082      	lsls	r2, r0
 8001c8c:	433b      	orrs	r3, r7
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c92:	4c14      	ldr	r4, [pc, #80]	; (8001ce4 <HAL_RCC_OscConfig+0x320>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c94:	fab1 f181 	clz	r1, r1
 8001c98:	fa02 f101 	lsl.w	r1, r2, r1
 8001c9c:	430b      	orrs	r3, r1
 8001c9e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001ca4:	f7ff f93a 	bl	8000f1c <HAL_GetTick>
 8001ca8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001caa:	6823      	ldr	r3, [r4, #0]
 8001cac:	019a      	lsls	r2, r3, #6
 8001cae:	f53f aec8 	bmi.w	8001a42 <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb2:	f7ff f933 	bl	8000f1c <HAL_GetTick>
 8001cb6:	1b40      	subs	r0, r0, r5
 8001cb8:	2802      	cmp	r0, #2
 8001cba:	d9f6      	bls.n	8001caa <HAL_RCC_OscConfig+0x2e6>
 8001cbc:	e6f0      	b.n	8001aa0 <HAL_RCC_OscConfig+0xdc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cbe:	f7ff f92d 	bl	8000f1c <HAL_GetTick>
 8001cc2:	1bc0      	subs	r0, r0, r7
 8001cc4:	2802      	cmp	r0, #2
 8001cc6:	d9c4      	bls.n	8001c52 <HAL_RCC_OscConfig+0x28e>
 8001cc8:	e6ea      	b.n	8001aa0 <HAL_RCC_OscConfig+0xdc>
        tickstart = HAL_GetTick();
 8001cca:	f7ff f927 	bl	8000f1c <HAL_GetTick>
 8001cce:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cd0:	682b      	ldr	r3, [r5, #0]
 8001cd2:	019b      	lsls	r3, r3, #6
 8001cd4:	f57f aeb5 	bpl.w	8001a42 <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cd8:	f7ff f920 	bl	8000f1c <HAL_GetTick>
 8001cdc:	1b00      	subs	r0, r0, r4
 8001cde:	2802      	cmp	r0, #2
 8001ce0:	d9f6      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x30c>
 8001ce2:	e6dd      	b.n	8001aa0 <HAL_RCC_OscConfig+0xdc>
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	42470060 	.word	0x42470060

08001cec <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cec:	4a19      	ldr	r2, [pc, #100]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x68>)
 8001cee:	6893      	ldr	r3, [r2, #8]
 8001cf0:	f003 030c 	and.w	r3, r3, #12
 8001cf4:	2b04      	cmp	r3, #4
{
 8001cf6:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cf8:	d003      	beq.n	8001d02 <HAL_RCC_GetSysClockFreq+0x16>
 8001cfa:	2b08      	cmp	r3, #8
 8001cfc:	d003      	beq.n	8001d06 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cfe:	4816      	ldr	r0, [pc, #88]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001d00:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8001d02:	4816      	ldr	r0, [pc, #88]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x70>)
 8001d04:	bd10      	pop	{r4, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d06:	6851      	ldr	r1, [r2, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d08:	6853      	ldr	r3, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d0a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d0e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001d12:	f647 74c0 	movw	r4, #32704	; 0x7fc0
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001d16:	6853      	ldr	r3, [r2, #4]
 8001d18:	fa94 f0a4 	rbit	r0, r4
 8001d1c:	fab0 f080 	clz	r0, r0
 8001d20:	ea03 0304 	and.w	r3, r3, r4
 8001d24:	fa23 f300 	lsr.w	r3, r3, r0
 8001d28:	bf14      	ite	ne
 8001d2a:	480c      	ldrne	r0, [pc, #48]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8001d2c:	480a      	ldreq	r0, [pc, #40]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001d2e:	fbb0 f0f1 	udiv	r0, r0, r1
 8001d32:	4358      	muls	r0, r3
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8001d34:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x68>)
 8001d36:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	fa92 f2a2 	rbit	r2, r2
 8001d40:	fab2 f282 	clz	r2, r2
 8001d44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d48:	40d3      	lsrs	r3, r2
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001d4e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d52:	bd10      	pop	{r4, pc}
 8001d54:	40023800 	.word	0x40023800
 8001d58:	00f42400 	.word	0x00f42400
 8001d5c:	017d7840 	.word	0x017d7840

08001d60 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001d60:	4b56      	ldr	r3, [pc, #344]	; (8001ebc <HAL_RCC_ClockConfig+0x15c>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	f002 020f 	and.w	r2, r2, #15
 8001d68:	428a      	cmp	r2, r1
{
 8001d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d6e:	4605      	mov	r5, r0
 8001d70:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001d72:	d330      	bcc.n	8001dd6 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d74:	682a      	ldr	r2, [r5, #0]
 8001d76:	0794      	lsls	r4, r2, #30
 8001d78:	d437      	bmi.n	8001dea <HAL_RCC_ClockConfig+0x8a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d7a:	07d0      	lsls	r0, r2, #31
 8001d7c:	d43d      	bmi.n	8001dfa <HAL_RCC_ClockConfig+0x9a>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001d7e:	4b4f      	ldr	r3, [pc, #316]	; (8001ebc <HAL_RCC_ClockConfig+0x15c>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	f002 020f 	and.w	r2, r2, #15
 8001d86:	4296      	cmp	r6, r2
 8001d88:	f0c0 8088 	bcc.w	8001e9c <HAL_RCC_ClockConfig+0x13c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d8c:	682a      	ldr	r2, [r5, #0]
 8001d8e:	0751      	lsls	r1, r2, #29
 8001d90:	f100 808c 	bmi.w	8001eac <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d94:	0713      	lsls	r3, r2, #28
 8001d96:	d507      	bpl.n	8001da8 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d98:	4a49      	ldr	r2, [pc, #292]	; (8001ec0 <HAL_RCC_ClockConfig+0x160>)
 8001d9a:	6929      	ldr	r1, [r5, #16]
 8001d9c:	6893      	ldr	r3, [r2, #8]
 8001d9e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001da2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001da6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001da8:	f7ff ffa0 	bl	8001cec <HAL_RCC_GetSysClockFreq>
 8001dac:	4b44      	ldr	r3, [pc, #272]	; (8001ec0 <HAL_RCC_ClockConfig+0x160>)
 8001dae:	22f0      	movs	r2, #240	; 0xf0
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	fa92 f2a2 	rbit	r2, r2
 8001db6:	fab2 f282 	clz	r2, r2
 8001dba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dbe:	40d3      	lsrs	r3, r2
 8001dc0:	4a40      	ldr	r2, [pc, #256]	; (8001ec4 <HAL_RCC_ClockConfig+0x164>)
 8001dc2:	5cd3      	ldrb	r3, [r2, r3]
 8001dc4:	40d8      	lsrs	r0, r3
 8001dc6:	4b40      	ldr	r3, [pc, #256]	; (8001ec8 <HAL_RCC_ClockConfig+0x168>)
 8001dc8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001dca:	2000      	movs	r0, #0
 8001dcc:	f7ff f870 	bl	8000eb0 <HAL_InitTick>
  return HAL_OK;
 8001dd0:	2000      	movs	r0, #0
}
 8001dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd6:	b2ca      	uxtb	r2, r1
 8001dd8:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 030f 	and.w	r3, r3, #15
 8001de0:	4299      	cmp	r1, r3
 8001de2:	d0c7      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001de4:	2001      	movs	r0, #1
 8001de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dea:	4935      	ldr	r1, [pc, #212]	; (8001ec0 <HAL_RCC_ClockConfig+0x160>)
 8001dec:	68a8      	ldr	r0, [r5, #8]
 8001dee:	688b      	ldr	r3, [r1, #8]
 8001df0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001df4:	4303      	orrs	r3, r0
 8001df6:	608b      	str	r3, [r1, #8]
 8001df8:	e7bf      	b.n	8001d7a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dfa:	686a      	ldr	r2, [r5, #4]
 8001dfc:	4b30      	ldr	r3, [pc, #192]	; (8001ec0 <HAL_RCC_ClockConfig+0x160>)
 8001dfe:	2a01      	cmp	r2, #1
 8001e00:	d11e      	bne.n	8001e40 <HAL_RCC_ClockConfig+0xe0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e08:	d0ec      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x84>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e0a:	4c2d      	ldr	r4, [pc, #180]	; (8001ec0 <HAL_RCC_ClockConfig+0x160>)
 8001e0c:	68a3      	ldr	r3, [r4, #8]
 8001e0e:	f023 0303 	bic.w	r3, r3, #3
 8001e12:	4313      	orrs	r3, r2
 8001e14:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8001e16:	f7ff f881 	bl	8000f1c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e1a:	686b      	ldr	r3, [r5, #4]
 8001e1c:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8001e1e:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e20:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e24:	d116      	bne.n	8001e54 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e26:	68a3      	ldr	r3, [r4, #8]
 8001e28:	f003 030c 	and.w	r3, r3, #12
 8001e2c:	2b04      	cmp	r3, #4
 8001e2e:	d0a6      	beq.n	8001d7e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e30:	f7ff f874 	bl	8000f1c <HAL_GetTick>
 8001e34:	1bc0      	subs	r0, r0, r7
 8001e36:	4540      	cmp	r0, r8
 8001e38:	d9f5      	bls.n	8001e26 <HAL_RCC_ClockConfig+0xc6>
          return HAL_TIMEOUT;
 8001e3a:	2003      	movs	r0, #3
 8001e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8001e40:	1e91      	subs	r1, r2, #2
 8001e42:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e44:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8001e46:	d802      	bhi.n	8001e4e <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e48:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001e4c:	e7dc      	b.n	8001e08 <HAL_RCC_ClockConfig+0xa8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e4e:	f013 0f02 	tst.w	r3, #2
 8001e52:	e7d9      	b.n	8001e08 <HAL_RCC_ClockConfig+0xa8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d10a      	bne.n	8001e6e <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e58:	68a3      	ldr	r3, [r4, #8]
 8001e5a:	f003 030c 	and.w	r3, r3, #12
 8001e5e:	2b08      	cmp	r3, #8
 8001e60:	d08d      	beq.n	8001d7e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e62:	f7ff f85b 	bl	8000f1c <HAL_GetTick>
 8001e66:	1bc0      	subs	r0, r0, r7
 8001e68:	4540      	cmp	r0, r8
 8001e6a:	d9f5      	bls.n	8001e58 <HAL_RCC_ClockConfig+0xf8>
 8001e6c:	e7e5      	b.n	8001e3a <HAL_RCC_ClockConfig+0xda>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8001e6e:	2b03      	cmp	r3, #3
 8001e70:	d10f      	bne.n	8001e92 <HAL_RCC_ClockConfig+0x132>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8001e72:	68a3      	ldr	r3, [r4, #8]
 8001e74:	f003 030c 	and.w	r3, r3, #12
 8001e78:	2b0c      	cmp	r3, #12
 8001e7a:	d080      	beq.n	8001d7e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e7c:	f7ff f84e 	bl	8000f1c <HAL_GetTick>
 8001e80:	1bc0      	subs	r0, r0, r7
 8001e82:	4540      	cmp	r0, r8
 8001e84:	d9f5      	bls.n	8001e72 <HAL_RCC_ClockConfig+0x112>
 8001e86:	e7d8      	b.n	8001e3a <HAL_RCC_ClockConfig+0xda>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e88:	f7ff f848 	bl	8000f1c <HAL_GetTick>
 8001e8c:	1bc0      	subs	r0, r0, r7
 8001e8e:	4540      	cmp	r0, r8
 8001e90:	d8d3      	bhi.n	8001e3a <HAL_RCC_ClockConfig+0xda>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e92:	68a3      	ldr	r3, [r4, #8]
 8001e94:	f013 0f0c 	tst.w	r3, #12
 8001e98:	d1f6      	bne.n	8001e88 <HAL_RCC_ClockConfig+0x128>
 8001e9a:	e770      	b.n	8001d7e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9c:	b2f2      	uxtb	r2, r6
 8001e9e:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	429e      	cmp	r6, r3
 8001ea8:	d19c      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x84>
 8001eaa:	e76f      	b.n	8001d8c <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eac:	4904      	ldr	r1, [pc, #16]	; (8001ec0 <HAL_RCC_ClockConfig+0x160>)
 8001eae:	68e8      	ldr	r0, [r5, #12]
 8001eb0:	688b      	ldr	r3, [r1, #8]
 8001eb2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001eb6:	4303      	orrs	r3, r0
 8001eb8:	608b      	str	r3, [r1, #8]
 8001eba:	e76b      	b.n	8001d94 <HAL_RCC_ClockConfig+0x34>
 8001ebc:	40023c00 	.word	0x40023c00
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	08005649 	.word	0x08005649
 8001ec8:	20000000 	.word	0x20000000

08001ecc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001ecc:	4b01      	ldr	r3, [pc, #4]	; (8001ed4 <HAL_RCC_GetHCLKFreq+0x8>)
 8001ece:	6818      	ldr	r0, [r3, #0]
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	20000000 	.word	0x20000000

08001ed8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8001ed8:	4b08      	ldr	r3, [pc, #32]	; (8001efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eda:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	fa92 f2a2 	rbit	r2, r2
 8001ee4:	fab2 f282 	clz	r2, r2
 8001ee8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001eec:	40d3      	lsrs	r3, r2
 8001eee:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ef0:	5cd3      	ldrb	r3, [r2, r3]
 8001ef2:	4a04      	ldr	r2, [pc, #16]	; (8001f04 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001ef4:	6810      	ldr	r0, [r2, #0]
}
 8001ef6:	40d8      	lsrs	r0, r3
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	40023800 	.word	0x40023800
 8001f00:	08005659 	.word	0x08005659
 8001f04:	20000000 	.word	0x20000000

08001f08 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8001f08:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f0a:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	fa92 f2a2 	rbit	r2, r2
 8001f14:	fab2 f282 	clz	r2, r2
 8001f18:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001f1c:	40d3      	lsrs	r3, r2
 8001f1e:	4a04      	ldr	r2, [pc, #16]	; (8001f30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f20:	5cd3      	ldrb	r3, [r2, r3]
 8001f22:	4a04      	ldr	r2, [pc, #16]	; (8001f34 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001f24:	6810      	ldr	r0, [r2, #0]
} 
 8001f26:	40d8      	lsrs	r0, r3
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	08005659 	.word	0x08005659
 8001f34:	20000000 	.word	0x20000000

08001f38 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001f3c:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001f3e:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8001f40:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f42:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001f44:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001f48:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001f4a:	6133      	str	r3, [r6, #16]
{
 8001f4c:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f4e:	6883      	ldr	r3, [r0, #8]
 8001f50:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8001f52:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f54:	4303      	orrs	r3, r0
 8001f56:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001f58:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f5c:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001f5e:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f62:	430b      	orrs	r3, r1
 8001f64:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001f66:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001f68:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001f6a:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8001f70:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f72:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001f76:	6173      	str	r3, [r6, #20]
 8001f78:	4b7a      	ldr	r3, [pc, #488]	; (8002164 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f7a:	d17c      	bne.n	8002076 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f7c:	429e      	cmp	r6, r3
 8001f7e:	d003      	beq.n	8001f88 <UART_SetConfig+0x50>
 8001f80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f84:	429e      	cmp	r6, r3
 8001f86:	d144      	bne.n	8002012 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001f88:	f7ff ffbe 	bl	8001f08 <HAL_RCC_GetPCLK2Freq>
 8001f8c:	2519      	movs	r5, #25
 8001f8e:	fb05 f300 	mul.w	r3, r5, r0
 8001f92:	6860      	ldr	r0, [r4, #4]
 8001f94:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001f98:	0040      	lsls	r0, r0, #1
 8001f9a:	fbb3 f3f0 	udiv	r3, r3, r0
 8001f9e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001fa2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001fa6:	f7ff ffaf 	bl	8001f08 <HAL_RCC_GetPCLK2Freq>
 8001faa:	6863      	ldr	r3, [r4, #4]
 8001fac:	4368      	muls	r0, r5
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	fbb0 f7f3 	udiv	r7, r0, r3
 8001fb4:	f7ff ffa8 	bl	8001f08 <HAL_RCC_GetPCLK2Freq>
 8001fb8:	6863      	ldr	r3, [r4, #4]
 8001fba:	4368      	muls	r0, r5
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fc2:	fbb3 f3f9 	udiv	r3, r3, r9
 8001fc6:	fb09 7313 	mls	r3, r9, r3, r7
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	3332      	adds	r3, #50	; 0x32
 8001fce:	fbb3 f3f9 	udiv	r3, r3, r9
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001fd8:	f7ff ff96 	bl	8001f08 <HAL_RCC_GetPCLK2Freq>
 8001fdc:	6862      	ldr	r2, [r4, #4]
 8001fde:	4368      	muls	r0, r5
 8001fe0:	0052      	lsls	r2, r2, #1
 8001fe2:	fbb0 faf2 	udiv	sl, r0, r2
 8001fe6:	f7ff ff8f 	bl	8001f08 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001fea:	6863      	ldr	r3, [r4, #4]
 8001fec:	4368      	muls	r0, r5
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ff4:	fbb3 f3f9 	udiv	r3, r3, r9
 8001ff8:	fb09 a313 	mls	r3, r9, r3, sl
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	3332      	adds	r3, #50	; 0x32
 8002000:	fbb3 f3f9 	udiv	r3, r3, r9
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800200a:	443b      	add	r3, r7
 800200c:	60b3      	str	r3, [r6, #8]
 800200e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002012:	f7ff ff61 	bl	8001ed8 <HAL_RCC_GetPCLK1Freq>
 8002016:	2519      	movs	r5, #25
 8002018:	fb05 f300 	mul.w	r3, r5, r0
 800201c:	6860      	ldr	r0, [r4, #4]
 800201e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002022:	0040      	lsls	r0, r0, #1
 8002024:	fbb3 f3f0 	udiv	r3, r3, r0
 8002028:	fbb3 f3f9 	udiv	r3, r3, r9
 800202c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002030:	f7ff ff52 	bl	8001ed8 <HAL_RCC_GetPCLK1Freq>
 8002034:	6863      	ldr	r3, [r4, #4]
 8002036:	4368      	muls	r0, r5
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	fbb0 f7f3 	udiv	r7, r0, r3
 800203e:	f7ff ff4b 	bl	8001ed8 <HAL_RCC_GetPCLK1Freq>
 8002042:	6863      	ldr	r3, [r4, #4]
 8002044:	4368      	muls	r0, r5
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	fbb0 f3f3 	udiv	r3, r0, r3
 800204c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002050:	fb09 7313 	mls	r3, r9, r3, r7
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	3332      	adds	r3, #50	; 0x32
 8002058:	fbb3 f3f9 	udiv	r3, r3, r9
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8002062:	f7ff ff39 	bl	8001ed8 <HAL_RCC_GetPCLK1Freq>
 8002066:	6862      	ldr	r2, [r4, #4]
 8002068:	4368      	muls	r0, r5
 800206a:	0052      	lsls	r2, r2, #1
 800206c:	fbb0 faf2 	udiv	sl, r0, r2
 8002070:	f7ff ff32 	bl	8001ed8 <HAL_RCC_GetPCLK1Freq>
 8002074:	e7b9      	b.n	8001fea <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002076:	429e      	cmp	r6, r3
 8002078:	d002      	beq.n	8002080 <UART_SetConfig+0x148>
 800207a:	4b3b      	ldr	r3, [pc, #236]	; (8002168 <UART_SetConfig+0x230>)
 800207c:	429e      	cmp	r6, r3
 800207e:	d140      	bne.n	8002102 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002080:	f7ff ff42 	bl	8001f08 <HAL_RCC_GetPCLK2Freq>
 8002084:	6867      	ldr	r7, [r4, #4]
 8002086:	2519      	movs	r5, #25
 8002088:	f04f 0964 	mov.w	r9, #100	; 0x64
 800208c:	fb05 f300 	mul.w	r3, r5, r0
 8002090:	00bf      	lsls	r7, r7, #2
 8002092:	fbb3 f3f7 	udiv	r3, r3, r7
 8002096:	fbb3 f3f9 	udiv	r3, r3, r9
 800209a:	011f      	lsls	r7, r3, #4
 800209c:	f7ff ff34 	bl	8001f08 <HAL_RCC_GetPCLK2Freq>
 80020a0:	6863      	ldr	r3, [r4, #4]
 80020a2:	4368      	muls	r0, r5
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	fbb0 f8f3 	udiv	r8, r0, r3
 80020aa:	f7ff ff2d 	bl	8001f08 <HAL_RCC_GetPCLK2Freq>
 80020ae:	6863      	ldr	r3, [r4, #4]
 80020b0:	4368      	muls	r0, r5
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80020b8:	fbb3 f3f9 	udiv	r3, r3, r9
 80020bc:	fb09 8313 	mls	r3, r9, r3, r8
 80020c0:	011b      	lsls	r3, r3, #4
 80020c2:	3332      	adds	r3, #50	; 0x32
 80020c4:	fbb3 f3f9 	udiv	r3, r3, r9
 80020c8:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80020cc:	f7ff ff1c 	bl	8001f08 <HAL_RCC_GetPCLK2Freq>
 80020d0:	6862      	ldr	r2, [r4, #4]
 80020d2:	4368      	muls	r0, r5
 80020d4:	0092      	lsls	r2, r2, #2
 80020d6:	fbb0 faf2 	udiv	sl, r0, r2
 80020da:	f7ff ff15 	bl	8001f08 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80020de:	6863      	ldr	r3, [r4, #4]
 80020e0:	4368      	muls	r0, r5
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80020e8:	fbb3 f3f9 	udiv	r3, r3, r9
 80020ec:	fb09 a313 	mls	r3, r9, r3, sl
 80020f0:	011b      	lsls	r3, r3, #4
 80020f2:	3332      	adds	r3, #50	; 0x32
 80020f4:	fbb3 f3f9 	udiv	r3, r3, r9
 80020f8:	f003 030f 	and.w	r3, r3, #15
 80020fc:	ea43 0308 	orr.w	r3, r3, r8
 8002100:	e783      	b.n	800200a <UART_SetConfig+0xd2>
 8002102:	f7ff fee9 	bl	8001ed8 <HAL_RCC_GetPCLK1Freq>
 8002106:	6867      	ldr	r7, [r4, #4]
 8002108:	2519      	movs	r5, #25
 800210a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800210e:	fb05 f300 	mul.w	r3, r5, r0
 8002112:	00bf      	lsls	r7, r7, #2
 8002114:	fbb3 f3f7 	udiv	r3, r3, r7
 8002118:	fbb3 f3f9 	udiv	r3, r3, r9
 800211c:	011f      	lsls	r7, r3, #4
 800211e:	f7ff fedb 	bl	8001ed8 <HAL_RCC_GetPCLK1Freq>
 8002122:	6863      	ldr	r3, [r4, #4]
 8002124:	4368      	muls	r0, r5
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	fbb0 f8f3 	udiv	r8, r0, r3
 800212c:	f7ff fed4 	bl	8001ed8 <HAL_RCC_GetPCLK1Freq>
 8002130:	6863      	ldr	r3, [r4, #4]
 8002132:	4368      	muls	r0, r5
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	fbb0 f3f3 	udiv	r3, r0, r3
 800213a:	fbb3 f3f9 	udiv	r3, r3, r9
 800213e:	fb09 8313 	mls	r3, r9, r3, r8
 8002142:	011b      	lsls	r3, r3, #4
 8002144:	3332      	adds	r3, #50	; 0x32
 8002146:	fbb3 f3f9 	udiv	r3, r3, r9
 800214a:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800214e:	f7ff fec3 	bl	8001ed8 <HAL_RCC_GetPCLK1Freq>
 8002152:	6862      	ldr	r2, [r4, #4]
 8002154:	4368      	muls	r0, r5
 8002156:	0092      	lsls	r2, r2, #2
 8002158:	fbb0 faf2 	udiv	sl, r0, r2
 800215c:	f7ff febc 	bl	8001ed8 <HAL_RCC_GetPCLK1Freq>
 8002160:	e7bd      	b.n	80020de <UART_SetConfig+0x1a6>
 8002162:	bf00      	nop
 8002164:	40011000 	.word	0x40011000
 8002168:	40011400 	.word	0x40011400

0800216c <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 800216c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800216e:	4604      	mov	r4, r0
 8002170:	460e      	mov	r6, r1
 8002172:	4617      	mov	r7, r2
 8002174:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002176:	6821      	ldr	r1, [r4, #0]
 8002178:	680b      	ldr	r3, [r1, #0]
 800217a:	ea36 0303 	bics.w	r3, r6, r3
 800217e:	d101      	bne.n	8002184 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8002180:	2000      	movs	r0, #0
}
 8002182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002184:	1c6b      	adds	r3, r5, #1
 8002186:	d0f7      	beq.n	8002178 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002188:	b995      	cbnz	r5, 80021b0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800218a:	6823      	ldr	r3, [r4, #0]
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002192:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002194:	695a      	ldr	r2, [r3, #20]
 8002196:	f022 0201 	bic.w	r2, r2, #1
 800219a:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800219c:	2320      	movs	r3, #32
 800219e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80021a2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80021a6:	2300      	movs	r3, #0
 80021a8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80021ac:	2003      	movs	r0, #3
 80021ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80021b0:	f7fe feb4 	bl	8000f1c <HAL_GetTick>
 80021b4:	1bc0      	subs	r0, r0, r7
 80021b6:	4285      	cmp	r5, r0
 80021b8:	d2dd      	bcs.n	8002176 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80021ba:	e7e6      	b.n	800218a <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080021bc <HAL_UART_Init>:
{
 80021bc:	b510      	push	{r4, lr}
  if(huart == NULL)
 80021be:	4604      	mov	r4, r0
 80021c0:	b340      	cbz	r0, 8002214 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80021c2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80021c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80021ca:	b91b      	cbnz	r3, 80021d4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80021cc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80021d0:	f000 fa96 	bl	8002700 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80021d4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80021d6:	2324      	movs	r3, #36	; 0x24
 80021d8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80021dc:	68d3      	ldr	r3, [r2, #12]
 80021de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80021e2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80021e4:	4620      	mov	r0, r4
 80021e6:	f7ff fea7 	bl	8001f38 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021ea:	6823      	ldr	r3, [r4, #0]
 80021ec:	691a      	ldr	r2, [r3, #16]
 80021ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021f2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021f4:	695a      	ldr	r2, [r3, #20]
 80021f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021fa:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002202:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002204:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8002206:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002208:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800220a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800220e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002212:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002214:	2001      	movs	r0, #1
}
 8002216:	bd10      	pop	{r4, pc}

08002218 <HAL_UART_Transmit>:
{
 8002218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800221c:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 800221e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002222:	2b20      	cmp	r3, #32
{
 8002224:	4604      	mov	r4, r0
 8002226:	460d      	mov	r5, r1
 8002228:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 800222a:	d14f      	bne.n	80022cc <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 800222c:	2900      	cmp	r1, #0
 800222e:	d04a      	beq.n	80022c6 <HAL_UART_Transmit+0xae>
 8002230:	2a00      	cmp	r2, #0
 8002232:	d048      	beq.n	80022c6 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8002234:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002238:	2b01      	cmp	r3, #1
 800223a:	d047      	beq.n	80022cc <HAL_UART_Transmit+0xb4>
 800223c:	2301      	movs	r3, #1
 800223e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002242:	2300      	movs	r3, #0
 8002244:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002246:	2321      	movs	r3, #33	; 0x21
 8002248:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 800224c:	f7fe fe66 	bl	8000f1c <HAL_GetTick>
    huart->TxXferSize = Size;
 8002250:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8002254:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8002256:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800225a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800225c:	b29b      	uxth	r3, r3
 800225e:	b96b      	cbnz	r3, 800227c <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002260:	463b      	mov	r3, r7
 8002262:	4632      	mov	r2, r6
 8002264:	2140      	movs	r1, #64	; 0x40
 8002266:	4620      	mov	r0, r4
 8002268:	f7ff ff80 	bl	800216c <UART_WaitOnFlagUntilTimeout.constprop.3>
 800226c:	b9b0      	cbnz	r0, 800229c <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 800226e:	2320      	movs	r3, #32
 8002270:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002274:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8002278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 800227c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800227e:	3b01      	subs	r3, #1
 8002280:	b29b      	uxth	r3, r3
 8002282:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002284:	68a3      	ldr	r3, [r4, #8]
 8002286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800228a:	4632      	mov	r2, r6
 800228c:	463b      	mov	r3, r7
 800228e:	f04f 0180 	mov.w	r1, #128	; 0x80
 8002292:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002294:	d10e      	bne.n	80022b4 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002296:	f7ff ff69 	bl	800216c <UART_WaitOnFlagUntilTimeout.constprop.3>
 800229a:	b110      	cbz	r0, 80022a2 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 800229c:	2003      	movs	r0, #3
 800229e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80022a2:	882b      	ldrh	r3, [r5, #0]
 80022a4:	6822      	ldr	r2, [r4, #0]
 80022a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022aa:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80022ac:	6923      	ldr	r3, [r4, #16]
 80022ae:	b943      	cbnz	r3, 80022c2 <HAL_UART_Transmit+0xaa>
          pData +=2U;
 80022b0:	3502      	adds	r5, #2
 80022b2:	e7d2      	b.n	800225a <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022b4:	f7ff ff5a 	bl	800216c <UART_WaitOnFlagUntilTimeout.constprop.3>
 80022b8:	2800      	cmp	r0, #0
 80022ba:	d1ef      	bne.n	800229c <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80022bc:	6823      	ldr	r3, [r4, #0]
 80022be:	782a      	ldrb	r2, [r5, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	3501      	adds	r5, #1
 80022c4:	e7c9      	b.n	800225a <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80022c6:	2001      	movs	r0, #1
 80022c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80022cc:	2002      	movs	r0, #2
}
 80022ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080022d4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80022d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 80022d6:	4820      	ldr	r0, [pc, #128]	; (8002358 <MX_ADC1_Init+0x84>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80022d8:	4b20      	ldr	r3, [pc, #128]	; (800235c <MX_ADC1_Init+0x88>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ENABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022da:	4a21      	ldr	r2, [pc, #132]	; (8002360 <MX_ADC1_Init+0x8c>)
 80022dc:	6282      	str	r2, [r0, #40]	; 0x28
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80022de:	2400      	movs	r4, #0
 80022e0:	e880 0018 	stmia.w	r0, {r3, r4}
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 3;
 80022e4:	2203      	movs	r2, #3
  hadc1.Init.ScanConvMode = ENABLE;
 80022e6:	2301      	movs	r3, #1
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80022e8:	6084      	str	r4, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80022ea:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80022ec:	6183      	str	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022ee:	6204      	str	r4, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022f0:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022f2:	60c4      	str	r4, [r0, #12]
  hadc1.Init.NbrOfConversion = 3;
 80022f4:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80022f6:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022f8:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022fa:	f7fe fe15 	bl	8000f28 <HAL_ADC_Init>
 80022fe:	b118      	cbz	r0, 8002308 <MX_ADC1_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002300:	214a      	movs	r1, #74	; 0x4a
 8002302:	4818      	ldr	r0, [pc, #96]	; (8002364 <MX_ADC1_Init+0x90>)
 8002304:	f000 f970 	bl	80025e8 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_0;
 8002308:	9400      	str	r4, [sp, #0]
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800230a:	2306      	movs	r3, #6
  sConfig.Rank = 1;
 800230c:	2401      	movs	r4, #1
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800230e:	4669      	mov	r1, sp
 8002310:	4811      	ldr	r0, [pc, #68]	; (8002358 <MX_ADC1_Init+0x84>)
  sConfig.Rank = 1;
 8002312:	9401      	str	r4, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8002314:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002316:	f7fe ffd5 	bl	80012c4 <HAL_ADC_ConfigChannel>
 800231a:	b118      	cbz	r0, 8002324 <MX_ADC1_Init+0x50>
  {
    _Error_Handler(__FILE__, __LINE__);
 800231c:	2154      	movs	r1, #84	; 0x54
 800231e:	4811      	ldr	r0, [pc, #68]	; (8002364 <MX_ADC1_Init+0x90>)
 8002320:	f000 f962 	bl	80025e8 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_1;
 8002324:	9400      	str	r4, [sp, #0]
  sConfig.Rank = 2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002326:	4669      	mov	r1, sp
  sConfig.Rank = 2;
 8002328:	2402      	movs	r4, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800232a:	480b      	ldr	r0, [pc, #44]	; (8002358 <MX_ADC1_Init+0x84>)
  sConfig.Rank = 2;
 800232c:	9401      	str	r4, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800232e:	f7fe ffc9 	bl	80012c4 <HAL_ADC_ConfigChannel>
 8002332:	b118      	cbz	r0, 800233c <MX_ADC1_Init+0x68>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002334:	215d      	movs	r1, #93	; 0x5d
 8002336:	480b      	ldr	r0, [pc, #44]	; (8002364 <MX_ADC1_Init+0x90>)
 8002338:	f000 f956 	bl	80025e8 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_2;
  sConfig.Rank = 3;
 800233c:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800233e:	4669      	mov	r1, sp
 8002340:	4805      	ldr	r0, [pc, #20]	; (8002358 <MX_ADC1_Init+0x84>)
  sConfig.Channel = ADC_CHANNEL_2;
 8002342:	9400      	str	r4, [sp, #0]
  sConfig.Rank = 3;
 8002344:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002346:	f7fe ffbd 	bl	80012c4 <HAL_ADC_ConfigChannel>
 800234a:	b118      	cbz	r0, 8002354 <MX_ADC1_Init+0x80>
  {
    _Error_Handler(__FILE__, __LINE__);
 800234c:	2166      	movs	r1, #102	; 0x66
 800234e:	4805      	ldr	r0, [pc, #20]	; (8002364 <MX_ADC1_Init+0x90>)
 8002350:	f000 f94a 	bl	80025e8 <_Error_Handler>
  }

}
 8002354:	b004      	add	sp, #16
 8002356:	bd10      	pop	{r4, pc}
 8002358:	200006cc 	.word	0x200006cc
 800235c:	40012000 	.word	0x40012000
 8002360:	0f000001 	.word	0x0f000001
 8002364:	08005608 	.word	0x08005608

08002368 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002368:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 800236a:	6802      	ldr	r2, [r0, #0]
 800236c:	4b1d      	ldr	r3, [pc, #116]	; (80023e4 <HAL_ADC_MspInit+0x7c>)
 800236e:	429a      	cmp	r2, r3
{
 8002370:	b086      	sub	sp, #24
 8002372:	4606      	mov	r6, r0
  if(adcHandle->Instance==ADC1)
 8002374:	d133      	bne.n	80023de <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002376:	2500      	movs	r5, #0
 8002378:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 800237c:	9500      	str	r5, [sp, #0]
 800237e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA2     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002380:	4819      	ldr	r0, [pc, #100]	; (80023e8 <HAL_ADC_MspInit+0x80>)

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002382:	4c1a      	ldr	r4, [pc, #104]	; (80023ec <HAL_ADC_MspInit+0x84>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002384:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002388:	645a      	str	r2, [r3, #68]	; 0x44
 800238a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238c:	9503      	str	r5, [sp, #12]
    __HAL_RCC_ADC1_CLK_ENABLE();
 800238e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002396:	2307      	movs	r3, #7
 8002398:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800239a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800239c:	2303      	movs	r3, #3
 800239e:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a0:	f7ff fa30 	bl	8001804 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 80023a4:	4b12      	ldr	r3, [pc, #72]	; (80023f0 <HAL_ADC_MspInit+0x88>)
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023a6:	60a5      	str	r5, [r4, #8]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80023a8:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80023ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023b0:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80023b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023b6:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023bc:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80023be:	4620      	mov	r0, r4
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80023c0:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80023c4:	60e5      	str	r5, [r4, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80023c6:	61e3      	str	r3, [r4, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80023c8:	6225      	str	r5, [r4, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023ca:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80023cc:	f7ff f8a0 	bl	8001510 <HAL_DMA_Init>
 80023d0:	b118      	cbz	r0, 80023da <HAL_ADC_MspInit+0x72>
    {
      _Error_Handler(__FILE__, __LINE__);
 80023d2:	218f      	movs	r1, #143	; 0x8f
 80023d4:	4807      	ldr	r0, [pc, #28]	; (80023f4 <HAL_ADC_MspInit+0x8c>)
 80023d6:	f000 f907 	bl	80025e8 <_Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80023da:	63b4      	str	r4, [r6, #56]	; 0x38
 80023dc:	63a6      	str	r6, [r4, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80023de:	b006      	add	sp, #24
 80023e0:	bd70      	pop	{r4, r5, r6, pc}
 80023e2:	bf00      	nop
 80023e4:	40012000 	.word	0x40012000
 80023e8:	40020000 	.word	0x40020000
 80023ec:	20000714 	.word	0x20000714
 80023f0:	40026410 	.word	0x40026410
 80023f4:	08005608 	.word	0x08005608

080023f8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80023f8:	b507      	push	{r0, r1, r2, lr}
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80023fa:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <MX_DMA_Init+0x30>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	9201      	str	r2, [sp, #4]
 8002400:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002402:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8002406:	6319      	str	r1, [r3, #48]	; 0x30
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800240e:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002410:	4611      	mov	r1, r2
 8002412:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002414:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002416:	f7fe fffd 	bl	8001414 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800241a:	2038      	movs	r0, #56	; 0x38
 800241c:	f7ff f82e 	bl	800147c <HAL_NVIC_EnableIRQ>

}
 8002420:	b003      	add	sp, #12
 8002422:	f85d fb04 	ldr.w	pc, [sp], #4
 8002426:	bf00      	nop
 8002428:	40023800 	.word	0x40023800

0800242c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 800242c:	b082      	sub	sp, #8

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800242e:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <MX_GPIO_Init+0x34>)
 8002430:	2100      	movs	r1, #0
 8002432:	9100      	str	r1, [sp, #0]
 8002434:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002436:	f042 0201 	orr.w	r2, r2, #1
 800243a:	631a      	str	r2, [r3, #48]	; 0x30
 800243c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800243e:	f002 0201 	and.w	r2, r2, #1
 8002442:	9200      	str	r2, [sp, #0]
 8002444:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002446:	9101      	str	r1, [sp, #4]
 8002448:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800244a:	f042 0202 	orr.w	r2, r2, #2
 800244e:	631a      	str	r2, [r3, #48]	; 0x30
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	9301      	str	r3, [sp, #4]
 8002458:	9b01      	ldr	r3, [sp, #4]

}
 800245a:	b002      	add	sp, #8
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	40023800 	.word	0x40023800

08002464 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8002464:	b510      	push	{r4, lr}
 8002466:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002468:	2300      	movs	r3, #0
 800246a:	4a21      	ldr	r2, [pc, #132]	; (80024f0 <SystemClock_Config+0x8c>)
 800246c:	9301      	str	r3, [sp, #4]
 800246e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002470:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002474:	6411      	str	r1, [r2, #64]	; 0x40
 8002476:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002478:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800247c:	9201      	str	r2, [sp, #4]
 800247e:	9a01      	ldr	r2, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002480:	4a1c      	ldr	r2, [pc, #112]	; (80024f4 <SystemClock_Config+0x90>)
 8002482:	9302      	str	r3, [sp, #8]
 8002484:	6811      	ldr	r1, [r2, #0]
 8002486:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800248a:	6011      	str	r1, [r2, #0]
 800248c:	6812      	ldr	r2, [r2, #0]
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800248e:	930e      	str	r3, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002490:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002494:	9202      	str	r2, [sp, #8]
 8002496:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002498:	2202      	movs	r2, #2
 800249a:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800249c:	2201      	movs	r2, #1
 800249e:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024a0:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80024a2:	2210      	movs	r2, #16
 80024a4:	920c      	str	r2, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024a6:	f7ff fa8d 	bl	80019c4 <HAL_RCC_OscConfig>
 80024aa:	4601      	mov	r1, r0
 80024ac:	b100      	cbz	r0, 80024b0 <SystemClock_Config+0x4c>
 80024ae:	e7fe      	b.n	80024ae <SystemClock_Config+0x4a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024b0:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80024b2:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024b4:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80024b6:	9006      	str	r0, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024b8:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80024ba:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024bc:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80024be:	f7ff fc4f 	bl	8001d60 <HAL_RCC_ClockConfig>
 80024c2:	4604      	mov	r4, r0
 80024c4:	b100      	cbz	r0, 80024c8 <SystemClock_Config+0x64>
 80024c6:	e7fe      	b.n	80024c6 <SystemClock_Config+0x62>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80024c8:	f7ff fd00 	bl	8001ecc <HAL_RCC_GetHCLKFreq>
 80024cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80024d4:	f7fe ffde 	bl	8001494 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80024d8:	2004      	movs	r0, #4
 80024da:	f7fe fff1 	bl	80014c0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80024de:	4622      	mov	r2, r4
 80024e0:	4621      	mov	r1, r4
 80024e2:	f04f 30ff 	mov.w	r0, #4294967295
 80024e6:	f7fe ff95 	bl	8001414 <HAL_NVIC_SetPriority>
}
 80024ea:	b014      	add	sp, #80	; 0x50
 80024ec:	bd10      	pop	{r4, pc}
 80024ee:	bf00      	nop
 80024f0:	40023800 	.word	0x40023800
 80024f4:	40007000 	.word	0x40007000

080024f8 <main>:
{
 80024f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024fc:	b099      	sub	sp, #100	; 0x64
  HAL_Init();
 80024fe:	f7fe fceb 	bl	8000ed8 <HAL_Init>
  SystemClock_Config();
 8002502:	f7ff ffaf 	bl	8002464 <SystemClock_Config>
  MX_GPIO_Init();
 8002506:	f7ff ff91 	bl	800242c <MX_GPIO_Init>
  MX_DMA_Init();
 800250a:	f7ff ff75 	bl	80023f8 <MX_DMA_Init>
  MX_ADC1_Init();
 800250e:	f7ff fee1 	bl	80022d4 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8002512:	f000 f8d5 	bl	80026c0 <MX_USART3_UART_Init>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)lectura_adc,3);
 8002516:	2203      	movs	r2, #3
 8002518:	492d      	ldr	r1, [pc, #180]	; (80025d0 <main+0xd8>)
 800251a:	482e      	ldr	r0, [pc, #184]	; (80025d4 <main+0xdc>)
	      HAL_UART_Transmit(&huart3,(uint8_t*)buffer0,(uint16_t)strlen(buffer0),(uint32_t)100);
 800251c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80025e4 <main+0xec>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)lectura_adc,3);
 8002520:	f7fe fe0c 	bl	800113c <HAL_ADC_Start_DMA>
	  	  double valor1=signal1/1241;
 8002524:	a528      	add	r5, pc, #160	; (adr r5, 80025c8 <main+0xd0>)
 8002526:	e9d5 4500 	ldrd	r4, r5, [r5]
	  	  double signal1=lectura_adc[1];
 800252a:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 80025d0 <main+0xd8>
	  HAL_ADC_Start(&hadc1);
 800252e:	4829      	ldr	r0, [pc, #164]	; (80025d4 <main+0xdc>)
 8002530:	f7fe fda4 	bl	800107c <HAL_ADC_Start>
	  	  double signal1=lectura_adc[1];
 8002534:	f8bb 0002 	ldrh.w	r0, [fp, #2]
 8002538:	f7fd ffe4 	bl	8000504 <__aeabi_ui2d>
	  	  double valor1=signal1/1241;
 800253c:	4622      	mov	r2, r4
 800253e:	462b      	mov	r3, r5
 8002540:	f7fe f980 	bl	8000844 <__aeabi_ddiv>
 8002544:	4680      	mov	r8, r0
	  	  double signal2=lectura_adc[2];
 8002546:	f8bb 0004 	ldrh.w	r0, [fp, #4]
	  	  double valor1=signal1/1241;
 800254a:	4689      	mov	r9, r1
	  	  double signal2=lectura_adc[2];
 800254c:	f7fd ffda 	bl	8000504 <__aeabi_ui2d>
	  	  double valor2=signal2/1241;
 8002550:	4622      	mov	r2, r4
 8002552:	462b      	mov	r3, r5
 8002554:	f7fe f976 	bl	8000844 <__aeabi_ddiv>
 8002558:	4606      	mov	r6, r0
	  	  double signal0=lectura_adc[0];
 800255a:	f8bb 0000 	ldrh.w	r0, [fp]
	  	  double valor2=signal2/1241;
 800255e:	460f      	mov	r7, r1
	  	  double signal0=lectura_adc[0];
 8002560:	f7fd ffd0 	bl	8000504 <__aeabi_ui2d>
	  	  double valor0=signal0/1241;
 8002564:	4622      	mov	r2, r4
 8002566:	462b      	mov	r3, r5
 8002568:	f7fe f96c 	bl	8000844 <__aeabi_ddiv>
	  	  sprintf(buffer0,"Canal1=%3.2f V\n\r",valor0);
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4668      	mov	r0, sp
 8002572:	4919      	ldr	r1, [pc, #100]	; (80025d8 <main+0xe0>)
 8002574:	f000 f93c 	bl	80027f0 <sprintf>
	      HAL_UART_Transmit(&huart3,(uint8_t*)buffer0,(uint16_t)strlen(buffer0),(uint32_t)100);
 8002578:	4668      	mov	r0, sp
 800257a:	f7fd fe29 	bl	80001d0 <strlen>
 800257e:	4669      	mov	r1, sp
 8002580:	b282      	uxth	r2, r0
 8002582:	2364      	movs	r3, #100	; 0x64
 8002584:	4650      	mov	r0, sl
 8002586:	f7ff fe47 	bl	8002218 <HAL_UART_Transmit>
	  	  sprintf(buffer1,"Canal2=%3.2f V\n\r",valor1);
 800258a:	4642      	mov	r2, r8
 800258c:	464b      	mov	r3, r9
 800258e:	4913      	ldr	r1, [pc, #76]	; (80025dc <main+0xe4>)
 8002590:	a808      	add	r0, sp, #32
 8002592:	f000 f92d 	bl	80027f0 <sprintf>
	      HAL_UART_Transmit(&huart3,(uint8_t*)buffer1,(uint16_t)strlen(buffer1),(uint32_t)100);
 8002596:	a808      	add	r0, sp, #32
 8002598:	f7fd fe1a 	bl	80001d0 <strlen>
 800259c:	a908      	add	r1, sp, #32
 800259e:	b282      	uxth	r2, r0
 80025a0:	2364      	movs	r3, #100	; 0x64
 80025a2:	4650      	mov	r0, sl
 80025a4:	f7ff fe38 	bl	8002218 <HAL_UART_Transmit>
	      sprintf(buffer2,"Canal3=%3.2f V\n\r\n",valor2);
 80025a8:	4632      	mov	r2, r6
 80025aa:	463b      	mov	r3, r7
 80025ac:	490c      	ldr	r1, [pc, #48]	; (80025e0 <main+0xe8>)
 80025ae:	a810      	add	r0, sp, #64	; 0x40
 80025b0:	f000 f91e 	bl	80027f0 <sprintf>
	      HAL_UART_Transmit(&huart3,(uint8_t*)buffer2,(uint16_t)strlen(buffer2),(uint32_t)100);
 80025b4:	a810      	add	r0, sp, #64	; 0x40
 80025b6:	f7fd fe0b 	bl	80001d0 <strlen>
 80025ba:	2364      	movs	r3, #100	; 0x64
 80025bc:	b282      	uxth	r2, r0
 80025be:	a910      	add	r1, sp, #64	; 0x40
 80025c0:	4650      	mov	r0, sl
 80025c2:	f7ff fe29 	bl	8002218 <HAL_UART_Transmit>
 80025c6:	e7b0      	b.n	800252a <main+0x32>
 80025c8:	00000000 	.word	0x00000000
 80025cc:	40936400 	.word	0x40936400
 80025d0:	20000774 	.word	0x20000774
 80025d4:	200006cc 	.word	0x200006cc
 80025d8:	08005615 	.word	0x08005615
 80025dc:	08005626 	.word	0x08005626
 80025e0:	08005637 	.word	0x08005637
 80025e4:	2000077c 	.word	0x2000077c

080025e8 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 80025e8:	e7fe      	b.n	80025e8 <_Error_Handler>

080025ea <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025ea:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025ec:	2003      	movs	r0, #3
 80025ee:	f7fe feff 	bl	80013f0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80025f2:	2200      	movs	r2, #0
 80025f4:	4611      	mov	r1, r2
 80025f6:	f06f 000b 	mvn.w	r0, #11
 80025fa:	f7fe ff0b 	bl	8001414 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80025fe:	2200      	movs	r2, #0
 8002600:	4611      	mov	r1, r2
 8002602:	f06f 000a 	mvn.w	r0, #10
 8002606:	f7fe ff05 	bl	8001414 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800260a:	2200      	movs	r2, #0
 800260c:	4611      	mov	r1, r2
 800260e:	f06f 0009 	mvn.w	r0, #9
 8002612:	f7fe feff 	bl	8001414 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002616:	2200      	movs	r2, #0
 8002618:	4611      	mov	r1, r2
 800261a:	f06f 0004 	mvn.w	r0, #4
 800261e:	f7fe fef9 	bl	8001414 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002622:	2200      	movs	r2, #0
 8002624:	4611      	mov	r1, r2
 8002626:	f06f 0003 	mvn.w	r0, #3
 800262a:	f7fe fef3 	bl	8001414 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800262e:	2200      	movs	r2, #0
 8002630:	4611      	mov	r1, r2
 8002632:	f06f 0001 	mvn.w	r0, #1
 8002636:	f7fe feed 	bl	8001414 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800263a:	2200      	movs	r2, #0
 800263c:	4611      	mov	r1, r2
 800263e:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002642:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002646:	f7fe bee5 	b.w	8001414 <HAL_NVIC_SetPriority>

0800264a <NMI_Handler>:
 800264a:	4770      	bx	lr

0800264c <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800264c:	e7fe      	b.n	800264c <HardFault_Handler>

0800264e <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800264e:	e7fe      	b.n	800264e <MemManage_Handler>

08002650 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002650:	e7fe      	b.n	8002650 <BusFault_Handler>

08002652 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002652:	e7fe      	b.n	8002652 <UsageFault_Handler>

08002654 <SVC_Handler>:
 8002654:	4770      	bx	lr

08002656 <DebugMon_Handler>:
 8002656:	4770      	bx	lr

08002658 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002658:	4770      	bx	lr

0800265a <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800265a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800265c:	f7fe fc56 	bl	8000f0c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002660:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002664:	f7fe bf39 	b.w	80014da <HAL_SYSTICK_IRQHandler>

08002668 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002668:	4801      	ldr	r0, [pc, #4]	; (8002670 <DMA2_Stream0_IRQHandler+0x8>)
 800266a:	f7ff b80d 	b.w	8001688 <HAL_DMA_IRQHandler>
 800266e:	bf00      	nop
 8002670:	20000714 	.word	0x20000714

08002674 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002674:	490f      	ldr	r1, [pc, #60]	; (80026b4 <SystemInit+0x40>)
 8002676:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800267a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800267e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002682:	4b0d      	ldr	r3, [pc, #52]	; (80026b8 <SystemInit+0x44>)
 8002684:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002686:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002688:	f042 0201 	orr.w	r2, r2, #1
 800268c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800268e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002696:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800269a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800269c:	4a07      	ldr	r2, [pc, #28]	; (80026bc <SystemInit+0x48>)
 800269e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026a6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80026a8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80026aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80026ae:	608b      	str	r3, [r1, #8]
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	e000ed00 	.word	0xe000ed00
 80026b8:	40023800 	.word	0x40023800
 80026bc:	24003010 	.word	0x24003010

080026c0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80026c0:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 80026c2:	480c      	ldr	r0, [pc, #48]	; (80026f4 <MX_USART3_UART_Init+0x34>)
  huart3.Init.BaudRate = 115200;
 80026c4:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <MX_USART3_UART_Init+0x38>)
 80026c6:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 80026ca:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 80026ce:	220c      	movs	r2, #12
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80026d0:	2300      	movs	r3, #0
 80026d2:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80026d4:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80026d6:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80026d8:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026da:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80026dc:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80026de:	f7ff fd6d 	bl	80021bc <HAL_UART_Init>
 80026e2:	b128      	cbz	r0, 80026f0 <MX_USART3_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
 80026e4:	2142      	movs	r1, #66	; 0x42
 80026e6:	4805      	ldr	r0, [pc, #20]	; (80026fc <MX_USART3_UART_Init+0x3c>)
  }

}
 80026e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80026ec:	f7ff bf7c 	b.w	80025e8 <_Error_Handler>
 80026f0:	bd08      	pop	{r3, pc}
 80026f2:	bf00      	nop
 80026f4:	2000077c 	.word	0x2000077c
 80026f8:	40004800 	.word	0x40004800
 80026fc:	08005661 	.word	0x08005661

08002700 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002700:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART3)
 8002702:	6802      	ldr	r2, [r0, #0]
 8002704:	4b10      	ldr	r3, [pc, #64]	; (8002748 <HAL_UART_MspInit+0x48>)
 8002706:	429a      	cmp	r2, r3
 8002708:	d11a      	bne.n	8002740 <HAL_UART_MspInit+0x40>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	4b0f      	ldr	r3, [pc, #60]	; (800274c <HAL_UART_MspInit+0x4c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002710:	480f      	ldr	r0, [pc, #60]	; (8002750 <HAL_UART_MspInit+0x50>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8002712:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002714:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002718:	641a      	str	r2, [r3, #64]	; 0x40
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002724:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002728:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272a:	2302      	movs	r3, #2
 800272c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800272e:	2301      	movs	r3, #1
 8002730:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002732:	2303      	movs	r3, #3
 8002734:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002736:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002738:	2307      	movs	r3, #7
 800273a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800273c:	f7ff f862 	bl	8001804 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002740:	b007      	add	sp, #28
 8002742:	f85d fb04 	ldr.w	pc, [sp], #4
 8002746:	bf00      	nop
 8002748:	40004800 	.word	0x40004800
 800274c:	40023800 	.word	0x40023800
 8002750:	40020400 	.word	0x40020400

08002754 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002754:	f8df d034 	ldr.w	sp, [pc, #52]	; 800278c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002758:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800275a:	e003      	b.n	8002764 <LoopCopyDataInit>

0800275c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800275c:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800275e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002760:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002762:	3104      	adds	r1, #4

08002764 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002764:	480b      	ldr	r0, [pc, #44]	; (8002794 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002766:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002768:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800276a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800276c:	d3f6      	bcc.n	800275c <CopyDataInit>
  ldr  r2, =_sbss
 800276e:	4a0b      	ldr	r2, [pc, #44]	; (800279c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002770:	e002      	b.n	8002778 <LoopFillZerobss>

08002772 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002772:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002774:	f842 3b04 	str.w	r3, [r2], #4

08002778 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002778:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800277a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800277c:	d3f9      	bcc.n	8002772 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800277e:	f7ff ff79 	bl	8002674 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002782:	f000 f811 	bl	80027a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002786:	f7ff feb7 	bl	80024f8 <main>
  bx  lr    
 800278a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800278c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002790:	080058f0 	.word	0x080058f0
  ldr  r0, =_sdata
 8002794:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002798:	20000674 	.word	0x20000674
  ldr  r2, =_sbss
 800279c:	20000674 	.word	0x20000674
  ldr  r3, = _ebss
 80027a0:	200007cc 	.word	0x200007cc

080027a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027a4:	e7fe      	b.n	80027a4 <ADC_IRQHandler>
	...

080027a8 <__libc_init_array>:
 80027a8:	b570      	push	{r4, r5, r6, lr}
 80027aa:	4e0d      	ldr	r6, [pc, #52]	; (80027e0 <__libc_init_array+0x38>)
 80027ac:	4c0d      	ldr	r4, [pc, #52]	; (80027e4 <__libc_init_array+0x3c>)
 80027ae:	1ba4      	subs	r4, r4, r6
 80027b0:	10a4      	asrs	r4, r4, #2
 80027b2:	2500      	movs	r5, #0
 80027b4:	42a5      	cmp	r5, r4
 80027b6:	d109      	bne.n	80027cc <__libc_init_array+0x24>
 80027b8:	4e0b      	ldr	r6, [pc, #44]	; (80027e8 <__libc_init_array+0x40>)
 80027ba:	4c0c      	ldr	r4, [pc, #48]	; (80027ec <__libc_init_array+0x44>)
 80027bc:	f002 ff12 	bl	80055e4 <_init>
 80027c0:	1ba4      	subs	r4, r4, r6
 80027c2:	10a4      	asrs	r4, r4, #2
 80027c4:	2500      	movs	r5, #0
 80027c6:	42a5      	cmp	r5, r4
 80027c8:	d105      	bne.n	80027d6 <__libc_init_array+0x2e>
 80027ca:	bd70      	pop	{r4, r5, r6, pc}
 80027cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027d0:	4798      	blx	r3
 80027d2:	3501      	adds	r5, #1
 80027d4:	e7ee      	b.n	80027b4 <__libc_init_array+0xc>
 80027d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027da:	4798      	blx	r3
 80027dc:	3501      	adds	r5, #1
 80027de:	e7f2      	b.n	80027c6 <__libc_init_array+0x1e>
 80027e0:	080058e8 	.word	0x080058e8
 80027e4:	080058e8 	.word	0x080058e8
 80027e8:	080058e8 	.word	0x080058e8
 80027ec:	080058ec 	.word	0x080058ec

080027f0 <sprintf>:
 80027f0:	b40e      	push	{r1, r2, r3}
 80027f2:	b500      	push	{lr}
 80027f4:	b09c      	sub	sp, #112	; 0x70
 80027f6:	f44f 7102 	mov.w	r1, #520	; 0x208
 80027fa:	ab1d      	add	r3, sp, #116	; 0x74
 80027fc:	f8ad 1014 	strh.w	r1, [sp, #20]
 8002800:	9002      	str	r0, [sp, #8]
 8002802:	9006      	str	r0, [sp, #24]
 8002804:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002808:	480a      	ldr	r0, [pc, #40]	; (8002834 <sprintf+0x44>)
 800280a:	9104      	str	r1, [sp, #16]
 800280c:	9107      	str	r1, [sp, #28]
 800280e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002812:	f853 2b04 	ldr.w	r2, [r3], #4
 8002816:	f8ad 1016 	strh.w	r1, [sp, #22]
 800281a:	6800      	ldr	r0, [r0, #0]
 800281c:	9301      	str	r3, [sp, #4]
 800281e:	a902      	add	r1, sp, #8
 8002820:	f000 f80a 	bl	8002838 <_svfprintf_r>
 8002824:	9b02      	ldr	r3, [sp, #8]
 8002826:	2200      	movs	r2, #0
 8002828:	701a      	strb	r2, [r3, #0]
 800282a:	b01c      	add	sp, #112	; 0x70
 800282c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002830:	b003      	add	sp, #12
 8002832:	4770      	bx	lr
 8002834:	20000004 	.word	0x20000004

08002838 <_svfprintf_r>:
 8002838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800283c:	b0bd      	sub	sp, #244	; 0xf4
 800283e:	468a      	mov	sl, r1
 8002840:	4615      	mov	r5, r2
 8002842:	461f      	mov	r7, r3
 8002844:	4683      	mov	fp, r0
 8002846:	f001 fe25 	bl	8004494 <_localeconv_r>
 800284a:	6803      	ldr	r3, [r0, #0]
 800284c:	930d      	str	r3, [sp, #52]	; 0x34
 800284e:	4618      	mov	r0, r3
 8002850:	f7fd fcbe 	bl	80001d0 <strlen>
 8002854:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8002858:	9008      	str	r0, [sp, #32]
 800285a:	061b      	lsls	r3, r3, #24
 800285c:	d518      	bpl.n	8002890 <_svfprintf_r+0x58>
 800285e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8002862:	b9ab      	cbnz	r3, 8002890 <_svfprintf_r+0x58>
 8002864:	2140      	movs	r1, #64	; 0x40
 8002866:	4658      	mov	r0, fp
 8002868:	f001 fe2a 	bl	80044c0 <_malloc_r>
 800286c:	f8ca 0000 	str.w	r0, [sl]
 8002870:	f8ca 0010 	str.w	r0, [sl, #16]
 8002874:	b948      	cbnz	r0, 800288a <_svfprintf_r+0x52>
 8002876:	230c      	movs	r3, #12
 8002878:	f8cb 3000 	str.w	r3, [fp]
 800287c:	f04f 33ff 	mov.w	r3, #4294967295
 8002880:	9309      	str	r3, [sp, #36]	; 0x24
 8002882:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002884:	b03d      	add	sp, #244	; 0xf4
 8002886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800288a:	2340      	movs	r3, #64	; 0x40
 800288c:	f8ca 3014 	str.w	r3, [sl, #20]
 8002890:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8002af8 <_svfprintf_r+0x2c0>
 8002894:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002898:	2300      	movs	r3, #0
 800289a:	ac2c      	add	r4, sp, #176	; 0xb0
 800289c:	941f      	str	r4, [sp, #124]	; 0x7c
 800289e:	9321      	str	r3, [sp, #132]	; 0x84
 80028a0:	9320      	str	r3, [sp, #128]	; 0x80
 80028a2:	9505      	str	r5, [sp, #20]
 80028a4:	9303      	str	r3, [sp, #12]
 80028a6:	9311      	str	r3, [sp, #68]	; 0x44
 80028a8:	9310      	str	r3, [sp, #64]	; 0x40
 80028aa:	9309      	str	r3, [sp, #36]	; 0x24
 80028ac:	9d05      	ldr	r5, [sp, #20]
 80028ae:	462b      	mov	r3, r5
 80028b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80028b4:	b112      	cbz	r2, 80028bc <_svfprintf_r+0x84>
 80028b6:	2a25      	cmp	r2, #37	; 0x25
 80028b8:	f040 8083 	bne.w	80029c2 <_svfprintf_r+0x18a>
 80028bc:	9b05      	ldr	r3, [sp, #20]
 80028be:	1aee      	subs	r6, r5, r3
 80028c0:	d00d      	beq.n	80028de <_svfprintf_r+0xa6>
 80028c2:	e884 0048 	stmia.w	r4, {r3, r6}
 80028c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80028c8:	4433      	add	r3, r6
 80028ca:	9321      	str	r3, [sp, #132]	; 0x84
 80028cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80028ce:	3301      	adds	r3, #1
 80028d0:	2b07      	cmp	r3, #7
 80028d2:	9320      	str	r3, [sp, #128]	; 0x80
 80028d4:	dc77      	bgt.n	80029c6 <_svfprintf_r+0x18e>
 80028d6:	3408      	adds	r4, #8
 80028d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028da:	4433      	add	r3, r6
 80028dc:	9309      	str	r3, [sp, #36]	; 0x24
 80028de:	782b      	ldrb	r3, [r5, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 8729 	beq.w	8003738 <_svfprintf_r+0xf00>
 80028e6:	2300      	movs	r3, #0
 80028e8:	1c69      	adds	r1, r5, #1
 80028ea:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80028ee:	461a      	mov	r2, r3
 80028f0:	f04f 39ff 	mov.w	r9, #4294967295
 80028f4:	930a      	str	r3, [sp, #40]	; 0x28
 80028f6:	461d      	mov	r5, r3
 80028f8:	200a      	movs	r0, #10
 80028fa:	1c4e      	adds	r6, r1, #1
 80028fc:	7809      	ldrb	r1, [r1, #0]
 80028fe:	9605      	str	r6, [sp, #20]
 8002900:	9102      	str	r1, [sp, #8]
 8002902:	9902      	ldr	r1, [sp, #8]
 8002904:	3920      	subs	r1, #32
 8002906:	2958      	cmp	r1, #88	; 0x58
 8002908:	f200 8418 	bhi.w	800313c <_svfprintf_r+0x904>
 800290c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002910:	041600a6 	.word	0x041600a6
 8002914:	00ab0416 	.word	0x00ab0416
 8002918:	04160416 	.word	0x04160416
 800291c:	04160416 	.word	0x04160416
 8002920:	04160416 	.word	0x04160416
 8002924:	006500ae 	.word	0x006500ae
 8002928:	00b70416 	.word	0x00b70416
 800292c:	041600ba 	.word	0x041600ba
 8002930:	00da00d7 	.word	0x00da00d7
 8002934:	00da00da 	.word	0x00da00da
 8002938:	00da00da 	.word	0x00da00da
 800293c:	00da00da 	.word	0x00da00da
 8002940:	00da00da 	.word	0x00da00da
 8002944:	04160416 	.word	0x04160416
 8002948:	04160416 	.word	0x04160416
 800294c:	04160416 	.word	0x04160416
 8002950:	04160416 	.word	0x04160416
 8002954:	04160416 	.word	0x04160416
 8002958:	012b0115 	.word	0x012b0115
 800295c:	012b0416 	.word	0x012b0416
 8002960:	04160416 	.word	0x04160416
 8002964:	04160416 	.word	0x04160416
 8002968:	041600ed 	.word	0x041600ed
 800296c:	03400416 	.word	0x03400416
 8002970:	04160416 	.word	0x04160416
 8002974:	04160416 	.word	0x04160416
 8002978:	03a80416 	.word	0x03a80416
 800297c:	04160416 	.word	0x04160416
 8002980:	04160086 	.word	0x04160086
 8002984:	04160416 	.word	0x04160416
 8002988:	04160416 	.word	0x04160416
 800298c:	04160416 	.word	0x04160416
 8002990:	04160416 	.word	0x04160416
 8002994:	01070416 	.word	0x01070416
 8002998:	012b006b 	.word	0x012b006b
 800299c:	012b012b 	.word	0x012b012b
 80029a0:	006b00f0 	.word	0x006b00f0
 80029a4:	04160416 	.word	0x04160416
 80029a8:	041600fa 	.word	0x041600fa
 80029ac:	03420322 	.word	0x03420322
 80029b0:	01010376 	.word	0x01010376
 80029b4:	03870416 	.word	0x03870416
 80029b8:	03aa0416 	.word	0x03aa0416
 80029bc:	04160416 	.word	0x04160416
 80029c0:	03c2      	.short	0x03c2
 80029c2:	461d      	mov	r5, r3
 80029c4:	e773      	b.n	80028ae <_svfprintf_r+0x76>
 80029c6:	aa1f      	add	r2, sp, #124	; 0x7c
 80029c8:	4651      	mov	r1, sl
 80029ca:	4658      	mov	r0, fp
 80029cc:	f002 fa7e 	bl	8004ecc <__ssprint_r>
 80029d0:	2800      	cmp	r0, #0
 80029d2:	f040 8692 	bne.w	80036fa <_svfprintf_r+0xec2>
 80029d6:	ac2c      	add	r4, sp, #176	; 0xb0
 80029d8:	e77e      	b.n	80028d8 <_svfprintf_r+0xa0>
 80029da:	2301      	movs	r3, #1
 80029dc:	222b      	movs	r2, #43	; 0x2b
 80029de:	9905      	ldr	r1, [sp, #20]
 80029e0:	e78b      	b.n	80028fa <_svfprintf_r+0xc2>
 80029e2:	460f      	mov	r7, r1
 80029e4:	e7fb      	b.n	80029de <_svfprintf_r+0x1a6>
 80029e6:	b10b      	cbz	r3, 80029ec <_svfprintf_r+0x1b4>
 80029e8:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80029ec:	06ae      	lsls	r6, r5, #26
 80029ee:	f140 80aa 	bpl.w	8002b46 <_svfprintf_r+0x30e>
 80029f2:	3707      	adds	r7, #7
 80029f4:	f027 0707 	bic.w	r7, r7, #7
 80029f8:	f107 0308 	add.w	r3, r7, #8
 80029fc:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002a00:	9304      	str	r3, [sp, #16]
 8002a02:	2e00      	cmp	r6, #0
 8002a04:	f177 0300 	sbcs.w	r3, r7, #0
 8002a08:	da06      	bge.n	8002a18 <_svfprintf_r+0x1e0>
 8002a0a:	4276      	negs	r6, r6
 8002a0c:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8002a10:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8002a14:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e2ca      	b.n	8002fb2 <_svfprintf_r+0x77a>
 8002a1c:	b10b      	cbz	r3, 8002a22 <_svfprintf_r+0x1ea>
 8002a1e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002a22:	4b37      	ldr	r3, [pc, #220]	; (8002b00 <_svfprintf_r+0x2c8>)
 8002a24:	9311      	str	r3, [sp, #68]	; 0x44
 8002a26:	06ab      	lsls	r3, r5, #26
 8002a28:	f140 8339 	bpl.w	800309e <_svfprintf_r+0x866>
 8002a2c:	3707      	adds	r7, #7
 8002a2e:	f027 0707 	bic.w	r7, r7, #7
 8002a32:	f107 0308 	add.w	r3, r7, #8
 8002a36:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002a3a:	9304      	str	r3, [sp, #16]
 8002a3c:	07e8      	lsls	r0, r5, #31
 8002a3e:	d50b      	bpl.n	8002a58 <_svfprintf_r+0x220>
 8002a40:	ea56 0307 	orrs.w	r3, r6, r7
 8002a44:	d008      	beq.n	8002a58 <_svfprintf_r+0x220>
 8002a46:	2330      	movs	r3, #48	; 0x30
 8002a48:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8002a4c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002a50:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8002a54:	f045 0502 	orr.w	r5, r5, #2
 8002a58:	2302      	movs	r3, #2
 8002a5a:	e2a7      	b.n	8002fac <_svfprintf_r+0x774>
 8002a5c:	2a00      	cmp	r2, #0
 8002a5e:	d1be      	bne.n	80029de <_svfprintf_r+0x1a6>
 8002a60:	2301      	movs	r3, #1
 8002a62:	2220      	movs	r2, #32
 8002a64:	e7bb      	b.n	80029de <_svfprintf_r+0x1a6>
 8002a66:	f045 0501 	orr.w	r5, r5, #1
 8002a6a:	e7b8      	b.n	80029de <_svfprintf_r+0x1a6>
 8002a6c:	683e      	ldr	r6, [r7, #0]
 8002a6e:	960a      	str	r6, [sp, #40]	; 0x28
 8002a70:	2e00      	cmp	r6, #0
 8002a72:	f107 0104 	add.w	r1, r7, #4
 8002a76:	dab4      	bge.n	80029e2 <_svfprintf_r+0x1aa>
 8002a78:	4276      	negs	r6, r6
 8002a7a:	960a      	str	r6, [sp, #40]	; 0x28
 8002a7c:	460f      	mov	r7, r1
 8002a7e:	f045 0504 	orr.w	r5, r5, #4
 8002a82:	e7ac      	b.n	80029de <_svfprintf_r+0x1a6>
 8002a84:	9905      	ldr	r1, [sp, #20]
 8002a86:	1c4e      	adds	r6, r1, #1
 8002a88:	7809      	ldrb	r1, [r1, #0]
 8002a8a:	9102      	str	r1, [sp, #8]
 8002a8c:	292a      	cmp	r1, #42	; 0x2a
 8002a8e:	d010      	beq.n	8002ab2 <_svfprintf_r+0x27a>
 8002a90:	f04f 0900 	mov.w	r9, #0
 8002a94:	9605      	str	r6, [sp, #20]
 8002a96:	9902      	ldr	r1, [sp, #8]
 8002a98:	3930      	subs	r1, #48	; 0x30
 8002a9a:	2909      	cmp	r1, #9
 8002a9c:	f63f af31 	bhi.w	8002902 <_svfprintf_r+0xca>
 8002aa0:	fb00 1909 	mla	r9, r0, r9, r1
 8002aa4:	9905      	ldr	r1, [sp, #20]
 8002aa6:	460e      	mov	r6, r1
 8002aa8:	f816 1b01 	ldrb.w	r1, [r6], #1
 8002aac:	9102      	str	r1, [sp, #8]
 8002aae:	9605      	str	r6, [sp, #20]
 8002ab0:	e7f1      	b.n	8002a96 <_svfprintf_r+0x25e>
 8002ab2:	6839      	ldr	r1, [r7, #0]
 8002ab4:	9605      	str	r6, [sp, #20]
 8002ab6:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 8002aba:	3704      	adds	r7, #4
 8002abc:	e78f      	b.n	80029de <_svfprintf_r+0x1a6>
 8002abe:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8002ac2:	e78c      	b.n	80029de <_svfprintf_r+0x1a6>
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	910a      	str	r1, [sp, #40]	; 0x28
 8002ac8:	9902      	ldr	r1, [sp, #8]
 8002aca:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8002acc:	3930      	subs	r1, #48	; 0x30
 8002ace:	fb00 1106 	mla	r1, r0, r6, r1
 8002ad2:	910a      	str	r1, [sp, #40]	; 0x28
 8002ad4:	9905      	ldr	r1, [sp, #20]
 8002ad6:	460e      	mov	r6, r1
 8002ad8:	f816 1b01 	ldrb.w	r1, [r6], #1
 8002adc:	9102      	str	r1, [sp, #8]
 8002ade:	9902      	ldr	r1, [sp, #8]
 8002ae0:	9605      	str	r6, [sp, #20]
 8002ae2:	3930      	subs	r1, #48	; 0x30
 8002ae4:	2909      	cmp	r1, #9
 8002ae6:	d9ef      	bls.n	8002ac8 <_svfprintf_r+0x290>
 8002ae8:	e70b      	b.n	8002902 <_svfprintf_r+0xca>
 8002aea:	f045 0508 	orr.w	r5, r5, #8
 8002aee:	e776      	b.n	80029de <_svfprintf_r+0x1a6>
 8002af0:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8002af4:	e773      	b.n	80029de <_svfprintf_r+0x1a6>
 8002af6:	bf00      	nop
	...
 8002b00:	08005680 	.word	0x08005680
 8002b04:	9905      	ldr	r1, [sp, #20]
 8002b06:	7809      	ldrb	r1, [r1, #0]
 8002b08:	296c      	cmp	r1, #108	; 0x6c
 8002b0a:	d105      	bne.n	8002b18 <_svfprintf_r+0x2e0>
 8002b0c:	9905      	ldr	r1, [sp, #20]
 8002b0e:	3101      	adds	r1, #1
 8002b10:	9105      	str	r1, [sp, #20]
 8002b12:	f045 0520 	orr.w	r5, r5, #32
 8002b16:	e762      	b.n	80029de <_svfprintf_r+0x1a6>
 8002b18:	f045 0510 	orr.w	r5, r5, #16
 8002b1c:	e75f      	b.n	80029de <_svfprintf_r+0x1a6>
 8002b1e:	1d3b      	adds	r3, r7, #4
 8002b20:	9304      	str	r3, [sp, #16]
 8002b22:	2600      	movs	r6, #0
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8002b2a:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8002b2e:	f04f 0901 	mov.w	r9, #1
 8002b32:	4637      	mov	r7, r6
 8002b34:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8002b38:	e11b      	b.n	8002d72 <_svfprintf_r+0x53a>
 8002b3a:	b10b      	cbz	r3, 8002b40 <_svfprintf_r+0x308>
 8002b3c:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002b40:	f045 0510 	orr.w	r5, r5, #16
 8002b44:	e752      	b.n	80029ec <_svfprintf_r+0x1b4>
 8002b46:	f015 0f10 	tst.w	r5, #16
 8002b4a:	f107 0304 	add.w	r3, r7, #4
 8002b4e:	d003      	beq.n	8002b58 <_svfprintf_r+0x320>
 8002b50:	683e      	ldr	r6, [r7, #0]
 8002b52:	9304      	str	r3, [sp, #16]
 8002b54:	17f7      	asrs	r7, r6, #31
 8002b56:	e754      	b.n	8002a02 <_svfprintf_r+0x1ca>
 8002b58:	683e      	ldr	r6, [r7, #0]
 8002b5a:	9304      	str	r3, [sp, #16]
 8002b5c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002b60:	bf18      	it	ne
 8002b62:	b236      	sxthne	r6, r6
 8002b64:	e7f6      	b.n	8002b54 <_svfprintf_r+0x31c>
 8002b66:	b10b      	cbz	r3, 8002b6c <_svfprintf_r+0x334>
 8002b68:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002b6c:	3707      	adds	r7, #7
 8002b6e:	f027 0707 	bic.w	r7, r7, #7
 8002b72:	f107 0308 	add.w	r3, r7, #8
 8002b76:	9304      	str	r3, [sp, #16]
 8002b78:	ed97 7b00 	vldr	d7, [r7]
 8002b7c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002b80:	9b06      	ldr	r3, [sp, #24]
 8002b82:	9312      	str	r3, [sp, #72]	; 0x48
 8002b84:	9b07      	ldr	r3, [sp, #28]
 8002b86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b8a:	9313      	str	r3, [sp, #76]	; 0x4c
 8002b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b90:	4b4a      	ldr	r3, [pc, #296]	; (8002cbc <_svfprintf_r+0x484>)
 8002b92:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8002b96:	f7fd ffc5 	bl	8000b24 <__aeabi_dcmpun>
 8002b9a:	2800      	cmp	r0, #0
 8002b9c:	f040 85d5 	bne.w	800374a <_svfprintf_r+0xf12>
 8002ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ba4:	4b45      	ldr	r3, [pc, #276]	; (8002cbc <_svfprintf_r+0x484>)
 8002ba6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8002baa:	f7fd ff9d 	bl	8000ae8 <__aeabi_dcmple>
 8002bae:	2800      	cmp	r0, #0
 8002bb0:	f040 85cb 	bne.w	800374a <_svfprintf_r+0xf12>
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002bbc:	f7fd ff8a 	bl	8000ad4 <__aeabi_dcmplt>
 8002bc0:	b110      	cbz	r0, 8002bc8 <_svfprintf_r+0x390>
 8002bc2:	232d      	movs	r3, #45	; 0x2d
 8002bc4:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8002bc8:	4b3d      	ldr	r3, [pc, #244]	; (8002cc0 <_svfprintf_r+0x488>)
 8002bca:	4a3e      	ldr	r2, [pc, #248]	; (8002cc4 <_svfprintf_r+0x48c>)
 8002bcc:	9902      	ldr	r1, [sp, #8]
 8002bce:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8002bd2:	2947      	cmp	r1, #71	; 0x47
 8002bd4:	bfcc      	ite	gt
 8002bd6:	4690      	movgt	r8, r2
 8002bd8:	4698      	movle	r8, r3
 8002bda:	f04f 0903 	mov.w	r9, #3
 8002bde:	2600      	movs	r6, #0
 8002be0:	4637      	mov	r7, r6
 8002be2:	e0c6      	b.n	8002d72 <_svfprintf_r+0x53a>
 8002be4:	f1b9 3fff 	cmp.w	r9, #4294967295
 8002be8:	d022      	beq.n	8002c30 <_svfprintf_r+0x3f8>
 8002bea:	9b02      	ldr	r3, [sp, #8]
 8002bec:	f023 0320 	bic.w	r3, r3, #32
 8002bf0:	2b47      	cmp	r3, #71	; 0x47
 8002bf2:	d104      	bne.n	8002bfe <_svfprintf_r+0x3c6>
 8002bf4:	f1b9 0f00 	cmp.w	r9, #0
 8002bf8:	bf08      	it	eq
 8002bfa:	f04f 0901 	moveq.w	r9, #1
 8002bfe:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8002c02:	930c      	str	r3, [sp, #48]	; 0x30
 8002c04:	9b07      	ldr	r3, [sp, #28]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	da15      	bge.n	8002c36 <_svfprintf_r+0x3fe>
 8002c0a:	9b06      	ldr	r3, [sp, #24]
 8002c0c:	930e      	str	r3, [sp, #56]	; 0x38
 8002c0e:	9b07      	ldr	r3, [sp, #28]
 8002c10:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002c14:	930f      	str	r3, [sp, #60]	; 0x3c
 8002c16:	232d      	movs	r3, #45	; 0x2d
 8002c18:	930b      	str	r3, [sp, #44]	; 0x2c
 8002c1a:	9b02      	ldr	r3, [sp, #8]
 8002c1c:	f023 0720 	bic.w	r7, r3, #32
 8002c20:	2f46      	cmp	r7, #70	; 0x46
 8002c22:	d00e      	beq.n	8002c42 <_svfprintf_r+0x40a>
 8002c24:	2f45      	cmp	r7, #69	; 0x45
 8002c26:	d146      	bne.n	8002cb6 <_svfprintf_r+0x47e>
 8002c28:	f109 0601 	add.w	r6, r9, #1
 8002c2c:	2102      	movs	r1, #2
 8002c2e:	e00a      	b.n	8002c46 <_svfprintf_r+0x40e>
 8002c30:	f04f 0906 	mov.w	r9, #6
 8002c34:	e7e3      	b.n	8002bfe <_svfprintf_r+0x3c6>
 8002c36:	ed9d 7b06 	vldr	d7, [sp, #24]
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8002c40:	e7ea      	b.n	8002c18 <_svfprintf_r+0x3e0>
 8002c42:	464e      	mov	r6, r9
 8002c44:	2103      	movs	r1, #3
 8002c46:	ab1d      	add	r3, sp, #116	; 0x74
 8002c48:	9301      	str	r3, [sp, #4]
 8002c4a:	ab1a      	add	r3, sp, #104	; 0x68
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	4632      	mov	r2, r6
 8002c50:	ab19      	add	r3, sp, #100	; 0x64
 8002c52:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8002c56:	4658      	mov	r0, fp
 8002c58:	f000 fe4e 	bl	80038f8 <_dtoa_r>
 8002c5c:	2f47      	cmp	r7, #71	; 0x47
 8002c5e:	4680      	mov	r8, r0
 8002c60:	d102      	bne.n	8002c68 <_svfprintf_r+0x430>
 8002c62:	07e8      	lsls	r0, r5, #31
 8002c64:	f140 857e 	bpl.w	8003764 <_svfprintf_r+0xf2c>
 8002c68:	eb08 0306 	add.w	r3, r8, r6
 8002c6c:	2f46      	cmp	r7, #70	; 0x46
 8002c6e:	9303      	str	r3, [sp, #12]
 8002c70:	d111      	bne.n	8002c96 <_svfprintf_r+0x45e>
 8002c72:	f898 3000 	ldrb.w	r3, [r8]
 8002c76:	2b30      	cmp	r3, #48	; 0x30
 8002c78:	d109      	bne.n	8002c8e <_svfprintf_r+0x456>
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002c82:	f7fd ff1d 	bl	8000ac0 <__aeabi_dcmpeq>
 8002c86:	b910      	cbnz	r0, 8002c8e <_svfprintf_r+0x456>
 8002c88:	f1c6 0601 	rsb	r6, r6, #1
 8002c8c:	9619      	str	r6, [sp, #100]	; 0x64
 8002c8e:	9a03      	ldr	r2, [sp, #12]
 8002c90:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002c92:	441a      	add	r2, r3
 8002c94:	9203      	str	r2, [sp, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	2300      	movs	r3, #0
 8002c9a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002c9e:	f7fd ff0f 	bl	8000ac0 <__aeabi_dcmpeq>
 8002ca2:	b988      	cbnz	r0, 8002cc8 <_svfprintf_r+0x490>
 8002ca4:	2230      	movs	r2, #48	; 0x30
 8002ca6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002ca8:	9903      	ldr	r1, [sp, #12]
 8002caa:	4299      	cmp	r1, r3
 8002cac:	d90e      	bls.n	8002ccc <_svfprintf_r+0x494>
 8002cae:	1c59      	adds	r1, r3, #1
 8002cb0:	911d      	str	r1, [sp, #116]	; 0x74
 8002cb2:	701a      	strb	r2, [r3, #0]
 8002cb4:	e7f7      	b.n	8002ca6 <_svfprintf_r+0x46e>
 8002cb6:	464e      	mov	r6, r9
 8002cb8:	e7b8      	b.n	8002c2c <_svfprintf_r+0x3f4>
 8002cba:	bf00      	nop
 8002cbc:	7fefffff 	.word	0x7fefffff
 8002cc0:	08005670 	.word	0x08005670
 8002cc4:	08005674 	.word	0x08005674
 8002cc8:	9b03      	ldr	r3, [sp, #12]
 8002cca:	931d      	str	r3, [sp, #116]	; 0x74
 8002ccc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002cce:	2f47      	cmp	r7, #71	; 0x47
 8002cd0:	eba3 0308 	sub.w	r3, r3, r8
 8002cd4:	9303      	str	r3, [sp, #12]
 8002cd6:	f040 80fa 	bne.w	8002ece <_svfprintf_r+0x696>
 8002cda:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002cdc:	1cd9      	adds	r1, r3, #3
 8002cde:	db02      	blt.n	8002ce6 <_svfprintf_r+0x4ae>
 8002ce0:	4599      	cmp	r9, r3
 8002ce2:	f280 8120 	bge.w	8002f26 <_svfprintf_r+0x6ee>
 8002ce6:	9b02      	ldr	r3, [sp, #8]
 8002ce8:	3b02      	subs	r3, #2
 8002cea:	9302      	str	r3, [sp, #8]
 8002cec:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8002cee:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8002cf2:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 8002cf6:	1e53      	subs	r3, r2, #1
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	9319      	str	r3, [sp, #100]	; 0x64
 8002cfc:	bfb6      	itet	lt
 8002cfe:	f1c2 0301 	rsblt	r3, r2, #1
 8002d02:	222b      	movge	r2, #43	; 0x2b
 8002d04:	222d      	movlt	r2, #45	; 0x2d
 8002d06:	2b09      	cmp	r3, #9
 8002d08:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8002d0c:	f340 80fb 	ble.w	8002f06 <_svfprintf_r+0x6ce>
 8002d10:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8002d14:	260a      	movs	r6, #10
 8002d16:	fb93 f0f6 	sdiv	r0, r3, r6
 8002d1a:	fb06 3310 	mls	r3, r6, r0, r3
 8002d1e:	3330      	adds	r3, #48	; 0x30
 8002d20:	2809      	cmp	r0, #9
 8002d22:	f802 3c01 	strb.w	r3, [r2, #-1]
 8002d26:	f102 31ff 	add.w	r1, r2, #4294967295
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	f300 80e4 	bgt.w	8002ef8 <_svfprintf_r+0x6c0>
 8002d30:	3330      	adds	r3, #48	; 0x30
 8002d32:	f801 3c01 	strb.w	r3, [r1, #-1]
 8002d36:	3a02      	subs	r2, #2
 8002d38:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8002d3c:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8002d40:	4282      	cmp	r2, r0
 8002d42:	4619      	mov	r1, r3
 8002d44:	f0c0 80da 	bcc.w	8002efc <_svfprintf_r+0x6c4>
 8002d48:	9a03      	ldr	r2, [sp, #12]
 8002d4a:	ab1b      	add	r3, sp, #108	; 0x6c
 8002d4c:	1acb      	subs	r3, r1, r3
 8002d4e:	2a01      	cmp	r2, #1
 8002d50:	9310      	str	r3, [sp, #64]	; 0x40
 8002d52:	eb03 0902 	add.w	r9, r3, r2
 8002d56:	dc02      	bgt.n	8002d5e <_svfprintf_r+0x526>
 8002d58:	f015 0701 	ands.w	r7, r5, #1
 8002d5c:	d002      	beq.n	8002d64 <_svfprintf_r+0x52c>
 8002d5e:	9b08      	ldr	r3, [sp, #32]
 8002d60:	2700      	movs	r7, #0
 8002d62:	4499      	add	r9, r3
 8002d64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002d66:	b113      	cbz	r3, 8002d6e <_svfprintf_r+0x536>
 8002d68:	232d      	movs	r3, #45	; 0x2d
 8002d6a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8002d6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002d70:	2600      	movs	r6, #0
 8002d72:	454e      	cmp	r6, r9
 8002d74:	4633      	mov	r3, r6
 8002d76:	bfb8      	it	lt
 8002d78:	464b      	movlt	r3, r9
 8002d7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8002d7c:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8002d80:	b113      	cbz	r3, 8002d88 <_svfprintf_r+0x550>
 8002d82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002d84:	3301      	adds	r3, #1
 8002d86:	930b      	str	r3, [sp, #44]	; 0x2c
 8002d88:	f015 0302 	ands.w	r3, r5, #2
 8002d8c:	9314      	str	r3, [sp, #80]	; 0x50
 8002d8e:	bf1e      	ittt	ne
 8002d90:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8002d92:	3302      	addne	r3, #2
 8002d94:	930b      	strne	r3, [sp, #44]	; 0x2c
 8002d96:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8002d9a:	9315      	str	r3, [sp, #84]	; 0x54
 8002d9c:	d118      	bne.n	8002dd0 <_svfprintf_r+0x598>
 8002d9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002da0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002da2:	1a9b      	subs	r3, r3, r2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	930c      	str	r3, [sp, #48]	; 0x30
 8002da8:	dd12      	ble.n	8002dd0 <_svfprintf_r+0x598>
 8002daa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002dac:	2b10      	cmp	r3, #16
 8002dae:	4ba9      	ldr	r3, [pc, #676]	; (8003054 <_svfprintf_r+0x81c>)
 8002db0:	6023      	str	r3, [r4, #0]
 8002db2:	f300 81d5 	bgt.w	8003160 <_svfprintf_r+0x928>
 8002db6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002db8:	6063      	str	r3, [r4, #4]
 8002dba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002dbc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002dbe:	4413      	add	r3, r2
 8002dc0:	9321      	str	r3, [sp, #132]	; 0x84
 8002dc2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	2b07      	cmp	r3, #7
 8002dc8:	9320      	str	r3, [sp, #128]	; 0x80
 8002dca:	f300 81e2 	bgt.w	8003192 <_svfprintf_r+0x95a>
 8002dce:	3408      	adds	r4, #8
 8002dd0:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8002dd4:	b173      	cbz	r3, 8002df4 <_svfprintf_r+0x5bc>
 8002dd6:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8002dda:	6023      	str	r3, [r4, #0]
 8002ddc:	2301      	movs	r3, #1
 8002dde:	6063      	str	r3, [r4, #4]
 8002de0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002de2:	3301      	adds	r3, #1
 8002de4:	9321      	str	r3, [sp, #132]	; 0x84
 8002de6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002de8:	3301      	adds	r3, #1
 8002dea:	2b07      	cmp	r3, #7
 8002dec:	9320      	str	r3, [sp, #128]	; 0x80
 8002dee:	f300 81da 	bgt.w	80031a6 <_svfprintf_r+0x96e>
 8002df2:	3408      	adds	r4, #8
 8002df4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002df6:	b16b      	cbz	r3, 8002e14 <_svfprintf_r+0x5dc>
 8002df8:	ab18      	add	r3, sp, #96	; 0x60
 8002dfa:	6023      	str	r3, [r4, #0]
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	6063      	str	r3, [r4, #4]
 8002e00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002e02:	3302      	adds	r3, #2
 8002e04:	9321      	str	r3, [sp, #132]	; 0x84
 8002e06:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002e08:	3301      	adds	r3, #1
 8002e0a:	2b07      	cmp	r3, #7
 8002e0c:	9320      	str	r3, [sp, #128]	; 0x80
 8002e0e:	f300 81d4 	bgt.w	80031ba <_svfprintf_r+0x982>
 8002e12:	3408      	adds	r4, #8
 8002e14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002e16:	2b80      	cmp	r3, #128	; 0x80
 8002e18:	d114      	bne.n	8002e44 <_svfprintf_r+0x60c>
 8002e1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002e1e:	1a9b      	subs	r3, r3, r2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	dd0f      	ble.n	8002e44 <_svfprintf_r+0x60c>
 8002e24:	4a8c      	ldr	r2, [pc, #560]	; (8003058 <_svfprintf_r+0x820>)
 8002e26:	6022      	str	r2, [r4, #0]
 8002e28:	2b10      	cmp	r3, #16
 8002e2a:	f300 81d0 	bgt.w	80031ce <_svfprintf_r+0x996>
 8002e2e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002e30:	6063      	str	r3, [r4, #4]
 8002e32:	4413      	add	r3, r2
 8002e34:	9321      	str	r3, [sp, #132]	; 0x84
 8002e36:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002e38:	3301      	adds	r3, #1
 8002e3a:	2b07      	cmp	r3, #7
 8002e3c:	9320      	str	r3, [sp, #128]	; 0x80
 8002e3e:	f300 81df 	bgt.w	8003200 <_svfprintf_r+0x9c8>
 8002e42:	3408      	adds	r4, #8
 8002e44:	eba6 0609 	sub.w	r6, r6, r9
 8002e48:	2e00      	cmp	r6, #0
 8002e4a:	dd0f      	ble.n	8002e6c <_svfprintf_r+0x634>
 8002e4c:	4b82      	ldr	r3, [pc, #520]	; (8003058 <_svfprintf_r+0x820>)
 8002e4e:	6023      	str	r3, [r4, #0]
 8002e50:	2e10      	cmp	r6, #16
 8002e52:	f300 81df 	bgt.w	8003214 <_svfprintf_r+0x9dc>
 8002e56:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002e58:	9821      	ldr	r0, [sp, #132]	; 0x84
 8002e5a:	6066      	str	r6, [r4, #4]
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	4406      	add	r6, r0
 8002e60:	2b07      	cmp	r3, #7
 8002e62:	9621      	str	r6, [sp, #132]	; 0x84
 8002e64:	9320      	str	r3, [sp, #128]	; 0x80
 8002e66:	f300 81ec 	bgt.w	8003242 <_svfprintf_r+0xa0a>
 8002e6a:	3408      	adds	r4, #8
 8002e6c:	05eb      	lsls	r3, r5, #23
 8002e6e:	f100 81f2 	bmi.w	8003256 <_svfprintf_r+0xa1e>
 8002e72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002e74:	e884 0300 	stmia.w	r4, {r8, r9}
 8002e78:	444b      	add	r3, r9
 8002e7a:	9321      	str	r3, [sp, #132]	; 0x84
 8002e7c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002e7e:	3301      	adds	r3, #1
 8002e80:	2b07      	cmp	r3, #7
 8002e82:	9320      	str	r3, [sp, #128]	; 0x80
 8002e84:	f340 8419 	ble.w	80036ba <_svfprintf_r+0xe82>
 8002e88:	aa1f      	add	r2, sp, #124	; 0x7c
 8002e8a:	4651      	mov	r1, sl
 8002e8c:	4658      	mov	r0, fp
 8002e8e:	f002 f81d 	bl	8004ecc <__ssprint_r>
 8002e92:	2800      	cmp	r0, #0
 8002e94:	f040 8431 	bne.w	80036fa <_svfprintf_r+0xec2>
 8002e98:	ac2c      	add	r4, sp, #176	; 0xb0
 8002e9a:	076b      	lsls	r3, r5, #29
 8002e9c:	f100 8410 	bmi.w	80036c0 <_svfprintf_r+0xe88>
 8002ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ea2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002ea4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002ea6:	428a      	cmp	r2, r1
 8002ea8:	bfac      	ite	ge
 8002eaa:	189b      	addge	r3, r3, r2
 8002eac:	185b      	addlt	r3, r3, r1
 8002eae:	9309      	str	r3, [sp, #36]	; 0x24
 8002eb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002eb2:	b13b      	cbz	r3, 8002ec4 <_svfprintf_r+0x68c>
 8002eb4:	aa1f      	add	r2, sp, #124	; 0x7c
 8002eb6:	4651      	mov	r1, sl
 8002eb8:	4658      	mov	r0, fp
 8002eba:	f002 f807 	bl	8004ecc <__ssprint_r>
 8002ebe:	2800      	cmp	r0, #0
 8002ec0:	f040 841b 	bne.w	80036fa <_svfprintf_r+0xec2>
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	9320      	str	r3, [sp, #128]	; 0x80
 8002ec8:	9f04      	ldr	r7, [sp, #16]
 8002eca:	ac2c      	add	r4, sp, #176	; 0xb0
 8002ecc:	e4ee      	b.n	80028ac <_svfprintf_r+0x74>
 8002ece:	9b02      	ldr	r3, [sp, #8]
 8002ed0:	2b65      	cmp	r3, #101	; 0x65
 8002ed2:	f77f af0b 	ble.w	8002cec <_svfprintf_r+0x4b4>
 8002ed6:	9b02      	ldr	r3, [sp, #8]
 8002ed8:	2b66      	cmp	r3, #102	; 0x66
 8002eda:	d124      	bne.n	8002f26 <_svfprintf_r+0x6ee>
 8002edc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	dd19      	ble.n	8002f16 <_svfprintf_r+0x6de>
 8002ee2:	f1b9 0f00 	cmp.w	r9, #0
 8002ee6:	d101      	bne.n	8002eec <_svfprintf_r+0x6b4>
 8002ee8:	07ea      	lsls	r2, r5, #31
 8002eea:	d502      	bpl.n	8002ef2 <_svfprintf_r+0x6ba>
 8002eec:	9a08      	ldr	r2, [sp, #32]
 8002eee:	4413      	add	r3, r2
 8002ef0:	444b      	add	r3, r9
 8002ef2:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8002ef4:	4699      	mov	r9, r3
 8002ef6:	e735      	b.n	8002d64 <_svfprintf_r+0x52c>
 8002ef8:	460a      	mov	r2, r1
 8002efa:	e70c      	b.n	8002d16 <_svfprintf_r+0x4de>
 8002efc:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002f00:	f803 1b01 	strb.w	r1, [r3], #1
 8002f04:	e71c      	b.n	8002d40 <_svfprintf_r+0x508>
 8002f06:	2230      	movs	r2, #48	; 0x30
 8002f08:	4413      	add	r3, r2
 8002f0a:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8002f0e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8002f12:	a91c      	add	r1, sp, #112	; 0x70
 8002f14:	e718      	b.n	8002d48 <_svfprintf_r+0x510>
 8002f16:	f1b9 0f00 	cmp.w	r9, #0
 8002f1a:	d101      	bne.n	8002f20 <_svfprintf_r+0x6e8>
 8002f1c:	07eb      	lsls	r3, r5, #31
 8002f1e:	d515      	bpl.n	8002f4c <_svfprintf_r+0x714>
 8002f20:	9b08      	ldr	r3, [sp, #32]
 8002f22:	3301      	adds	r3, #1
 8002f24:	e7e4      	b.n	8002ef0 <_svfprintf_r+0x6b8>
 8002f26:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8002f28:	9b03      	ldr	r3, [sp, #12]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	db06      	blt.n	8002f3c <_svfprintf_r+0x704>
 8002f2e:	07ef      	lsls	r7, r5, #31
 8002f30:	d50e      	bpl.n	8002f50 <_svfprintf_r+0x718>
 8002f32:	9b08      	ldr	r3, [sp, #32]
 8002f34:	4413      	add	r3, r2
 8002f36:	2267      	movs	r2, #103	; 0x67
 8002f38:	9202      	str	r2, [sp, #8]
 8002f3a:	e7da      	b.n	8002ef2 <_svfprintf_r+0x6ba>
 8002f3c:	9b03      	ldr	r3, [sp, #12]
 8002f3e:	9908      	ldr	r1, [sp, #32]
 8002f40:	2a00      	cmp	r2, #0
 8002f42:	440b      	add	r3, r1
 8002f44:	dcf7      	bgt.n	8002f36 <_svfprintf_r+0x6fe>
 8002f46:	f1c2 0201 	rsb	r2, r2, #1
 8002f4a:	e7f3      	b.n	8002f34 <_svfprintf_r+0x6fc>
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e7d0      	b.n	8002ef2 <_svfprintf_r+0x6ba>
 8002f50:	4613      	mov	r3, r2
 8002f52:	e7f0      	b.n	8002f36 <_svfprintf_r+0x6fe>
 8002f54:	b10b      	cbz	r3, 8002f5a <_svfprintf_r+0x722>
 8002f56:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002f5a:	f015 0f20 	tst.w	r5, #32
 8002f5e:	f107 0304 	add.w	r3, r7, #4
 8002f62:	d008      	beq.n	8002f76 <_svfprintf_r+0x73e>
 8002f64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	17ce      	asrs	r6, r1, #31
 8002f6a:	4608      	mov	r0, r1
 8002f6c:	4631      	mov	r1, r6
 8002f6e:	e9c2 0100 	strd	r0, r1, [r2]
 8002f72:	461f      	mov	r7, r3
 8002f74:	e49a      	b.n	80028ac <_svfprintf_r+0x74>
 8002f76:	06ee      	lsls	r6, r5, #27
 8002f78:	d503      	bpl.n	8002f82 <_svfprintf_r+0x74a>
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002f7e:	6011      	str	r1, [r2, #0]
 8002f80:	e7f7      	b.n	8002f72 <_svfprintf_r+0x73a>
 8002f82:	0668      	lsls	r0, r5, #25
 8002f84:	d5f9      	bpl.n	8002f7a <_svfprintf_r+0x742>
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8002f8c:	8011      	strh	r1, [r2, #0]
 8002f8e:	e7f0      	b.n	8002f72 <_svfprintf_r+0x73a>
 8002f90:	f045 0510 	orr.w	r5, r5, #16
 8002f94:	f015 0320 	ands.w	r3, r5, #32
 8002f98:	d022      	beq.n	8002fe0 <_svfprintf_r+0x7a8>
 8002f9a:	3707      	adds	r7, #7
 8002f9c:	f027 0707 	bic.w	r7, r7, #7
 8002fa0:	f107 0308 	add.w	r3, r7, #8
 8002fa4:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002fa8:	9304      	str	r3, [sp, #16]
 8002faa:	2300      	movs	r3, #0
 8002fac:	2200      	movs	r2, #0
 8002fae:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002fb2:	f1b9 3fff 	cmp.w	r9, #4294967295
 8002fb6:	f000 83db 	beq.w	8003770 <_svfprintf_r+0xf38>
 8002fba:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 8002fbe:	920b      	str	r2, [sp, #44]	; 0x2c
 8002fc0:	ea56 0207 	orrs.w	r2, r6, r7
 8002fc4:	f040 83d9 	bne.w	800377a <_svfprintf_r+0xf42>
 8002fc8:	f1b9 0f00 	cmp.w	r9, #0
 8002fcc:	f000 80aa 	beq.w	8003124 <_svfprintf_r+0x8ec>
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d076      	beq.n	80030c2 <_svfprintf_r+0x88a>
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	f000 8091 	beq.w	80030fc <_svfprintf_r+0x8c4>
 8002fda:	2600      	movs	r6, #0
 8002fdc:	2700      	movs	r7, #0
 8002fde:	e3d2      	b.n	8003786 <_svfprintf_r+0xf4e>
 8002fe0:	1d3a      	adds	r2, r7, #4
 8002fe2:	f015 0110 	ands.w	r1, r5, #16
 8002fe6:	9204      	str	r2, [sp, #16]
 8002fe8:	d002      	beq.n	8002ff0 <_svfprintf_r+0x7b8>
 8002fea:	683e      	ldr	r6, [r7, #0]
 8002fec:	2700      	movs	r7, #0
 8002fee:	e7dd      	b.n	8002fac <_svfprintf_r+0x774>
 8002ff0:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8002ff4:	d0f9      	beq.n	8002fea <_svfprintf_r+0x7b2>
 8002ff6:	883e      	ldrh	r6, [r7, #0]
 8002ff8:	2700      	movs	r7, #0
 8002ffa:	e7d6      	b.n	8002faa <_svfprintf_r+0x772>
 8002ffc:	1d3b      	adds	r3, r7, #4
 8002ffe:	9304      	str	r3, [sp, #16]
 8003000:	2330      	movs	r3, #48	; 0x30
 8003002:	2278      	movs	r2, #120	; 0x78
 8003004:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8003008:	4b14      	ldr	r3, [pc, #80]	; (800305c <_svfprintf_r+0x824>)
 800300a:	683e      	ldr	r6, [r7, #0]
 800300c:	9311      	str	r3, [sp, #68]	; 0x44
 800300e:	2700      	movs	r7, #0
 8003010:	f045 0502 	orr.w	r5, r5, #2
 8003014:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8003018:	2302      	movs	r3, #2
 800301a:	9202      	str	r2, [sp, #8]
 800301c:	e7c6      	b.n	8002fac <_svfprintf_r+0x774>
 800301e:	1d3b      	adds	r3, r7, #4
 8003020:	2600      	movs	r6, #0
 8003022:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003026:	9304      	str	r3, [sp, #16]
 8003028:	f8d7 8000 	ldr.w	r8, [r7]
 800302c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8003030:	d00a      	beq.n	8003048 <_svfprintf_r+0x810>
 8003032:	464a      	mov	r2, r9
 8003034:	4631      	mov	r1, r6
 8003036:	4640      	mov	r0, r8
 8003038:	f7fd f8d2 	bl	80001e0 <memchr>
 800303c:	2800      	cmp	r0, #0
 800303e:	f000 808d 	beq.w	800315c <_svfprintf_r+0x924>
 8003042:	eba0 0908 	sub.w	r9, r0, r8
 8003046:	e5cb      	b.n	8002be0 <_svfprintf_r+0x3a8>
 8003048:	4640      	mov	r0, r8
 800304a:	f7fd f8c1 	bl	80001d0 <strlen>
 800304e:	4681      	mov	r9, r0
 8003050:	e5c6      	b.n	8002be0 <_svfprintf_r+0x3a8>
 8003052:	bf00      	nop
 8003054:	080056a4 	.word	0x080056a4
 8003058:	080056b4 	.word	0x080056b4
 800305c:	08005691 	.word	0x08005691
 8003060:	f045 0510 	orr.w	r5, r5, #16
 8003064:	06a9      	lsls	r1, r5, #26
 8003066:	d509      	bpl.n	800307c <_svfprintf_r+0x844>
 8003068:	3707      	adds	r7, #7
 800306a:	f027 0707 	bic.w	r7, r7, #7
 800306e:	f107 0308 	add.w	r3, r7, #8
 8003072:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003076:	9304      	str	r3, [sp, #16]
 8003078:	2301      	movs	r3, #1
 800307a:	e797      	b.n	8002fac <_svfprintf_r+0x774>
 800307c:	1d3b      	adds	r3, r7, #4
 800307e:	f015 0f10 	tst.w	r5, #16
 8003082:	9304      	str	r3, [sp, #16]
 8003084:	d001      	beq.n	800308a <_svfprintf_r+0x852>
 8003086:	683e      	ldr	r6, [r7, #0]
 8003088:	e002      	b.n	8003090 <_svfprintf_r+0x858>
 800308a:	066a      	lsls	r2, r5, #25
 800308c:	d5fb      	bpl.n	8003086 <_svfprintf_r+0x84e>
 800308e:	883e      	ldrh	r6, [r7, #0]
 8003090:	2700      	movs	r7, #0
 8003092:	e7f1      	b.n	8003078 <_svfprintf_r+0x840>
 8003094:	b10b      	cbz	r3, 800309a <_svfprintf_r+0x862>
 8003096:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800309a:	4ba3      	ldr	r3, [pc, #652]	; (8003328 <_svfprintf_r+0xaf0>)
 800309c:	e4c2      	b.n	8002a24 <_svfprintf_r+0x1ec>
 800309e:	1d3b      	adds	r3, r7, #4
 80030a0:	f015 0f10 	tst.w	r5, #16
 80030a4:	9304      	str	r3, [sp, #16]
 80030a6:	d001      	beq.n	80030ac <_svfprintf_r+0x874>
 80030a8:	683e      	ldr	r6, [r7, #0]
 80030aa:	e002      	b.n	80030b2 <_svfprintf_r+0x87a>
 80030ac:	066e      	lsls	r6, r5, #25
 80030ae:	d5fb      	bpl.n	80030a8 <_svfprintf_r+0x870>
 80030b0:	883e      	ldrh	r6, [r7, #0]
 80030b2:	2700      	movs	r7, #0
 80030b4:	e4c2      	b.n	8002a3c <_svfprintf_r+0x204>
 80030b6:	4643      	mov	r3, r8
 80030b8:	e366      	b.n	8003788 <_svfprintf_r+0xf50>
 80030ba:	2f00      	cmp	r7, #0
 80030bc:	bf08      	it	eq
 80030be:	2e0a      	cmpeq	r6, #10
 80030c0:	d205      	bcs.n	80030ce <_svfprintf_r+0x896>
 80030c2:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 80030c6:	3630      	adds	r6, #48	; 0x30
 80030c8:	f808 6d41 	strb.w	r6, [r8, #-65]!
 80030cc:	e377      	b.n	80037be <_svfprintf_r+0xf86>
 80030ce:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80030d2:	4630      	mov	r0, r6
 80030d4:	4639      	mov	r1, r7
 80030d6:	220a      	movs	r2, #10
 80030d8:	2300      	movs	r3, #0
 80030da:	f7fd fd61 	bl	8000ba0 <__aeabi_uldivmod>
 80030de:	3230      	adds	r2, #48	; 0x30
 80030e0:	f808 2d01 	strb.w	r2, [r8, #-1]!
 80030e4:	2300      	movs	r3, #0
 80030e6:	4630      	mov	r0, r6
 80030e8:	4639      	mov	r1, r7
 80030ea:	220a      	movs	r2, #10
 80030ec:	f7fd fd58 	bl	8000ba0 <__aeabi_uldivmod>
 80030f0:	4606      	mov	r6, r0
 80030f2:	460f      	mov	r7, r1
 80030f4:	ea56 0307 	orrs.w	r3, r6, r7
 80030f8:	d1eb      	bne.n	80030d2 <_svfprintf_r+0x89a>
 80030fa:	e360      	b.n	80037be <_svfprintf_r+0xf86>
 80030fc:	2600      	movs	r6, #0
 80030fe:	2700      	movs	r7, #0
 8003100:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8003104:	f006 030f 	and.w	r3, r6, #15
 8003108:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800310a:	5cd3      	ldrb	r3, [r2, r3]
 800310c:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8003110:	0933      	lsrs	r3, r6, #4
 8003112:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8003116:	093a      	lsrs	r2, r7, #4
 8003118:	461e      	mov	r6, r3
 800311a:	4617      	mov	r7, r2
 800311c:	ea56 0307 	orrs.w	r3, r6, r7
 8003120:	d1f0      	bne.n	8003104 <_svfprintf_r+0x8cc>
 8003122:	e34c      	b.n	80037be <_svfprintf_r+0xf86>
 8003124:	b93b      	cbnz	r3, 8003136 <_svfprintf_r+0x8fe>
 8003126:	07ea      	lsls	r2, r5, #31
 8003128:	d505      	bpl.n	8003136 <_svfprintf_r+0x8fe>
 800312a:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 800312e:	2330      	movs	r3, #48	; 0x30
 8003130:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8003134:	e343      	b.n	80037be <_svfprintf_r+0xf86>
 8003136:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800313a:	e340      	b.n	80037be <_svfprintf_r+0xf86>
 800313c:	b10b      	cbz	r3, 8003142 <_svfprintf_r+0x90a>
 800313e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003142:	9b02      	ldr	r3, [sp, #8]
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 82f7 	beq.w	8003738 <_svfprintf_r+0xf00>
 800314a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800314e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8003152:	2600      	movs	r6, #0
 8003154:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8003158:	9704      	str	r7, [sp, #16]
 800315a:	e4e8      	b.n	8002b2e <_svfprintf_r+0x2f6>
 800315c:	4606      	mov	r6, r0
 800315e:	e53f      	b.n	8002be0 <_svfprintf_r+0x3a8>
 8003160:	2310      	movs	r3, #16
 8003162:	6063      	str	r3, [r4, #4]
 8003164:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003166:	3310      	adds	r3, #16
 8003168:	9321      	str	r3, [sp, #132]	; 0x84
 800316a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800316c:	3301      	adds	r3, #1
 800316e:	2b07      	cmp	r3, #7
 8003170:	9320      	str	r3, [sp, #128]	; 0x80
 8003172:	dc04      	bgt.n	800317e <_svfprintf_r+0x946>
 8003174:	3408      	adds	r4, #8
 8003176:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003178:	3b10      	subs	r3, #16
 800317a:	930c      	str	r3, [sp, #48]	; 0x30
 800317c:	e615      	b.n	8002daa <_svfprintf_r+0x572>
 800317e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003180:	4651      	mov	r1, sl
 8003182:	4658      	mov	r0, fp
 8003184:	f001 fea2 	bl	8004ecc <__ssprint_r>
 8003188:	2800      	cmp	r0, #0
 800318a:	f040 82b6 	bne.w	80036fa <_svfprintf_r+0xec2>
 800318e:	ac2c      	add	r4, sp, #176	; 0xb0
 8003190:	e7f1      	b.n	8003176 <_svfprintf_r+0x93e>
 8003192:	aa1f      	add	r2, sp, #124	; 0x7c
 8003194:	4651      	mov	r1, sl
 8003196:	4658      	mov	r0, fp
 8003198:	f001 fe98 	bl	8004ecc <__ssprint_r>
 800319c:	2800      	cmp	r0, #0
 800319e:	f040 82ac 	bne.w	80036fa <_svfprintf_r+0xec2>
 80031a2:	ac2c      	add	r4, sp, #176	; 0xb0
 80031a4:	e614      	b.n	8002dd0 <_svfprintf_r+0x598>
 80031a6:	aa1f      	add	r2, sp, #124	; 0x7c
 80031a8:	4651      	mov	r1, sl
 80031aa:	4658      	mov	r0, fp
 80031ac:	f001 fe8e 	bl	8004ecc <__ssprint_r>
 80031b0:	2800      	cmp	r0, #0
 80031b2:	f040 82a2 	bne.w	80036fa <_svfprintf_r+0xec2>
 80031b6:	ac2c      	add	r4, sp, #176	; 0xb0
 80031b8:	e61c      	b.n	8002df4 <_svfprintf_r+0x5bc>
 80031ba:	aa1f      	add	r2, sp, #124	; 0x7c
 80031bc:	4651      	mov	r1, sl
 80031be:	4658      	mov	r0, fp
 80031c0:	f001 fe84 	bl	8004ecc <__ssprint_r>
 80031c4:	2800      	cmp	r0, #0
 80031c6:	f040 8298 	bne.w	80036fa <_svfprintf_r+0xec2>
 80031ca:	ac2c      	add	r4, sp, #176	; 0xb0
 80031cc:	e622      	b.n	8002e14 <_svfprintf_r+0x5dc>
 80031ce:	2210      	movs	r2, #16
 80031d0:	6062      	str	r2, [r4, #4]
 80031d2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80031d4:	3210      	adds	r2, #16
 80031d6:	9221      	str	r2, [sp, #132]	; 0x84
 80031d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80031da:	3201      	adds	r2, #1
 80031dc:	2a07      	cmp	r2, #7
 80031de:	9220      	str	r2, [sp, #128]	; 0x80
 80031e0:	dc02      	bgt.n	80031e8 <_svfprintf_r+0x9b0>
 80031e2:	3408      	adds	r4, #8
 80031e4:	3b10      	subs	r3, #16
 80031e6:	e61d      	b.n	8002e24 <_svfprintf_r+0x5ec>
 80031e8:	aa1f      	add	r2, sp, #124	; 0x7c
 80031ea:	4651      	mov	r1, sl
 80031ec:	4658      	mov	r0, fp
 80031ee:	930c      	str	r3, [sp, #48]	; 0x30
 80031f0:	f001 fe6c 	bl	8004ecc <__ssprint_r>
 80031f4:	2800      	cmp	r0, #0
 80031f6:	f040 8280 	bne.w	80036fa <_svfprintf_r+0xec2>
 80031fa:	ac2c      	add	r4, sp, #176	; 0xb0
 80031fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80031fe:	e7f1      	b.n	80031e4 <_svfprintf_r+0x9ac>
 8003200:	aa1f      	add	r2, sp, #124	; 0x7c
 8003202:	4651      	mov	r1, sl
 8003204:	4658      	mov	r0, fp
 8003206:	f001 fe61 	bl	8004ecc <__ssprint_r>
 800320a:	2800      	cmp	r0, #0
 800320c:	f040 8275 	bne.w	80036fa <_svfprintf_r+0xec2>
 8003210:	ac2c      	add	r4, sp, #176	; 0xb0
 8003212:	e617      	b.n	8002e44 <_svfprintf_r+0x60c>
 8003214:	2310      	movs	r3, #16
 8003216:	6063      	str	r3, [r4, #4]
 8003218:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800321a:	3310      	adds	r3, #16
 800321c:	9321      	str	r3, [sp, #132]	; 0x84
 800321e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003220:	3301      	adds	r3, #1
 8003222:	2b07      	cmp	r3, #7
 8003224:	9320      	str	r3, [sp, #128]	; 0x80
 8003226:	dc02      	bgt.n	800322e <_svfprintf_r+0x9f6>
 8003228:	3408      	adds	r4, #8
 800322a:	3e10      	subs	r6, #16
 800322c:	e60e      	b.n	8002e4c <_svfprintf_r+0x614>
 800322e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003230:	4651      	mov	r1, sl
 8003232:	4658      	mov	r0, fp
 8003234:	f001 fe4a 	bl	8004ecc <__ssprint_r>
 8003238:	2800      	cmp	r0, #0
 800323a:	f040 825e 	bne.w	80036fa <_svfprintf_r+0xec2>
 800323e:	ac2c      	add	r4, sp, #176	; 0xb0
 8003240:	e7f3      	b.n	800322a <_svfprintf_r+0x9f2>
 8003242:	aa1f      	add	r2, sp, #124	; 0x7c
 8003244:	4651      	mov	r1, sl
 8003246:	4658      	mov	r0, fp
 8003248:	f001 fe40 	bl	8004ecc <__ssprint_r>
 800324c:	2800      	cmp	r0, #0
 800324e:	f040 8254 	bne.w	80036fa <_svfprintf_r+0xec2>
 8003252:	ac2c      	add	r4, sp, #176	; 0xb0
 8003254:	e60a      	b.n	8002e6c <_svfprintf_r+0x634>
 8003256:	9b02      	ldr	r3, [sp, #8]
 8003258:	2b65      	cmp	r3, #101	; 0x65
 800325a:	f340 81a9 	ble.w	80035b0 <_svfprintf_r+0xd78>
 800325e:	2200      	movs	r2, #0
 8003260:	2300      	movs	r3, #0
 8003262:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003266:	f7fd fc2b 	bl	8000ac0 <__aeabi_dcmpeq>
 800326a:	2800      	cmp	r0, #0
 800326c:	d062      	beq.n	8003334 <_svfprintf_r+0xafc>
 800326e:	4b2f      	ldr	r3, [pc, #188]	; (800332c <_svfprintf_r+0xaf4>)
 8003270:	6023      	str	r3, [r4, #0]
 8003272:	2301      	movs	r3, #1
 8003274:	6063      	str	r3, [r4, #4]
 8003276:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003278:	3301      	adds	r3, #1
 800327a:	9321      	str	r3, [sp, #132]	; 0x84
 800327c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800327e:	3301      	adds	r3, #1
 8003280:	2b07      	cmp	r3, #7
 8003282:	9320      	str	r3, [sp, #128]	; 0x80
 8003284:	dc25      	bgt.n	80032d2 <_svfprintf_r+0xa9a>
 8003286:	3408      	adds	r4, #8
 8003288:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800328a:	9a03      	ldr	r2, [sp, #12]
 800328c:	4293      	cmp	r3, r2
 800328e:	db02      	blt.n	8003296 <_svfprintf_r+0xa5e>
 8003290:	07ee      	lsls	r6, r5, #31
 8003292:	f57f ae02 	bpl.w	8002e9a <_svfprintf_r+0x662>
 8003296:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003298:	6023      	str	r3, [r4, #0]
 800329a:	9b08      	ldr	r3, [sp, #32]
 800329c:	6063      	str	r3, [r4, #4]
 800329e:	9a08      	ldr	r2, [sp, #32]
 80032a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80032a2:	4413      	add	r3, r2
 80032a4:	9321      	str	r3, [sp, #132]	; 0x84
 80032a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80032a8:	3301      	adds	r3, #1
 80032aa:	2b07      	cmp	r3, #7
 80032ac:	9320      	str	r3, [sp, #128]	; 0x80
 80032ae:	dc1a      	bgt.n	80032e6 <_svfprintf_r+0xaae>
 80032b0:	3408      	adds	r4, #8
 80032b2:	9b03      	ldr	r3, [sp, #12]
 80032b4:	1e5e      	subs	r6, r3, #1
 80032b6:	2e00      	cmp	r6, #0
 80032b8:	f77f adef 	ble.w	8002e9a <_svfprintf_r+0x662>
 80032bc:	4f1c      	ldr	r7, [pc, #112]	; (8003330 <_svfprintf_r+0xaf8>)
 80032be:	f04f 0810 	mov.w	r8, #16
 80032c2:	2e10      	cmp	r6, #16
 80032c4:	6027      	str	r7, [r4, #0]
 80032c6:	dc18      	bgt.n	80032fa <_svfprintf_r+0xac2>
 80032c8:	6066      	str	r6, [r4, #4]
 80032ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80032cc:	441e      	add	r6, r3
 80032ce:	9621      	str	r6, [sp, #132]	; 0x84
 80032d0:	e5d4      	b.n	8002e7c <_svfprintf_r+0x644>
 80032d2:	aa1f      	add	r2, sp, #124	; 0x7c
 80032d4:	4651      	mov	r1, sl
 80032d6:	4658      	mov	r0, fp
 80032d8:	f001 fdf8 	bl	8004ecc <__ssprint_r>
 80032dc:	2800      	cmp	r0, #0
 80032de:	f040 820c 	bne.w	80036fa <_svfprintf_r+0xec2>
 80032e2:	ac2c      	add	r4, sp, #176	; 0xb0
 80032e4:	e7d0      	b.n	8003288 <_svfprintf_r+0xa50>
 80032e6:	aa1f      	add	r2, sp, #124	; 0x7c
 80032e8:	4651      	mov	r1, sl
 80032ea:	4658      	mov	r0, fp
 80032ec:	f001 fdee 	bl	8004ecc <__ssprint_r>
 80032f0:	2800      	cmp	r0, #0
 80032f2:	f040 8202 	bne.w	80036fa <_svfprintf_r+0xec2>
 80032f6:	ac2c      	add	r4, sp, #176	; 0xb0
 80032f8:	e7db      	b.n	80032b2 <_svfprintf_r+0xa7a>
 80032fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80032fc:	f8c4 8004 	str.w	r8, [r4, #4]
 8003300:	3310      	adds	r3, #16
 8003302:	9321      	str	r3, [sp, #132]	; 0x84
 8003304:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003306:	3301      	adds	r3, #1
 8003308:	2b07      	cmp	r3, #7
 800330a:	9320      	str	r3, [sp, #128]	; 0x80
 800330c:	dc02      	bgt.n	8003314 <_svfprintf_r+0xadc>
 800330e:	3408      	adds	r4, #8
 8003310:	3e10      	subs	r6, #16
 8003312:	e7d6      	b.n	80032c2 <_svfprintf_r+0xa8a>
 8003314:	aa1f      	add	r2, sp, #124	; 0x7c
 8003316:	4651      	mov	r1, sl
 8003318:	4658      	mov	r0, fp
 800331a:	f001 fdd7 	bl	8004ecc <__ssprint_r>
 800331e:	2800      	cmp	r0, #0
 8003320:	f040 81eb 	bne.w	80036fa <_svfprintf_r+0xec2>
 8003324:	ac2c      	add	r4, sp, #176	; 0xb0
 8003326:	e7f3      	b.n	8003310 <_svfprintf_r+0xad8>
 8003328:	08005691 	.word	0x08005691
 800332c:	080056a2 	.word	0x080056a2
 8003330:	080056b4 	.word	0x080056b4
 8003334:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003336:	2b00      	cmp	r3, #0
 8003338:	dc7a      	bgt.n	8003430 <_svfprintf_r+0xbf8>
 800333a:	4b9b      	ldr	r3, [pc, #620]	; (80035a8 <_svfprintf_r+0xd70>)
 800333c:	6023      	str	r3, [r4, #0]
 800333e:	2301      	movs	r3, #1
 8003340:	6063      	str	r3, [r4, #4]
 8003342:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003344:	3301      	adds	r3, #1
 8003346:	9321      	str	r3, [sp, #132]	; 0x84
 8003348:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800334a:	3301      	adds	r3, #1
 800334c:	2b07      	cmp	r3, #7
 800334e:	9320      	str	r3, [sp, #128]	; 0x80
 8003350:	dc44      	bgt.n	80033dc <_svfprintf_r+0xba4>
 8003352:	3408      	adds	r4, #8
 8003354:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003356:	b923      	cbnz	r3, 8003362 <_svfprintf_r+0xb2a>
 8003358:	9b03      	ldr	r3, [sp, #12]
 800335a:	b913      	cbnz	r3, 8003362 <_svfprintf_r+0xb2a>
 800335c:	07e8      	lsls	r0, r5, #31
 800335e:	f57f ad9c 	bpl.w	8002e9a <_svfprintf_r+0x662>
 8003362:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003364:	6023      	str	r3, [r4, #0]
 8003366:	9b08      	ldr	r3, [sp, #32]
 8003368:	6063      	str	r3, [r4, #4]
 800336a:	9a08      	ldr	r2, [sp, #32]
 800336c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800336e:	4413      	add	r3, r2
 8003370:	9321      	str	r3, [sp, #132]	; 0x84
 8003372:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003374:	3301      	adds	r3, #1
 8003376:	2b07      	cmp	r3, #7
 8003378:	9320      	str	r3, [sp, #128]	; 0x80
 800337a:	dc39      	bgt.n	80033f0 <_svfprintf_r+0xbb8>
 800337c:	f104 0308 	add.w	r3, r4, #8
 8003380:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8003382:	2e00      	cmp	r6, #0
 8003384:	da19      	bge.n	80033ba <_svfprintf_r+0xb82>
 8003386:	4f89      	ldr	r7, [pc, #548]	; (80035ac <_svfprintf_r+0xd74>)
 8003388:	4276      	negs	r6, r6
 800338a:	2410      	movs	r4, #16
 800338c:	2e10      	cmp	r6, #16
 800338e:	601f      	str	r7, [r3, #0]
 8003390:	dc38      	bgt.n	8003404 <_svfprintf_r+0xbcc>
 8003392:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003394:	605e      	str	r6, [r3, #4]
 8003396:	4416      	add	r6, r2
 8003398:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800339a:	9621      	str	r6, [sp, #132]	; 0x84
 800339c:	3201      	adds	r2, #1
 800339e:	2a07      	cmp	r2, #7
 80033a0:	f103 0308 	add.w	r3, r3, #8
 80033a4:	9220      	str	r2, [sp, #128]	; 0x80
 80033a6:	dd08      	ble.n	80033ba <_svfprintf_r+0xb82>
 80033a8:	aa1f      	add	r2, sp, #124	; 0x7c
 80033aa:	4651      	mov	r1, sl
 80033ac:	4658      	mov	r0, fp
 80033ae:	f001 fd8d 	bl	8004ecc <__ssprint_r>
 80033b2:	2800      	cmp	r0, #0
 80033b4:	f040 81a1 	bne.w	80036fa <_svfprintf_r+0xec2>
 80033b8:	ab2c      	add	r3, sp, #176	; 0xb0
 80033ba:	9a03      	ldr	r2, [sp, #12]
 80033bc:	605a      	str	r2, [r3, #4]
 80033be:	9903      	ldr	r1, [sp, #12]
 80033c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80033c2:	f8c3 8000 	str.w	r8, [r3]
 80033c6:	440a      	add	r2, r1
 80033c8:	9221      	str	r2, [sp, #132]	; 0x84
 80033ca:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80033cc:	3201      	adds	r2, #1
 80033ce:	2a07      	cmp	r2, #7
 80033d0:	9220      	str	r2, [sp, #128]	; 0x80
 80033d2:	f73f ad59 	bgt.w	8002e88 <_svfprintf_r+0x650>
 80033d6:	f103 0408 	add.w	r4, r3, #8
 80033da:	e55e      	b.n	8002e9a <_svfprintf_r+0x662>
 80033dc:	aa1f      	add	r2, sp, #124	; 0x7c
 80033de:	4651      	mov	r1, sl
 80033e0:	4658      	mov	r0, fp
 80033e2:	f001 fd73 	bl	8004ecc <__ssprint_r>
 80033e6:	2800      	cmp	r0, #0
 80033e8:	f040 8187 	bne.w	80036fa <_svfprintf_r+0xec2>
 80033ec:	ac2c      	add	r4, sp, #176	; 0xb0
 80033ee:	e7b1      	b.n	8003354 <_svfprintf_r+0xb1c>
 80033f0:	aa1f      	add	r2, sp, #124	; 0x7c
 80033f2:	4651      	mov	r1, sl
 80033f4:	4658      	mov	r0, fp
 80033f6:	f001 fd69 	bl	8004ecc <__ssprint_r>
 80033fa:	2800      	cmp	r0, #0
 80033fc:	f040 817d 	bne.w	80036fa <_svfprintf_r+0xec2>
 8003400:	ab2c      	add	r3, sp, #176	; 0xb0
 8003402:	e7bd      	b.n	8003380 <_svfprintf_r+0xb48>
 8003404:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003406:	605c      	str	r4, [r3, #4]
 8003408:	3210      	adds	r2, #16
 800340a:	9221      	str	r2, [sp, #132]	; 0x84
 800340c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800340e:	3201      	adds	r2, #1
 8003410:	2a07      	cmp	r2, #7
 8003412:	9220      	str	r2, [sp, #128]	; 0x80
 8003414:	dc02      	bgt.n	800341c <_svfprintf_r+0xbe4>
 8003416:	3308      	adds	r3, #8
 8003418:	3e10      	subs	r6, #16
 800341a:	e7b7      	b.n	800338c <_svfprintf_r+0xb54>
 800341c:	aa1f      	add	r2, sp, #124	; 0x7c
 800341e:	4651      	mov	r1, sl
 8003420:	4658      	mov	r0, fp
 8003422:	f001 fd53 	bl	8004ecc <__ssprint_r>
 8003426:	2800      	cmp	r0, #0
 8003428:	f040 8167 	bne.w	80036fa <_svfprintf_r+0xec2>
 800342c:	ab2c      	add	r3, sp, #176	; 0xb0
 800342e:	e7f3      	b.n	8003418 <_svfprintf_r+0xbe0>
 8003430:	9b03      	ldr	r3, [sp, #12]
 8003432:	42bb      	cmp	r3, r7
 8003434:	bfa8      	it	ge
 8003436:	463b      	movge	r3, r7
 8003438:	2b00      	cmp	r3, #0
 800343a:	461e      	mov	r6, r3
 800343c:	dd0b      	ble.n	8003456 <_svfprintf_r+0xc1e>
 800343e:	6063      	str	r3, [r4, #4]
 8003440:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003442:	f8c4 8000 	str.w	r8, [r4]
 8003446:	4433      	add	r3, r6
 8003448:	9321      	str	r3, [sp, #132]	; 0x84
 800344a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800344c:	3301      	adds	r3, #1
 800344e:	2b07      	cmp	r3, #7
 8003450:	9320      	str	r3, [sp, #128]	; 0x80
 8003452:	dc5f      	bgt.n	8003514 <_svfprintf_r+0xcdc>
 8003454:	3408      	adds	r4, #8
 8003456:	2e00      	cmp	r6, #0
 8003458:	bfac      	ite	ge
 800345a:	1bbe      	subge	r6, r7, r6
 800345c:	463e      	movlt	r6, r7
 800345e:	2e00      	cmp	r6, #0
 8003460:	dd0f      	ble.n	8003482 <_svfprintf_r+0xc4a>
 8003462:	f8df 9148 	ldr.w	r9, [pc, #328]	; 80035ac <_svfprintf_r+0xd74>
 8003466:	f8c4 9000 	str.w	r9, [r4]
 800346a:	2e10      	cmp	r6, #16
 800346c:	dc5c      	bgt.n	8003528 <_svfprintf_r+0xcf0>
 800346e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003470:	6066      	str	r6, [r4, #4]
 8003472:	441e      	add	r6, r3
 8003474:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003476:	9621      	str	r6, [sp, #132]	; 0x84
 8003478:	3301      	adds	r3, #1
 800347a:	2b07      	cmp	r3, #7
 800347c:	9320      	str	r3, [sp, #128]	; 0x80
 800347e:	dc6a      	bgt.n	8003556 <_svfprintf_r+0xd1e>
 8003480:	3408      	adds	r4, #8
 8003482:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003484:	9a03      	ldr	r2, [sp, #12]
 8003486:	4293      	cmp	r3, r2
 8003488:	db01      	blt.n	800348e <_svfprintf_r+0xc56>
 800348a:	07e9      	lsls	r1, r5, #31
 800348c:	d50d      	bpl.n	80034aa <_svfprintf_r+0xc72>
 800348e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003490:	6023      	str	r3, [r4, #0]
 8003492:	9b08      	ldr	r3, [sp, #32]
 8003494:	6063      	str	r3, [r4, #4]
 8003496:	9a08      	ldr	r2, [sp, #32]
 8003498:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800349a:	4413      	add	r3, r2
 800349c:	9321      	str	r3, [sp, #132]	; 0x84
 800349e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80034a0:	3301      	adds	r3, #1
 80034a2:	2b07      	cmp	r3, #7
 80034a4:	9320      	str	r3, [sp, #128]	; 0x80
 80034a6:	dc60      	bgt.n	800356a <_svfprintf_r+0xd32>
 80034a8:	3408      	adds	r4, #8
 80034aa:	9b03      	ldr	r3, [sp, #12]
 80034ac:	9a03      	ldr	r2, [sp, #12]
 80034ae:	1bde      	subs	r6, r3, r7
 80034b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	429e      	cmp	r6, r3
 80034b6:	bfa8      	it	ge
 80034b8:	461e      	movge	r6, r3
 80034ba:	2e00      	cmp	r6, #0
 80034bc:	dd0b      	ble.n	80034d6 <_svfprintf_r+0xc9e>
 80034be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80034c0:	6066      	str	r6, [r4, #4]
 80034c2:	4433      	add	r3, r6
 80034c4:	9321      	str	r3, [sp, #132]	; 0x84
 80034c6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80034c8:	3301      	adds	r3, #1
 80034ca:	4447      	add	r7, r8
 80034cc:	2b07      	cmp	r3, #7
 80034ce:	6027      	str	r7, [r4, #0]
 80034d0:	9320      	str	r3, [sp, #128]	; 0x80
 80034d2:	dc54      	bgt.n	800357e <_svfprintf_r+0xd46>
 80034d4:	3408      	adds	r4, #8
 80034d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80034d8:	9a03      	ldr	r2, [sp, #12]
 80034da:	2e00      	cmp	r6, #0
 80034dc:	eba2 0303 	sub.w	r3, r2, r3
 80034e0:	bfac      	ite	ge
 80034e2:	1b9e      	subge	r6, r3, r6
 80034e4:	461e      	movlt	r6, r3
 80034e6:	2e00      	cmp	r6, #0
 80034e8:	f77f acd7 	ble.w	8002e9a <_svfprintf_r+0x662>
 80034ec:	4f2f      	ldr	r7, [pc, #188]	; (80035ac <_svfprintf_r+0xd74>)
 80034ee:	f04f 0810 	mov.w	r8, #16
 80034f2:	2e10      	cmp	r6, #16
 80034f4:	6027      	str	r7, [r4, #0]
 80034f6:	f77f aee7 	ble.w	80032c8 <_svfprintf_r+0xa90>
 80034fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80034fc:	f8c4 8004 	str.w	r8, [r4, #4]
 8003500:	3310      	adds	r3, #16
 8003502:	9321      	str	r3, [sp, #132]	; 0x84
 8003504:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003506:	3301      	adds	r3, #1
 8003508:	2b07      	cmp	r3, #7
 800350a:	9320      	str	r3, [sp, #128]	; 0x80
 800350c:	dc41      	bgt.n	8003592 <_svfprintf_r+0xd5a>
 800350e:	3408      	adds	r4, #8
 8003510:	3e10      	subs	r6, #16
 8003512:	e7ee      	b.n	80034f2 <_svfprintf_r+0xcba>
 8003514:	aa1f      	add	r2, sp, #124	; 0x7c
 8003516:	4651      	mov	r1, sl
 8003518:	4658      	mov	r0, fp
 800351a:	f001 fcd7 	bl	8004ecc <__ssprint_r>
 800351e:	2800      	cmp	r0, #0
 8003520:	f040 80eb 	bne.w	80036fa <_svfprintf_r+0xec2>
 8003524:	ac2c      	add	r4, sp, #176	; 0xb0
 8003526:	e796      	b.n	8003456 <_svfprintf_r+0xc1e>
 8003528:	2310      	movs	r3, #16
 800352a:	6063      	str	r3, [r4, #4]
 800352c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800352e:	3310      	adds	r3, #16
 8003530:	9321      	str	r3, [sp, #132]	; 0x84
 8003532:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003534:	3301      	adds	r3, #1
 8003536:	2b07      	cmp	r3, #7
 8003538:	9320      	str	r3, [sp, #128]	; 0x80
 800353a:	dc02      	bgt.n	8003542 <_svfprintf_r+0xd0a>
 800353c:	3408      	adds	r4, #8
 800353e:	3e10      	subs	r6, #16
 8003540:	e791      	b.n	8003466 <_svfprintf_r+0xc2e>
 8003542:	aa1f      	add	r2, sp, #124	; 0x7c
 8003544:	4651      	mov	r1, sl
 8003546:	4658      	mov	r0, fp
 8003548:	f001 fcc0 	bl	8004ecc <__ssprint_r>
 800354c:	2800      	cmp	r0, #0
 800354e:	f040 80d4 	bne.w	80036fa <_svfprintf_r+0xec2>
 8003552:	ac2c      	add	r4, sp, #176	; 0xb0
 8003554:	e7f3      	b.n	800353e <_svfprintf_r+0xd06>
 8003556:	aa1f      	add	r2, sp, #124	; 0x7c
 8003558:	4651      	mov	r1, sl
 800355a:	4658      	mov	r0, fp
 800355c:	f001 fcb6 	bl	8004ecc <__ssprint_r>
 8003560:	2800      	cmp	r0, #0
 8003562:	f040 80ca 	bne.w	80036fa <_svfprintf_r+0xec2>
 8003566:	ac2c      	add	r4, sp, #176	; 0xb0
 8003568:	e78b      	b.n	8003482 <_svfprintf_r+0xc4a>
 800356a:	aa1f      	add	r2, sp, #124	; 0x7c
 800356c:	4651      	mov	r1, sl
 800356e:	4658      	mov	r0, fp
 8003570:	f001 fcac 	bl	8004ecc <__ssprint_r>
 8003574:	2800      	cmp	r0, #0
 8003576:	f040 80c0 	bne.w	80036fa <_svfprintf_r+0xec2>
 800357a:	ac2c      	add	r4, sp, #176	; 0xb0
 800357c:	e795      	b.n	80034aa <_svfprintf_r+0xc72>
 800357e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003580:	4651      	mov	r1, sl
 8003582:	4658      	mov	r0, fp
 8003584:	f001 fca2 	bl	8004ecc <__ssprint_r>
 8003588:	2800      	cmp	r0, #0
 800358a:	f040 80b6 	bne.w	80036fa <_svfprintf_r+0xec2>
 800358e:	ac2c      	add	r4, sp, #176	; 0xb0
 8003590:	e7a1      	b.n	80034d6 <_svfprintf_r+0xc9e>
 8003592:	aa1f      	add	r2, sp, #124	; 0x7c
 8003594:	4651      	mov	r1, sl
 8003596:	4658      	mov	r0, fp
 8003598:	f001 fc98 	bl	8004ecc <__ssprint_r>
 800359c:	2800      	cmp	r0, #0
 800359e:	f040 80ac 	bne.w	80036fa <_svfprintf_r+0xec2>
 80035a2:	ac2c      	add	r4, sp, #176	; 0xb0
 80035a4:	e7b4      	b.n	8003510 <_svfprintf_r+0xcd8>
 80035a6:	bf00      	nop
 80035a8:	080056a2 	.word	0x080056a2
 80035ac:	080056b4 	.word	0x080056b4
 80035b0:	9b03      	ldr	r3, [sp, #12]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	dc01      	bgt.n	80035ba <_svfprintf_r+0xd82>
 80035b6:	07ea      	lsls	r2, r5, #31
 80035b8:	d576      	bpl.n	80036a8 <_svfprintf_r+0xe70>
 80035ba:	2301      	movs	r3, #1
 80035bc:	6063      	str	r3, [r4, #4]
 80035be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80035c0:	f8c4 8000 	str.w	r8, [r4]
 80035c4:	3301      	adds	r3, #1
 80035c6:	9321      	str	r3, [sp, #132]	; 0x84
 80035c8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80035ca:	3301      	adds	r3, #1
 80035cc:	2b07      	cmp	r3, #7
 80035ce:	9320      	str	r3, [sp, #128]	; 0x80
 80035d0:	dc36      	bgt.n	8003640 <_svfprintf_r+0xe08>
 80035d2:	3408      	adds	r4, #8
 80035d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80035d6:	6023      	str	r3, [r4, #0]
 80035d8:	9b08      	ldr	r3, [sp, #32]
 80035da:	6063      	str	r3, [r4, #4]
 80035dc:	9a08      	ldr	r2, [sp, #32]
 80035de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80035e0:	4413      	add	r3, r2
 80035e2:	9321      	str	r3, [sp, #132]	; 0x84
 80035e4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80035e6:	3301      	adds	r3, #1
 80035e8:	2b07      	cmp	r3, #7
 80035ea:	9320      	str	r3, [sp, #128]	; 0x80
 80035ec:	dc31      	bgt.n	8003652 <_svfprintf_r+0xe1a>
 80035ee:	3408      	adds	r4, #8
 80035f0:	2300      	movs	r3, #0
 80035f2:	2200      	movs	r2, #0
 80035f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80035f8:	f7fd fa62 	bl	8000ac0 <__aeabi_dcmpeq>
 80035fc:	9b03      	ldr	r3, [sp, #12]
 80035fe:	1e5e      	subs	r6, r3, #1
 8003600:	2800      	cmp	r0, #0
 8003602:	d12f      	bne.n	8003664 <_svfprintf_r+0xe2c>
 8003604:	f108 0301 	add.w	r3, r8, #1
 8003608:	e884 0048 	stmia.w	r4, {r3, r6}
 800360c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800360e:	9a03      	ldr	r2, [sp, #12]
 8003610:	3b01      	subs	r3, #1
 8003612:	4413      	add	r3, r2
 8003614:	9321      	str	r3, [sp, #132]	; 0x84
 8003616:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003618:	3301      	adds	r3, #1
 800361a:	2b07      	cmp	r3, #7
 800361c:	9320      	str	r3, [sp, #128]	; 0x80
 800361e:	dd4a      	ble.n	80036b6 <_svfprintf_r+0xe7e>
 8003620:	aa1f      	add	r2, sp, #124	; 0x7c
 8003622:	4651      	mov	r1, sl
 8003624:	4658      	mov	r0, fp
 8003626:	f001 fc51 	bl	8004ecc <__ssprint_r>
 800362a:	2800      	cmp	r0, #0
 800362c:	d165      	bne.n	80036fa <_svfprintf_r+0xec2>
 800362e:	ac2c      	add	r4, sp, #176	; 0xb0
 8003630:	ab1b      	add	r3, sp, #108	; 0x6c
 8003632:	6023      	str	r3, [r4, #0]
 8003634:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003636:	6063      	str	r3, [r4, #4]
 8003638:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800363a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800363c:	4413      	add	r3, r2
 800363e:	e41c      	b.n	8002e7a <_svfprintf_r+0x642>
 8003640:	aa1f      	add	r2, sp, #124	; 0x7c
 8003642:	4651      	mov	r1, sl
 8003644:	4658      	mov	r0, fp
 8003646:	f001 fc41 	bl	8004ecc <__ssprint_r>
 800364a:	2800      	cmp	r0, #0
 800364c:	d155      	bne.n	80036fa <_svfprintf_r+0xec2>
 800364e:	ac2c      	add	r4, sp, #176	; 0xb0
 8003650:	e7c0      	b.n	80035d4 <_svfprintf_r+0xd9c>
 8003652:	aa1f      	add	r2, sp, #124	; 0x7c
 8003654:	4651      	mov	r1, sl
 8003656:	4658      	mov	r0, fp
 8003658:	f001 fc38 	bl	8004ecc <__ssprint_r>
 800365c:	2800      	cmp	r0, #0
 800365e:	d14c      	bne.n	80036fa <_svfprintf_r+0xec2>
 8003660:	ac2c      	add	r4, sp, #176	; 0xb0
 8003662:	e7c5      	b.n	80035f0 <_svfprintf_r+0xdb8>
 8003664:	2e00      	cmp	r6, #0
 8003666:	dde3      	ble.n	8003630 <_svfprintf_r+0xdf8>
 8003668:	4f59      	ldr	r7, [pc, #356]	; (80037d0 <_svfprintf_r+0xf98>)
 800366a:	f04f 0810 	mov.w	r8, #16
 800366e:	2e10      	cmp	r6, #16
 8003670:	6027      	str	r7, [r4, #0]
 8003672:	dc04      	bgt.n	800367e <_svfprintf_r+0xe46>
 8003674:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003676:	6066      	str	r6, [r4, #4]
 8003678:	441e      	add	r6, r3
 800367a:	9621      	str	r6, [sp, #132]	; 0x84
 800367c:	e7cb      	b.n	8003616 <_svfprintf_r+0xdde>
 800367e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003680:	f8c4 8004 	str.w	r8, [r4, #4]
 8003684:	3310      	adds	r3, #16
 8003686:	9321      	str	r3, [sp, #132]	; 0x84
 8003688:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800368a:	3301      	adds	r3, #1
 800368c:	2b07      	cmp	r3, #7
 800368e:	9320      	str	r3, [sp, #128]	; 0x80
 8003690:	dc02      	bgt.n	8003698 <_svfprintf_r+0xe60>
 8003692:	3408      	adds	r4, #8
 8003694:	3e10      	subs	r6, #16
 8003696:	e7ea      	b.n	800366e <_svfprintf_r+0xe36>
 8003698:	aa1f      	add	r2, sp, #124	; 0x7c
 800369a:	4651      	mov	r1, sl
 800369c:	4658      	mov	r0, fp
 800369e:	f001 fc15 	bl	8004ecc <__ssprint_r>
 80036a2:	bb50      	cbnz	r0, 80036fa <_svfprintf_r+0xec2>
 80036a4:	ac2c      	add	r4, sp, #176	; 0xb0
 80036a6:	e7f5      	b.n	8003694 <_svfprintf_r+0xe5c>
 80036a8:	2301      	movs	r3, #1
 80036aa:	6063      	str	r3, [r4, #4]
 80036ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80036ae:	f8c4 8000 	str.w	r8, [r4]
 80036b2:	3301      	adds	r3, #1
 80036b4:	e7ae      	b.n	8003614 <_svfprintf_r+0xddc>
 80036b6:	3408      	adds	r4, #8
 80036b8:	e7ba      	b.n	8003630 <_svfprintf_r+0xdf8>
 80036ba:	3408      	adds	r4, #8
 80036bc:	f7ff bbed 	b.w	8002e9a <_svfprintf_r+0x662>
 80036c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80036c4:	1a9d      	subs	r5, r3, r2
 80036c6:	2d00      	cmp	r5, #0
 80036c8:	f77f abea 	ble.w	8002ea0 <_svfprintf_r+0x668>
 80036cc:	2610      	movs	r6, #16
 80036ce:	4b41      	ldr	r3, [pc, #260]	; (80037d4 <_svfprintf_r+0xf9c>)
 80036d0:	6023      	str	r3, [r4, #0]
 80036d2:	2d10      	cmp	r5, #16
 80036d4:	dc1b      	bgt.n	800370e <_svfprintf_r+0xed6>
 80036d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80036d8:	6065      	str	r5, [r4, #4]
 80036da:	441d      	add	r5, r3
 80036dc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80036de:	9521      	str	r5, [sp, #132]	; 0x84
 80036e0:	3301      	adds	r3, #1
 80036e2:	2b07      	cmp	r3, #7
 80036e4:	9320      	str	r3, [sp, #128]	; 0x80
 80036e6:	f77f abdb 	ble.w	8002ea0 <_svfprintf_r+0x668>
 80036ea:	aa1f      	add	r2, sp, #124	; 0x7c
 80036ec:	4651      	mov	r1, sl
 80036ee:	4658      	mov	r0, fp
 80036f0:	f001 fbec 	bl	8004ecc <__ssprint_r>
 80036f4:	2800      	cmp	r0, #0
 80036f6:	f43f abd3 	beq.w	8002ea0 <_svfprintf_r+0x668>
 80036fa:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80036fe:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003704:	bf18      	it	ne
 8003706:	f04f 33ff 	movne.w	r3, #4294967295
 800370a:	f7ff b8b9 	b.w	8002880 <_svfprintf_r+0x48>
 800370e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003710:	6066      	str	r6, [r4, #4]
 8003712:	3310      	adds	r3, #16
 8003714:	9321      	str	r3, [sp, #132]	; 0x84
 8003716:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003718:	3301      	adds	r3, #1
 800371a:	2b07      	cmp	r3, #7
 800371c:	9320      	str	r3, [sp, #128]	; 0x80
 800371e:	dc02      	bgt.n	8003726 <_svfprintf_r+0xeee>
 8003720:	3408      	adds	r4, #8
 8003722:	3d10      	subs	r5, #16
 8003724:	e7d3      	b.n	80036ce <_svfprintf_r+0xe96>
 8003726:	aa1f      	add	r2, sp, #124	; 0x7c
 8003728:	4651      	mov	r1, sl
 800372a:	4658      	mov	r0, fp
 800372c:	f001 fbce 	bl	8004ecc <__ssprint_r>
 8003730:	2800      	cmp	r0, #0
 8003732:	d1e2      	bne.n	80036fa <_svfprintf_r+0xec2>
 8003734:	ac2c      	add	r4, sp, #176	; 0xb0
 8003736:	e7f4      	b.n	8003722 <_svfprintf_r+0xeea>
 8003738:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0dd      	beq.n	80036fa <_svfprintf_r+0xec2>
 800373e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003740:	4651      	mov	r1, sl
 8003742:	4658      	mov	r0, fp
 8003744:	f001 fbc2 	bl	8004ecc <__ssprint_r>
 8003748:	e7d7      	b.n	80036fa <_svfprintf_r+0xec2>
 800374a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800374e:	4610      	mov	r0, r2
 8003750:	4619      	mov	r1, r3
 8003752:	f7fd f9e7 	bl	8000b24 <__aeabi_dcmpun>
 8003756:	2800      	cmp	r0, #0
 8003758:	f43f aa44 	beq.w	8002be4 <_svfprintf_r+0x3ac>
 800375c:	4b1e      	ldr	r3, [pc, #120]	; (80037d8 <_svfprintf_r+0xfa0>)
 800375e:	4a1f      	ldr	r2, [pc, #124]	; (80037dc <_svfprintf_r+0xfa4>)
 8003760:	f7ff ba34 	b.w	8002bcc <_svfprintf_r+0x394>
 8003764:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003766:	eba3 0308 	sub.w	r3, r3, r8
 800376a:	9303      	str	r3, [sp, #12]
 800376c:	f7ff bab5 	b.w	8002cda <_svfprintf_r+0x4a2>
 8003770:	ea56 0207 	orrs.w	r2, r6, r7
 8003774:	950b      	str	r5, [sp, #44]	; 0x2c
 8003776:	f43f ac2b 	beq.w	8002fd0 <_svfprintf_r+0x798>
 800377a:	2b01      	cmp	r3, #1
 800377c:	f43f ac9d 	beq.w	80030ba <_svfprintf_r+0x882>
 8003780:	2b02      	cmp	r3, #2
 8003782:	f43f acbd 	beq.w	8003100 <_svfprintf_r+0x8c8>
 8003786:	ab2c      	add	r3, sp, #176	; 0xb0
 8003788:	08f1      	lsrs	r1, r6, #3
 800378a:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 800378e:	08f8      	lsrs	r0, r7, #3
 8003790:	f006 0207 	and.w	r2, r6, #7
 8003794:	4607      	mov	r7, r0
 8003796:	460e      	mov	r6, r1
 8003798:	3230      	adds	r2, #48	; 0x30
 800379a:	ea56 0107 	orrs.w	r1, r6, r7
 800379e:	f103 38ff 	add.w	r8, r3, #4294967295
 80037a2:	f803 2c01 	strb.w	r2, [r3, #-1]
 80037a6:	f47f ac86 	bne.w	80030b6 <_svfprintf_r+0x87e>
 80037aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80037ac:	07c9      	lsls	r1, r1, #31
 80037ae:	d506      	bpl.n	80037be <_svfprintf_r+0xf86>
 80037b0:	2a30      	cmp	r2, #48	; 0x30
 80037b2:	d004      	beq.n	80037be <_svfprintf_r+0xf86>
 80037b4:	2230      	movs	r2, #48	; 0x30
 80037b6:	f808 2c01 	strb.w	r2, [r8, #-1]
 80037ba:	f1a3 0802 	sub.w	r8, r3, #2
 80037be:	464e      	mov	r6, r9
 80037c0:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80037c4:	eba9 0908 	sub.w	r9, r9, r8
 80037c8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80037ca:	2700      	movs	r7, #0
 80037cc:	f7ff bad1 	b.w	8002d72 <_svfprintf_r+0x53a>
 80037d0:	080056b4 	.word	0x080056b4
 80037d4:	080056a4 	.word	0x080056a4
 80037d8:	08005678 	.word	0x08005678
 80037dc:	0800567c 	.word	0x0800567c

080037e0 <quorem>:
 80037e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037e4:	6903      	ldr	r3, [r0, #16]
 80037e6:	690c      	ldr	r4, [r1, #16]
 80037e8:	429c      	cmp	r4, r3
 80037ea:	4680      	mov	r8, r0
 80037ec:	f300 8082 	bgt.w	80038f4 <quorem+0x114>
 80037f0:	3c01      	subs	r4, #1
 80037f2:	f101 0714 	add.w	r7, r1, #20
 80037f6:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80037fa:	f100 0614 	add.w	r6, r0, #20
 80037fe:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003802:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003806:	eb06 030e 	add.w	r3, r6, lr
 800380a:	3501      	adds	r5, #1
 800380c:	eb07 090e 	add.w	r9, r7, lr
 8003810:	9301      	str	r3, [sp, #4]
 8003812:	fbb0 f5f5 	udiv	r5, r0, r5
 8003816:	b395      	cbz	r5, 800387e <quorem+0x9e>
 8003818:	f04f 0a00 	mov.w	sl, #0
 800381c:	4638      	mov	r0, r7
 800381e:	46b4      	mov	ip, r6
 8003820:	46d3      	mov	fp, sl
 8003822:	f850 2b04 	ldr.w	r2, [r0], #4
 8003826:	b293      	uxth	r3, r2
 8003828:	fb05 a303 	mla	r3, r5, r3, sl
 800382c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003830:	b29b      	uxth	r3, r3
 8003832:	ebab 0303 	sub.w	r3, fp, r3
 8003836:	0c12      	lsrs	r2, r2, #16
 8003838:	f8bc b000 	ldrh.w	fp, [ip]
 800383c:	fb05 a202 	mla	r2, r5, r2, sl
 8003840:	fa13 f38b 	uxtah	r3, r3, fp
 8003844:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003848:	fa1f fb82 	uxth.w	fp, r2
 800384c:	f8dc 2000 	ldr.w	r2, [ip]
 8003850:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003854:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003858:	b29b      	uxth	r3, r3
 800385a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800385e:	4581      	cmp	r9, r0
 8003860:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003864:	f84c 3b04 	str.w	r3, [ip], #4
 8003868:	d2db      	bcs.n	8003822 <quorem+0x42>
 800386a:	f856 300e 	ldr.w	r3, [r6, lr]
 800386e:	b933      	cbnz	r3, 800387e <quorem+0x9e>
 8003870:	9b01      	ldr	r3, [sp, #4]
 8003872:	3b04      	subs	r3, #4
 8003874:	429e      	cmp	r6, r3
 8003876:	461a      	mov	r2, r3
 8003878:	d330      	bcc.n	80038dc <quorem+0xfc>
 800387a:	f8c8 4010 	str.w	r4, [r8, #16]
 800387e:	4640      	mov	r0, r8
 8003880:	f001 fa4d 	bl	8004d1e <__mcmp>
 8003884:	2800      	cmp	r0, #0
 8003886:	db25      	blt.n	80038d4 <quorem+0xf4>
 8003888:	3501      	adds	r5, #1
 800388a:	4630      	mov	r0, r6
 800388c:	f04f 0e00 	mov.w	lr, #0
 8003890:	f857 2b04 	ldr.w	r2, [r7], #4
 8003894:	f8d0 c000 	ldr.w	ip, [r0]
 8003898:	b293      	uxth	r3, r2
 800389a:	ebae 0303 	sub.w	r3, lr, r3
 800389e:	0c12      	lsrs	r2, r2, #16
 80038a0:	fa13 f38c 	uxtah	r3, r3, ip
 80038a4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80038a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80038b2:	45b9      	cmp	r9, r7
 80038b4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80038b8:	f840 3b04 	str.w	r3, [r0], #4
 80038bc:	d2e8      	bcs.n	8003890 <quorem+0xb0>
 80038be:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80038c2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80038c6:	b92a      	cbnz	r2, 80038d4 <quorem+0xf4>
 80038c8:	3b04      	subs	r3, #4
 80038ca:	429e      	cmp	r6, r3
 80038cc:	461a      	mov	r2, r3
 80038ce:	d30b      	bcc.n	80038e8 <quorem+0x108>
 80038d0:	f8c8 4010 	str.w	r4, [r8, #16]
 80038d4:	4628      	mov	r0, r5
 80038d6:	b003      	add	sp, #12
 80038d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038dc:	6812      	ldr	r2, [r2, #0]
 80038de:	3b04      	subs	r3, #4
 80038e0:	2a00      	cmp	r2, #0
 80038e2:	d1ca      	bne.n	800387a <quorem+0x9a>
 80038e4:	3c01      	subs	r4, #1
 80038e6:	e7c5      	b.n	8003874 <quorem+0x94>
 80038e8:	6812      	ldr	r2, [r2, #0]
 80038ea:	3b04      	subs	r3, #4
 80038ec:	2a00      	cmp	r2, #0
 80038ee:	d1ef      	bne.n	80038d0 <quorem+0xf0>
 80038f0:	3c01      	subs	r4, #1
 80038f2:	e7ea      	b.n	80038ca <quorem+0xea>
 80038f4:	2000      	movs	r0, #0
 80038f6:	e7ee      	b.n	80038d6 <quorem+0xf6>

080038f8 <_dtoa_r>:
 80038f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038fc:	ec57 6b10 	vmov	r6, r7, d0
 8003900:	b097      	sub	sp, #92	; 0x5c
 8003902:	e9cd 6700 	strd	r6, r7, [sp]
 8003906:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003908:	9107      	str	r1, [sp, #28]
 800390a:	4604      	mov	r4, r0
 800390c:	920a      	str	r2, [sp, #40]	; 0x28
 800390e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003910:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8003912:	b93e      	cbnz	r6, 8003924 <_dtoa_r+0x2c>
 8003914:	2010      	movs	r0, #16
 8003916:	f000 fdcb 	bl	80044b0 <malloc>
 800391a:	6260      	str	r0, [r4, #36]	; 0x24
 800391c:	6046      	str	r6, [r0, #4]
 800391e:	6086      	str	r6, [r0, #8]
 8003920:	6006      	str	r6, [r0, #0]
 8003922:	60c6      	str	r6, [r0, #12]
 8003924:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003926:	6819      	ldr	r1, [r3, #0]
 8003928:	b151      	cbz	r1, 8003940 <_dtoa_r+0x48>
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	604a      	str	r2, [r1, #4]
 800392e:	2301      	movs	r3, #1
 8003930:	4093      	lsls	r3, r2
 8003932:	608b      	str	r3, [r1, #8]
 8003934:	4620      	mov	r0, r4
 8003936:	f001 f81d 	bl	8004974 <_Bfree>
 800393a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	9b01      	ldr	r3, [sp, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	bfbf      	itttt	lt
 8003946:	2301      	movlt	r3, #1
 8003948:	602b      	strlt	r3, [r5, #0]
 800394a:	9b01      	ldrlt	r3, [sp, #4]
 800394c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003950:	bfb2      	itee	lt
 8003952:	9301      	strlt	r3, [sp, #4]
 8003954:	2300      	movge	r3, #0
 8003956:	602b      	strge	r3, [r5, #0]
 8003958:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800395c:	4ba8      	ldr	r3, [pc, #672]	; (8003c00 <_dtoa_r+0x308>)
 800395e:	ea33 0308 	bics.w	r3, r3, r8
 8003962:	d11b      	bne.n	800399c <_dtoa_r+0xa4>
 8003964:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003966:	f242 730f 	movw	r3, #9999	; 0x270f
 800396a:	6013      	str	r3, [r2, #0]
 800396c:	9b00      	ldr	r3, [sp, #0]
 800396e:	b923      	cbnz	r3, 800397a <_dtoa_r+0x82>
 8003970:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003974:	2800      	cmp	r0, #0
 8003976:	f000 8578 	beq.w	800446a <_dtoa_r+0xb72>
 800397a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800397c:	b953      	cbnz	r3, 8003994 <_dtoa_r+0x9c>
 800397e:	4ba1      	ldr	r3, [pc, #644]	; (8003c04 <_dtoa_r+0x30c>)
 8003980:	e021      	b.n	80039c6 <_dtoa_r+0xce>
 8003982:	4ba1      	ldr	r3, [pc, #644]	; (8003c08 <_dtoa_r+0x310>)
 8003984:	9302      	str	r3, [sp, #8]
 8003986:	3308      	adds	r3, #8
 8003988:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800398a:	6013      	str	r3, [r2, #0]
 800398c:	9802      	ldr	r0, [sp, #8]
 800398e:	b017      	add	sp, #92	; 0x5c
 8003990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003994:	4b9b      	ldr	r3, [pc, #620]	; (8003c04 <_dtoa_r+0x30c>)
 8003996:	9302      	str	r3, [sp, #8]
 8003998:	3303      	adds	r3, #3
 800399a:	e7f5      	b.n	8003988 <_dtoa_r+0x90>
 800399c:	e9dd 6700 	ldrd	r6, r7, [sp]
 80039a0:	2200      	movs	r2, #0
 80039a2:	2300      	movs	r3, #0
 80039a4:	4630      	mov	r0, r6
 80039a6:	4639      	mov	r1, r7
 80039a8:	f7fd f88a 	bl	8000ac0 <__aeabi_dcmpeq>
 80039ac:	4681      	mov	r9, r0
 80039ae:	b160      	cbz	r0, 80039ca <_dtoa_r+0xd2>
 80039b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80039b2:	2301      	movs	r3, #1
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 8553 	beq.w	8004464 <_dtoa_r+0xb6c>
 80039be:	4b93      	ldr	r3, [pc, #588]	; (8003c0c <_dtoa_r+0x314>)
 80039c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	3b01      	subs	r3, #1
 80039c6:	9302      	str	r3, [sp, #8]
 80039c8:	e7e0      	b.n	800398c <_dtoa_r+0x94>
 80039ca:	aa14      	add	r2, sp, #80	; 0x50
 80039cc:	a915      	add	r1, sp, #84	; 0x54
 80039ce:	ec47 6b10 	vmov	d0, r6, r7
 80039d2:	4620      	mov	r0, r4
 80039d4:	f001 fa1b 	bl	8004e0e <__d2b>
 80039d8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80039dc:	4682      	mov	sl, r0
 80039de:	2d00      	cmp	r5, #0
 80039e0:	d07e      	beq.n	8003ae0 <_dtoa_r+0x1e8>
 80039e2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80039e6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80039ea:	4630      	mov	r0, r6
 80039ec:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80039f0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80039f4:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 80039f8:	2200      	movs	r2, #0
 80039fa:	4b85      	ldr	r3, [pc, #532]	; (8003c10 <_dtoa_r+0x318>)
 80039fc:	f7fc fc44 	bl	8000288 <__aeabi_dsub>
 8003a00:	a379      	add	r3, pc, #484	; (adr r3, 8003be8 <_dtoa_r+0x2f0>)
 8003a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a06:	f7fc fdf3 	bl	80005f0 <__aeabi_dmul>
 8003a0a:	a379      	add	r3, pc, #484	; (adr r3, 8003bf0 <_dtoa_r+0x2f8>)
 8003a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a10:	f7fc fc3c 	bl	800028c <__adddf3>
 8003a14:	4606      	mov	r6, r0
 8003a16:	4628      	mov	r0, r5
 8003a18:	460f      	mov	r7, r1
 8003a1a:	f7fc fd83 	bl	8000524 <__aeabi_i2d>
 8003a1e:	a376      	add	r3, pc, #472	; (adr r3, 8003bf8 <_dtoa_r+0x300>)
 8003a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a24:	f7fc fde4 	bl	80005f0 <__aeabi_dmul>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4630      	mov	r0, r6
 8003a2e:	4639      	mov	r1, r7
 8003a30:	f7fc fc2c 	bl	800028c <__adddf3>
 8003a34:	4606      	mov	r6, r0
 8003a36:	460f      	mov	r7, r1
 8003a38:	f7fd f88a 	bl	8000b50 <__aeabi_d2iz>
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	4683      	mov	fp, r0
 8003a40:	2300      	movs	r3, #0
 8003a42:	4630      	mov	r0, r6
 8003a44:	4639      	mov	r1, r7
 8003a46:	f7fd f845 	bl	8000ad4 <__aeabi_dcmplt>
 8003a4a:	b158      	cbz	r0, 8003a64 <_dtoa_r+0x16c>
 8003a4c:	4658      	mov	r0, fp
 8003a4e:	f7fc fd69 	bl	8000524 <__aeabi_i2d>
 8003a52:	4602      	mov	r2, r0
 8003a54:	460b      	mov	r3, r1
 8003a56:	4630      	mov	r0, r6
 8003a58:	4639      	mov	r1, r7
 8003a5a:	f7fd f831 	bl	8000ac0 <__aeabi_dcmpeq>
 8003a5e:	b908      	cbnz	r0, 8003a64 <_dtoa_r+0x16c>
 8003a60:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003a64:	f1bb 0f16 	cmp.w	fp, #22
 8003a68:	d859      	bhi.n	8003b1e <_dtoa_r+0x226>
 8003a6a:	496a      	ldr	r1, [pc, #424]	; (8003c14 <_dtoa_r+0x31c>)
 8003a6c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8003a70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003a74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a78:	f7fd f84a 	bl	8000b10 <__aeabi_dcmpgt>
 8003a7c:	2800      	cmp	r0, #0
 8003a7e:	d050      	beq.n	8003b22 <_dtoa_r+0x22a>
 8003a80:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003a84:	2300      	movs	r3, #0
 8003a86:	930e      	str	r3, [sp, #56]	; 0x38
 8003a88:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003a8a:	1b5d      	subs	r5, r3, r5
 8003a8c:	1e6b      	subs	r3, r5, #1
 8003a8e:	9306      	str	r3, [sp, #24]
 8003a90:	bf45      	ittet	mi
 8003a92:	f1c5 0301 	rsbmi	r3, r5, #1
 8003a96:	9305      	strmi	r3, [sp, #20]
 8003a98:	2300      	movpl	r3, #0
 8003a9a:	2300      	movmi	r3, #0
 8003a9c:	bf4c      	ite	mi
 8003a9e:	9306      	strmi	r3, [sp, #24]
 8003aa0:	9305      	strpl	r3, [sp, #20]
 8003aa2:	f1bb 0f00 	cmp.w	fp, #0
 8003aa6:	db3e      	blt.n	8003b26 <_dtoa_r+0x22e>
 8003aa8:	9b06      	ldr	r3, [sp, #24]
 8003aaa:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8003aae:	445b      	add	r3, fp
 8003ab0:	9306      	str	r3, [sp, #24]
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	9308      	str	r3, [sp, #32]
 8003ab6:	9b07      	ldr	r3, [sp, #28]
 8003ab8:	2b09      	cmp	r3, #9
 8003aba:	f200 80af 	bhi.w	8003c1c <_dtoa_r+0x324>
 8003abe:	2b05      	cmp	r3, #5
 8003ac0:	bfc4      	itt	gt
 8003ac2:	3b04      	subgt	r3, #4
 8003ac4:	9307      	strgt	r3, [sp, #28]
 8003ac6:	9b07      	ldr	r3, [sp, #28]
 8003ac8:	f1a3 0302 	sub.w	r3, r3, #2
 8003acc:	bfcc      	ite	gt
 8003ace:	2600      	movgt	r6, #0
 8003ad0:	2601      	movle	r6, #1
 8003ad2:	2b03      	cmp	r3, #3
 8003ad4:	f200 80ae 	bhi.w	8003c34 <_dtoa_r+0x33c>
 8003ad8:	e8df f003 	tbb	[pc, r3]
 8003adc:	772f8482 	.word	0x772f8482
 8003ae0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003ae2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8003ae4:	441d      	add	r5, r3
 8003ae6:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003aea:	2b20      	cmp	r3, #32
 8003aec:	dd11      	ble.n	8003b12 <_dtoa_r+0x21a>
 8003aee:	9a00      	ldr	r2, [sp, #0]
 8003af0:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8003af4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003af8:	fa22 f000 	lsr.w	r0, r2, r0
 8003afc:	fa08 f303 	lsl.w	r3, r8, r3
 8003b00:	4318      	orrs	r0, r3
 8003b02:	f7fc fcff 	bl	8000504 <__aeabi_ui2d>
 8003b06:	2301      	movs	r3, #1
 8003b08:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003b0c:	3d01      	subs	r5, #1
 8003b0e:	9312      	str	r3, [sp, #72]	; 0x48
 8003b10:	e772      	b.n	80039f8 <_dtoa_r+0x100>
 8003b12:	f1c3 0020 	rsb	r0, r3, #32
 8003b16:	9b00      	ldr	r3, [sp, #0]
 8003b18:	fa03 f000 	lsl.w	r0, r3, r0
 8003b1c:	e7f1      	b.n	8003b02 <_dtoa_r+0x20a>
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e7b1      	b.n	8003a86 <_dtoa_r+0x18e>
 8003b22:	900e      	str	r0, [sp, #56]	; 0x38
 8003b24:	e7b0      	b.n	8003a88 <_dtoa_r+0x190>
 8003b26:	9b05      	ldr	r3, [sp, #20]
 8003b28:	eba3 030b 	sub.w	r3, r3, fp
 8003b2c:	9305      	str	r3, [sp, #20]
 8003b2e:	f1cb 0300 	rsb	r3, fp, #0
 8003b32:	9308      	str	r3, [sp, #32]
 8003b34:	2300      	movs	r3, #0
 8003b36:	930b      	str	r3, [sp, #44]	; 0x2c
 8003b38:	e7bd      	b.n	8003ab6 <_dtoa_r+0x1be>
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	9309      	str	r3, [sp, #36]	; 0x24
 8003b3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	dd7a      	ble.n	8003c3a <_dtoa_r+0x342>
 8003b44:	9304      	str	r3, [sp, #16]
 8003b46:	9303      	str	r3, [sp, #12]
 8003b48:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	606a      	str	r2, [r5, #4]
 8003b4e:	2104      	movs	r1, #4
 8003b50:	f101 0214 	add.w	r2, r1, #20
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d975      	bls.n	8003c44 <_dtoa_r+0x34c>
 8003b58:	6869      	ldr	r1, [r5, #4]
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	f000 fed6 	bl	800490c <_Balloc>
 8003b60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b62:	6028      	str	r0, [r5, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	9302      	str	r3, [sp, #8]
 8003b68:	9b03      	ldr	r3, [sp, #12]
 8003b6a:	2b0e      	cmp	r3, #14
 8003b6c:	f200 80e5 	bhi.w	8003d3a <_dtoa_r+0x442>
 8003b70:	2e00      	cmp	r6, #0
 8003b72:	f000 80e2 	beq.w	8003d3a <_dtoa_r+0x442>
 8003b76:	ed9d 7b00 	vldr	d7, [sp]
 8003b7a:	f1bb 0f00 	cmp.w	fp, #0
 8003b7e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8003b82:	dd74      	ble.n	8003c6e <_dtoa_r+0x376>
 8003b84:	4a23      	ldr	r2, [pc, #140]	; (8003c14 <_dtoa_r+0x31c>)
 8003b86:	f00b 030f 	and.w	r3, fp, #15
 8003b8a:	ea4f 162b 	mov.w	r6, fp, asr #4
 8003b8e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003b92:	06f0      	lsls	r0, r6, #27
 8003b94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003b98:	d559      	bpl.n	8003c4e <_dtoa_r+0x356>
 8003b9a:	4b1f      	ldr	r3, [pc, #124]	; (8003c18 <_dtoa_r+0x320>)
 8003b9c:	ec51 0b17 	vmov	r0, r1, d7
 8003ba0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003ba4:	f7fc fe4e 	bl	8000844 <__aeabi_ddiv>
 8003ba8:	e9cd 0100 	strd	r0, r1, [sp]
 8003bac:	f006 060f 	and.w	r6, r6, #15
 8003bb0:	2503      	movs	r5, #3
 8003bb2:	4f19      	ldr	r7, [pc, #100]	; (8003c18 <_dtoa_r+0x320>)
 8003bb4:	2e00      	cmp	r6, #0
 8003bb6:	d14c      	bne.n	8003c52 <_dtoa_r+0x35a>
 8003bb8:	4642      	mov	r2, r8
 8003bba:	464b      	mov	r3, r9
 8003bbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003bc0:	f7fc fe40 	bl	8000844 <__aeabi_ddiv>
 8003bc4:	e9cd 0100 	strd	r0, r1, [sp]
 8003bc8:	e06a      	b.n	8003ca0 <_dtoa_r+0x3a8>
 8003bca:	2301      	movs	r3, #1
 8003bcc:	9309      	str	r3, [sp, #36]	; 0x24
 8003bce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bd0:	445b      	add	r3, fp
 8003bd2:	9304      	str	r3, [sp, #16]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	9303      	str	r3, [sp, #12]
 8003bda:	bfb8      	it	lt
 8003bdc:	2301      	movlt	r3, #1
 8003bde:	e7b3      	b.n	8003b48 <_dtoa_r+0x250>
 8003be0:	2300      	movs	r3, #0
 8003be2:	e7ab      	b.n	8003b3c <_dtoa_r+0x244>
 8003be4:	2300      	movs	r3, #0
 8003be6:	e7f1      	b.n	8003bcc <_dtoa_r+0x2d4>
 8003be8:	636f4361 	.word	0x636f4361
 8003bec:	3fd287a7 	.word	0x3fd287a7
 8003bf0:	8b60c8b3 	.word	0x8b60c8b3
 8003bf4:	3fc68a28 	.word	0x3fc68a28
 8003bf8:	509f79fb 	.word	0x509f79fb
 8003bfc:	3fd34413 	.word	0x3fd34413
 8003c00:	7ff00000 	.word	0x7ff00000
 8003c04:	080056cd 	.word	0x080056cd
 8003c08:	080056c4 	.word	0x080056c4
 8003c0c:	080056a3 	.word	0x080056a3
 8003c10:	3ff80000 	.word	0x3ff80000
 8003c14:	08005700 	.word	0x08005700
 8003c18:	080056d8 	.word	0x080056d8
 8003c1c:	2601      	movs	r6, #1
 8003c1e:	2300      	movs	r3, #0
 8003c20:	9307      	str	r3, [sp, #28]
 8003c22:	9609      	str	r6, [sp, #36]	; 0x24
 8003c24:	f04f 33ff 	mov.w	r3, #4294967295
 8003c28:	9304      	str	r3, [sp, #16]
 8003c2a:	9303      	str	r3, [sp, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	2312      	movs	r3, #18
 8003c30:	920a      	str	r2, [sp, #40]	; 0x28
 8003c32:	e789      	b.n	8003b48 <_dtoa_r+0x250>
 8003c34:	2301      	movs	r3, #1
 8003c36:	9309      	str	r3, [sp, #36]	; 0x24
 8003c38:	e7f4      	b.n	8003c24 <_dtoa_r+0x32c>
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	9304      	str	r3, [sp, #16]
 8003c3e:	9303      	str	r3, [sp, #12]
 8003c40:	461a      	mov	r2, r3
 8003c42:	e7f5      	b.n	8003c30 <_dtoa_r+0x338>
 8003c44:	686a      	ldr	r2, [r5, #4]
 8003c46:	3201      	adds	r2, #1
 8003c48:	606a      	str	r2, [r5, #4]
 8003c4a:	0049      	lsls	r1, r1, #1
 8003c4c:	e780      	b.n	8003b50 <_dtoa_r+0x258>
 8003c4e:	2502      	movs	r5, #2
 8003c50:	e7af      	b.n	8003bb2 <_dtoa_r+0x2ba>
 8003c52:	07f1      	lsls	r1, r6, #31
 8003c54:	d508      	bpl.n	8003c68 <_dtoa_r+0x370>
 8003c56:	4640      	mov	r0, r8
 8003c58:	4649      	mov	r1, r9
 8003c5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c5e:	f7fc fcc7 	bl	80005f0 <__aeabi_dmul>
 8003c62:	3501      	adds	r5, #1
 8003c64:	4680      	mov	r8, r0
 8003c66:	4689      	mov	r9, r1
 8003c68:	1076      	asrs	r6, r6, #1
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	e7a2      	b.n	8003bb4 <_dtoa_r+0x2bc>
 8003c6e:	f000 809d 	beq.w	8003dac <_dtoa_r+0x4b4>
 8003c72:	f1cb 0600 	rsb	r6, fp, #0
 8003c76:	4b9f      	ldr	r3, [pc, #636]	; (8003ef4 <_dtoa_r+0x5fc>)
 8003c78:	4f9f      	ldr	r7, [pc, #636]	; (8003ef8 <_dtoa_r+0x600>)
 8003c7a:	f006 020f 	and.w	r2, r6, #15
 8003c7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003c8a:	f7fc fcb1 	bl	80005f0 <__aeabi_dmul>
 8003c8e:	e9cd 0100 	strd	r0, r1, [sp]
 8003c92:	1136      	asrs	r6, r6, #4
 8003c94:	2300      	movs	r3, #0
 8003c96:	2502      	movs	r5, #2
 8003c98:	2e00      	cmp	r6, #0
 8003c9a:	d17c      	bne.n	8003d96 <_dtoa_r+0x49e>
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d191      	bne.n	8003bc4 <_dtoa_r+0x2cc>
 8003ca0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f000 8084 	beq.w	8003db0 <_dtoa_r+0x4b8>
 8003ca8:	e9dd 8900 	ldrd	r8, r9, [sp]
 8003cac:	2200      	movs	r2, #0
 8003cae:	4b93      	ldr	r3, [pc, #588]	; (8003efc <_dtoa_r+0x604>)
 8003cb0:	4640      	mov	r0, r8
 8003cb2:	4649      	mov	r1, r9
 8003cb4:	f7fc ff0e 	bl	8000ad4 <__aeabi_dcmplt>
 8003cb8:	2800      	cmp	r0, #0
 8003cba:	d079      	beq.n	8003db0 <_dtoa_r+0x4b8>
 8003cbc:	9b03      	ldr	r3, [sp, #12]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d076      	beq.n	8003db0 <_dtoa_r+0x4b8>
 8003cc2:	9b04      	ldr	r3, [sp, #16]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	dd34      	ble.n	8003d32 <_dtoa_r+0x43a>
 8003cc8:	2200      	movs	r2, #0
 8003cca:	4b8d      	ldr	r3, [pc, #564]	; (8003f00 <_dtoa_r+0x608>)
 8003ccc:	4640      	mov	r0, r8
 8003cce:	4649      	mov	r1, r9
 8003cd0:	f7fc fc8e 	bl	80005f0 <__aeabi_dmul>
 8003cd4:	e9cd 0100 	strd	r0, r1, [sp]
 8003cd8:	9e04      	ldr	r6, [sp, #16]
 8003cda:	f10b 37ff 	add.w	r7, fp, #4294967295
 8003cde:	3501      	adds	r5, #1
 8003ce0:	4628      	mov	r0, r5
 8003ce2:	f7fc fc1f 	bl	8000524 <__aeabi_i2d>
 8003ce6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003cea:	f7fc fc81 	bl	80005f0 <__aeabi_dmul>
 8003cee:	2200      	movs	r2, #0
 8003cf0:	4b84      	ldr	r3, [pc, #528]	; (8003f04 <_dtoa_r+0x60c>)
 8003cf2:	f7fc facb 	bl	800028c <__adddf3>
 8003cf6:	4680      	mov	r8, r0
 8003cf8:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8003cfc:	2e00      	cmp	r6, #0
 8003cfe:	d15a      	bne.n	8003db6 <_dtoa_r+0x4be>
 8003d00:	2200      	movs	r2, #0
 8003d02:	4b81      	ldr	r3, [pc, #516]	; (8003f08 <_dtoa_r+0x610>)
 8003d04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003d08:	f7fc fabe 	bl	8000288 <__aeabi_dsub>
 8003d0c:	4642      	mov	r2, r8
 8003d0e:	464b      	mov	r3, r9
 8003d10:	e9cd 0100 	strd	r0, r1, [sp]
 8003d14:	f7fc fefc 	bl	8000b10 <__aeabi_dcmpgt>
 8003d18:	2800      	cmp	r0, #0
 8003d1a:	f040 829b 	bne.w	8004254 <_dtoa_r+0x95c>
 8003d1e:	4642      	mov	r2, r8
 8003d20:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003d24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003d28:	f7fc fed4 	bl	8000ad4 <__aeabi_dcmplt>
 8003d2c:	2800      	cmp	r0, #0
 8003d2e:	f040 828f 	bne.w	8004250 <_dtoa_r+0x958>
 8003d32:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003d36:	e9cd 2300 	strd	r2, r3, [sp]
 8003d3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f2c0 8150 	blt.w	8003fe2 <_dtoa_r+0x6ea>
 8003d42:	f1bb 0f0e 	cmp.w	fp, #14
 8003d46:	f300 814c 	bgt.w	8003fe2 <_dtoa_r+0x6ea>
 8003d4a:	4b6a      	ldr	r3, [pc, #424]	; (8003ef4 <_dtoa_r+0x5fc>)
 8003d4c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003d50:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003d54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f280 80da 	bge.w	8003f10 <_dtoa_r+0x618>
 8003d5c:	9b03      	ldr	r3, [sp, #12]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f300 80d6 	bgt.w	8003f10 <_dtoa_r+0x618>
 8003d64:	f040 8273 	bne.w	800424e <_dtoa_r+0x956>
 8003d68:	2200      	movs	r2, #0
 8003d6a:	4b67      	ldr	r3, [pc, #412]	; (8003f08 <_dtoa_r+0x610>)
 8003d6c:	4640      	mov	r0, r8
 8003d6e:	4649      	mov	r1, r9
 8003d70:	f7fc fc3e 	bl	80005f0 <__aeabi_dmul>
 8003d74:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003d78:	f7fc fec0 	bl	8000afc <__aeabi_dcmpge>
 8003d7c:	9e03      	ldr	r6, [sp, #12]
 8003d7e:	4637      	mov	r7, r6
 8003d80:	2800      	cmp	r0, #0
 8003d82:	f040 824a 	bne.w	800421a <_dtoa_r+0x922>
 8003d86:	9b02      	ldr	r3, [sp, #8]
 8003d88:	9a02      	ldr	r2, [sp, #8]
 8003d8a:	1c5d      	adds	r5, r3, #1
 8003d8c:	2331      	movs	r3, #49	; 0x31
 8003d8e:	7013      	strb	r3, [r2, #0]
 8003d90:	f10b 0b01 	add.w	fp, fp, #1
 8003d94:	e245      	b.n	8004222 <_dtoa_r+0x92a>
 8003d96:	07f2      	lsls	r2, r6, #31
 8003d98:	d505      	bpl.n	8003da6 <_dtoa_r+0x4ae>
 8003d9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d9e:	f7fc fc27 	bl	80005f0 <__aeabi_dmul>
 8003da2:	3501      	adds	r5, #1
 8003da4:	2301      	movs	r3, #1
 8003da6:	1076      	asrs	r6, r6, #1
 8003da8:	3708      	adds	r7, #8
 8003daa:	e775      	b.n	8003c98 <_dtoa_r+0x3a0>
 8003dac:	2502      	movs	r5, #2
 8003dae:	e777      	b.n	8003ca0 <_dtoa_r+0x3a8>
 8003db0:	465f      	mov	r7, fp
 8003db2:	9e03      	ldr	r6, [sp, #12]
 8003db4:	e794      	b.n	8003ce0 <_dtoa_r+0x3e8>
 8003db6:	9a02      	ldr	r2, [sp, #8]
 8003db8:	4b4e      	ldr	r3, [pc, #312]	; (8003ef4 <_dtoa_r+0x5fc>)
 8003dba:	4432      	add	r2, r6
 8003dbc:	9213      	str	r2, [sp, #76]	; 0x4c
 8003dbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003dc0:	1e71      	subs	r1, r6, #1
 8003dc2:	2a00      	cmp	r2, #0
 8003dc4:	d048      	beq.n	8003e58 <_dtoa_r+0x560>
 8003dc6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dce:	2000      	movs	r0, #0
 8003dd0:	494e      	ldr	r1, [pc, #312]	; (8003f0c <_dtoa_r+0x614>)
 8003dd2:	f7fc fd37 	bl	8000844 <__aeabi_ddiv>
 8003dd6:	4642      	mov	r2, r8
 8003dd8:	464b      	mov	r3, r9
 8003dda:	f7fc fa55 	bl	8000288 <__aeabi_dsub>
 8003dde:	9d02      	ldr	r5, [sp, #8]
 8003de0:	4680      	mov	r8, r0
 8003de2:	4689      	mov	r9, r1
 8003de4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003de8:	f7fc feb2 	bl	8000b50 <__aeabi_d2iz>
 8003dec:	4606      	mov	r6, r0
 8003dee:	f7fc fb99 	bl	8000524 <__aeabi_i2d>
 8003df2:	4602      	mov	r2, r0
 8003df4:	460b      	mov	r3, r1
 8003df6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003dfa:	f7fc fa45 	bl	8000288 <__aeabi_dsub>
 8003dfe:	3630      	adds	r6, #48	; 0x30
 8003e00:	f805 6b01 	strb.w	r6, [r5], #1
 8003e04:	4642      	mov	r2, r8
 8003e06:	464b      	mov	r3, r9
 8003e08:	e9cd 0100 	strd	r0, r1, [sp]
 8003e0c:	f7fc fe62 	bl	8000ad4 <__aeabi_dcmplt>
 8003e10:	2800      	cmp	r0, #0
 8003e12:	d165      	bne.n	8003ee0 <_dtoa_r+0x5e8>
 8003e14:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003e18:	2000      	movs	r0, #0
 8003e1a:	4938      	ldr	r1, [pc, #224]	; (8003efc <_dtoa_r+0x604>)
 8003e1c:	f7fc fa34 	bl	8000288 <__aeabi_dsub>
 8003e20:	4642      	mov	r2, r8
 8003e22:	464b      	mov	r3, r9
 8003e24:	f7fc fe56 	bl	8000ad4 <__aeabi_dcmplt>
 8003e28:	2800      	cmp	r0, #0
 8003e2a:	f040 80ba 	bne.w	8003fa2 <_dtoa_r+0x6aa>
 8003e2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003e30:	429d      	cmp	r5, r3
 8003e32:	f43f af7e 	beq.w	8003d32 <_dtoa_r+0x43a>
 8003e36:	2200      	movs	r2, #0
 8003e38:	4b31      	ldr	r3, [pc, #196]	; (8003f00 <_dtoa_r+0x608>)
 8003e3a:	4640      	mov	r0, r8
 8003e3c:	4649      	mov	r1, r9
 8003e3e:	f7fc fbd7 	bl	80005f0 <__aeabi_dmul>
 8003e42:	2200      	movs	r2, #0
 8003e44:	4680      	mov	r8, r0
 8003e46:	4689      	mov	r9, r1
 8003e48:	4b2d      	ldr	r3, [pc, #180]	; (8003f00 <_dtoa_r+0x608>)
 8003e4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003e4e:	f7fc fbcf 	bl	80005f0 <__aeabi_dmul>
 8003e52:	e9cd 0100 	strd	r0, r1, [sp]
 8003e56:	e7c5      	b.n	8003de4 <_dtoa_r+0x4ec>
 8003e58:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8003e5c:	4642      	mov	r2, r8
 8003e5e:	464b      	mov	r3, r9
 8003e60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e64:	f7fc fbc4 	bl	80005f0 <__aeabi_dmul>
 8003e68:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003e6c:	9d02      	ldr	r5, [sp, #8]
 8003e6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003e72:	f7fc fe6d 	bl	8000b50 <__aeabi_d2iz>
 8003e76:	4606      	mov	r6, r0
 8003e78:	f7fc fb54 	bl	8000524 <__aeabi_i2d>
 8003e7c:	3630      	adds	r6, #48	; 0x30
 8003e7e:	4602      	mov	r2, r0
 8003e80:	460b      	mov	r3, r1
 8003e82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003e86:	f7fc f9ff 	bl	8000288 <__aeabi_dsub>
 8003e8a:	f805 6b01 	strb.w	r6, [r5], #1
 8003e8e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003e90:	42ab      	cmp	r3, r5
 8003e92:	4680      	mov	r8, r0
 8003e94:	4689      	mov	r9, r1
 8003e96:	f04f 0200 	mov.w	r2, #0
 8003e9a:	d125      	bne.n	8003ee8 <_dtoa_r+0x5f0>
 8003e9c:	4b1b      	ldr	r3, [pc, #108]	; (8003f0c <_dtoa_r+0x614>)
 8003e9e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003ea2:	f7fc f9f3 	bl	800028c <__adddf3>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	4640      	mov	r0, r8
 8003eac:	4649      	mov	r1, r9
 8003eae:	f7fc fe2f 	bl	8000b10 <__aeabi_dcmpgt>
 8003eb2:	2800      	cmp	r0, #0
 8003eb4:	d175      	bne.n	8003fa2 <_dtoa_r+0x6aa>
 8003eb6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003eba:	2000      	movs	r0, #0
 8003ebc:	4913      	ldr	r1, [pc, #76]	; (8003f0c <_dtoa_r+0x614>)
 8003ebe:	f7fc f9e3 	bl	8000288 <__aeabi_dsub>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	4640      	mov	r0, r8
 8003ec8:	4649      	mov	r1, r9
 8003eca:	f7fc fe03 	bl	8000ad4 <__aeabi_dcmplt>
 8003ece:	2800      	cmp	r0, #0
 8003ed0:	f43f af2f 	beq.w	8003d32 <_dtoa_r+0x43a>
 8003ed4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003ed8:	2b30      	cmp	r3, #48	; 0x30
 8003eda:	f105 32ff 	add.w	r2, r5, #4294967295
 8003ede:	d001      	beq.n	8003ee4 <_dtoa_r+0x5ec>
 8003ee0:	46bb      	mov	fp, r7
 8003ee2:	e04d      	b.n	8003f80 <_dtoa_r+0x688>
 8003ee4:	4615      	mov	r5, r2
 8003ee6:	e7f5      	b.n	8003ed4 <_dtoa_r+0x5dc>
 8003ee8:	4b05      	ldr	r3, [pc, #20]	; (8003f00 <_dtoa_r+0x608>)
 8003eea:	f7fc fb81 	bl	80005f0 <__aeabi_dmul>
 8003eee:	e9cd 0100 	strd	r0, r1, [sp]
 8003ef2:	e7bc      	b.n	8003e6e <_dtoa_r+0x576>
 8003ef4:	08005700 	.word	0x08005700
 8003ef8:	080056d8 	.word	0x080056d8
 8003efc:	3ff00000 	.word	0x3ff00000
 8003f00:	40240000 	.word	0x40240000
 8003f04:	401c0000 	.word	0x401c0000
 8003f08:	40140000 	.word	0x40140000
 8003f0c:	3fe00000 	.word	0x3fe00000
 8003f10:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003f14:	9d02      	ldr	r5, [sp, #8]
 8003f16:	4642      	mov	r2, r8
 8003f18:	464b      	mov	r3, r9
 8003f1a:	4630      	mov	r0, r6
 8003f1c:	4639      	mov	r1, r7
 8003f1e:	f7fc fc91 	bl	8000844 <__aeabi_ddiv>
 8003f22:	f7fc fe15 	bl	8000b50 <__aeabi_d2iz>
 8003f26:	9000      	str	r0, [sp, #0]
 8003f28:	f7fc fafc 	bl	8000524 <__aeabi_i2d>
 8003f2c:	4642      	mov	r2, r8
 8003f2e:	464b      	mov	r3, r9
 8003f30:	f7fc fb5e 	bl	80005f0 <__aeabi_dmul>
 8003f34:	4602      	mov	r2, r0
 8003f36:	460b      	mov	r3, r1
 8003f38:	4630      	mov	r0, r6
 8003f3a:	4639      	mov	r1, r7
 8003f3c:	f7fc f9a4 	bl	8000288 <__aeabi_dsub>
 8003f40:	9e00      	ldr	r6, [sp, #0]
 8003f42:	9f03      	ldr	r7, [sp, #12]
 8003f44:	3630      	adds	r6, #48	; 0x30
 8003f46:	f805 6b01 	strb.w	r6, [r5], #1
 8003f4a:	9e02      	ldr	r6, [sp, #8]
 8003f4c:	1bae      	subs	r6, r5, r6
 8003f4e:	42b7      	cmp	r7, r6
 8003f50:	4602      	mov	r2, r0
 8003f52:	460b      	mov	r3, r1
 8003f54:	d138      	bne.n	8003fc8 <_dtoa_r+0x6d0>
 8003f56:	f7fc f999 	bl	800028c <__adddf3>
 8003f5a:	4606      	mov	r6, r0
 8003f5c:	460f      	mov	r7, r1
 8003f5e:	4602      	mov	r2, r0
 8003f60:	460b      	mov	r3, r1
 8003f62:	4640      	mov	r0, r8
 8003f64:	4649      	mov	r1, r9
 8003f66:	f7fc fdb5 	bl	8000ad4 <__aeabi_dcmplt>
 8003f6a:	b9c8      	cbnz	r0, 8003fa0 <_dtoa_r+0x6a8>
 8003f6c:	4632      	mov	r2, r6
 8003f6e:	463b      	mov	r3, r7
 8003f70:	4640      	mov	r0, r8
 8003f72:	4649      	mov	r1, r9
 8003f74:	f7fc fda4 	bl	8000ac0 <__aeabi_dcmpeq>
 8003f78:	b110      	cbz	r0, 8003f80 <_dtoa_r+0x688>
 8003f7a:	9b00      	ldr	r3, [sp, #0]
 8003f7c:	07db      	lsls	r3, r3, #31
 8003f7e:	d40f      	bmi.n	8003fa0 <_dtoa_r+0x6a8>
 8003f80:	4651      	mov	r1, sl
 8003f82:	4620      	mov	r0, r4
 8003f84:	f000 fcf6 	bl	8004974 <_Bfree>
 8003f88:	2300      	movs	r3, #0
 8003f8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003f8c:	702b      	strb	r3, [r5, #0]
 8003f8e:	f10b 0301 	add.w	r3, fp, #1
 8003f92:	6013      	str	r3, [r2, #0]
 8003f94:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f43f acf8 	beq.w	800398c <_dtoa_r+0x94>
 8003f9c:	601d      	str	r5, [r3, #0]
 8003f9e:	e4f5      	b.n	800398c <_dtoa_r+0x94>
 8003fa0:	465f      	mov	r7, fp
 8003fa2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003fa6:	2a39      	cmp	r2, #57	; 0x39
 8003fa8:	f105 33ff 	add.w	r3, r5, #4294967295
 8003fac:	d106      	bne.n	8003fbc <_dtoa_r+0x6c4>
 8003fae:	9a02      	ldr	r2, [sp, #8]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d107      	bne.n	8003fc4 <_dtoa_r+0x6cc>
 8003fb4:	2330      	movs	r3, #48	; 0x30
 8003fb6:	7013      	strb	r3, [r2, #0]
 8003fb8:	3701      	adds	r7, #1
 8003fba:	4613      	mov	r3, r2
 8003fbc:	781a      	ldrb	r2, [r3, #0]
 8003fbe:	3201      	adds	r2, #1
 8003fc0:	701a      	strb	r2, [r3, #0]
 8003fc2:	e78d      	b.n	8003ee0 <_dtoa_r+0x5e8>
 8003fc4:	461d      	mov	r5, r3
 8003fc6:	e7ec      	b.n	8003fa2 <_dtoa_r+0x6aa>
 8003fc8:	2200      	movs	r2, #0
 8003fca:	4ba4      	ldr	r3, [pc, #656]	; (800425c <_dtoa_r+0x964>)
 8003fcc:	f7fc fb10 	bl	80005f0 <__aeabi_dmul>
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	4606      	mov	r6, r0
 8003fd6:	460f      	mov	r7, r1
 8003fd8:	f7fc fd72 	bl	8000ac0 <__aeabi_dcmpeq>
 8003fdc:	2800      	cmp	r0, #0
 8003fde:	d09a      	beq.n	8003f16 <_dtoa_r+0x61e>
 8003fe0:	e7ce      	b.n	8003f80 <_dtoa_r+0x688>
 8003fe2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003fe4:	2a00      	cmp	r2, #0
 8003fe6:	f000 80cd 	beq.w	8004184 <_dtoa_r+0x88c>
 8003fea:	9a07      	ldr	r2, [sp, #28]
 8003fec:	2a01      	cmp	r2, #1
 8003fee:	f300 80af 	bgt.w	8004150 <_dtoa_r+0x858>
 8003ff2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003ff4:	2a00      	cmp	r2, #0
 8003ff6:	f000 80a7 	beq.w	8004148 <_dtoa_r+0x850>
 8003ffa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003ffe:	9e08      	ldr	r6, [sp, #32]
 8004000:	9d05      	ldr	r5, [sp, #20]
 8004002:	9a05      	ldr	r2, [sp, #20]
 8004004:	441a      	add	r2, r3
 8004006:	9205      	str	r2, [sp, #20]
 8004008:	9a06      	ldr	r2, [sp, #24]
 800400a:	2101      	movs	r1, #1
 800400c:	441a      	add	r2, r3
 800400e:	4620      	mov	r0, r4
 8004010:	9206      	str	r2, [sp, #24]
 8004012:	f000 fd4f 	bl	8004ab4 <__i2b>
 8004016:	4607      	mov	r7, r0
 8004018:	2d00      	cmp	r5, #0
 800401a:	dd0c      	ble.n	8004036 <_dtoa_r+0x73e>
 800401c:	9b06      	ldr	r3, [sp, #24]
 800401e:	2b00      	cmp	r3, #0
 8004020:	dd09      	ble.n	8004036 <_dtoa_r+0x73e>
 8004022:	42ab      	cmp	r3, r5
 8004024:	9a05      	ldr	r2, [sp, #20]
 8004026:	bfa8      	it	ge
 8004028:	462b      	movge	r3, r5
 800402a:	1ad2      	subs	r2, r2, r3
 800402c:	9205      	str	r2, [sp, #20]
 800402e:	9a06      	ldr	r2, [sp, #24]
 8004030:	1aed      	subs	r5, r5, r3
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	9306      	str	r3, [sp, #24]
 8004036:	9b08      	ldr	r3, [sp, #32]
 8004038:	b1f3      	cbz	r3, 8004078 <_dtoa_r+0x780>
 800403a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 80a5 	beq.w	800418c <_dtoa_r+0x894>
 8004042:	2e00      	cmp	r6, #0
 8004044:	dd10      	ble.n	8004068 <_dtoa_r+0x770>
 8004046:	4639      	mov	r1, r7
 8004048:	4632      	mov	r2, r6
 800404a:	4620      	mov	r0, r4
 800404c:	f000 fdc8 	bl	8004be0 <__pow5mult>
 8004050:	4652      	mov	r2, sl
 8004052:	4601      	mov	r1, r0
 8004054:	4607      	mov	r7, r0
 8004056:	4620      	mov	r0, r4
 8004058:	f000 fd35 	bl	8004ac6 <__multiply>
 800405c:	4651      	mov	r1, sl
 800405e:	4680      	mov	r8, r0
 8004060:	4620      	mov	r0, r4
 8004062:	f000 fc87 	bl	8004974 <_Bfree>
 8004066:	46c2      	mov	sl, r8
 8004068:	9b08      	ldr	r3, [sp, #32]
 800406a:	1b9a      	subs	r2, r3, r6
 800406c:	d004      	beq.n	8004078 <_dtoa_r+0x780>
 800406e:	4651      	mov	r1, sl
 8004070:	4620      	mov	r0, r4
 8004072:	f000 fdb5 	bl	8004be0 <__pow5mult>
 8004076:	4682      	mov	sl, r0
 8004078:	2101      	movs	r1, #1
 800407a:	4620      	mov	r0, r4
 800407c:	f000 fd1a 	bl	8004ab4 <__i2b>
 8004080:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004082:	2b00      	cmp	r3, #0
 8004084:	4606      	mov	r6, r0
 8004086:	f340 8083 	ble.w	8004190 <_dtoa_r+0x898>
 800408a:	461a      	mov	r2, r3
 800408c:	4601      	mov	r1, r0
 800408e:	4620      	mov	r0, r4
 8004090:	f000 fda6 	bl	8004be0 <__pow5mult>
 8004094:	9b07      	ldr	r3, [sp, #28]
 8004096:	2b01      	cmp	r3, #1
 8004098:	4606      	mov	r6, r0
 800409a:	dd7c      	ble.n	8004196 <_dtoa_r+0x89e>
 800409c:	f04f 0800 	mov.w	r8, #0
 80040a0:	6933      	ldr	r3, [r6, #16]
 80040a2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80040a6:	6918      	ldr	r0, [r3, #16]
 80040a8:	f000 fcb6 	bl	8004a18 <__hi0bits>
 80040ac:	f1c0 0020 	rsb	r0, r0, #32
 80040b0:	9b06      	ldr	r3, [sp, #24]
 80040b2:	4418      	add	r0, r3
 80040b4:	f010 001f 	ands.w	r0, r0, #31
 80040b8:	f000 8096 	beq.w	80041e8 <_dtoa_r+0x8f0>
 80040bc:	f1c0 0320 	rsb	r3, r0, #32
 80040c0:	2b04      	cmp	r3, #4
 80040c2:	f340 8087 	ble.w	80041d4 <_dtoa_r+0x8dc>
 80040c6:	9b05      	ldr	r3, [sp, #20]
 80040c8:	f1c0 001c 	rsb	r0, r0, #28
 80040cc:	4403      	add	r3, r0
 80040ce:	9305      	str	r3, [sp, #20]
 80040d0:	9b06      	ldr	r3, [sp, #24]
 80040d2:	4405      	add	r5, r0
 80040d4:	4403      	add	r3, r0
 80040d6:	9306      	str	r3, [sp, #24]
 80040d8:	9b05      	ldr	r3, [sp, #20]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	dd05      	ble.n	80040ea <_dtoa_r+0x7f2>
 80040de:	4651      	mov	r1, sl
 80040e0:	461a      	mov	r2, r3
 80040e2:	4620      	mov	r0, r4
 80040e4:	f000 fdca 	bl	8004c7c <__lshift>
 80040e8:	4682      	mov	sl, r0
 80040ea:	9b06      	ldr	r3, [sp, #24]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	dd05      	ble.n	80040fc <_dtoa_r+0x804>
 80040f0:	4631      	mov	r1, r6
 80040f2:	461a      	mov	r2, r3
 80040f4:	4620      	mov	r0, r4
 80040f6:	f000 fdc1 	bl	8004c7c <__lshift>
 80040fa:	4606      	mov	r6, r0
 80040fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d074      	beq.n	80041ec <_dtoa_r+0x8f4>
 8004102:	4631      	mov	r1, r6
 8004104:	4650      	mov	r0, sl
 8004106:	f000 fe0a 	bl	8004d1e <__mcmp>
 800410a:	2800      	cmp	r0, #0
 800410c:	da6e      	bge.n	80041ec <_dtoa_r+0x8f4>
 800410e:	2300      	movs	r3, #0
 8004110:	4651      	mov	r1, sl
 8004112:	220a      	movs	r2, #10
 8004114:	4620      	mov	r0, r4
 8004116:	f000 fc44 	bl	80049a2 <__multadd>
 800411a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800411c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004120:	4682      	mov	sl, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 81a8 	beq.w	8004478 <_dtoa_r+0xb80>
 8004128:	2300      	movs	r3, #0
 800412a:	4639      	mov	r1, r7
 800412c:	220a      	movs	r2, #10
 800412e:	4620      	mov	r0, r4
 8004130:	f000 fc37 	bl	80049a2 <__multadd>
 8004134:	9b04      	ldr	r3, [sp, #16]
 8004136:	2b00      	cmp	r3, #0
 8004138:	4607      	mov	r7, r0
 800413a:	f300 80c8 	bgt.w	80042ce <_dtoa_r+0x9d6>
 800413e:	9b07      	ldr	r3, [sp, #28]
 8004140:	2b02      	cmp	r3, #2
 8004142:	f340 80c4 	ble.w	80042ce <_dtoa_r+0x9d6>
 8004146:	e059      	b.n	80041fc <_dtoa_r+0x904>
 8004148:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800414a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800414e:	e756      	b.n	8003ffe <_dtoa_r+0x706>
 8004150:	9b03      	ldr	r3, [sp, #12]
 8004152:	1e5e      	subs	r6, r3, #1
 8004154:	9b08      	ldr	r3, [sp, #32]
 8004156:	42b3      	cmp	r3, r6
 8004158:	bfbf      	itttt	lt
 800415a:	9b08      	ldrlt	r3, [sp, #32]
 800415c:	9608      	strlt	r6, [sp, #32]
 800415e:	1af2      	sublt	r2, r6, r3
 8004160:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8004162:	bfb6      	itet	lt
 8004164:	189b      	addlt	r3, r3, r2
 8004166:	1b9e      	subge	r6, r3, r6
 8004168:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800416a:	9b03      	ldr	r3, [sp, #12]
 800416c:	bfb8      	it	lt
 800416e:	2600      	movlt	r6, #0
 8004170:	2b00      	cmp	r3, #0
 8004172:	bfb9      	ittee	lt
 8004174:	9b05      	ldrlt	r3, [sp, #20]
 8004176:	9a03      	ldrlt	r2, [sp, #12]
 8004178:	9d05      	ldrge	r5, [sp, #20]
 800417a:	9b03      	ldrge	r3, [sp, #12]
 800417c:	bfbc      	itt	lt
 800417e:	1a9d      	sublt	r5, r3, r2
 8004180:	2300      	movlt	r3, #0
 8004182:	e73e      	b.n	8004002 <_dtoa_r+0x70a>
 8004184:	9e08      	ldr	r6, [sp, #32]
 8004186:	9d05      	ldr	r5, [sp, #20]
 8004188:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800418a:	e745      	b.n	8004018 <_dtoa_r+0x720>
 800418c:	9a08      	ldr	r2, [sp, #32]
 800418e:	e76e      	b.n	800406e <_dtoa_r+0x776>
 8004190:	9b07      	ldr	r3, [sp, #28]
 8004192:	2b01      	cmp	r3, #1
 8004194:	dc19      	bgt.n	80041ca <_dtoa_r+0x8d2>
 8004196:	9b00      	ldr	r3, [sp, #0]
 8004198:	b9bb      	cbnz	r3, 80041ca <_dtoa_r+0x8d2>
 800419a:	9b01      	ldr	r3, [sp, #4]
 800419c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041a0:	b99b      	cbnz	r3, 80041ca <_dtoa_r+0x8d2>
 80041a2:	9b01      	ldr	r3, [sp, #4]
 80041a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80041a8:	0d1b      	lsrs	r3, r3, #20
 80041aa:	051b      	lsls	r3, r3, #20
 80041ac:	b183      	cbz	r3, 80041d0 <_dtoa_r+0x8d8>
 80041ae:	9b05      	ldr	r3, [sp, #20]
 80041b0:	3301      	adds	r3, #1
 80041b2:	9305      	str	r3, [sp, #20]
 80041b4:	9b06      	ldr	r3, [sp, #24]
 80041b6:	3301      	adds	r3, #1
 80041b8:	9306      	str	r3, [sp, #24]
 80041ba:	f04f 0801 	mov.w	r8, #1
 80041be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f47f af6d 	bne.w	80040a0 <_dtoa_r+0x7a8>
 80041c6:	2001      	movs	r0, #1
 80041c8:	e772      	b.n	80040b0 <_dtoa_r+0x7b8>
 80041ca:	f04f 0800 	mov.w	r8, #0
 80041ce:	e7f6      	b.n	80041be <_dtoa_r+0x8c6>
 80041d0:	4698      	mov	r8, r3
 80041d2:	e7f4      	b.n	80041be <_dtoa_r+0x8c6>
 80041d4:	d080      	beq.n	80040d8 <_dtoa_r+0x7e0>
 80041d6:	9a05      	ldr	r2, [sp, #20]
 80041d8:	331c      	adds	r3, #28
 80041da:	441a      	add	r2, r3
 80041dc:	9205      	str	r2, [sp, #20]
 80041de:	9a06      	ldr	r2, [sp, #24]
 80041e0:	441a      	add	r2, r3
 80041e2:	441d      	add	r5, r3
 80041e4:	4613      	mov	r3, r2
 80041e6:	e776      	b.n	80040d6 <_dtoa_r+0x7de>
 80041e8:	4603      	mov	r3, r0
 80041ea:	e7f4      	b.n	80041d6 <_dtoa_r+0x8de>
 80041ec:	9b03      	ldr	r3, [sp, #12]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	dc36      	bgt.n	8004260 <_dtoa_r+0x968>
 80041f2:	9b07      	ldr	r3, [sp, #28]
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	dd33      	ble.n	8004260 <_dtoa_r+0x968>
 80041f8:	9b03      	ldr	r3, [sp, #12]
 80041fa:	9304      	str	r3, [sp, #16]
 80041fc:	9b04      	ldr	r3, [sp, #16]
 80041fe:	b963      	cbnz	r3, 800421a <_dtoa_r+0x922>
 8004200:	4631      	mov	r1, r6
 8004202:	2205      	movs	r2, #5
 8004204:	4620      	mov	r0, r4
 8004206:	f000 fbcc 	bl	80049a2 <__multadd>
 800420a:	4601      	mov	r1, r0
 800420c:	4606      	mov	r6, r0
 800420e:	4650      	mov	r0, sl
 8004210:	f000 fd85 	bl	8004d1e <__mcmp>
 8004214:	2800      	cmp	r0, #0
 8004216:	f73f adb6 	bgt.w	8003d86 <_dtoa_r+0x48e>
 800421a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800421c:	9d02      	ldr	r5, [sp, #8]
 800421e:	ea6f 0b03 	mvn.w	fp, r3
 8004222:	2300      	movs	r3, #0
 8004224:	9303      	str	r3, [sp, #12]
 8004226:	4631      	mov	r1, r6
 8004228:	4620      	mov	r0, r4
 800422a:	f000 fba3 	bl	8004974 <_Bfree>
 800422e:	2f00      	cmp	r7, #0
 8004230:	f43f aea6 	beq.w	8003f80 <_dtoa_r+0x688>
 8004234:	9b03      	ldr	r3, [sp, #12]
 8004236:	b12b      	cbz	r3, 8004244 <_dtoa_r+0x94c>
 8004238:	42bb      	cmp	r3, r7
 800423a:	d003      	beq.n	8004244 <_dtoa_r+0x94c>
 800423c:	4619      	mov	r1, r3
 800423e:	4620      	mov	r0, r4
 8004240:	f000 fb98 	bl	8004974 <_Bfree>
 8004244:	4639      	mov	r1, r7
 8004246:	4620      	mov	r0, r4
 8004248:	f000 fb94 	bl	8004974 <_Bfree>
 800424c:	e698      	b.n	8003f80 <_dtoa_r+0x688>
 800424e:	2600      	movs	r6, #0
 8004250:	4637      	mov	r7, r6
 8004252:	e7e2      	b.n	800421a <_dtoa_r+0x922>
 8004254:	46bb      	mov	fp, r7
 8004256:	4637      	mov	r7, r6
 8004258:	e595      	b.n	8003d86 <_dtoa_r+0x48e>
 800425a:	bf00      	nop
 800425c:	40240000 	.word	0x40240000
 8004260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004262:	bb93      	cbnz	r3, 80042ca <_dtoa_r+0x9d2>
 8004264:	9b03      	ldr	r3, [sp, #12]
 8004266:	9304      	str	r3, [sp, #16]
 8004268:	9d02      	ldr	r5, [sp, #8]
 800426a:	4631      	mov	r1, r6
 800426c:	4650      	mov	r0, sl
 800426e:	f7ff fab7 	bl	80037e0 <quorem>
 8004272:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004276:	f805 9b01 	strb.w	r9, [r5], #1
 800427a:	9b02      	ldr	r3, [sp, #8]
 800427c:	9a04      	ldr	r2, [sp, #16]
 800427e:	1aeb      	subs	r3, r5, r3
 8004280:	429a      	cmp	r2, r3
 8004282:	f300 80dc 	bgt.w	800443e <_dtoa_r+0xb46>
 8004286:	9b02      	ldr	r3, [sp, #8]
 8004288:	2a01      	cmp	r2, #1
 800428a:	bfac      	ite	ge
 800428c:	189b      	addge	r3, r3, r2
 800428e:	3301      	addlt	r3, #1
 8004290:	4698      	mov	r8, r3
 8004292:	2300      	movs	r3, #0
 8004294:	9303      	str	r3, [sp, #12]
 8004296:	4651      	mov	r1, sl
 8004298:	2201      	movs	r2, #1
 800429a:	4620      	mov	r0, r4
 800429c:	f000 fcee 	bl	8004c7c <__lshift>
 80042a0:	4631      	mov	r1, r6
 80042a2:	4682      	mov	sl, r0
 80042a4:	f000 fd3b 	bl	8004d1e <__mcmp>
 80042a8:	2800      	cmp	r0, #0
 80042aa:	f300 808d 	bgt.w	80043c8 <_dtoa_r+0xad0>
 80042ae:	d103      	bne.n	80042b8 <_dtoa_r+0x9c0>
 80042b0:	f019 0f01 	tst.w	r9, #1
 80042b4:	f040 8088 	bne.w	80043c8 <_dtoa_r+0xad0>
 80042b8:	4645      	mov	r5, r8
 80042ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80042be:	2b30      	cmp	r3, #48	; 0x30
 80042c0:	f105 32ff 	add.w	r2, r5, #4294967295
 80042c4:	d1af      	bne.n	8004226 <_dtoa_r+0x92e>
 80042c6:	4615      	mov	r5, r2
 80042c8:	e7f7      	b.n	80042ba <_dtoa_r+0x9c2>
 80042ca:	9b03      	ldr	r3, [sp, #12]
 80042cc:	9304      	str	r3, [sp, #16]
 80042ce:	2d00      	cmp	r5, #0
 80042d0:	dd05      	ble.n	80042de <_dtoa_r+0x9e6>
 80042d2:	4639      	mov	r1, r7
 80042d4:	462a      	mov	r2, r5
 80042d6:	4620      	mov	r0, r4
 80042d8:	f000 fcd0 	bl	8004c7c <__lshift>
 80042dc:	4607      	mov	r7, r0
 80042de:	f1b8 0f00 	cmp.w	r8, #0
 80042e2:	d04c      	beq.n	800437e <_dtoa_r+0xa86>
 80042e4:	6879      	ldr	r1, [r7, #4]
 80042e6:	4620      	mov	r0, r4
 80042e8:	f000 fb10 	bl	800490c <_Balloc>
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	3202      	adds	r2, #2
 80042f0:	4605      	mov	r5, r0
 80042f2:	0092      	lsls	r2, r2, #2
 80042f4:	f107 010c 	add.w	r1, r7, #12
 80042f8:	300c      	adds	r0, #12
 80042fa:	f000 faef 	bl	80048dc <memcpy>
 80042fe:	2201      	movs	r2, #1
 8004300:	4629      	mov	r1, r5
 8004302:	4620      	mov	r0, r4
 8004304:	f000 fcba 	bl	8004c7c <__lshift>
 8004308:	9b00      	ldr	r3, [sp, #0]
 800430a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800430e:	9703      	str	r7, [sp, #12]
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	4607      	mov	r7, r0
 8004316:	9305      	str	r3, [sp, #20]
 8004318:	4631      	mov	r1, r6
 800431a:	4650      	mov	r0, sl
 800431c:	f7ff fa60 	bl	80037e0 <quorem>
 8004320:	9903      	ldr	r1, [sp, #12]
 8004322:	4605      	mov	r5, r0
 8004324:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004328:	4650      	mov	r0, sl
 800432a:	f000 fcf8 	bl	8004d1e <__mcmp>
 800432e:	463a      	mov	r2, r7
 8004330:	9000      	str	r0, [sp, #0]
 8004332:	4631      	mov	r1, r6
 8004334:	4620      	mov	r0, r4
 8004336:	f000 fd0c 	bl	8004d52 <__mdiff>
 800433a:	68c3      	ldr	r3, [r0, #12]
 800433c:	4602      	mov	r2, r0
 800433e:	bb03      	cbnz	r3, 8004382 <_dtoa_r+0xa8a>
 8004340:	4601      	mov	r1, r0
 8004342:	9006      	str	r0, [sp, #24]
 8004344:	4650      	mov	r0, sl
 8004346:	f000 fcea 	bl	8004d1e <__mcmp>
 800434a:	9a06      	ldr	r2, [sp, #24]
 800434c:	4603      	mov	r3, r0
 800434e:	4611      	mov	r1, r2
 8004350:	4620      	mov	r0, r4
 8004352:	9306      	str	r3, [sp, #24]
 8004354:	f000 fb0e 	bl	8004974 <_Bfree>
 8004358:	9b06      	ldr	r3, [sp, #24]
 800435a:	b9a3      	cbnz	r3, 8004386 <_dtoa_r+0xa8e>
 800435c:	9a07      	ldr	r2, [sp, #28]
 800435e:	b992      	cbnz	r2, 8004386 <_dtoa_r+0xa8e>
 8004360:	9a05      	ldr	r2, [sp, #20]
 8004362:	b982      	cbnz	r2, 8004386 <_dtoa_r+0xa8e>
 8004364:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004368:	d029      	beq.n	80043be <_dtoa_r+0xac6>
 800436a:	9b00      	ldr	r3, [sp, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	dd01      	ble.n	8004374 <_dtoa_r+0xa7c>
 8004370:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8004374:	f108 0501 	add.w	r5, r8, #1
 8004378:	f888 9000 	strb.w	r9, [r8]
 800437c:	e753      	b.n	8004226 <_dtoa_r+0x92e>
 800437e:	4638      	mov	r0, r7
 8004380:	e7c2      	b.n	8004308 <_dtoa_r+0xa10>
 8004382:	2301      	movs	r3, #1
 8004384:	e7e3      	b.n	800434e <_dtoa_r+0xa56>
 8004386:	9a00      	ldr	r2, [sp, #0]
 8004388:	2a00      	cmp	r2, #0
 800438a:	db04      	blt.n	8004396 <_dtoa_r+0xa9e>
 800438c:	d125      	bne.n	80043da <_dtoa_r+0xae2>
 800438e:	9a07      	ldr	r2, [sp, #28]
 8004390:	bb1a      	cbnz	r2, 80043da <_dtoa_r+0xae2>
 8004392:	9a05      	ldr	r2, [sp, #20]
 8004394:	bb0a      	cbnz	r2, 80043da <_dtoa_r+0xae2>
 8004396:	2b00      	cmp	r3, #0
 8004398:	ddec      	ble.n	8004374 <_dtoa_r+0xa7c>
 800439a:	4651      	mov	r1, sl
 800439c:	2201      	movs	r2, #1
 800439e:	4620      	mov	r0, r4
 80043a0:	f000 fc6c 	bl	8004c7c <__lshift>
 80043a4:	4631      	mov	r1, r6
 80043a6:	4682      	mov	sl, r0
 80043a8:	f000 fcb9 	bl	8004d1e <__mcmp>
 80043ac:	2800      	cmp	r0, #0
 80043ae:	dc03      	bgt.n	80043b8 <_dtoa_r+0xac0>
 80043b0:	d1e0      	bne.n	8004374 <_dtoa_r+0xa7c>
 80043b2:	f019 0f01 	tst.w	r9, #1
 80043b6:	d0dd      	beq.n	8004374 <_dtoa_r+0xa7c>
 80043b8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80043bc:	d1d8      	bne.n	8004370 <_dtoa_r+0xa78>
 80043be:	2339      	movs	r3, #57	; 0x39
 80043c0:	f888 3000 	strb.w	r3, [r8]
 80043c4:	f108 0801 	add.w	r8, r8, #1
 80043c8:	4645      	mov	r5, r8
 80043ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80043ce:	2b39      	cmp	r3, #57	; 0x39
 80043d0:	f105 32ff 	add.w	r2, r5, #4294967295
 80043d4:	d03b      	beq.n	800444e <_dtoa_r+0xb56>
 80043d6:	3301      	adds	r3, #1
 80043d8:	e040      	b.n	800445c <_dtoa_r+0xb64>
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f108 0501 	add.w	r5, r8, #1
 80043e0:	dd05      	ble.n	80043ee <_dtoa_r+0xaf6>
 80043e2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80043e6:	d0ea      	beq.n	80043be <_dtoa_r+0xac6>
 80043e8:	f109 0901 	add.w	r9, r9, #1
 80043ec:	e7c4      	b.n	8004378 <_dtoa_r+0xa80>
 80043ee:	9b02      	ldr	r3, [sp, #8]
 80043f0:	9a04      	ldr	r2, [sp, #16]
 80043f2:	f805 9c01 	strb.w	r9, [r5, #-1]
 80043f6:	1aeb      	subs	r3, r5, r3
 80043f8:	4293      	cmp	r3, r2
 80043fa:	46a8      	mov	r8, r5
 80043fc:	f43f af4b 	beq.w	8004296 <_dtoa_r+0x99e>
 8004400:	4651      	mov	r1, sl
 8004402:	2300      	movs	r3, #0
 8004404:	220a      	movs	r2, #10
 8004406:	4620      	mov	r0, r4
 8004408:	f000 facb 	bl	80049a2 <__multadd>
 800440c:	9b03      	ldr	r3, [sp, #12]
 800440e:	9903      	ldr	r1, [sp, #12]
 8004410:	42bb      	cmp	r3, r7
 8004412:	4682      	mov	sl, r0
 8004414:	f04f 0300 	mov.w	r3, #0
 8004418:	f04f 020a 	mov.w	r2, #10
 800441c:	4620      	mov	r0, r4
 800441e:	d104      	bne.n	800442a <_dtoa_r+0xb32>
 8004420:	f000 fabf 	bl	80049a2 <__multadd>
 8004424:	9003      	str	r0, [sp, #12]
 8004426:	4607      	mov	r7, r0
 8004428:	e776      	b.n	8004318 <_dtoa_r+0xa20>
 800442a:	f000 faba 	bl	80049a2 <__multadd>
 800442e:	2300      	movs	r3, #0
 8004430:	9003      	str	r0, [sp, #12]
 8004432:	220a      	movs	r2, #10
 8004434:	4639      	mov	r1, r7
 8004436:	4620      	mov	r0, r4
 8004438:	f000 fab3 	bl	80049a2 <__multadd>
 800443c:	e7f3      	b.n	8004426 <_dtoa_r+0xb2e>
 800443e:	4651      	mov	r1, sl
 8004440:	2300      	movs	r3, #0
 8004442:	220a      	movs	r2, #10
 8004444:	4620      	mov	r0, r4
 8004446:	f000 faac 	bl	80049a2 <__multadd>
 800444a:	4682      	mov	sl, r0
 800444c:	e70d      	b.n	800426a <_dtoa_r+0x972>
 800444e:	9b02      	ldr	r3, [sp, #8]
 8004450:	4293      	cmp	r3, r2
 8004452:	d105      	bne.n	8004460 <_dtoa_r+0xb68>
 8004454:	9a02      	ldr	r2, [sp, #8]
 8004456:	f10b 0b01 	add.w	fp, fp, #1
 800445a:	2331      	movs	r3, #49	; 0x31
 800445c:	7013      	strb	r3, [r2, #0]
 800445e:	e6e2      	b.n	8004226 <_dtoa_r+0x92e>
 8004460:	4615      	mov	r5, r2
 8004462:	e7b2      	b.n	80043ca <_dtoa_r+0xad2>
 8004464:	4b09      	ldr	r3, [pc, #36]	; (800448c <_dtoa_r+0xb94>)
 8004466:	f7ff baae 	b.w	80039c6 <_dtoa_r+0xce>
 800446a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800446c:	2b00      	cmp	r3, #0
 800446e:	f47f aa88 	bne.w	8003982 <_dtoa_r+0x8a>
 8004472:	4b07      	ldr	r3, [pc, #28]	; (8004490 <_dtoa_r+0xb98>)
 8004474:	f7ff baa7 	b.w	80039c6 <_dtoa_r+0xce>
 8004478:	9b04      	ldr	r3, [sp, #16]
 800447a:	2b00      	cmp	r3, #0
 800447c:	f73f aef4 	bgt.w	8004268 <_dtoa_r+0x970>
 8004480:	9b07      	ldr	r3, [sp, #28]
 8004482:	2b02      	cmp	r3, #2
 8004484:	f77f aef0 	ble.w	8004268 <_dtoa_r+0x970>
 8004488:	e6b8      	b.n	80041fc <_dtoa_r+0x904>
 800448a:	bf00      	nop
 800448c:	080056a2 	.word	0x080056a2
 8004490:	080056c4 	.word	0x080056c4

08004494 <_localeconv_r>:
 8004494:	4b04      	ldr	r3, [pc, #16]	; (80044a8 <_localeconv_r+0x14>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6a18      	ldr	r0, [r3, #32]
 800449a:	4b04      	ldr	r3, [pc, #16]	; (80044ac <_localeconv_r+0x18>)
 800449c:	2800      	cmp	r0, #0
 800449e:	bf08      	it	eq
 80044a0:	4618      	moveq	r0, r3
 80044a2:	30f0      	adds	r0, #240	; 0xf0
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	20000004 	.word	0x20000004
 80044ac:	20000508 	.word	0x20000508

080044b0 <malloc>:
 80044b0:	4b02      	ldr	r3, [pc, #8]	; (80044bc <malloc+0xc>)
 80044b2:	4601      	mov	r1, r0
 80044b4:	6818      	ldr	r0, [r3, #0]
 80044b6:	f000 b803 	b.w	80044c0 <_malloc_r>
 80044ba:	bf00      	nop
 80044bc:	20000004 	.word	0x20000004

080044c0 <_malloc_r>:
 80044c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044c4:	f101 040b 	add.w	r4, r1, #11
 80044c8:	2c16      	cmp	r4, #22
 80044ca:	4681      	mov	r9, r0
 80044cc:	d907      	bls.n	80044de <_malloc_r+0x1e>
 80044ce:	f034 0407 	bics.w	r4, r4, #7
 80044d2:	d505      	bpl.n	80044e0 <_malloc_r+0x20>
 80044d4:	230c      	movs	r3, #12
 80044d6:	f8c9 3000 	str.w	r3, [r9]
 80044da:	2600      	movs	r6, #0
 80044dc:	e131      	b.n	8004742 <_malloc_r+0x282>
 80044de:	2410      	movs	r4, #16
 80044e0:	428c      	cmp	r4, r1
 80044e2:	d3f7      	bcc.n	80044d4 <_malloc_r+0x14>
 80044e4:	4648      	mov	r0, r9
 80044e6:	f000 fa05 	bl	80048f4 <__malloc_lock>
 80044ea:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 80044ee:	4d9c      	ldr	r5, [pc, #624]	; (8004760 <_malloc_r+0x2a0>)
 80044f0:	d236      	bcs.n	8004560 <_malloc_r+0xa0>
 80044f2:	f104 0208 	add.w	r2, r4, #8
 80044f6:	442a      	add	r2, r5
 80044f8:	f1a2 0108 	sub.w	r1, r2, #8
 80044fc:	6856      	ldr	r6, [r2, #4]
 80044fe:	428e      	cmp	r6, r1
 8004500:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8004504:	d102      	bne.n	800450c <_malloc_r+0x4c>
 8004506:	68d6      	ldr	r6, [r2, #12]
 8004508:	42b2      	cmp	r2, r6
 800450a:	d010      	beq.n	800452e <_malloc_r+0x6e>
 800450c:	6873      	ldr	r3, [r6, #4]
 800450e:	68f2      	ldr	r2, [r6, #12]
 8004510:	68b1      	ldr	r1, [r6, #8]
 8004512:	f023 0303 	bic.w	r3, r3, #3
 8004516:	60ca      	str	r2, [r1, #12]
 8004518:	4433      	add	r3, r6
 800451a:	6091      	str	r1, [r2, #8]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	f042 0201 	orr.w	r2, r2, #1
 8004522:	605a      	str	r2, [r3, #4]
 8004524:	4648      	mov	r0, r9
 8004526:	f000 f9eb 	bl	8004900 <__malloc_unlock>
 800452a:	3608      	adds	r6, #8
 800452c:	e109      	b.n	8004742 <_malloc_r+0x282>
 800452e:	3302      	adds	r3, #2
 8004530:	4a8c      	ldr	r2, [pc, #560]	; (8004764 <_malloc_r+0x2a4>)
 8004532:	692e      	ldr	r6, [r5, #16]
 8004534:	4296      	cmp	r6, r2
 8004536:	4611      	mov	r1, r2
 8004538:	d06d      	beq.n	8004616 <_malloc_r+0x156>
 800453a:	6870      	ldr	r0, [r6, #4]
 800453c:	f020 0003 	bic.w	r0, r0, #3
 8004540:	1b07      	subs	r7, r0, r4
 8004542:	2f0f      	cmp	r7, #15
 8004544:	dd47      	ble.n	80045d6 <_malloc_r+0x116>
 8004546:	1933      	adds	r3, r6, r4
 8004548:	f044 0401 	orr.w	r4, r4, #1
 800454c:	6074      	str	r4, [r6, #4]
 800454e:	616b      	str	r3, [r5, #20]
 8004550:	612b      	str	r3, [r5, #16]
 8004552:	60da      	str	r2, [r3, #12]
 8004554:	609a      	str	r2, [r3, #8]
 8004556:	f047 0201 	orr.w	r2, r7, #1
 800455a:	605a      	str	r2, [r3, #4]
 800455c:	5037      	str	r7, [r6, r0]
 800455e:	e7e1      	b.n	8004524 <_malloc_r+0x64>
 8004560:	0a63      	lsrs	r3, r4, #9
 8004562:	d02a      	beq.n	80045ba <_malloc_r+0xfa>
 8004564:	2b04      	cmp	r3, #4
 8004566:	d812      	bhi.n	800458e <_malloc_r+0xce>
 8004568:	09a3      	lsrs	r3, r4, #6
 800456a:	3338      	adds	r3, #56	; 0x38
 800456c:	1c5a      	adds	r2, r3, #1
 800456e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004572:	f1a2 0008 	sub.w	r0, r2, #8
 8004576:	6856      	ldr	r6, [r2, #4]
 8004578:	4286      	cmp	r6, r0
 800457a:	d006      	beq.n	800458a <_malloc_r+0xca>
 800457c:	6872      	ldr	r2, [r6, #4]
 800457e:	f022 0203 	bic.w	r2, r2, #3
 8004582:	1b11      	subs	r1, r2, r4
 8004584:	290f      	cmp	r1, #15
 8004586:	dd1c      	ble.n	80045c2 <_malloc_r+0x102>
 8004588:	3b01      	subs	r3, #1
 800458a:	3301      	adds	r3, #1
 800458c:	e7d0      	b.n	8004530 <_malloc_r+0x70>
 800458e:	2b14      	cmp	r3, #20
 8004590:	d801      	bhi.n	8004596 <_malloc_r+0xd6>
 8004592:	335b      	adds	r3, #91	; 0x5b
 8004594:	e7ea      	b.n	800456c <_malloc_r+0xac>
 8004596:	2b54      	cmp	r3, #84	; 0x54
 8004598:	d802      	bhi.n	80045a0 <_malloc_r+0xe0>
 800459a:	0b23      	lsrs	r3, r4, #12
 800459c:	336e      	adds	r3, #110	; 0x6e
 800459e:	e7e5      	b.n	800456c <_malloc_r+0xac>
 80045a0:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80045a4:	d802      	bhi.n	80045ac <_malloc_r+0xec>
 80045a6:	0be3      	lsrs	r3, r4, #15
 80045a8:	3377      	adds	r3, #119	; 0x77
 80045aa:	e7df      	b.n	800456c <_malloc_r+0xac>
 80045ac:	f240 5254 	movw	r2, #1364	; 0x554
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d804      	bhi.n	80045be <_malloc_r+0xfe>
 80045b4:	0ca3      	lsrs	r3, r4, #18
 80045b6:	337c      	adds	r3, #124	; 0x7c
 80045b8:	e7d8      	b.n	800456c <_malloc_r+0xac>
 80045ba:	233f      	movs	r3, #63	; 0x3f
 80045bc:	e7d6      	b.n	800456c <_malloc_r+0xac>
 80045be:	237e      	movs	r3, #126	; 0x7e
 80045c0:	e7d4      	b.n	800456c <_malloc_r+0xac>
 80045c2:	2900      	cmp	r1, #0
 80045c4:	68f1      	ldr	r1, [r6, #12]
 80045c6:	db04      	blt.n	80045d2 <_malloc_r+0x112>
 80045c8:	68b3      	ldr	r3, [r6, #8]
 80045ca:	60d9      	str	r1, [r3, #12]
 80045cc:	608b      	str	r3, [r1, #8]
 80045ce:	18b3      	adds	r3, r6, r2
 80045d0:	e7a4      	b.n	800451c <_malloc_r+0x5c>
 80045d2:	460e      	mov	r6, r1
 80045d4:	e7d0      	b.n	8004578 <_malloc_r+0xb8>
 80045d6:	2f00      	cmp	r7, #0
 80045d8:	616a      	str	r2, [r5, #20]
 80045da:	612a      	str	r2, [r5, #16]
 80045dc:	db05      	blt.n	80045ea <_malloc_r+0x12a>
 80045de:	4430      	add	r0, r6
 80045e0:	6843      	ldr	r3, [r0, #4]
 80045e2:	f043 0301 	orr.w	r3, r3, #1
 80045e6:	6043      	str	r3, [r0, #4]
 80045e8:	e79c      	b.n	8004524 <_malloc_r+0x64>
 80045ea:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80045ee:	d244      	bcs.n	800467a <_malloc_r+0x1ba>
 80045f0:	08c0      	lsrs	r0, r0, #3
 80045f2:	1087      	asrs	r7, r0, #2
 80045f4:	2201      	movs	r2, #1
 80045f6:	fa02 f707 	lsl.w	r7, r2, r7
 80045fa:	686a      	ldr	r2, [r5, #4]
 80045fc:	3001      	adds	r0, #1
 80045fe:	433a      	orrs	r2, r7
 8004600:	606a      	str	r2, [r5, #4]
 8004602:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8004606:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 800460a:	60b7      	str	r7, [r6, #8]
 800460c:	3a08      	subs	r2, #8
 800460e:	60f2      	str	r2, [r6, #12]
 8004610:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8004614:	60fe      	str	r6, [r7, #12]
 8004616:	2001      	movs	r0, #1
 8004618:	109a      	asrs	r2, r3, #2
 800461a:	fa00 f202 	lsl.w	r2, r0, r2
 800461e:	6868      	ldr	r0, [r5, #4]
 8004620:	4282      	cmp	r2, r0
 8004622:	f200 80a1 	bhi.w	8004768 <_malloc_r+0x2a8>
 8004626:	4202      	tst	r2, r0
 8004628:	d106      	bne.n	8004638 <_malloc_r+0x178>
 800462a:	f023 0303 	bic.w	r3, r3, #3
 800462e:	0052      	lsls	r2, r2, #1
 8004630:	4202      	tst	r2, r0
 8004632:	f103 0304 	add.w	r3, r3, #4
 8004636:	d0fa      	beq.n	800462e <_malloc_r+0x16e>
 8004638:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 800463c:	46e0      	mov	r8, ip
 800463e:	469e      	mov	lr, r3
 8004640:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8004644:	4546      	cmp	r6, r8
 8004646:	d153      	bne.n	80046f0 <_malloc_r+0x230>
 8004648:	f10e 0e01 	add.w	lr, lr, #1
 800464c:	f01e 0f03 	tst.w	lr, #3
 8004650:	f108 0808 	add.w	r8, r8, #8
 8004654:	d1f4      	bne.n	8004640 <_malloc_r+0x180>
 8004656:	0798      	lsls	r0, r3, #30
 8004658:	d179      	bne.n	800474e <_malloc_r+0x28e>
 800465a:	686b      	ldr	r3, [r5, #4]
 800465c:	ea23 0302 	bic.w	r3, r3, r2
 8004660:	606b      	str	r3, [r5, #4]
 8004662:	6868      	ldr	r0, [r5, #4]
 8004664:	0052      	lsls	r2, r2, #1
 8004666:	4282      	cmp	r2, r0
 8004668:	d87e      	bhi.n	8004768 <_malloc_r+0x2a8>
 800466a:	2a00      	cmp	r2, #0
 800466c:	d07c      	beq.n	8004768 <_malloc_r+0x2a8>
 800466e:	4673      	mov	r3, lr
 8004670:	4202      	tst	r2, r0
 8004672:	d1e1      	bne.n	8004638 <_malloc_r+0x178>
 8004674:	3304      	adds	r3, #4
 8004676:	0052      	lsls	r2, r2, #1
 8004678:	e7fa      	b.n	8004670 <_malloc_r+0x1b0>
 800467a:	0a42      	lsrs	r2, r0, #9
 800467c:	2a04      	cmp	r2, #4
 800467e:	d815      	bhi.n	80046ac <_malloc_r+0x1ec>
 8004680:	0982      	lsrs	r2, r0, #6
 8004682:	3238      	adds	r2, #56	; 0x38
 8004684:	1c57      	adds	r7, r2, #1
 8004686:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 800468a:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 800468e:	45be      	cmp	lr, r7
 8004690:	d126      	bne.n	80046e0 <_malloc_r+0x220>
 8004692:	2001      	movs	r0, #1
 8004694:	1092      	asrs	r2, r2, #2
 8004696:	fa00 f202 	lsl.w	r2, r0, r2
 800469a:	6868      	ldr	r0, [r5, #4]
 800469c:	4310      	orrs	r0, r2
 800469e:	6068      	str	r0, [r5, #4]
 80046a0:	f8c6 e00c 	str.w	lr, [r6, #12]
 80046a4:	60b7      	str	r7, [r6, #8]
 80046a6:	f8ce 6008 	str.w	r6, [lr, #8]
 80046aa:	e7b3      	b.n	8004614 <_malloc_r+0x154>
 80046ac:	2a14      	cmp	r2, #20
 80046ae:	d801      	bhi.n	80046b4 <_malloc_r+0x1f4>
 80046b0:	325b      	adds	r2, #91	; 0x5b
 80046b2:	e7e7      	b.n	8004684 <_malloc_r+0x1c4>
 80046b4:	2a54      	cmp	r2, #84	; 0x54
 80046b6:	d802      	bhi.n	80046be <_malloc_r+0x1fe>
 80046b8:	0b02      	lsrs	r2, r0, #12
 80046ba:	326e      	adds	r2, #110	; 0x6e
 80046bc:	e7e2      	b.n	8004684 <_malloc_r+0x1c4>
 80046be:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80046c2:	d802      	bhi.n	80046ca <_malloc_r+0x20a>
 80046c4:	0bc2      	lsrs	r2, r0, #15
 80046c6:	3277      	adds	r2, #119	; 0x77
 80046c8:	e7dc      	b.n	8004684 <_malloc_r+0x1c4>
 80046ca:	f240 5754 	movw	r7, #1364	; 0x554
 80046ce:	42ba      	cmp	r2, r7
 80046d0:	bf9a      	itte	ls
 80046d2:	0c82      	lsrls	r2, r0, #18
 80046d4:	327c      	addls	r2, #124	; 0x7c
 80046d6:	227e      	movhi	r2, #126	; 0x7e
 80046d8:	e7d4      	b.n	8004684 <_malloc_r+0x1c4>
 80046da:	68bf      	ldr	r7, [r7, #8]
 80046dc:	45be      	cmp	lr, r7
 80046de:	d004      	beq.n	80046ea <_malloc_r+0x22a>
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	f022 0203 	bic.w	r2, r2, #3
 80046e6:	4290      	cmp	r0, r2
 80046e8:	d3f7      	bcc.n	80046da <_malloc_r+0x21a>
 80046ea:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 80046ee:	e7d7      	b.n	80046a0 <_malloc_r+0x1e0>
 80046f0:	6870      	ldr	r0, [r6, #4]
 80046f2:	68f7      	ldr	r7, [r6, #12]
 80046f4:	f020 0003 	bic.w	r0, r0, #3
 80046f8:	eba0 0a04 	sub.w	sl, r0, r4
 80046fc:	f1ba 0f0f 	cmp.w	sl, #15
 8004700:	dd10      	ble.n	8004724 <_malloc_r+0x264>
 8004702:	68b2      	ldr	r2, [r6, #8]
 8004704:	1933      	adds	r3, r6, r4
 8004706:	f044 0401 	orr.w	r4, r4, #1
 800470a:	6074      	str	r4, [r6, #4]
 800470c:	60d7      	str	r7, [r2, #12]
 800470e:	60ba      	str	r2, [r7, #8]
 8004710:	f04a 0201 	orr.w	r2, sl, #1
 8004714:	616b      	str	r3, [r5, #20]
 8004716:	612b      	str	r3, [r5, #16]
 8004718:	60d9      	str	r1, [r3, #12]
 800471a:	6099      	str	r1, [r3, #8]
 800471c:	605a      	str	r2, [r3, #4]
 800471e:	f846 a000 	str.w	sl, [r6, r0]
 8004722:	e6ff      	b.n	8004524 <_malloc_r+0x64>
 8004724:	f1ba 0f00 	cmp.w	sl, #0
 8004728:	db0f      	blt.n	800474a <_malloc_r+0x28a>
 800472a:	4430      	add	r0, r6
 800472c:	6843      	ldr	r3, [r0, #4]
 800472e:	f043 0301 	orr.w	r3, r3, #1
 8004732:	6043      	str	r3, [r0, #4]
 8004734:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8004738:	4648      	mov	r0, r9
 800473a:	60df      	str	r7, [r3, #12]
 800473c:	60bb      	str	r3, [r7, #8]
 800473e:	f000 f8df 	bl	8004900 <__malloc_unlock>
 8004742:	4630      	mov	r0, r6
 8004744:	b003      	add	sp, #12
 8004746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800474a:	463e      	mov	r6, r7
 800474c:	e77a      	b.n	8004644 <_malloc_r+0x184>
 800474e:	f85c 0908 	ldr.w	r0, [ip], #-8
 8004752:	4584      	cmp	ip, r0
 8004754:	f103 33ff 	add.w	r3, r3, #4294967295
 8004758:	f43f af7d 	beq.w	8004656 <_malloc_r+0x196>
 800475c:	e781      	b.n	8004662 <_malloc_r+0x1a2>
 800475e:	bf00      	nop
 8004760:	200000f8 	.word	0x200000f8
 8004764:	20000100 	.word	0x20000100
 8004768:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800476c:	f8db 6004 	ldr.w	r6, [fp, #4]
 8004770:	f026 0603 	bic.w	r6, r6, #3
 8004774:	42b4      	cmp	r4, r6
 8004776:	d803      	bhi.n	8004780 <_malloc_r+0x2c0>
 8004778:	1b33      	subs	r3, r6, r4
 800477a:	2b0f      	cmp	r3, #15
 800477c:	f300 8096 	bgt.w	80048ac <_malloc_r+0x3ec>
 8004780:	4a4f      	ldr	r2, [pc, #316]	; (80048c0 <_malloc_r+0x400>)
 8004782:	6817      	ldr	r7, [r2, #0]
 8004784:	4a4f      	ldr	r2, [pc, #316]	; (80048c4 <_malloc_r+0x404>)
 8004786:	6811      	ldr	r1, [r2, #0]
 8004788:	3710      	adds	r7, #16
 800478a:	3101      	adds	r1, #1
 800478c:	eb0b 0306 	add.w	r3, fp, r6
 8004790:	4427      	add	r7, r4
 8004792:	d005      	beq.n	80047a0 <_malloc_r+0x2e0>
 8004794:	494c      	ldr	r1, [pc, #304]	; (80048c8 <_malloc_r+0x408>)
 8004796:	3901      	subs	r1, #1
 8004798:	440f      	add	r7, r1
 800479a:	3101      	adds	r1, #1
 800479c:	4249      	negs	r1, r1
 800479e:	400f      	ands	r7, r1
 80047a0:	4639      	mov	r1, r7
 80047a2:	4648      	mov	r0, r9
 80047a4:	9201      	str	r2, [sp, #4]
 80047a6:	9300      	str	r3, [sp, #0]
 80047a8:	f000 fb80 	bl	8004eac <_sbrk_r>
 80047ac:	f1b0 3fff 	cmp.w	r0, #4294967295
 80047b0:	4680      	mov	r8, r0
 80047b2:	d056      	beq.n	8004862 <_malloc_r+0x3a2>
 80047b4:	9b00      	ldr	r3, [sp, #0]
 80047b6:	9a01      	ldr	r2, [sp, #4]
 80047b8:	4283      	cmp	r3, r0
 80047ba:	d901      	bls.n	80047c0 <_malloc_r+0x300>
 80047bc:	45ab      	cmp	fp, r5
 80047be:	d150      	bne.n	8004862 <_malloc_r+0x3a2>
 80047c0:	4842      	ldr	r0, [pc, #264]	; (80048cc <_malloc_r+0x40c>)
 80047c2:	6801      	ldr	r1, [r0, #0]
 80047c4:	4543      	cmp	r3, r8
 80047c6:	eb07 0e01 	add.w	lr, r7, r1
 80047ca:	f8c0 e000 	str.w	lr, [r0]
 80047ce:	4940      	ldr	r1, [pc, #256]	; (80048d0 <_malloc_r+0x410>)
 80047d0:	4682      	mov	sl, r0
 80047d2:	d113      	bne.n	80047fc <_malloc_r+0x33c>
 80047d4:	420b      	tst	r3, r1
 80047d6:	d111      	bne.n	80047fc <_malloc_r+0x33c>
 80047d8:	68ab      	ldr	r3, [r5, #8]
 80047da:	443e      	add	r6, r7
 80047dc:	f046 0601 	orr.w	r6, r6, #1
 80047e0:	605e      	str	r6, [r3, #4]
 80047e2:	4a3c      	ldr	r2, [pc, #240]	; (80048d4 <_malloc_r+0x414>)
 80047e4:	f8da 3000 	ldr.w	r3, [sl]
 80047e8:	6811      	ldr	r1, [r2, #0]
 80047ea:	428b      	cmp	r3, r1
 80047ec:	bf88      	it	hi
 80047ee:	6013      	strhi	r3, [r2, #0]
 80047f0:	4a39      	ldr	r2, [pc, #228]	; (80048d8 <_malloc_r+0x418>)
 80047f2:	6811      	ldr	r1, [r2, #0]
 80047f4:	428b      	cmp	r3, r1
 80047f6:	bf88      	it	hi
 80047f8:	6013      	strhi	r3, [r2, #0]
 80047fa:	e032      	b.n	8004862 <_malloc_r+0x3a2>
 80047fc:	6810      	ldr	r0, [r2, #0]
 80047fe:	3001      	adds	r0, #1
 8004800:	bf1b      	ittet	ne
 8004802:	eba8 0303 	subne.w	r3, r8, r3
 8004806:	4473      	addne	r3, lr
 8004808:	f8c2 8000 	streq.w	r8, [r2]
 800480c:	f8ca 3000 	strne.w	r3, [sl]
 8004810:	f018 0007 	ands.w	r0, r8, #7
 8004814:	bf1c      	itt	ne
 8004816:	f1c0 0008 	rsbne	r0, r0, #8
 800481a:	4480      	addne	r8, r0
 800481c:	4b2a      	ldr	r3, [pc, #168]	; (80048c8 <_malloc_r+0x408>)
 800481e:	4447      	add	r7, r8
 8004820:	4418      	add	r0, r3
 8004822:	400f      	ands	r7, r1
 8004824:	1bc7      	subs	r7, r0, r7
 8004826:	4639      	mov	r1, r7
 8004828:	4648      	mov	r0, r9
 800482a:	f000 fb3f 	bl	8004eac <_sbrk_r>
 800482e:	1c43      	adds	r3, r0, #1
 8004830:	bf08      	it	eq
 8004832:	4640      	moveq	r0, r8
 8004834:	f8da 3000 	ldr.w	r3, [sl]
 8004838:	f8c5 8008 	str.w	r8, [r5, #8]
 800483c:	bf08      	it	eq
 800483e:	2700      	moveq	r7, #0
 8004840:	eba0 0008 	sub.w	r0, r0, r8
 8004844:	443b      	add	r3, r7
 8004846:	4407      	add	r7, r0
 8004848:	f047 0701 	orr.w	r7, r7, #1
 800484c:	45ab      	cmp	fp, r5
 800484e:	f8ca 3000 	str.w	r3, [sl]
 8004852:	f8c8 7004 	str.w	r7, [r8, #4]
 8004856:	d0c4      	beq.n	80047e2 <_malloc_r+0x322>
 8004858:	2e0f      	cmp	r6, #15
 800485a:	d810      	bhi.n	800487e <_malloc_r+0x3be>
 800485c:	2301      	movs	r3, #1
 800485e:	f8c8 3004 	str.w	r3, [r8, #4]
 8004862:	68ab      	ldr	r3, [r5, #8]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	f022 0203 	bic.w	r2, r2, #3
 800486a:	4294      	cmp	r4, r2
 800486c:	eba2 0304 	sub.w	r3, r2, r4
 8004870:	d801      	bhi.n	8004876 <_malloc_r+0x3b6>
 8004872:	2b0f      	cmp	r3, #15
 8004874:	dc1a      	bgt.n	80048ac <_malloc_r+0x3ec>
 8004876:	4648      	mov	r0, r9
 8004878:	f000 f842 	bl	8004900 <__malloc_unlock>
 800487c:	e62d      	b.n	80044da <_malloc_r+0x1a>
 800487e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8004882:	3e0c      	subs	r6, #12
 8004884:	f026 0607 	bic.w	r6, r6, #7
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	4333      	orrs	r3, r6
 800488e:	f8cb 3004 	str.w	r3, [fp, #4]
 8004892:	eb0b 0306 	add.w	r3, fp, r6
 8004896:	2205      	movs	r2, #5
 8004898:	2e0f      	cmp	r6, #15
 800489a:	605a      	str	r2, [r3, #4]
 800489c:	609a      	str	r2, [r3, #8]
 800489e:	d9a0      	bls.n	80047e2 <_malloc_r+0x322>
 80048a0:	f10b 0108 	add.w	r1, fp, #8
 80048a4:	4648      	mov	r0, r9
 80048a6:	f000 fc0f 	bl	80050c8 <_free_r>
 80048aa:	e79a      	b.n	80047e2 <_malloc_r+0x322>
 80048ac:	68ae      	ldr	r6, [r5, #8]
 80048ae:	f044 0201 	orr.w	r2, r4, #1
 80048b2:	4434      	add	r4, r6
 80048b4:	f043 0301 	orr.w	r3, r3, #1
 80048b8:	6072      	str	r2, [r6, #4]
 80048ba:	60ac      	str	r4, [r5, #8]
 80048bc:	6063      	str	r3, [r4, #4]
 80048be:	e631      	b.n	8004524 <_malloc_r+0x64>
 80048c0:	200006c0 	.word	0x200006c0
 80048c4:	20000500 	.word	0x20000500
 80048c8:	00000080 	.word	0x00000080
 80048cc:	20000690 	.word	0x20000690
 80048d0:	0000007f 	.word	0x0000007f
 80048d4:	200006b8 	.word	0x200006b8
 80048d8:	200006bc 	.word	0x200006bc

080048dc <memcpy>:
 80048dc:	b510      	push	{r4, lr}
 80048de:	1e43      	subs	r3, r0, #1
 80048e0:	440a      	add	r2, r1
 80048e2:	4291      	cmp	r1, r2
 80048e4:	d100      	bne.n	80048e8 <memcpy+0xc>
 80048e6:	bd10      	pop	{r4, pc}
 80048e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048f0:	e7f7      	b.n	80048e2 <memcpy+0x6>
	...

080048f4 <__malloc_lock>:
 80048f4:	4801      	ldr	r0, [pc, #4]	; (80048fc <__malloc_lock+0x8>)
 80048f6:	f000 bca3 	b.w	8005240 <__retarget_lock_acquire_recursive>
 80048fa:	bf00      	nop
 80048fc:	200007c0 	.word	0x200007c0

08004900 <__malloc_unlock>:
 8004900:	4801      	ldr	r0, [pc, #4]	; (8004908 <__malloc_unlock+0x8>)
 8004902:	f000 bc9e 	b.w	8005242 <__retarget_lock_release_recursive>
 8004906:	bf00      	nop
 8004908:	200007c0 	.word	0x200007c0

0800490c <_Balloc>:
 800490c:	b570      	push	{r4, r5, r6, lr}
 800490e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004910:	4604      	mov	r4, r0
 8004912:	460e      	mov	r6, r1
 8004914:	b93d      	cbnz	r5, 8004926 <_Balloc+0x1a>
 8004916:	2010      	movs	r0, #16
 8004918:	f7ff fdca 	bl	80044b0 <malloc>
 800491c:	6260      	str	r0, [r4, #36]	; 0x24
 800491e:	6045      	str	r5, [r0, #4]
 8004920:	6085      	str	r5, [r0, #8]
 8004922:	6005      	str	r5, [r0, #0]
 8004924:	60c5      	str	r5, [r0, #12]
 8004926:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004928:	68eb      	ldr	r3, [r5, #12]
 800492a:	b183      	cbz	r3, 800494e <_Balloc+0x42>
 800492c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004934:	b9b8      	cbnz	r0, 8004966 <_Balloc+0x5a>
 8004936:	2101      	movs	r1, #1
 8004938:	fa01 f506 	lsl.w	r5, r1, r6
 800493c:	1d6a      	adds	r2, r5, #5
 800493e:	0092      	lsls	r2, r2, #2
 8004940:	4620      	mov	r0, r4
 8004942:	f000 fb3d 	bl	8004fc0 <_calloc_r>
 8004946:	b160      	cbz	r0, 8004962 <_Balloc+0x56>
 8004948:	6046      	str	r6, [r0, #4]
 800494a:	6085      	str	r5, [r0, #8]
 800494c:	e00e      	b.n	800496c <_Balloc+0x60>
 800494e:	2221      	movs	r2, #33	; 0x21
 8004950:	2104      	movs	r1, #4
 8004952:	4620      	mov	r0, r4
 8004954:	f000 fb34 	bl	8004fc0 <_calloc_r>
 8004958:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800495a:	60e8      	str	r0, [r5, #12]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1e4      	bne.n	800492c <_Balloc+0x20>
 8004962:	2000      	movs	r0, #0
 8004964:	bd70      	pop	{r4, r5, r6, pc}
 8004966:	6802      	ldr	r2, [r0, #0]
 8004968:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800496c:	2300      	movs	r3, #0
 800496e:	6103      	str	r3, [r0, #16]
 8004970:	60c3      	str	r3, [r0, #12]
 8004972:	bd70      	pop	{r4, r5, r6, pc}

08004974 <_Bfree>:
 8004974:	b570      	push	{r4, r5, r6, lr}
 8004976:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004978:	4606      	mov	r6, r0
 800497a:	460d      	mov	r5, r1
 800497c:	b93c      	cbnz	r4, 800498e <_Bfree+0x1a>
 800497e:	2010      	movs	r0, #16
 8004980:	f7ff fd96 	bl	80044b0 <malloc>
 8004984:	6270      	str	r0, [r6, #36]	; 0x24
 8004986:	6044      	str	r4, [r0, #4]
 8004988:	6084      	str	r4, [r0, #8]
 800498a:	6004      	str	r4, [r0, #0]
 800498c:	60c4      	str	r4, [r0, #12]
 800498e:	b13d      	cbz	r5, 80049a0 <_Bfree+0x2c>
 8004990:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004992:	686a      	ldr	r2, [r5, #4]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800499a:	6029      	str	r1, [r5, #0]
 800499c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80049a0:	bd70      	pop	{r4, r5, r6, pc}

080049a2 <__multadd>:
 80049a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049a6:	690d      	ldr	r5, [r1, #16]
 80049a8:	461f      	mov	r7, r3
 80049aa:	4606      	mov	r6, r0
 80049ac:	460c      	mov	r4, r1
 80049ae:	f101 0e14 	add.w	lr, r1, #20
 80049b2:	2300      	movs	r3, #0
 80049b4:	f8de 0000 	ldr.w	r0, [lr]
 80049b8:	b281      	uxth	r1, r0
 80049ba:	fb02 7101 	mla	r1, r2, r1, r7
 80049be:	0c0f      	lsrs	r7, r1, #16
 80049c0:	0c00      	lsrs	r0, r0, #16
 80049c2:	fb02 7000 	mla	r0, r2, r0, r7
 80049c6:	b289      	uxth	r1, r1
 80049c8:	3301      	adds	r3, #1
 80049ca:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80049ce:	429d      	cmp	r5, r3
 80049d0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80049d4:	f84e 1b04 	str.w	r1, [lr], #4
 80049d8:	dcec      	bgt.n	80049b4 <__multadd+0x12>
 80049da:	b1d7      	cbz	r7, 8004a12 <__multadd+0x70>
 80049dc:	68a3      	ldr	r3, [r4, #8]
 80049de:	429d      	cmp	r5, r3
 80049e0:	db12      	blt.n	8004a08 <__multadd+0x66>
 80049e2:	6861      	ldr	r1, [r4, #4]
 80049e4:	4630      	mov	r0, r6
 80049e6:	3101      	adds	r1, #1
 80049e8:	f7ff ff90 	bl	800490c <_Balloc>
 80049ec:	6922      	ldr	r2, [r4, #16]
 80049ee:	3202      	adds	r2, #2
 80049f0:	f104 010c 	add.w	r1, r4, #12
 80049f4:	4680      	mov	r8, r0
 80049f6:	0092      	lsls	r2, r2, #2
 80049f8:	300c      	adds	r0, #12
 80049fa:	f7ff ff6f 	bl	80048dc <memcpy>
 80049fe:	4621      	mov	r1, r4
 8004a00:	4630      	mov	r0, r6
 8004a02:	f7ff ffb7 	bl	8004974 <_Bfree>
 8004a06:	4644      	mov	r4, r8
 8004a08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004a0c:	3501      	adds	r5, #1
 8004a0e:	615f      	str	r7, [r3, #20]
 8004a10:	6125      	str	r5, [r4, #16]
 8004a12:	4620      	mov	r0, r4
 8004a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004a18 <__hi0bits>:
 8004a18:	0c02      	lsrs	r2, r0, #16
 8004a1a:	0412      	lsls	r2, r2, #16
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	b9b2      	cbnz	r2, 8004a4e <__hi0bits+0x36>
 8004a20:	0403      	lsls	r3, r0, #16
 8004a22:	2010      	movs	r0, #16
 8004a24:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004a28:	bf04      	itt	eq
 8004a2a:	021b      	lsleq	r3, r3, #8
 8004a2c:	3008      	addeq	r0, #8
 8004a2e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004a32:	bf04      	itt	eq
 8004a34:	011b      	lsleq	r3, r3, #4
 8004a36:	3004      	addeq	r0, #4
 8004a38:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004a3c:	bf04      	itt	eq
 8004a3e:	009b      	lsleq	r3, r3, #2
 8004a40:	3002      	addeq	r0, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	db06      	blt.n	8004a54 <__hi0bits+0x3c>
 8004a46:	005b      	lsls	r3, r3, #1
 8004a48:	d503      	bpl.n	8004a52 <__hi0bits+0x3a>
 8004a4a:	3001      	adds	r0, #1
 8004a4c:	4770      	bx	lr
 8004a4e:	2000      	movs	r0, #0
 8004a50:	e7e8      	b.n	8004a24 <__hi0bits+0xc>
 8004a52:	2020      	movs	r0, #32
 8004a54:	4770      	bx	lr

08004a56 <__lo0bits>:
 8004a56:	6803      	ldr	r3, [r0, #0]
 8004a58:	f013 0207 	ands.w	r2, r3, #7
 8004a5c:	4601      	mov	r1, r0
 8004a5e:	d00b      	beq.n	8004a78 <__lo0bits+0x22>
 8004a60:	07da      	lsls	r2, r3, #31
 8004a62:	d423      	bmi.n	8004aac <__lo0bits+0x56>
 8004a64:	0798      	lsls	r0, r3, #30
 8004a66:	bf49      	itett	mi
 8004a68:	085b      	lsrmi	r3, r3, #1
 8004a6a:	089b      	lsrpl	r3, r3, #2
 8004a6c:	2001      	movmi	r0, #1
 8004a6e:	600b      	strmi	r3, [r1, #0]
 8004a70:	bf5c      	itt	pl
 8004a72:	600b      	strpl	r3, [r1, #0]
 8004a74:	2002      	movpl	r0, #2
 8004a76:	4770      	bx	lr
 8004a78:	b298      	uxth	r0, r3
 8004a7a:	b9a8      	cbnz	r0, 8004aa8 <__lo0bits+0x52>
 8004a7c:	0c1b      	lsrs	r3, r3, #16
 8004a7e:	2010      	movs	r0, #16
 8004a80:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004a84:	bf04      	itt	eq
 8004a86:	0a1b      	lsreq	r3, r3, #8
 8004a88:	3008      	addeq	r0, #8
 8004a8a:	071a      	lsls	r2, r3, #28
 8004a8c:	bf04      	itt	eq
 8004a8e:	091b      	lsreq	r3, r3, #4
 8004a90:	3004      	addeq	r0, #4
 8004a92:	079a      	lsls	r2, r3, #30
 8004a94:	bf04      	itt	eq
 8004a96:	089b      	lsreq	r3, r3, #2
 8004a98:	3002      	addeq	r0, #2
 8004a9a:	07da      	lsls	r2, r3, #31
 8004a9c:	d402      	bmi.n	8004aa4 <__lo0bits+0x4e>
 8004a9e:	085b      	lsrs	r3, r3, #1
 8004aa0:	d006      	beq.n	8004ab0 <__lo0bits+0x5a>
 8004aa2:	3001      	adds	r0, #1
 8004aa4:	600b      	str	r3, [r1, #0]
 8004aa6:	4770      	bx	lr
 8004aa8:	4610      	mov	r0, r2
 8004aaa:	e7e9      	b.n	8004a80 <__lo0bits+0x2a>
 8004aac:	2000      	movs	r0, #0
 8004aae:	4770      	bx	lr
 8004ab0:	2020      	movs	r0, #32
 8004ab2:	4770      	bx	lr

08004ab4 <__i2b>:
 8004ab4:	b510      	push	{r4, lr}
 8004ab6:	460c      	mov	r4, r1
 8004ab8:	2101      	movs	r1, #1
 8004aba:	f7ff ff27 	bl	800490c <_Balloc>
 8004abe:	2201      	movs	r2, #1
 8004ac0:	6144      	str	r4, [r0, #20]
 8004ac2:	6102      	str	r2, [r0, #16]
 8004ac4:	bd10      	pop	{r4, pc}

08004ac6 <__multiply>:
 8004ac6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aca:	4614      	mov	r4, r2
 8004acc:	690a      	ldr	r2, [r1, #16]
 8004ace:	6923      	ldr	r3, [r4, #16]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	bfb8      	it	lt
 8004ad4:	460b      	movlt	r3, r1
 8004ad6:	4689      	mov	r9, r1
 8004ad8:	bfbc      	itt	lt
 8004ada:	46a1      	movlt	r9, r4
 8004adc:	461c      	movlt	r4, r3
 8004ade:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004ae2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004ae6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004aea:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004aee:	eb07 060a 	add.w	r6, r7, sl
 8004af2:	429e      	cmp	r6, r3
 8004af4:	bfc8      	it	gt
 8004af6:	3101      	addgt	r1, #1
 8004af8:	f7ff ff08 	bl	800490c <_Balloc>
 8004afc:	f100 0514 	add.w	r5, r0, #20
 8004b00:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004b04:	462b      	mov	r3, r5
 8004b06:	2200      	movs	r2, #0
 8004b08:	4543      	cmp	r3, r8
 8004b0a:	d316      	bcc.n	8004b3a <__multiply+0x74>
 8004b0c:	f104 0214 	add.w	r2, r4, #20
 8004b10:	f109 0114 	add.w	r1, r9, #20
 8004b14:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8004b18:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004b1c:	9301      	str	r3, [sp, #4]
 8004b1e:	9c01      	ldr	r4, [sp, #4]
 8004b20:	4294      	cmp	r4, r2
 8004b22:	4613      	mov	r3, r2
 8004b24:	d80c      	bhi.n	8004b40 <__multiply+0x7a>
 8004b26:	2e00      	cmp	r6, #0
 8004b28:	dd03      	ble.n	8004b32 <__multiply+0x6c>
 8004b2a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d054      	beq.n	8004bdc <__multiply+0x116>
 8004b32:	6106      	str	r6, [r0, #16]
 8004b34:	b003      	add	sp, #12
 8004b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b3a:	f843 2b04 	str.w	r2, [r3], #4
 8004b3e:	e7e3      	b.n	8004b08 <__multiply+0x42>
 8004b40:	f8b3 a000 	ldrh.w	sl, [r3]
 8004b44:	3204      	adds	r2, #4
 8004b46:	f1ba 0f00 	cmp.w	sl, #0
 8004b4a:	d020      	beq.n	8004b8e <__multiply+0xc8>
 8004b4c:	46ae      	mov	lr, r5
 8004b4e:	4689      	mov	r9, r1
 8004b50:	f04f 0c00 	mov.w	ip, #0
 8004b54:	f859 4b04 	ldr.w	r4, [r9], #4
 8004b58:	f8be b000 	ldrh.w	fp, [lr]
 8004b5c:	b2a3      	uxth	r3, r4
 8004b5e:	fb0a b303 	mla	r3, sl, r3, fp
 8004b62:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8004b66:	f8de 4000 	ldr.w	r4, [lr]
 8004b6a:	4463      	add	r3, ip
 8004b6c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004b70:	fb0a c40b 	mla	r4, sl, fp, ip
 8004b74:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004b7e:	454f      	cmp	r7, r9
 8004b80:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004b84:	f84e 3b04 	str.w	r3, [lr], #4
 8004b88:	d8e4      	bhi.n	8004b54 <__multiply+0x8e>
 8004b8a:	f8ce c000 	str.w	ip, [lr]
 8004b8e:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8004b92:	f1b9 0f00 	cmp.w	r9, #0
 8004b96:	d01f      	beq.n	8004bd8 <__multiply+0x112>
 8004b98:	682b      	ldr	r3, [r5, #0]
 8004b9a:	46ae      	mov	lr, r5
 8004b9c:	468c      	mov	ip, r1
 8004b9e:	f04f 0a00 	mov.w	sl, #0
 8004ba2:	f8bc 4000 	ldrh.w	r4, [ip]
 8004ba6:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004baa:	fb09 b404 	mla	r4, r9, r4, fp
 8004bae:	44a2      	add	sl, r4
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8004bb6:	f84e 3b04 	str.w	r3, [lr], #4
 8004bba:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004bbe:	f8be 4000 	ldrh.w	r4, [lr]
 8004bc2:	0c1b      	lsrs	r3, r3, #16
 8004bc4:	fb09 4303 	mla	r3, r9, r3, r4
 8004bc8:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8004bcc:	4567      	cmp	r7, ip
 8004bce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004bd2:	d8e6      	bhi.n	8004ba2 <__multiply+0xdc>
 8004bd4:	f8ce 3000 	str.w	r3, [lr]
 8004bd8:	3504      	adds	r5, #4
 8004bda:	e7a0      	b.n	8004b1e <__multiply+0x58>
 8004bdc:	3e01      	subs	r6, #1
 8004bde:	e7a2      	b.n	8004b26 <__multiply+0x60>

08004be0 <__pow5mult>:
 8004be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004be4:	4615      	mov	r5, r2
 8004be6:	f012 0203 	ands.w	r2, r2, #3
 8004bea:	4606      	mov	r6, r0
 8004bec:	460f      	mov	r7, r1
 8004bee:	d007      	beq.n	8004c00 <__pow5mult+0x20>
 8004bf0:	3a01      	subs	r2, #1
 8004bf2:	4c21      	ldr	r4, [pc, #132]	; (8004c78 <__pow5mult+0x98>)
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004bfa:	f7ff fed2 	bl	80049a2 <__multadd>
 8004bfe:	4607      	mov	r7, r0
 8004c00:	10ad      	asrs	r5, r5, #2
 8004c02:	d035      	beq.n	8004c70 <__pow5mult+0x90>
 8004c04:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004c06:	b93c      	cbnz	r4, 8004c18 <__pow5mult+0x38>
 8004c08:	2010      	movs	r0, #16
 8004c0a:	f7ff fc51 	bl	80044b0 <malloc>
 8004c0e:	6270      	str	r0, [r6, #36]	; 0x24
 8004c10:	6044      	str	r4, [r0, #4]
 8004c12:	6084      	str	r4, [r0, #8]
 8004c14:	6004      	str	r4, [r0, #0]
 8004c16:	60c4      	str	r4, [r0, #12]
 8004c18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004c1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004c20:	b94c      	cbnz	r4, 8004c36 <__pow5mult+0x56>
 8004c22:	f240 2171 	movw	r1, #625	; 0x271
 8004c26:	4630      	mov	r0, r6
 8004c28:	f7ff ff44 	bl	8004ab4 <__i2b>
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	f8c8 0008 	str.w	r0, [r8, #8]
 8004c32:	4604      	mov	r4, r0
 8004c34:	6003      	str	r3, [r0, #0]
 8004c36:	f04f 0800 	mov.w	r8, #0
 8004c3a:	07eb      	lsls	r3, r5, #31
 8004c3c:	d50a      	bpl.n	8004c54 <__pow5mult+0x74>
 8004c3e:	4639      	mov	r1, r7
 8004c40:	4622      	mov	r2, r4
 8004c42:	4630      	mov	r0, r6
 8004c44:	f7ff ff3f 	bl	8004ac6 <__multiply>
 8004c48:	4639      	mov	r1, r7
 8004c4a:	4681      	mov	r9, r0
 8004c4c:	4630      	mov	r0, r6
 8004c4e:	f7ff fe91 	bl	8004974 <_Bfree>
 8004c52:	464f      	mov	r7, r9
 8004c54:	106d      	asrs	r5, r5, #1
 8004c56:	d00b      	beq.n	8004c70 <__pow5mult+0x90>
 8004c58:	6820      	ldr	r0, [r4, #0]
 8004c5a:	b938      	cbnz	r0, 8004c6c <__pow5mult+0x8c>
 8004c5c:	4622      	mov	r2, r4
 8004c5e:	4621      	mov	r1, r4
 8004c60:	4630      	mov	r0, r6
 8004c62:	f7ff ff30 	bl	8004ac6 <__multiply>
 8004c66:	6020      	str	r0, [r4, #0]
 8004c68:	f8c0 8000 	str.w	r8, [r0]
 8004c6c:	4604      	mov	r4, r0
 8004c6e:	e7e4      	b.n	8004c3a <__pow5mult+0x5a>
 8004c70:	4638      	mov	r0, r7
 8004c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c76:	bf00      	nop
 8004c78:	080057c8 	.word	0x080057c8

08004c7c <__lshift>:
 8004c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c80:	460c      	mov	r4, r1
 8004c82:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004c86:	6923      	ldr	r3, [r4, #16]
 8004c88:	6849      	ldr	r1, [r1, #4]
 8004c8a:	eb0a 0903 	add.w	r9, sl, r3
 8004c8e:	68a3      	ldr	r3, [r4, #8]
 8004c90:	4607      	mov	r7, r0
 8004c92:	4616      	mov	r6, r2
 8004c94:	f109 0501 	add.w	r5, r9, #1
 8004c98:	42ab      	cmp	r3, r5
 8004c9a:	db31      	blt.n	8004d00 <__lshift+0x84>
 8004c9c:	4638      	mov	r0, r7
 8004c9e:	f7ff fe35 	bl	800490c <_Balloc>
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	4680      	mov	r8, r0
 8004ca6:	f100 0314 	add.w	r3, r0, #20
 8004caa:	4611      	mov	r1, r2
 8004cac:	4552      	cmp	r2, sl
 8004cae:	db2a      	blt.n	8004d06 <__lshift+0x8a>
 8004cb0:	6920      	ldr	r0, [r4, #16]
 8004cb2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004cb6:	f104 0114 	add.w	r1, r4, #20
 8004cba:	f016 021f 	ands.w	r2, r6, #31
 8004cbe:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8004cc2:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8004cc6:	d022      	beq.n	8004d0e <__lshift+0x92>
 8004cc8:	f1c2 0c20 	rsb	ip, r2, #32
 8004ccc:	2000      	movs	r0, #0
 8004cce:	680e      	ldr	r6, [r1, #0]
 8004cd0:	4096      	lsls	r6, r2
 8004cd2:	4330      	orrs	r0, r6
 8004cd4:	f843 0b04 	str.w	r0, [r3], #4
 8004cd8:	f851 0b04 	ldr.w	r0, [r1], #4
 8004cdc:	458e      	cmp	lr, r1
 8004cde:	fa20 f00c 	lsr.w	r0, r0, ip
 8004ce2:	d8f4      	bhi.n	8004cce <__lshift+0x52>
 8004ce4:	6018      	str	r0, [r3, #0]
 8004ce6:	b108      	cbz	r0, 8004cec <__lshift+0x70>
 8004ce8:	f109 0502 	add.w	r5, r9, #2
 8004cec:	3d01      	subs	r5, #1
 8004cee:	4638      	mov	r0, r7
 8004cf0:	f8c8 5010 	str.w	r5, [r8, #16]
 8004cf4:	4621      	mov	r1, r4
 8004cf6:	f7ff fe3d 	bl	8004974 <_Bfree>
 8004cfa:	4640      	mov	r0, r8
 8004cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d00:	3101      	adds	r1, #1
 8004d02:	005b      	lsls	r3, r3, #1
 8004d04:	e7c8      	b.n	8004c98 <__lshift+0x1c>
 8004d06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004d0a:	3201      	adds	r2, #1
 8004d0c:	e7ce      	b.n	8004cac <__lshift+0x30>
 8004d0e:	3b04      	subs	r3, #4
 8004d10:	f851 2b04 	ldr.w	r2, [r1], #4
 8004d14:	f843 2f04 	str.w	r2, [r3, #4]!
 8004d18:	458e      	cmp	lr, r1
 8004d1a:	d8f9      	bhi.n	8004d10 <__lshift+0x94>
 8004d1c:	e7e6      	b.n	8004cec <__lshift+0x70>

08004d1e <__mcmp>:
 8004d1e:	6903      	ldr	r3, [r0, #16]
 8004d20:	690a      	ldr	r2, [r1, #16]
 8004d22:	1a9b      	subs	r3, r3, r2
 8004d24:	b530      	push	{r4, r5, lr}
 8004d26:	d10c      	bne.n	8004d42 <__mcmp+0x24>
 8004d28:	0092      	lsls	r2, r2, #2
 8004d2a:	3014      	adds	r0, #20
 8004d2c:	3114      	adds	r1, #20
 8004d2e:	1884      	adds	r4, r0, r2
 8004d30:	4411      	add	r1, r2
 8004d32:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004d36:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004d3a:	4295      	cmp	r5, r2
 8004d3c:	d003      	beq.n	8004d46 <__mcmp+0x28>
 8004d3e:	d305      	bcc.n	8004d4c <__mcmp+0x2e>
 8004d40:	2301      	movs	r3, #1
 8004d42:	4618      	mov	r0, r3
 8004d44:	bd30      	pop	{r4, r5, pc}
 8004d46:	42a0      	cmp	r0, r4
 8004d48:	d3f3      	bcc.n	8004d32 <__mcmp+0x14>
 8004d4a:	e7fa      	b.n	8004d42 <__mcmp+0x24>
 8004d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d50:	e7f7      	b.n	8004d42 <__mcmp+0x24>

08004d52 <__mdiff>:
 8004d52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d56:	460d      	mov	r5, r1
 8004d58:	4607      	mov	r7, r0
 8004d5a:	4611      	mov	r1, r2
 8004d5c:	4628      	mov	r0, r5
 8004d5e:	4614      	mov	r4, r2
 8004d60:	f7ff ffdd 	bl	8004d1e <__mcmp>
 8004d64:	1e06      	subs	r6, r0, #0
 8004d66:	d108      	bne.n	8004d7a <__mdiff+0x28>
 8004d68:	4631      	mov	r1, r6
 8004d6a:	4638      	mov	r0, r7
 8004d6c:	f7ff fdce 	bl	800490c <_Balloc>
 8004d70:	2301      	movs	r3, #1
 8004d72:	6103      	str	r3, [r0, #16]
 8004d74:	6146      	str	r6, [r0, #20]
 8004d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d7a:	bfa4      	itt	ge
 8004d7c:	4623      	movge	r3, r4
 8004d7e:	462c      	movge	r4, r5
 8004d80:	4638      	mov	r0, r7
 8004d82:	6861      	ldr	r1, [r4, #4]
 8004d84:	bfa6      	itte	ge
 8004d86:	461d      	movge	r5, r3
 8004d88:	2600      	movge	r6, #0
 8004d8a:	2601      	movlt	r6, #1
 8004d8c:	f7ff fdbe 	bl	800490c <_Balloc>
 8004d90:	692b      	ldr	r3, [r5, #16]
 8004d92:	60c6      	str	r6, [r0, #12]
 8004d94:	6926      	ldr	r6, [r4, #16]
 8004d96:	f105 0914 	add.w	r9, r5, #20
 8004d9a:	f104 0214 	add.w	r2, r4, #20
 8004d9e:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004da2:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004da6:	f100 0514 	add.w	r5, r0, #20
 8004daa:	f04f 0c00 	mov.w	ip, #0
 8004dae:	f852 ab04 	ldr.w	sl, [r2], #4
 8004db2:	f859 4b04 	ldr.w	r4, [r9], #4
 8004db6:	fa1c f18a 	uxtah	r1, ip, sl
 8004dba:	b2a3      	uxth	r3, r4
 8004dbc:	1ac9      	subs	r1, r1, r3
 8004dbe:	0c23      	lsrs	r3, r4, #16
 8004dc0:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8004dc4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004dc8:	b289      	uxth	r1, r1
 8004dca:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004dce:	45c8      	cmp	r8, r9
 8004dd0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004dd4:	4696      	mov	lr, r2
 8004dd6:	f845 3b04 	str.w	r3, [r5], #4
 8004dda:	d8e8      	bhi.n	8004dae <__mdiff+0x5c>
 8004ddc:	45be      	cmp	lr, r7
 8004dde:	d305      	bcc.n	8004dec <__mdiff+0x9a>
 8004de0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8004de4:	b18b      	cbz	r3, 8004e0a <__mdiff+0xb8>
 8004de6:	6106      	str	r6, [r0, #16]
 8004de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dec:	f85e 1b04 	ldr.w	r1, [lr], #4
 8004df0:	fa1c f381 	uxtah	r3, ip, r1
 8004df4:	141a      	asrs	r2, r3, #16
 8004df6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e00:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004e04:	f845 3b04 	str.w	r3, [r5], #4
 8004e08:	e7e8      	b.n	8004ddc <__mdiff+0x8a>
 8004e0a:	3e01      	subs	r6, #1
 8004e0c:	e7e8      	b.n	8004de0 <__mdiff+0x8e>

08004e0e <__d2b>:
 8004e0e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004e12:	460e      	mov	r6, r1
 8004e14:	2101      	movs	r1, #1
 8004e16:	ec59 8b10 	vmov	r8, r9, d0
 8004e1a:	4615      	mov	r5, r2
 8004e1c:	f7ff fd76 	bl	800490c <_Balloc>
 8004e20:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004e24:	4607      	mov	r7, r0
 8004e26:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004e2a:	bb34      	cbnz	r4, 8004e7a <__d2b+0x6c>
 8004e2c:	9301      	str	r3, [sp, #4]
 8004e2e:	f1b8 0f00 	cmp.w	r8, #0
 8004e32:	d027      	beq.n	8004e84 <__d2b+0x76>
 8004e34:	a802      	add	r0, sp, #8
 8004e36:	f840 8d08 	str.w	r8, [r0, #-8]!
 8004e3a:	f7ff fe0c 	bl	8004a56 <__lo0bits>
 8004e3e:	9900      	ldr	r1, [sp, #0]
 8004e40:	b1f0      	cbz	r0, 8004e80 <__d2b+0x72>
 8004e42:	9a01      	ldr	r2, [sp, #4]
 8004e44:	f1c0 0320 	rsb	r3, r0, #32
 8004e48:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4c:	430b      	orrs	r3, r1
 8004e4e:	40c2      	lsrs	r2, r0
 8004e50:	617b      	str	r3, [r7, #20]
 8004e52:	9201      	str	r2, [sp, #4]
 8004e54:	9b01      	ldr	r3, [sp, #4]
 8004e56:	61bb      	str	r3, [r7, #24]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	bf14      	ite	ne
 8004e5c:	2102      	movne	r1, #2
 8004e5e:	2101      	moveq	r1, #1
 8004e60:	6139      	str	r1, [r7, #16]
 8004e62:	b1c4      	cbz	r4, 8004e96 <__d2b+0x88>
 8004e64:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004e68:	4404      	add	r4, r0
 8004e6a:	6034      	str	r4, [r6, #0]
 8004e6c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004e70:	6028      	str	r0, [r5, #0]
 8004e72:	4638      	mov	r0, r7
 8004e74:	b003      	add	sp, #12
 8004e76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e7e:	e7d5      	b.n	8004e2c <__d2b+0x1e>
 8004e80:	6179      	str	r1, [r7, #20]
 8004e82:	e7e7      	b.n	8004e54 <__d2b+0x46>
 8004e84:	a801      	add	r0, sp, #4
 8004e86:	f7ff fde6 	bl	8004a56 <__lo0bits>
 8004e8a:	9b01      	ldr	r3, [sp, #4]
 8004e8c:	617b      	str	r3, [r7, #20]
 8004e8e:	2101      	movs	r1, #1
 8004e90:	6139      	str	r1, [r7, #16]
 8004e92:	3020      	adds	r0, #32
 8004e94:	e7e5      	b.n	8004e62 <__d2b+0x54>
 8004e96:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004e9a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004e9e:	6030      	str	r0, [r6, #0]
 8004ea0:	6918      	ldr	r0, [r3, #16]
 8004ea2:	f7ff fdb9 	bl	8004a18 <__hi0bits>
 8004ea6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004eaa:	e7e1      	b.n	8004e70 <__d2b+0x62>

08004eac <_sbrk_r>:
 8004eac:	b538      	push	{r3, r4, r5, lr}
 8004eae:	4c06      	ldr	r4, [pc, #24]	; (8004ec8 <_sbrk_r+0x1c>)
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	4605      	mov	r5, r0
 8004eb4:	4608      	mov	r0, r1
 8004eb6:	6023      	str	r3, [r4, #0]
 8004eb8:	f000 fb86 	bl	80055c8 <_sbrk>
 8004ebc:	1c43      	adds	r3, r0, #1
 8004ebe:	d102      	bne.n	8004ec6 <_sbrk_r+0x1a>
 8004ec0:	6823      	ldr	r3, [r4, #0]
 8004ec2:	b103      	cbz	r3, 8004ec6 <_sbrk_r+0x1a>
 8004ec4:	602b      	str	r3, [r5, #0]
 8004ec6:	bd38      	pop	{r3, r4, r5, pc}
 8004ec8:	200007c8 	.word	0x200007c8

08004ecc <__ssprint_r>:
 8004ecc:	6893      	ldr	r3, [r2, #8]
 8004ece:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ed2:	4681      	mov	r9, r0
 8004ed4:	460c      	mov	r4, r1
 8004ed6:	4617      	mov	r7, r2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d060      	beq.n	8004f9e <__ssprint_r+0xd2>
 8004edc:	f04f 0b00 	mov.w	fp, #0
 8004ee0:	f8d2 a000 	ldr.w	sl, [r2]
 8004ee4:	465e      	mov	r6, fp
 8004ee6:	b356      	cbz	r6, 8004f3e <__ssprint_r+0x72>
 8004ee8:	68a3      	ldr	r3, [r4, #8]
 8004eea:	429e      	cmp	r6, r3
 8004eec:	d344      	bcc.n	8004f78 <__ssprint_r+0xac>
 8004eee:	89a2      	ldrh	r2, [r4, #12]
 8004ef0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ef4:	d03e      	beq.n	8004f74 <__ssprint_r+0xa8>
 8004ef6:	6825      	ldr	r5, [r4, #0]
 8004ef8:	6921      	ldr	r1, [r4, #16]
 8004efa:	eba5 0801 	sub.w	r8, r5, r1
 8004efe:	6965      	ldr	r5, [r4, #20]
 8004f00:	2302      	movs	r3, #2
 8004f02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f06:	fb95 f5f3 	sdiv	r5, r5, r3
 8004f0a:	f108 0301 	add.w	r3, r8, #1
 8004f0e:	4433      	add	r3, r6
 8004f10:	429d      	cmp	r5, r3
 8004f12:	bf38      	it	cc
 8004f14:	461d      	movcc	r5, r3
 8004f16:	0553      	lsls	r3, r2, #21
 8004f18:	d546      	bpl.n	8004fa8 <__ssprint_r+0xdc>
 8004f1a:	4629      	mov	r1, r5
 8004f1c:	4648      	mov	r0, r9
 8004f1e:	f7ff facf 	bl	80044c0 <_malloc_r>
 8004f22:	b998      	cbnz	r0, 8004f4c <__ssprint_r+0x80>
 8004f24:	230c      	movs	r3, #12
 8004f26:	f8c9 3000 	str.w	r3, [r9]
 8004f2a:	89a3      	ldrh	r3, [r4, #12]
 8004f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f30:	81a3      	strh	r3, [r4, #12]
 8004f32:	2300      	movs	r3, #0
 8004f34:	60bb      	str	r3, [r7, #8]
 8004f36:	607b      	str	r3, [r7, #4]
 8004f38:	f04f 30ff 	mov.w	r0, #4294967295
 8004f3c:	e031      	b.n	8004fa2 <__ssprint_r+0xd6>
 8004f3e:	f8da b000 	ldr.w	fp, [sl]
 8004f42:	f8da 6004 	ldr.w	r6, [sl, #4]
 8004f46:	f10a 0a08 	add.w	sl, sl, #8
 8004f4a:	e7cc      	b.n	8004ee6 <__ssprint_r+0x1a>
 8004f4c:	4642      	mov	r2, r8
 8004f4e:	6921      	ldr	r1, [r4, #16]
 8004f50:	9001      	str	r0, [sp, #4]
 8004f52:	f7ff fcc3 	bl	80048dc <memcpy>
 8004f56:	89a2      	ldrh	r2, [r4, #12]
 8004f58:	9b01      	ldr	r3, [sp, #4]
 8004f5a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8004f5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f62:	81a2      	strh	r2, [r4, #12]
 8004f64:	6123      	str	r3, [r4, #16]
 8004f66:	6165      	str	r5, [r4, #20]
 8004f68:	4443      	add	r3, r8
 8004f6a:	eba5 0508 	sub.w	r5, r5, r8
 8004f6e:	6023      	str	r3, [r4, #0]
 8004f70:	60a5      	str	r5, [r4, #8]
 8004f72:	4633      	mov	r3, r6
 8004f74:	429e      	cmp	r6, r3
 8004f76:	d200      	bcs.n	8004f7a <__ssprint_r+0xae>
 8004f78:	4633      	mov	r3, r6
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	4659      	mov	r1, fp
 8004f7e:	6820      	ldr	r0, [r4, #0]
 8004f80:	9301      	str	r3, [sp, #4]
 8004f82:	f000 f971 	bl	8005268 <memmove>
 8004f86:	68a2      	ldr	r2, [r4, #8]
 8004f88:	9b01      	ldr	r3, [sp, #4]
 8004f8a:	1ad2      	subs	r2, r2, r3
 8004f8c:	60a2      	str	r2, [r4, #8]
 8004f8e:	6822      	ldr	r2, [r4, #0]
 8004f90:	4413      	add	r3, r2
 8004f92:	6023      	str	r3, [r4, #0]
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	1b9e      	subs	r6, r3, r6
 8004f98:	60be      	str	r6, [r7, #8]
 8004f9a:	2e00      	cmp	r6, #0
 8004f9c:	d1cf      	bne.n	8004f3e <__ssprint_r+0x72>
 8004f9e:	2000      	movs	r0, #0
 8004fa0:	6078      	str	r0, [r7, #4]
 8004fa2:	b003      	add	sp, #12
 8004fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fa8:	462a      	mov	r2, r5
 8004faa:	4648      	mov	r0, r9
 8004fac:	f000 f97e 	bl	80052ac <_realloc_r>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2800      	cmp	r0, #0
 8004fb4:	d1d6      	bne.n	8004f64 <__ssprint_r+0x98>
 8004fb6:	6921      	ldr	r1, [r4, #16]
 8004fb8:	4648      	mov	r0, r9
 8004fba:	f000 f885 	bl	80050c8 <_free_r>
 8004fbe:	e7b1      	b.n	8004f24 <__ssprint_r+0x58>

08004fc0 <_calloc_r>:
 8004fc0:	b510      	push	{r4, lr}
 8004fc2:	4351      	muls	r1, r2
 8004fc4:	f7ff fa7c 	bl	80044c0 <_malloc_r>
 8004fc8:	4604      	mov	r4, r0
 8004fca:	b198      	cbz	r0, 8004ff4 <_calloc_r+0x34>
 8004fcc:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8004fd0:	f022 0203 	bic.w	r2, r2, #3
 8004fd4:	3a04      	subs	r2, #4
 8004fd6:	2a24      	cmp	r2, #36	; 0x24
 8004fd8:	d81b      	bhi.n	8005012 <_calloc_r+0x52>
 8004fda:	2a13      	cmp	r2, #19
 8004fdc:	d917      	bls.n	800500e <_calloc_r+0x4e>
 8004fde:	2100      	movs	r1, #0
 8004fe0:	2a1b      	cmp	r2, #27
 8004fe2:	6001      	str	r1, [r0, #0]
 8004fe4:	6041      	str	r1, [r0, #4]
 8004fe6:	d807      	bhi.n	8004ff8 <_calloc_r+0x38>
 8004fe8:	f100 0308 	add.w	r3, r0, #8
 8004fec:	2200      	movs	r2, #0
 8004fee:	601a      	str	r2, [r3, #0]
 8004ff0:	605a      	str	r2, [r3, #4]
 8004ff2:	609a      	str	r2, [r3, #8]
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	bd10      	pop	{r4, pc}
 8004ff8:	2a24      	cmp	r2, #36	; 0x24
 8004ffa:	6081      	str	r1, [r0, #8]
 8004ffc:	60c1      	str	r1, [r0, #12]
 8004ffe:	bf11      	iteee	ne
 8005000:	f100 0310 	addne.w	r3, r0, #16
 8005004:	6101      	streq	r1, [r0, #16]
 8005006:	f100 0318 	addeq.w	r3, r0, #24
 800500a:	6141      	streq	r1, [r0, #20]
 800500c:	e7ee      	b.n	8004fec <_calloc_r+0x2c>
 800500e:	4603      	mov	r3, r0
 8005010:	e7ec      	b.n	8004fec <_calloc_r+0x2c>
 8005012:	2100      	movs	r1, #0
 8005014:	f000 f942 	bl	800529c <memset>
 8005018:	e7ec      	b.n	8004ff4 <_calloc_r+0x34>
	...

0800501c <_malloc_trim_r>:
 800501c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005020:	4f25      	ldr	r7, [pc, #148]	; (80050b8 <_malloc_trim_r+0x9c>)
 8005022:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80050c4 <_malloc_trim_r+0xa8>
 8005026:	4689      	mov	r9, r1
 8005028:	4606      	mov	r6, r0
 800502a:	f7ff fc63 	bl	80048f4 <__malloc_lock>
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	685d      	ldr	r5, [r3, #4]
 8005032:	f1a8 0411 	sub.w	r4, r8, #17
 8005036:	f025 0503 	bic.w	r5, r5, #3
 800503a:	eba4 0409 	sub.w	r4, r4, r9
 800503e:	442c      	add	r4, r5
 8005040:	fbb4 f4f8 	udiv	r4, r4, r8
 8005044:	3c01      	subs	r4, #1
 8005046:	fb08 f404 	mul.w	r4, r8, r4
 800504a:	4544      	cmp	r4, r8
 800504c:	da05      	bge.n	800505a <_malloc_trim_r+0x3e>
 800504e:	4630      	mov	r0, r6
 8005050:	f7ff fc56 	bl	8004900 <__malloc_unlock>
 8005054:	2000      	movs	r0, #0
 8005056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800505a:	2100      	movs	r1, #0
 800505c:	4630      	mov	r0, r6
 800505e:	f7ff ff25 	bl	8004eac <_sbrk_r>
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	442b      	add	r3, r5
 8005066:	4298      	cmp	r0, r3
 8005068:	d1f1      	bne.n	800504e <_malloc_trim_r+0x32>
 800506a:	4261      	negs	r1, r4
 800506c:	4630      	mov	r0, r6
 800506e:	f7ff ff1d 	bl	8004eac <_sbrk_r>
 8005072:	3001      	adds	r0, #1
 8005074:	d110      	bne.n	8005098 <_malloc_trim_r+0x7c>
 8005076:	2100      	movs	r1, #0
 8005078:	4630      	mov	r0, r6
 800507a:	f7ff ff17 	bl	8004eac <_sbrk_r>
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	1a83      	subs	r3, r0, r2
 8005082:	2b0f      	cmp	r3, #15
 8005084:	dde3      	ble.n	800504e <_malloc_trim_r+0x32>
 8005086:	490d      	ldr	r1, [pc, #52]	; (80050bc <_malloc_trim_r+0xa0>)
 8005088:	6809      	ldr	r1, [r1, #0]
 800508a:	1a40      	subs	r0, r0, r1
 800508c:	490c      	ldr	r1, [pc, #48]	; (80050c0 <_malloc_trim_r+0xa4>)
 800508e:	f043 0301 	orr.w	r3, r3, #1
 8005092:	6008      	str	r0, [r1, #0]
 8005094:	6053      	str	r3, [r2, #4]
 8005096:	e7da      	b.n	800504e <_malloc_trim_r+0x32>
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	4a09      	ldr	r2, [pc, #36]	; (80050c0 <_malloc_trim_r+0xa4>)
 800509c:	1b2d      	subs	r5, r5, r4
 800509e:	f045 0501 	orr.w	r5, r5, #1
 80050a2:	605d      	str	r5, [r3, #4]
 80050a4:	6813      	ldr	r3, [r2, #0]
 80050a6:	4630      	mov	r0, r6
 80050a8:	1b1c      	subs	r4, r3, r4
 80050aa:	6014      	str	r4, [r2, #0]
 80050ac:	f7ff fc28 	bl	8004900 <__malloc_unlock>
 80050b0:	2001      	movs	r0, #1
 80050b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050b6:	bf00      	nop
 80050b8:	200000f8 	.word	0x200000f8
 80050bc:	20000500 	.word	0x20000500
 80050c0:	20000690 	.word	0x20000690
 80050c4:	00000080 	.word	0x00000080

080050c8 <_free_r>:
 80050c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050cc:	4604      	mov	r4, r0
 80050ce:	4688      	mov	r8, r1
 80050d0:	2900      	cmp	r1, #0
 80050d2:	f000 80ab 	beq.w	800522c <_free_r+0x164>
 80050d6:	f7ff fc0d 	bl	80048f4 <__malloc_lock>
 80050da:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80050de:	4d54      	ldr	r5, [pc, #336]	; (8005230 <_free_r+0x168>)
 80050e0:	f022 0001 	bic.w	r0, r2, #1
 80050e4:	f1a8 0308 	sub.w	r3, r8, #8
 80050e8:	181f      	adds	r7, r3, r0
 80050ea:	68a9      	ldr	r1, [r5, #8]
 80050ec:	687e      	ldr	r6, [r7, #4]
 80050ee:	428f      	cmp	r7, r1
 80050f0:	f026 0603 	bic.w	r6, r6, #3
 80050f4:	f002 0201 	and.w	r2, r2, #1
 80050f8:	d11b      	bne.n	8005132 <_free_r+0x6a>
 80050fa:	4430      	add	r0, r6
 80050fc:	b93a      	cbnz	r2, 800510e <_free_r+0x46>
 80050fe:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8005102:	1a9b      	subs	r3, r3, r2
 8005104:	4410      	add	r0, r2
 8005106:	6899      	ldr	r1, [r3, #8]
 8005108:	68da      	ldr	r2, [r3, #12]
 800510a:	60ca      	str	r2, [r1, #12]
 800510c:	6091      	str	r1, [r2, #8]
 800510e:	f040 0201 	orr.w	r2, r0, #1
 8005112:	605a      	str	r2, [r3, #4]
 8005114:	60ab      	str	r3, [r5, #8]
 8005116:	4b47      	ldr	r3, [pc, #284]	; (8005234 <_free_r+0x16c>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4298      	cmp	r0, r3
 800511c:	d304      	bcc.n	8005128 <_free_r+0x60>
 800511e:	4b46      	ldr	r3, [pc, #280]	; (8005238 <_free_r+0x170>)
 8005120:	4620      	mov	r0, r4
 8005122:	6819      	ldr	r1, [r3, #0]
 8005124:	f7ff ff7a 	bl	800501c <_malloc_trim_r>
 8005128:	4620      	mov	r0, r4
 800512a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800512e:	f7ff bbe7 	b.w	8004900 <__malloc_unlock>
 8005132:	607e      	str	r6, [r7, #4]
 8005134:	2a00      	cmp	r2, #0
 8005136:	d139      	bne.n	80051ac <_free_r+0xe4>
 8005138:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800513c:	1a5b      	subs	r3, r3, r1
 800513e:	4408      	add	r0, r1
 8005140:	6899      	ldr	r1, [r3, #8]
 8005142:	f105 0e08 	add.w	lr, r5, #8
 8005146:	4571      	cmp	r1, lr
 8005148:	d032      	beq.n	80051b0 <_free_r+0xe8>
 800514a:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800514e:	f8c1 e00c 	str.w	lr, [r1, #12]
 8005152:	f8ce 1008 	str.w	r1, [lr, #8]
 8005156:	19b9      	adds	r1, r7, r6
 8005158:	6849      	ldr	r1, [r1, #4]
 800515a:	07c9      	lsls	r1, r1, #31
 800515c:	d40a      	bmi.n	8005174 <_free_r+0xac>
 800515e:	4430      	add	r0, r6
 8005160:	68b9      	ldr	r1, [r7, #8]
 8005162:	bb3a      	cbnz	r2, 80051b4 <_free_r+0xec>
 8005164:	4e35      	ldr	r6, [pc, #212]	; (800523c <_free_r+0x174>)
 8005166:	42b1      	cmp	r1, r6
 8005168:	d124      	bne.n	80051b4 <_free_r+0xec>
 800516a:	616b      	str	r3, [r5, #20]
 800516c:	612b      	str	r3, [r5, #16]
 800516e:	2201      	movs	r2, #1
 8005170:	60d9      	str	r1, [r3, #12]
 8005172:	6099      	str	r1, [r3, #8]
 8005174:	f040 0101 	orr.w	r1, r0, #1
 8005178:	6059      	str	r1, [r3, #4]
 800517a:	5018      	str	r0, [r3, r0]
 800517c:	2a00      	cmp	r2, #0
 800517e:	d1d3      	bne.n	8005128 <_free_r+0x60>
 8005180:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005184:	d21a      	bcs.n	80051bc <_free_r+0xf4>
 8005186:	08c0      	lsrs	r0, r0, #3
 8005188:	1081      	asrs	r1, r0, #2
 800518a:	2201      	movs	r2, #1
 800518c:	408a      	lsls	r2, r1
 800518e:	6869      	ldr	r1, [r5, #4]
 8005190:	3001      	adds	r0, #1
 8005192:	430a      	orrs	r2, r1
 8005194:	606a      	str	r2, [r5, #4]
 8005196:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800519a:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800519e:	6099      	str	r1, [r3, #8]
 80051a0:	3a08      	subs	r2, #8
 80051a2:	60da      	str	r2, [r3, #12]
 80051a4:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 80051a8:	60cb      	str	r3, [r1, #12]
 80051aa:	e7bd      	b.n	8005128 <_free_r+0x60>
 80051ac:	2200      	movs	r2, #0
 80051ae:	e7d2      	b.n	8005156 <_free_r+0x8e>
 80051b0:	2201      	movs	r2, #1
 80051b2:	e7d0      	b.n	8005156 <_free_r+0x8e>
 80051b4:	68fe      	ldr	r6, [r7, #12]
 80051b6:	60ce      	str	r6, [r1, #12]
 80051b8:	60b1      	str	r1, [r6, #8]
 80051ba:	e7db      	b.n	8005174 <_free_r+0xac>
 80051bc:	0a42      	lsrs	r2, r0, #9
 80051be:	2a04      	cmp	r2, #4
 80051c0:	d813      	bhi.n	80051ea <_free_r+0x122>
 80051c2:	0982      	lsrs	r2, r0, #6
 80051c4:	3238      	adds	r2, #56	; 0x38
 80051c6:	1c51      	adds	r1, r2, #1
 80051c8:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80051cc:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80051d0:	428e      	cmp	r6, r1
 80051d2:	d124      	bne.n	800521e <_free_r+0x156>
 80051d4:	2001      	movs	r0, #1
 80051d6:	1092      	asrs	r2, r2, #2
 80051d8:	fa00 f202 	lsl.w	r2, r0, r2
 80051dc:	6868      	ldr	r0, [r5, #4]
 80051de:	4302      	orrs	r2, r0
 80051e0:	606a      	str	r2, [r5, #4]
 80051e2:	60de      	str	r6, [r3, #12]
 80051e4:	6099      	str	r1, [r3, #8]
 80051e6:	60b3      	str	r3, [r6, #8]
 80051e8:	e7de      	b.n	80051a8 <_free_r+0xe0>
 80051ea:	2a14      	cmp	r2, #20
 80051ec:	d801      	bhi.n	80051f2 <_free_r+0x12a>
 80051ee:	325b      	adds	r2, #91	; 0x5b
 80051f0:	e7e9      	b.n	80051c6 <_free_r+0xfe>
 80051f2:	2a54      	cmp	r2, #84	; 0x54
 80051f4:	d802      	bhi.n	80051fc <_free_r+0x134>
 80051f6:	0b02      	lsrs	r2, r0, #12
 80051f8:	326e      	adds	r2, #110	; 0x6e
 80051fa:	e7e4      	b.n	80051c6 <_free_r+0xfe>
 80051fc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005200:	d802      	bhi.n	8005208 <_free_r+0x140>
 8005202:	0bc2      	lsrs	r2, r0, #15
 8005204:	3277      	adds	r2, #119	; 0x77
 8005206:	e7de      	b.n	80051c6 <_free_r+0xfe>
 8005208:	f240 5154 	movw	r1, #1364	; 0x554
 800520c:	428a      	cmp	r2, r1
 800520e:	bf9a      	itte	ls
 8005210:	0c82      	lsrls	r2, r0, #18
 8005212:	327c      	addls	r2, #124	; 0x7c
 8005214:	227e      	movhi	r2, #126	; 0x7e
 8005216:	e7d6      	b.n	80051c6 <_free_r+0xfe>
 8005218:	6889      	ldr	r1, [r1, #8]
 800521a:	428e      	cmp	r6, r1
 800521c:	d004      	beq.n	8005228 <_free_r+0x160>
 800521e:	684a      	ldr	r2, [r1, #4]
 8005220:	f022 0203 	bic.w	r2, r2, #3
 8005224:	4290      	cmp	r0, r2
 8005226:	d3f7      	bcc.n	8005218 <_free_r+0x150>
 8005228:	68ce      	ldr	r6, [r1, #12]
 800522a:	e7da      	b.n	80051e2 <_free_r+0x11a>
 800522c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005230:	200000f8 	.word	0x200000f8
 8005234:	20000504 	.word	0x20000504
 8005238:	200006c0 	.word	0x200006c0
 800523c:	20000100 	.word	0x20000100

08005240 <__retarget_lock_acquire_recursive>:
 8005240:	4770      	bx	lr

08005242 <__retarget_lock_release_recursive>:
 8005242:	4770      	bx	lr

08005244 <__ascii_mbtowc>:
 8005244:	b082      	sub	sp, #8
 8005246:	b901      	cbnz	r1, 800524a <__ascii_mbtowc+0x6>
 8005248:	a901      	add	r1, sp, #4
 800524a:	b142      	cbz	r2, 800525e <__ascii_mbtowc+0x1a>
 800524c:	b14b      	cbz	r3, 8005262 <__ascii_mbtowc+0x1e>
 800524e:	7813      	ldrb	r3, [r2, #0]
 8005250:	600b      	str	r3, [r1, #0]
 8005252:	7812      	ldrb	r2, [r2, #0]
 8005254:	1c10      	adds	r0, r2, #0
 8005256:	bf18      	it	ne
 8005258:	2001      	movne	r0, #1
 800525a:	b002      	add	sp, #8
 800525c:	4770      	bx	lr
 800525e:	4610      	mov	r0, r2
 8005260:	e7fb      	b.n	800525a <__ascii_mbtowc+0x16>
 8005262:	f06f 0001 	mvn.w	r0, #1
 8005266:	e7f8      	b.n	800525a <__ascii_mbtowc+0x16>

08005268 <memmove>:
 8005268:	4288      	cmp	r0, r1
 800526a:	b510      	push	{r4, lr}
 800526c:	eb01 0302 	add.w	r3, r1, r2
 8005270:	d803      	bhi.n	800527a <memmove+0x12>
 8005272:	1e42      	subs	r2, r0, #1
 8005274:	4299      	cmp	r1, r3
 8005276:	d10c      	bne.n	8005292 <memmove+0x2a>
 8005278:	bd10      	pop	{r4, pc}
 800527a:	4298      	cmp	r0, r3
 800527c:	d2f9      	bcs.n	8005272 <memmove+0xa>
 800527e:	1881      	adds	r1, r0, r2
 8005280:	1ad2      	subs	r2, r2, r3
 8005282:	42d3      	cmn	r3, r2
 8005284:	d100      	bne.n	8005288 <memmove+0x20>
 8005286:	bd10      	pop	{r4, pc}
 8005288:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800528c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005290:	e7f7      	b.n	8005282 <memmove+0x1a>
 8005292:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005296:	f802 4f01 	strb.w	r4, [r2, #1]!
 800529a:	e7eb      	b.n	8005274 <memmove+0xc>

0800529c <memset>:
 800529c:	4402      	add	r2, r0
 800529e:	4603      	mov	r3, r0
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d100      	bne.n	80052a6 <memset+0xa>
 80052a4:	4770      	bx	lr
 80052a6:	f803 1b01 	strb.w	r1, [r3], #1
 80052aa:	e7f9      	b.n	80052a0 <memset+0x4>

080052ac <_realloc_r>:
 80052ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b0:	4682      	mov	sl, r0
 80052b2:	460c      	mov	r4, r1
 80052b4:	b929      	cbnz	r1, 80052c2 <_realloc_r+0x16>
 80052b6:	4611      	mov	r1, r2
 80052b8:	b003      	add	sp, #12
 80052ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052be:	f7ff b8ff 	b.w	80044c0 <_malloc_r>
 80052c2:	9201      	str	r2, [sp, #4]
 80052c4:	f7ff fb16 	bl	80048f4 <__malloc_lock>
 80052c8:	9a01      	ldr	r2, [sp, #4]
 80052ca:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80052ce:	f102 080b 	add.w	r8, r2, #11
 80052d2:	f1b8 0f16 	cmp.w	r8, #22
 80052d6:	f1a4 0908 	sub.w	r9, r4, #8
 80052da:	f025 0603 	bic.w	r6, r5, #3
 80052de:	d90a      	bls.n	80052f6 <_realloc_r+0x4a>
 80052e0:	f038 0807 	bics.w	r8, r8, #7
 80052e4:	d509      	bpl.n	80052fa <_realloc_r+0x4e>
 80052e6:	230c      	movs	r3, #12
 80052e8:	f8ca 3000 	str.w	r3, [sl]
 80052ec:	2700      	movs	r7, #0
 80052ee:	4638      	mov	r0, r7
 80052f0:	b003      	add	sp, #12
 80052f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052f6:	f04f 0810 	mov.w	r8, #16
 80052fa:	4590      	cmp	r8, r2
 80052fc:	d3f3      	bcc.n	80052e6 <_realloc_r+0x3a>
 80052fe:	45b0      	cmp	r8, r6
 8005300:	f340 8145 	ble.w	800558e <_realloc_r+0x2e2>
 8005304:	4ba8      	ldr	r3, [pc, #672]	; (80055a8 <_realloc_r+0x2fc>)
 8005306:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800530a:	eb09 0106 	add.w	r1, r9, r6
 800530e:	4571      	cmp	r1, lr
 8005310:	469b      	mov	fp, r3
 8005312:	684b      	ldr	r3, [r1, #4]
 8005314:	d005      	beq.n	8005322 <_realloc_r+0x76>
 8005316:	f023 0001 	bic.w	r0, r3, #1
 800531a:	4408      	add	r0, r1
 800531c:	6840      	ldr	r0, [r0, #4]
 800531e:	07c7      	lsls	r7, r0, #31
 8005320:	d447      	bmi.n	80053b2 <_realloc_r+0x106>
 8005322:	f023 0303 	bic.w	r3, r3, #3
 8005326:	4571      	cmp	r1, lr
 8005328:	eb06 0703 	add.w	r7, r6, r3
 800532c:	d119      	bne.n	8005362 <_realloc_r+0xb6>
 800532e:	f108 0010 	add.w	r0, r8, #16
 8005332:	4287      	cmp	r7, r0
 8005334:	db3f      	blt.n	80053b6 <_realloc_r+0x10a>
 8005336:	eb09 0308 	add.w	r3, r9, r8
 800533a:	eba7 0708 	sub.w	r7, r7, r8
 800533e:	f047 0701 	orr.w	r7, r7, #1
 8005342:	f8cb 3008 	str.w	r3, [fp, #8]
 8005346:	605f      	str	r7, [r3, #4]
 8005348:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800534c:	f003 0301 	and.w	r3, r3, #1
 8005350:	ea43 0308 	orr.w	r3, r3, r8
 8005354:	f844 3c04 	str.w	r3, [r4, #-4]
 8005358:	4650      	mov	r0, sl
 800535a:	f7ff fad1 	bl	8004900 <__malloc_unlock>
 800535e:	4627      	mov	r7, r4
 8005360:	e7c5      	b.n	80052ee <_realloc_r+0x42>
 8005362:	45b8      	cmp	r8, r7
 8005364:	dc27      	bgt.n	80053b6 <_realloc_r+0x10a>
 8005366:	68cb      	ldr	r3, [r1, #12]
 8005368:	688a      	ldr	r2, [r1, #8]
 800536a:	60d3      	str	r3, [r2, #12]
 800536c:	609a      	str	r2, [r3, #8]
 800536e:	eba7 0008 	sub.w	r0, r7, r8
 8005372:	280f      	cmp	r0, #15
 8005374:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005378:	eb09 0207 	add.w	r2, r9, r7
 800537c:	f240 8109 	bls.w	8005592 <_realloc_r+0x2e6>
 8005380:	eb09 0108 	add.w	r1, r9, r8
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	ea43 0308 	orr.w	r3, r3, r8
 800538c:	f040 0001 	orr.w	r0, r0, #1
 8005390:	f8c9 3004 	str.w	r3, [r9, #4]
 8005394:	6048      	str	r0, [r1, #4]
 8005396:	6853      	ldr	r3, [r2, #4]
 8005398:	f043 0301 	orr.w	r3, r3, #1
 800539c:	6053      	str	r3, [r2, #4]
 800539e:	3108      	adds	r1, #8
 80053a0:	4650      	mov	r0, sl
 80053a2:	f7ff fe91 	bl	80050c8 <_free_r>
 80053a6:	4650      	mov	r0, sl
 80053a8:	f7ff faaa 	bl	8004900 <__malloc_unlock>
 80053ac:	f109 0708 	add.w	r7, r9, #8
 80053b0:	e79d      	b.n	80052ee <_realloc_r+0x42>
 80053b2:	2300      	movs	r3, #0
 80053b4:	4619      	mov	r1, r3
 80053b6:	07e8      	lsls	r0, r5, #31
 80053b8:	f100 8084 	bmi.w	80054c4 <_realloc_r+0x218>
 80053bc:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80053c0:	eba9 0505 	sub.w	r5, r9, r5
 80053c4:	6868      	ldr	r0, [r5, #4]
 80053c6:	f020 0003 	bic.w	r0, r0, #3
 80053ca:	4430      	add	r0, r6
 80053cc:	2900      	cmp	r1, #0
 80053ce:	d076      	beq.n	80054be <_realloc_r+0x212>
 80053d0:	4571      	cmp	r1, lr
 80053d2:	d150      	bne.n	8005476 <_realloc_r+0x1ca>
 80053d4:	4403      	add	r3, r0
 80053d6:	f108 0110 	add.w	r1, r8, #16
 80053da:	428b      	cmp	r3, r1
 80053dc:	db6f      	blt.n	80054be <_realloc_r+0x212>
 80053de:	462f      	mov	r7, r5
 80053e0:	68ea      	ldr	r2, [r5, #12]
 80053e2:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80053e6:	60ca      	str	r2, [r1, #12]
 80053e8:	6091      	str	r1, [r2, #8]
 80053ea:	1f32      	subs	r2, r6, #4
 80053ec:	2a24      	cmp	r2, #36	; 0x24
 80053ee:	d83b      	bhi.n	8005468 <_realloc_r+0x1bc>
 80053f0:	2a13      	cmp	r2, #19
 80053f2:	d936      	bls.n	8005462 <_realloc_r+0x1b6>
 80053f4:	6821      	ldr	r1, [r4, #0]
 80053f6:	60a9      	str	r1, [r5, #8]
 80053f8:	6861      	ldr	r1, [r4, #4]
 80053fa:	60e9      	str	r1, [r5, #12]
 80053fc:	2a1b      	cmp	r2, #27
 80053fe:	d81c      	bhi.n	800543a <_realloc_r+0x18e>
 8005400:	f105 0210 	add.w	r2, r5, #16
 8005404:	f104 0108 	add.w	r1, r4, #8
 8005408:	6808      	ldr	r0, [r1, #0]
 800540a:	6010      	str	r0, [r2, #0]
 800540c:	6848      	ldr	r0, [r1, #4]
 800540e:	6050      	str	r0, [r2, #4]
 8005410:	6889      	ldr	r1, [r1, #8]
 8005412:	6091      	str	r1, [r2, #8]
 8005414:	eb05 0208 	add.w	r2, r5, r8
 8005418:	eba3 0308 	sub.w	r3, r3, r8
 800541c:	f043 0301 	orr.w	r3, r3, #1
 8005420:	f8cb 2008 	str.w	r2, [fp, #8]
 8005424:	6053      	str	r3, [r2, #4]
 8005426:	686b      	ldr	r3, [r5, #4]
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	ea43 0308 	orr.w	r3, r3, r8
 8005430:	606b      	str	r3, [r5, #4]
 8005432:	4650      	mov	r0, sl
 8005434:	f7ff fa64 	bl	8004900 <__malloc_unlock>
 8005438:	e759      	b.n	80052ee <_realloc_r+0x42>
 800543a:	68a1      	ldr	r1, [r4, #8]
 800543c:	6129      	str	r1, [r5, #16]
 800543e:	68e1      	ldr	r1, [r4, #12]
 8005440:	6169      	str	r1, [r5, #20]
 8005442:	2a24      	cmp	r2, #36	; 0x24
 8005444:	bf01      	itttt	eq
 8005446:	6922      	ldreq	r2, [r4, #16]
 8005448:	61aa      	streq	r2, [r5, #24]
 800544a:	6960      	ldreq	r0, [r4, #20]
 800544c:	61e8      	streq	r0, [r5, #28]
 800544e:	bf19      	ittee	ne
 8005450:	f105 0218 	addne.w	r2, r5, #24
 8005454:	f104 0110 	addne.w	r1, r4, #16
 8005458:	f105 0220 	addeq.w	r2, r5, #32
 800545c:	f104 0118 	addeq.w	r1, r4, #24
 8005460:	e7d2      	b.n	8005408 <_realloc_r+0x15c>
 8005462:	463a      	mov	r2, r7
 8005464:	4621      	mov	r1, r4
 8005466:	e7cf      	b.n	8005408 <_realloc_r+0x15c>
 8005468:	4621      	mov	r1, r4
 800546a:	4638      	mov	r0, r7
 800546c:	9301      	str	r3, [sp, #4]
 800546e:	f7ff fefb 	bl	8005268 <memmove>
 8005472:	9b01      	ldr	r3, [sp, #4]
 8005474:	e7ce      	b.n	8005414 <_realloc_r+0x168>
 8005476:	18c7      	adds	r7, r0, r3
 8005478:	45b8      	cmp	r8, r7
 800547a:	dc20      	bgt.n	80054be <_realloc_r+0x212>
 800547c:	68cb      	ldr	r3, [r1, #12]
 800547e:	688a      	ldr	r2, [r1, #8]
 8005480:	60d3      	str	r3, [r2, #12]
 8005482:	609a      	str	r2, [r3, #8]
 8005484:	4628      	mov	r0, r5
 8005486:	68eb      	ldr	r3, [r5, #12]
 8005488:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800548c:	60d3      	str	r3, [r2, #12]
 800548e:	609a      	str	r2, [r3, #8]
 8005490:	1f32      	subs	r2, r6, #4
 8005492:	2a24      	cmp	r2, #36	; 0x24
 8005494:	d842      	bhi.n	800551c <_realloc_r+0x270>
 8005496:	2a13      	cmp	r2, #19
 8005498:	d93e      	bls.n	8005518 <_realloc_r+0x26c>
 800549a:	6823      	ldr	r3, [r4, #0]
 800549c:	60ab      	str	r3, [r5, #8]
 800549e:	6863      	ldr	r3, [r4, #4]
 80054a0:	60eb      	str	r3, [r5, #12]
 80054a2:	2a1b      	cmp	r2, #27
 80054a4:	d824      	bhi.n	80054f0 <_realloc_r+0x244>
 80054a6:	f105 0010 	add.w	r0, r5, #16
 80054aa:	f104 0308 	add.w	r3, r4, #8
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	6002      	str	r2, [r0, #0]
 80054b2:	685a      	ldr	r2, [r3, #4]
 80054b4:	6042      	str	r2, [r0, #4]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	6083      	str	r3, [r0, #8]
 80054ba:	46a9      	mov	r9, r5
 80054bc:	e757      	b.n	800536e <_realloc_r+0xc2>
 80054be:	4580      	cmp	r8, r0
 80054c0:	4607      	mov	r7, r0
 80054c2:	dddf      	ble.n	8005484 <_realloc_r+0x1d8>
 80054c4:	4611      	mov	r1, r2
 80054c6:	4650      	mov	r0, sl
 80054c8:	f7fe fffa 	bl	80044c0 <_malloc_r>
 80054cc:	4607      	mov	r7, r0
 80054ce:	2800      	cmp	r0, #0
 80054d0:	d0af      	beq.n	8005432 <_realloc_r+0x186>
 80054d2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80054d6:	f023 0301 	bic.w	r3, r3, #1
 80054da:	f1a0 0208 	sub.w	r2, r0, #8
 80054de:	444b      	add	r3, r9
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d11f      	bne.n	8005524 <_realloc_r+0x278>
 80054e4:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80054e8:	f027 0703 	bic.w	r7, r7, #3
 80054ec:	4437      	add	r7, r6
 80054ee:	e73e      	b.n	800536e <_realloc_r+0xc2>
 80054f0:	68a3      	ldr	r3, [r4, #8]
 80054f2:	612b      	str	r3, [r5, #16]
 80054f4:	68e3      	ldr	r3, [r4, #12]
 80054f6:	616b      	str	r3, [r5, #20]
 80054f8:	2a24      	cmp	r2, #36	; 0x24
 80054fa:	bf01      	itttt	eq
 80054fc:	6923      	ldreq	r3, [r4, #16]
 80054fe:	61ab      	streq	r3, [r5, #24]
 8005500:	6962      	ldreq	r2, [r4, #20]
 8005502:	61ea      	streq	r2, [r5, #28]
 8005504:	bf19      	ittee	ne
 8005506:	f105 0018 	addne.w	r0, r5, #24
 800550a:	f104 0310 	addne.w	r3, r4, #16
 800550e:	f105 0020 	addeq.w	r0, r5, #32
 8005512:	f104 0318 	addeq.w	r3, r4, #24
 8005516:	e7ca      	b.n	80054ae <_realloc_r+0x202>
 8005518:	4623      	mov	r3, r4
 800551a:	e7c8      	b.n	80054ae <_realloc_r+0x202>
 800551c:	4621      	mov	r1, r4
 800551e:	f7ff fea3 	bl	8005268 <memmove>
 8005522:	e7ca      	b.n	80054ba <_realloc_r+0x20e>
 8005524:	1f32      	subs	r2, r6, #4
 8005526:	2a24      	cmp	r2, #36	; 0x24
 8005528:	d82d      	bhi.n	8005586 <_realloc_r+0x2da>
 800552a:	2a13      	cmp	r2, #19
 800552c:	d928      	bls.n	8005580 <_realloc_r+0x2d4>
 800552e:	6823      	ldr	r3, [r4, #0]
 8005530:	6003      	str	r3, [r0, #0]
 8005532:	6863      	ldr	r3, [r4, #4]
 8005534:	6043      	str	r3, [r0, #4]
 8005536:	2a1b      	cmp	r2, #27
 8005538:	d80e      	bhi.n	8005558 <_realloc_r+0x2ac>
 800553a:	f100 0308 	add.w	r3, r0, #8
 800553e:	f104 0208 	add.w	r2, r4, #8
 8005542:	6811      	ldr	r1, [r2, #0]
 8005544:	6019      	str	r1, [r3, #0]
 8005546:	6851      	ldr	r1, [r2, #4]
 8005548:	6059      	str	r1, [r3, #4]
 800554a:	6892      	ldr	r2, [r2, #8]
 800554c:	609a      	str	r2, [r3, #8]
 800554e:	4621      	mov	r1, r4
 8005550:	4650      	mov	r0, sl
 8005552:	f7ff fdb9 	bl	80050c8 <_free_r>
 8005556:	e76c      	b.n	8005432 <_realloc_r+0x186>
 8005558:	68a3      	ldr	r3, [r4, #8]
 800555a:	6083      	str	r3, [r0, #8]
 800555c:	68e3      	ldr	r3, [r4, #12]
 800555e:	60c3      	str	r3, [r0, #12]
 8005560:	2a24      	cmp	r2, #36	; 0x24
 8005562:	bf01      	itttt	eq
 8005564:	6923      	ldreq	r3, [r4, #16]
 8005566:	6103      	streq	r3, [r0, #16]
 8005568:	6961      	ldreq	r1, [r4, #20]
 800556a:	6141      	streq	r1, [r0, #20]
 800556c:	bf19      	ittee	ne
 800556e:	f100 0310 	addne.w	r3, r0, #16
 8005572:	f104 0210 	addne.w	r2, r4, #16
 8005576:	f100 0318 	addeq.w	r3, r0, #24
 800557a:	f104 0218 	addeq.w	r2, r4, #24
 800557e:	e7e0      	b.n	8005542 <_realloc_r+0x296>
 8005580:	4603      	mov	r3, r0
 8005582:	4622      	mov	r2, r4
 8005584:	e7dd      	b.n	8005542 <_realloc_r+0x296>
 8005586:	4621      	mov	r1, r4
 8005588:	f7ff fe6e 	bl	8005268 <memmove>
 800558c:	e7df      	b.n	800554e <_realloc_r+0x2a2>
 800558e:	4637      	mov	r7, r6
 8005590:	e6ed      	b.n	800536e <_realloc_r+0xc2>
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	431f      	orrs	r7, r3
 8005598:	f8c9 7004 	str.w	r7, [r9, #4]
 800559c:	6853      	ldr	r3, [r2, #4]
 800559e:	f043 0301 	orr.w	r3, r3, #1
 80055a2:	6053      	str	r3, [r2, #4]
 80055a4:	e6ff      	b.n	80053a6 <_realloc_r+0xfa>
 80055a6:	bf00      	nop
 80055a8:	200000f8 	.word	0x200000f8

080055ac <__ascii_wctomb>:
 80055ac:	b149      	cbz	r1, 80055c2 <__ascii_wctomb+0x16>
 80055ae:	2aff      	cmp	r2, #255	; 0xff
 80055b0:	bf85      	ittet	hi
 80055b2:	238a      	movhi	r3, #138	; 0x8a
 80055b4:	6003      	strhi	r3, [r0, #0]
 80055b6:	700a      	strbls	r2, [r1, #0]
 80055b8:	f04f 30ff 	movhi.w	r0, #4294967295
 80055bc:	bf98      	it	ls
 80055be:	2001      	movls	r0, #1
 80055c0:	4770      	bx	lr
 80055c2:	4608      	mov	r0, r1
 80055c4:	4770      	bx	lr
	...

080055c8 <_sbrk>:
 80055c8:	4b04      	ldr	r3, [pc, #16]	; (80055dc <_sbrk+0x14>)
 80055ca:	6819      	ldr	r1, [r3, #0]
 80055cc:	4602      	mov	r2, r0
 80055ce:	b909      	cbnz	r1, 80055d4 <_sbrk+0xc>
 80055d0:	4903      	ldr	r1, [pc, #12]	; (80055e0 <_sbrk+0x18>)
 80055d2:	6019      	str	r1, [r3, #0]
 80055d4:	6818      	ldr	r0, [r3, #0]
 80055d6:	4402      	add	r2, r0
 80055d8:	601a      	str	r2, [r3, #0]
 80055da:	4770      	bx	lr
 80055dc:	200006c4 	.word	0x200006c4
 80055e0:	200007cc 	.word	0x200007cc

080055e4 <_init>:
 80055e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055e6:	bf00      	nop
 80055e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ea:	bc08      	pop	{r3}
 80055ec:	469e      	mov	lr, r3
 80055ee:	4770      	bx	lr

080055f0 <_fini>:
 80055f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055f2:	bf00      	nop
 80055f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055f6:	bc08      	pop	{r3}
 80055f8:	469e      	mov	lr, r3
 80055fa:	4770      	bx	lr
