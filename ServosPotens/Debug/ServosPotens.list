
ServosPotens.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e10  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08001f98  08001f98  00011f98  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001fcc  08001fcc  00011fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001fd4  08001fd4  00011fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001fd8  08001fd8  00011fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  08001fdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  8 .bss          0000010c  20000004  20000004  00020004  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000110  20000110  00020004  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001475c  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000029e8  00000000  00000000  00034790  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00005584  00000000  00000000  00037178  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000858  00000000  00000000  0003c700  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a30  00000000  00000000  0003cf58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00005086  00000000  00000000  0003d988  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000036c6  00000000  00000000  00042a0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000460d4  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000174c  00000000  00000000  00046150  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001f80 	.word	0x08001f80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08001f80 	.word	0x08001f80

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d8:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80004da:	4b08      	ldr	r3, [pc, #32]	; (80004fc <HAL_InitTick+0x24>)
{
 80004dc:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80004de:	6818      	ldr	r0, [r3, #0]
 80004e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80004e8:	f000 fae2 	bl	8000ab0 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004ec:	2200      	movs	r2, #0
 80004ee:	4621      	mov	r1, r4
 80004f0:	f04f 30ff 	mov.w	r0, #4294967295
 80004f4:	f000 fa9c 	bl	8000a30 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80004f8:	2000      	movs	r0, #0
 80004fa:	bd10      	pop	{r4, pc}
 80004fc:	20000000 	.word	0x20000000

08000500 <HAL_Init>:
{
 8000500:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000502:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <HAL_Init+0x30>)
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800050a:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000512:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800051a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800051c:	2003      	movs	r0, #3
 800051e:	f000 fa75 	bl	8000a0c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000522:	2000      	movs	r0, #0
 8000524:	f7ff ffd8 	bl	80004d8 <HAL_InitTick>
  HAL_MspInit();
 8000528:	f001 fbc3 	bl	8001cb2 <HAL_MspInit>
}
 800052c:	2000      	movs	r0, #0
 800052e:	bd08      	pop	{r3, pc}
 8000530:	40023c00 	.word	0x40023c00

08000534 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000534:	4a02      	ldr	r2, [pc, #8]	; (8000540 <HAL_IncTick+0xc>)
 8000536:	6813      	ldr	r3, [r2, #0]
 8000538:	3301      	adds	r3, #1
 800053a:	6013      	str	r3, [r2, #0]
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	20000020 	.word	0x20000020

08000544 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000544:	4b01      	ldr	r3, [pc, #4]	; (800054c <HAL_GetTick+0x8>)
 8000546:	6818      	ldr	r0, [r3, #0]
}
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	20000020 	.word	0x20000020

08000550 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000550:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000552:	4604      	mov	r4, r0
 8000554:	2800      	cmp	r0, #0
 8000556:	f000 8099 	beq.w	800068c <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800055a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800055c:	b923      	cbnz	r3, 8000568 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800055e:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000560:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000564:	f001 fa9c 	bl	8001aa0 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000568:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800056a:	06db      	lsls	r3, r3, #27
 800056c:	f100 808c 	bmi.w	8000688 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000570:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000572:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000576:	f023 0302 	bic.w	r3, r3, #2
 800057a:	f043 0302 	orr.w	r3, r3, #2
 800057e:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000580:	4b43      	ldr	r3, [pc, #268]	; (8000690 <HAL_ADC_Init+0x140>)
 8000582:	685a      	ldr	r2, [r3, #4]
 8000584:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000588:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800058a:	685a      	ldr	r2, [r3, #4]
 800058c:	6861      	ldr	r1, [r4, #4]
 800058e:	430a      	orrs	r2, r1
 8000590:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000592:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000594:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000596:	685a      	ldr	r2, [r3, #4]
 8000598:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800059c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800059e:	685a      	ldr	r2, [r3, #4]
 80005a0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80005a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80005a6:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80005a8:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80005aa:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80005ae:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80005b0:	685a      	ldr	r2, [r3, #4]
 80005b2:	430a      	orrs	r2, r1
 80005b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80005b6:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80005b8:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80005ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80005be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80005c0:	689a      	ldr	r2, [r3, #8]
 80005c2:	430a      	orrs	r2, r1
 80005c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80005c6:	4933      	ldr	r1, [pc, #204]	; (8000694 <HAL_ADC_Init+0x144>)
 80005c8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80005ca:	428a      	cmp	r2, r1
 80005cc:	d050      	beq.n	8000670 <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80005ce:	6899      	ldr	r1, [r3, #8]
 80005d0:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80005d4:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80005d6:	6899      	ldr	r1, [r3, #8]
 80005d8:	430a      	orrs	r2, r1
 80005da:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80005dc:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80005de:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80005e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80005e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80005e6:	689a      	ldr	r2, [r3, #8]
 80005e8:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80005ea:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80005ec:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80005ee:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80005f0:	f022 0202 	bic.w	r2, r2, #2
 80005f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80005f6:	689a      	ldr	r2, [r3, #8]
 80005f8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80005fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80005fe:	6a22      	ldr	r2, [r4, #32]
 8000600:	2a00      	cmp	r2, #0
 8000602:	d03d      	beq.n	8000680 <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000604:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000606:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000608:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800060c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800060e:	685a      	ldr	r2, [r3, #4]
 8000610:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000614:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000616:	685a      	ldr	r2, [r3, #4]
 8000618:	3901      	subs	r1, #1
 800061a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800061e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000622:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000624:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000628:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800062a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800062c:	3901      	subs	r1, #1
 800062e:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000632:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000634:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000636:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000638:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800063c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800063e:	689a      	ldr	r2, [r3, #8]
 8000640:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000644:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000646:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000648:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800064a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800064e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000650:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000652:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000654:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000658:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800065a:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800065c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800065e:	f023 0303 	bic.w	r3, r3, #3
 8000662:	f043 0301 	orr.w	r3, r3, #1
 8000666:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000668:	2300      	movs	r3, #0
 800066a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 800066e:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000670:	689a      	ldr	r2, [r3, #8]
 8000672:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000676:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000678:	689a      	ldr	r2, [r3, #8]
 800067a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800067e:	e7b4      	b.n	80005ea <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000680:	685a      	ldr	r2, [r3, #4]
 8000682:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000686:	e7ca      	b.n	800061e <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 8000688:	2001      	movs	r0, #1
 800068a:	e7ed      	b.n	8000668 <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 800068c:	2001      	movs	r0, #1
}
 800068e:	bd10      	pop	{r4, pc}
 8000690:	40012300 	.word	0x40012300
 8000694:	0f000001 	.word	0x0f000001

08000698 <HAL_ADC_Start>:
{
 8000698:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 800069a:	2300      	movs	r3, #0
 800069c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800069e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d04e      	beq.n	8000744 <HAL_ADC_Start+0xac>
 80006a6:	2301      	movs	r3, #1
 80006a8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80006ac:	6803      	ldr	r3, [r0, #0]
 80006ae:	689a      	ldr	r2, [r3, #8]
 80006b0:	07d1      	lsls	r1, r2, #31
 80006b2:	d505      	bpl.n	80006c0 <HAL_ADC_Start+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80006b4:	689a      	ldr	r2, [r3, #8]
 80006b6:	07d2      	lsls	r2, r2, #31
 80006b8:	d414      	bmi.n	80006e4 <HAL_ADC_Start+0x4c>
  return HAL_OK;
 80006ba:	2000      	movs	r0, #0
}
 80006bc:	b002      	add	sp, #8
 80006be:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 80006c0:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80006c2:	4921      	ldr	r1, [pc, #132]	; (8000748 <HAL_ADC_Start+0xb0>)
    __HAL_ADC_ENABLE(hadc);
 80006c4:	f042 0201 	orr.w	r2, r2, #1
 80006c8:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80006ca:	4a20      	ldr	r2, [pc, #128]	; (800074c <HAL_ADC_Start+0xb4>)
 80006cc:	6812      	ldr	r2, [r2, #0]
 80006ce:	fbb2 f2f1 	udiv	r2, r2, r1
 80006d2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 80006d6:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 80006d8:	9a01      	ldr	r2, [sp, #4]
 80006da:	2a00      	cmp	r2, #0
 80006dc:	d0ea      	beq.n	80006b4 <HAL_ADC_Start+0x1c>
      counter--;
 80006de:	9a01      	ldr	r2, [sp, #4]
 80006e0:	3a01      	subs	r2, #1
 80006e2:	e7f8      	b.n	80006d6 <HAL_ADC_Start+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 80006e4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80006e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80006ea:	f022 0201 	bic.w	r2, r2, #1
 80006ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80006f2:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80006f4:	685a      	ldr	r2, [r3, #4]
 80006f6:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80006f8:	bf41      	itttt	mi
 80006fa:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 80006fc:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8000700:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8000704:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000706:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000708:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800070c:	bf1c      	itt	ne
 800070e:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 8000710:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000714:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8000716:	2200      	movs	r2, #0
 8000718:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800071c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000720:	601a      	str	r2, [r3, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000722:	4a0b      	ldr	r2, [pc, #44]	; (8000750 <HAL_ADC_Start+0xb8>)
 8000724:	6852      	ldr	r2, [r2, #4]
 8000726:	06d2      	lsls	r2, r2, #27
 8000728:	d108      	bne.n	800073c <HAL_ADC_Start+0xa4>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800072a:	6898      	ldr	r0, [r3, #8]
 800072c:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8000730:	d1c3      	bne.n	80006ba <HAL_ADC_Start+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000732:	689a      	ldr	r2, [r3, #8]
 8000734:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	e7bf      	b.n	80006bc <HAL_ADC_Start+0x24>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800073c:	4a05      	ldr	r2, [pc, #20]	; (8000754 <HAL_ADC_Start+0xbc>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d1bb      	bne.n	80006ba <HAL_ADC_Start+0x22>
 8000742:	e7f2      	b.n	800072a <HAL_ADC_Start+0x92>
  __HAL_LOCK(hadc);
 8000744:	2002      	movs	r0, #2
 8000746:	e7b9      	b.n	80006bc <HAL_ADC_Start+0x24>
 8000748:	000f4240 	.word	0x000f4240
 800074c:	20000000 	.word	0x20000000
 8000750:	40012300 	.word	0x40012300
 8000754:	40012000 	.word	0x40012000

08000758 <HAL_ADC_Start_DMA>:
{
 8000758:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800075a:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 800075c:	2200      	movs	r2, #0
 800075e:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8000760:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8000764:	2a01      	cmp	r2, #1
{
 8000766:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000768:	d065      	beq.n	8000836 <HAL_ADC_Start_DMA+0xde>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800076a:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hadc);
 800076c:	2201      	movs	r2, #1
 800076e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000772:	68aa      	ldr	r2, [r5, #8]
 8000774:	07d2      	lsls	r2, r2, #31
 8000776:	d505      	bpl.n	8000784 <HAL_ADC_Start_DMA+0x2c>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000778:	68aa      	ldr	r2, [r5, #8]
 800077a:	07d0      	lsls	r0, r2, #31
 800077c:	d415      	bmi.n	80007aa <HAL_ADC_Start_DMA+0x52>
  return HAL_OK;
 800077e:	2000      	movs	r0, #0
}
 8000780:	b003      	add	sp, #12
 8000782:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8000784:	68aa      	ldr	r2, [r5, #8]
 8000786:	f042 0201 	orr.w	r2, r2, #1
 800078a:	60aa      	str	r2, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800078c:	4a2b      	ldr	r2, [pc, #172]	; (800083c <HAL_ADC_Start_DMA+0xe4>)
 800078e:	6810      	ldr	r0, [r2, #0]
 8000790:	4a2b      	ldr	r2, [pc, #172]	; (8000840 <HAL_ADC_Start_DMA+0xe8>)
 8000792:	fbb0 f0f2 	udiv	r0, r0, r2
 8000796:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800079a:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 800079c:	9a01      	ldr	r2, [sp, #4]
 800079e:	2a00      	cmp	r2, #0
 80007a0:	d0ea      	beq.n	8000778 <HAL_ADC_Start_DMA+0x20>
      counter--;
 80007a2:	9a01      	ldr	r2, [sp, #4]
 80007a4:	3a01      	subs	r2, #1
 80007a6:	9201      	str	r2, [sp, #4]
 80007a8:	e7f8      	b.n	800079c <HAL_ADC_Start_DMA+0x44>
    ADC_STATE_CLR_SET(hadc->State,
 80007aa:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80007ac:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 80007b0:	f020 0001 	bic.w	r0, r0, #1
 80007b4:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80007b8:	6420      	str	r0, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80007ba:	686a      	ldr	r2, [r5, #4]
 80007bc:	0552      	lsls	r2, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80007be:	bf41      	itttt	mi
 80007c0:	6c20      	ldrmi	r0, [r4, #64]	; 0x40
 80007c2:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 80007c6:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 80007ca:	6420      	strmi	r0, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007cc:	6c22      	ldr	r2, [r4, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80007ce:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80007d4:	bf1c      	itt	ne
 80007d6:	6c62      	ldrne	r2, [r4, #68]	; 0x44
 80007d8:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80007dc:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 80007de:	2200      	movs	r2, #0
 80007e0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80007e4:	4a17      	ldr	r2, [pc, #92]	; (8000844 <HAL_ADC_Start_DMA+0xec>)
 80007e6:	63c2      	str	r2, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80007e8:	4a17      	ldr	r2, [pc, #92]	; (8000848 <HAL_ADC_Start_DMA+0xf0>)
 80007ea:	6402      	str	r2, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80007ec:	4a17      	ldr	r2, [pc, #92]	; (800084c <HAL_ADC_Start_DMA+0xf4>)
 80007ee:	64c2      	str	r2, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80007f0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80007f4:	602a      	str	r2, [r5, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80007f6:	686a      	ldr	r2, [r5, #4]
 80007f8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80007fc:	606a      	str	r2, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80007fe:	68aa      	ldr	r2, [r5, #8]
 8000800:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000804:	60aa      	str	r2, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000806:	460a      	mov	r2, r1
 8000808:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 800080c:	f000 fa0c 	bl	8000c28 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <HAL_ADC_Start_DMA+0xf8>)
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	f013 0f1f 	tst.w	r3, #31
 8000818:	6823      	ldr	r3, [r4, #0]
 800081a:	d108      	bne.n	800082e <HAL_ADC_Start_DMA+0xd6>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800081c:	6898      	ldr	r0, [r3, #8]
 800081e:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8000822:	d1ac      	bne.n	800077e <HAL_ADC_Start_DMA+0x26>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000824:	689a      	ldr	r2, [r3, #8]
 8000826:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	e7a8      	b.n	8000780 <HAL_ADC_Start_DMA+0x28>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800082e:	4a09      	ldr	r2, [pc, #36]	; (8000854 <HAL_ADC_Start_DMA+0xfc>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d1a4      	bne.n	800077e <HAL_ADC_Start_DMA+0x26>
 8000834:	e7f2      	b.n	800081c <HAL_ADC_Start_DMA+0xc4>
  __HAL_LOCK(hadc);
 8000836:	2002      	movs	r0, #2
 8000838:	e7a2      	b.n	8000780 <HAL_ADC_Start_DMA+0x28>
 800083a:	bf00      	nop
 800083c:	20000000 	.word	0x20000000
 8000840:	000f4240 	.word	0x000f4240
 8000844:	0800085b 	.word	0x0800085b
 8000848:	080008bd 	.word	0x080008bd
 800084c:	080008c9 	.word	0x080008c9
 8000850:	40012300 	.word	0x40012300
 8000854:	40012000 	.word	0x40012000

08000858 <HAL_ADC_ConvCpltCallback>:
 8000858:	4770      	bx	lr

0800085a <ADC_DMAConvCplt>:
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800085a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800085c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800085e:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8000862:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000864:	d124      	bne.n	80008b0 <ADC_DMAConvCplt+0x56>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000866:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000868:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800086c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	6891      	ldr	r1, [r2, #8]
 8000872:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 8000876:	d117      	bne.n	80008a8 <ADC_DMAConvCplt+0x4e>
 8000878:	6999      	ldr	r1, [r3, #24]
 800087a:	b9a9      	cbnz	r1, 80008a8 <ADC_DMAConvCplt+0x4e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800087c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800087e:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 8000882:	d002      	beq.n	800088a <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000884:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000886:	0549      	lsls	r1, r1, #21
 8000888:	d40e      	bmi.n	80008a8 <ADC_DMAConvCplt+0x4e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800088a:	6851      	ldr	r1, [r2, #4]
 800088c:	f021 0120 	bic.w	r1, r1, #32
 8000890:	6051      	str	r1, [r2, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000892:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000894:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000898:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800089a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800089c:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800089e:	bf5e      	ittt	pl
 80008a0:	6c1a      	ldrpl	r2, [r3, #64]	; 0x40
 80008a2:	f042 0201 	orrpl.w	r2, r2, #1
 80008a6:	641a      	strpl	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ffd5 	bl	8000858 <HAL_ADC_ConvCpltCallback>
 80008ae:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80008b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  }
}
 80008b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80008b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b8:	4718      	bx	r3

080008ba <HAL_ADC_ConvHalfCpltCallback>:
 80008ba:	4770      	bx	lr

080008bc <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80008bc:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  /* Conversion complete callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80008be:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80008c0:	f7ff fffb 	bl	80008ba <HAL_ADC_ConvHalfCpltCallback>
 80008c4:	bd08      	pop	{r3, pc}

080008c6 <HAL_ADC_ErrorCallback>:
{
 80008c6:	4770      	bx	lr

080008c8 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80008c8:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80008ca:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80008cc:	2340      	movs	r3, #64	; 0x40
 80008ce:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80008d0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80008d2:	f043 0304 	orr.w	r3, r3, #4
 80008d6:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_ADC_ErrorCallback(hadc); 
 80008d8:	f7ff fff5 	bl	80008c6 <HAL_ADC_ErrorCallback>
 80008dc:	bd08      	pop	{r3, pc}
	...

080008e0 <HAL_ADC_ConfigChannel>:
{
 80008e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 80008e2:	2300      	movs	r3, #0
 80008e4:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80008e6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	f000 8083 	beq.w	80009f6 <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 80008f0:	680d      	ldr	r5, [r1, #0]
 80008f2:	6804      	ldr	r4, [r0, #0]
 80008f4:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 80008f6:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 80008f8:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 80008fa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80008fe:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000900:	d92a      	bls.n	8000958 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000902:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8000906:	68e7      	ldr	r7, [r4, #12]
 8000908:	3b1e      	subs	r3, #30
 800090a:	f04f 0e07 	mov.w	lr, #7
 800090e:	fa0e fe03 	lsl.w	lr, lr, r3
 8000912:	ea27 070e 	bic.w	r7, r7, lr
 8000916:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000918:	68e7      	ldr	r7, [r4, #12]
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	433b      	orrs	r3, r7
 8000920:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8000922:	684a      	ldr	r2, [r1, #4]
 8000924:	2a06      	cmp	r2, #6
 8000926:	ea4f 0382 	mov.w	r3, r2, lsl #2
 800092a:	d825      	bhi.n	8000978 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800092c:	4413      	add	r3, r2
 800092e:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8000930:	1f59      	subs	r1, r3, #5
 8000932:	231f      	movs	r3, #31
 8000934:	408b      	lsls	r3, r1
 8000936:	ea27 0303 	bic.w	r3, r7, r3
 800093a:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800093c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800093e:	fa06 f101 	lsl.w	r1, r6, r1
 8000942:	4311      	orrs	r1, r2
 8000944:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000946:	4b2d      	ldr	r3, [pc, #180]	; (80009fc <HAL_ADC_ConfigChannel+0x11c>)
 8000948:	429c      	cmp	r4, r3
 800094a:	d034      	beq.n	80009b6 <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 800094c:	2300      	movs	r3, #0
 800094e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000952:	4618      	mov	r0, r3
}
 8000954:	b003      	add	sp, #12
 8000956:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000958:	6927      	ldr	r7, [r4, #16]
 800095a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800095e:	f04f 0e07 	mov.w	lr, #7
 8000962:	fa0e fe03 	lsl.w	lr, lr, r3
 8000966:	ea27 070e 	bic.w	r7, r7, lr
 800096a:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800096c:	6927      	ldr	r7, [r4, #16]
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	433b      	orrs	r3, r7
 8000974:	6123      	str	r3, [r4, #16]
 8000976:	e7d4      	b.n	8000922 <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 8000978:	2a0c      	cmp	r2, #12
 800097a:	d80e      	bhi.n	800099a <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800097c:	4413      	add	r3, r2
 800097e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000980:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8000984:	231f      	movs	r3, #31
 8000986:	4093      	lsls	r3, r2
 8000988:	ea21 0303 	bic.w	r3, r1, r3
 800098c:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800098e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000990:	fa06 f202 	lsl.w	r2, r6, r2
 8000994:	431a      	orrs	r2, r3
 8000996:	6322      	str	r2, [r4, #48]	; 0x30
 8000998:	e7d5      	b.n	8000946 <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800099a:	4413      	add	r3, r2
 800099c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800099e:	3b41      	subs	r3, #65	; 0x41
 80009a0:	221f      	movs	r2, #31
 80009a2:	409a      	lsls	r2, r3
 80009a4:	ea21 0202 	bic.w	r2, r1, r2
 80009a8:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80009aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80009ac:	fa06 f103 	lsl.w	r1, r6, r3
 80009b0:	4311      	orrs	r1, r2
 80009b2:	62e1      	str	r1, [r4, #44]	; 0x2c
 80009b4:	e7c7      	b.n	8000946 <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80009b6:	2d12      	cmp	r5, #18
 80009b8:	d104      	bne.n	80009c4 <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80009ba:	4a11      	ldr	r2, [pc, #68]	; (8000a00 <HAL_ADC_ConfigChannel+0x120>)
 80009bc:	6853      	ldr	r3, [r2, #4]
 80009be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009c2:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80009c4:	f1a5 0310 	sub.w	r3, r5, #16
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d8bf      	bhi.n	800094c <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80009cc:	4a0c      	ldr	r2, [pc, #48]	; (8000a00 <HAL_ADC_ConfigChannel+0x120>)
 80009ce:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80009d0:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80009d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009d6:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80009d8:	d1b8      	bne.n	800094c <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80009da:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <HAL_ADC_ConfigChannel+0x124>)
 80009dc:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <HAL_ADC_ConfigChannel+0x128>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	fbb3 f2f2 	udiv	r2, r3, r2
 80009e4:	230a      	movs	r3, #10
 80009e6:	4353      	muls	r3, r2
        counter--;
 80009e8:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80009ea:	9b01      	ldr	r3, [sp, #4]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d0ad      	beq.n	800094c <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 80009f0:	9b01      	ldr	r3, [sp, #4]
 80009f2:	3b01      	subs	r3, #1
 80009f4:	e7f8      	b.n	80009e8 <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 80009f6:	2002      	movs	r0, #2
 80009f8:	e7ac      	b.n	8000954 <HAL_ADC_ConfigChannel+0x74>
 80009fa:	bf00      	nop
 80009fc:	40012000 	.word	0x40012000
 8000a00:	40012300 	.word	0x40012300
 8000a04:	20000000 	.word	0x20000000
 8000a08:	000f4240 	.word	0x000f4240

08000a0c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a0c:	4a07      	ldr	r2, [pc, #28]	; (8000a2c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000a0e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a10:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a14:	041b      	lsls	r3, r3, #16
 8000a16:	0c1b      	lsrs	r3, r3, #16
 8000a18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000a1c:	0200      	lsls	r0, r0, #8
 8000a1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a22:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000a26:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000a28:	60d3      	str	r3, [r2, #12]
 8000a2a:	4770      	bx	lr
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a30:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a32:	b530      	push	{r4, r5, lr}
 8000a34:	68dc      	ldr	r4, [r3, #12]
 8000a36:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a3a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a3e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a40:	2b04      	cmp	r3, #4
 8000a42:	bf28      	it	cs
 8000a44:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a46:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a48:	f04f 0501 	mov.w	r5, #1
 8000a4c:	fa05 f303 	lsl.w	r3, r5, r3
 8000a50:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a54:	bf8c      	ite	hi
 8000a56:	3c03      	subhi	r4, #3
 8000a58:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a5a:	4019      	ands	r1, r3
 8000a5c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a5e:	fa05 f404 	lsl.w	r4, r5, r4
 8000a62:	3c01      	subs	r4, #1
 8000a64:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000a66:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a68:	ea42 0201 	orr.w	r2, r2, r1
 8000a6c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a70:	bfaf      	iteee	ge
 8000a72:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a76:	f000 000f 	andlt.w	r0, r0, #15
 8000a7a:	4b06      	ldrlt	r3, [pc, #24]	; (8000a94 <HAL_NVIC_SetPriority+0x64>)
 8000a7c:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7e:	bfa5      	ittet	ge
 8000a80:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000a84:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a86:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a88:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000a8c:	bd30      	pop	{r4, r5, pc}
 8000a8e:	bf00      	nop
 8000a90:	e000ed00 	.word	0xe000ed00
 8000a94:	e000ed14 	.word	0xe000ed14

08000a98 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000a98:	0942      	lsrs	r2, r0, #5
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	f000 001f 	and.w	r0, r0, #31
 8000aa0:	fa03 f000 	lsl.w	r0, r3, r0
 8000aa4:	4b01      	ldr	r3, [pc, #4]	; (8000aac <HAL_NVIC_EnableIRQ+0x14>)
 8000aa6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000aaa:	4770      	bx	lr
 8000aac:	e000e100 	.word	0xe000e100

08000ab0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ab0:	3801      	subs	r0, #1
 8000ab2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ab6:	d20a      	bcs.n	8000ace <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aba:	4a07      	ldr	r2, [pc, #28]	; (8000ad8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000abc:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000abe:	21f0      	movs	r1, #240	; 0xf0
 8000ac0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ac4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ac6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ac8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000ace:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	e000e010 	.word	0xe000e010
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000adc:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000ade:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000ae0:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000ae2:	bf0c      	ite	eq
 8000ae4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000ae8:	f022 0204 	bicne.w	r2, r2, #4
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	4770      	bx	lr
 8000af0:	e000e010 	.word	0xe000e010

08000af4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000af4:	4770      	bx	lr

08000af6 <HAL_SYSTICK_IRQHandler>:
{
 8000af6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000af8:	f7ff fffc 	bl	8000af4 <HAL_SYSTICK_Callback>
 8000afc:	bd08      	pop	{r3, pc}
	...

08000b00 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000b00:	6803      	ldr	r3, [r0, #0]
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000b08:	f023 0303 	bic.w	r3, r3, #3
 8000b0c:	2118      	movs	r1, #24
 8000b0e:	3a10      	subs	r2, #16
 8000b10:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000b14:	4904      	ldr	r1, [pc, #16]	; (8000b28 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000b16:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000b18:	bf88      	it	hi
 8000b1a:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000b1c:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000b1e:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000b20:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 8000b22:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	08001f98 	.word	0x08001f98

08000b2c <HAL_DMA_Init>:
{
 8000b2c:	b570      	push	{r4, r5, r6, lr}
 8000b2e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000b30:	f7ff fd08 	bl	8000544 <HAL_GetTick>
 8000b34:	4605      	mov	r5, r0
  if(hdma == NULL)
 8000b36:	2c00      	cmp	r4, #0
 8000b38:	d071      	beq.n	8000c1e <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8000b40:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b42:	2302      	movs	r3, #2
 8000b44:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000b48:	6813      	ldr	r3, [r2, #0]
 8000b4a:	f023 0301 	bic.w	r3, r3, #1
 8000b4e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000b50:	6821      	ldr	r1, [r4, #0]
 8000b52:	680b      	ldr	r3, [r1, #0]
 8000b54:	07d8      	lsls	r0, r3, #31
 8000b56:	d43c      	bmi.n	8000bd2 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8000b58:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000b5a:	4d32      	ldr	r5, [pc, #200]	; (8000c24 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000b5c:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b5e:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000b60:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000b62:	68a3      	ldr	r3, [r4, #8]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	68e2      	ldr	r2, [r4, #12]
 8000b68:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b6a:	6922      	ldr	r2, [r4, #16]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	6962      	ldr	r2, [r4, #20]
 8000b70:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b72:	69e2      	ldr	r2, [r4, #28]
 8000b74:	4303      	orrs	r3, r0
 8000b76:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b78:	6a22      	ldr	r2, [r4, #32]
 8000b7a:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000b7c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b7e:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000b80:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000b84:	bf01      	itttt	eq
 8000b86:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8000b88:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8000b8a:	4335      	orreq	r5, r6
 8000b8c:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8000b8e:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8000b90:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000b92:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000b94:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000b98:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000b9c:	d10b      	bne.n	8000bb6 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8000b9e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000ba0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8000ba2:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000ba4:	b13d      	cbz	r5, 8000bb6 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000ba6:	b9f8      	cbnz	r0, 8000be8 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8000ba8:	2a01      	cmp	r2, #1
 8000baa:	d02d      	beq.n	8000c08 <HAL_DMA_Init+0xdc>
 8000bac:	d301      	bcc.n	8000bb2 <HAL_DMA_Init+0x86>
 8000bae:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000bb0:	d101      	bne.n	8000bb6 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000bb2:	01ea      	lsls	r2, r5, #7
 8000bb4:	d42b      	bmi.n	8000c0e <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8000bb6:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000bb8:	4620      	mov	r0, r4
 8000bba:	f7ff ffa1 	bl	8000b00 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000bbe:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000bc0:	233f      	movs	r3, #63	; 0x3f
 8000bc2:	4093      	lsls	r3, r2
 8000bc4:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bc6:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000bc8:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bca:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000bcc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000bd0:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000bd2:	f7ff fcb7 	bl	8000544 <HAL_GetTick>
 8000bd6:	1b40      	subs	r0, r0, r5
 8000bd8:	2805      	cmp	r0, #5
 8000bda:	d9b9      	bls.n	8000b50 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000bdc:	2320      	movs	r3, #32
 8000bde:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000be0:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8000be2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000be6:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000be8:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000bec:	d113      	bne.n	8000c16 <HAL_DMA_Init+0xea>
    switch (tmp)
 8000bee:	2a03      	cmp	r2, #3
 8000bf0:	d8e1      	bhi.n	8000bb6 <HAL_DMA_Init+0x8a>
 8000bf2:	a001      	add	r0, pc, #4	; (adr r0, 8000bf8 <HAL_DMA_Init+0xcc>)
 8000bf4:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000bf8:	08000c0f 	.word	0x08000c0f
 8000bfc:	08000bb3 	.word	0x08000bb3
 8000c00:	08000c0f 	.word	0x08000c0f
 8000c04:	08000c09 	.word	0x08000c09
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000c08:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8000c0c:	d1d3      	bne.n	8000bb6 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000c0e:	2340      	movs	r3, #64	; 0x40
 8000c10:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000c12:	2001      	movs	r0, #1
 8000c14:	e7e5      	b.n	8000be2 <HAL_DMA_Init+0xb6>
    switch (tmp)
 8000c16:	2a02      	cmp	r2, #2
 8000c18:	d9f9      	bls.n	8000c0e <HAL_DMA_Init+0xe2>
 8000c1a:	2a03      	cmp	r2, #3
 8000c1c:	e7c8      	b.n	8000bb0 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8000c1e:	2001      	movs	r0, #1
 8000c20:	bd70      	pop	{r4, r5, r6, pc}
 8000c22:	bf00      	nop
 8000c24:	f010803f 	.word	0xf010803f

08000c28 <HAL_DMA_Start_IT>:
{
 8000c28:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8000c2a:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8000c2e:	2c01      	cmp	r4, #1
 8000c30:	d036      	beq.n	8000ca0 <HAL_DMA_Start_IT+0x78>
 8000c32:	2401      	movs	r4, #1
 8000c34:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c38:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000c3c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c3e:	2c01      	cmp	r4, #1
 8000c40:	f04f 0500 	mov.w	r5, #0
 8000c44:	f04f 0402 	mov.w	r4, #2
 8000c48:	d128      	bne.n	8000c9c <HAL_DMA_Start_IT+0x74>
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c4a:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000c4e:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c50:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000c52:	6825      	ldr	r5, [r4, #0]
 8000c54:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8000c58:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8000c5a:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000c5c:	6883      	ldr	r3, [r0, #8]
 8000c5e:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8000c60:	bf0e      	itee	eq
 8000c62:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8000c64:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8000c66:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c68:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8000c6a:	bf08      	it	eq
 8000c6c:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c6e:	233f      	movs	r3, #63	; 0x3f
 8000c70:	4093      	lsls	r3, r2
 8000c72:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000c74:	6823      	ldr	r3, [r4, #0]
 8000c76:	f043 0316 	orr.w	r3, r3, #22
 8000c7a:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000c7c:	6963      	ldr	r3, [r4, #20]
 8000c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c82:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8000c84:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000c86:	b11b      	cbz	r3, 8000c90 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000c88:	6823      	ldr	r3, [r4, #0]
 8000c8a:	f043 0308 	orr.w	r3, r3, #8
 8000c8e:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000c90:	6823      	ldr	r3, [r4, #0]
 8000c92:	f043 0301 	orr.w	r3, r3, #1
 8000c96:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c98:	2000      	movs	r0, #0
 8000c9a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8000c9c:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8000ca0:	2002      	movs	r0, #2
}
 8000ca2:	bd70      	pop	{r4, r5, r6, pc}

08000ca4 <HAL_DMA_IRQHandler>:
{
 8000ca4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000caa:	4b5a      	ldr	r3, [pc, #360]	; (8000e14 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000cac:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8000cae:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000cb0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000cb2:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000cb4:	2208      	movs	r2, #8
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	4216      	tst	r6, r2
{
 8000cba:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000cbc:	d00c      	beq.n	8000cd8 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000cbe:	6801      	ldr	r1, [r0, #0]
 8000cc0:	6808      	ldr	r0, [r1, #0]
 8000cc2:	0740      	lsls	r0, r0, #29
 8000cc4:	d508      	bpl.n	8000cd8 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000cc6:	6808      	ldr	r0, [r1, #0]
 8000cc8:	f020 0004 	bic.w	r0, r0, #4
 8000ccc:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000cce:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000cd0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000cd2:	f042 0201 	orr.w	r2, r2, #1
 8000cd6:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	409a      	lsls	r2, r3
 8000cdc:	4216      	tst	r6, r2
 8000cde:	d008      	beq.n	8000cf2 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000ce0:	6821      	ldr	r1, [r4, #0]
 8000ce2:	6949      	ldr	r1, [r1, #20]
 8000ce4:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000ce6:	bf41      	itttt	mi
 8000ce8:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000cea:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000cec:	f042 0202 	orrmi.w	r2, r2, #2
 8000cf0:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000cf2:	2204      	movs	r2, #4
 8000cf4:	409a      	lsls	r2, r3
 8000cf6:	4216      	tst	r6, r2
 8000cf8:	d008      	beq.n	8000d0c <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000cfa:	6821      	ldr	r1, [r4, #0]
 8000cfc:	6809      	ldr	r1, [r1, #0]
 8000cfe:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000d00:	bf41      	itttt	mi
 8000d02:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000d04:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000d06:	f042 0204 	orrmi.w	r2, r2, #4
 8000d0a:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000d0c:	2210      	movs	r2, #16
 8000d0e:	409a      	lsls	r2, r3
 8000d10:	4216      	tst	r6, r2
 8000d12:	d010      	beq.n	8000d36 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000d14:	6823      	ldr	r3, [r4, #0]
 8000d16:	6819      	ldr	r1, [r3, #0]
 8000d18:	0709      	lsls	r1, r1, #28
 8000d1a:	d50c      	bpl.n	8000d36 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000d1c:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	0350      	lsls	r0, r2, #13
 8000d22:	d535      	bpl.n	8000d90 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	0319      	lsls	r1, r3, #12
 8000d28:	d401      	bmi.n	8000d2e <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8000d2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d2c:	e000      	b.n	8000d30 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000d2e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8000d30:	b10b      	cbz	r3, 8000d36 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8000d32:	4620      	mov	r0, r4
 8000d34:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000d36:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000d38:	2220      	movs	r2, #32
 8000d3a:	408a      	lsls	r2, r1
 8000d3c:	4216      	tst	r6, r2
 8000d3e:	d038      	beq.n	8000db2 <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000d40:	6823      	ldr	r3, [r4, #0]
 8000d42:	6818      	ldr	r0, [r3, #0]
 8000d44:	06c6      	lsls	r6, r0, #27
 8000d46:	d534      	bpl.n	8000db2 <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000d48:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000d4a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000d4e:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d50:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000d52:	d125      	bne.n	8000da0 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d54:	f022 0216 	bic.w	r2, r2, #22
 8000d58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d5a:	695a      	ldr	r2, [r3, #20]
 8000d5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d60:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d62:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000d64:	b90a      	cbnz	r2, 8000d6a <HAL_DMA_IRQHandler+0xc6>
 8000d66:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000d68:	b11a      	cbz	r2, 8000d72 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	f022 0208 	bic.w	r2, r2, #8
 8000d70:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d72:	233f      	movs	r3, #63	; 0x3f
 8000d74:	408b      	lsls	r3, r1
 8000d76:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000d84:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8000d86:	b10b      	cbz	r3, 8000d8c <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8000d88:	4620      	mov	r0, r4
 8000d8a:	4798      	blx	r3
}
 8000d8c:	b003      	add	sp, #12
 8000d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d94:	bf5e      	ittt	pl
 8000d96:	681a      	ldrpl	r2, [r3, #0]
 8000d98:	f022 0208 	bicpl.w	r2, r2, #8
 8000d9c:	601a      	strpl	r2, [r3, #0]
 8000d9e:	e7c4      	b.n	8000d2a <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000da0:	0350      	lsls	r0, r2, #13
 8000da2:	d528      	bpl.n	8000df6 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	0319      	lsls	r1, r3, #12
 8000da8:	d432      	bmi.n	8000e10 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8000daa:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8000dac:	b10b      	cbz	r3, 8000db2 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8000dae:	4620      	mov	r0, r4
 8000db0:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000db2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d0e9      	beq.n	8000d8c <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000db8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000dba:	07da      	lsls	r2, r3, #31
 8000dbc:	d519      	bpl.n	8000df2 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000dbe:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8000dc0:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8000dc2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000dc6:	6813      	ldr	r3, [r2, #0]
 8000dc8:	f023 0301 	bic.w	r3, r3, #1
 8000dcc:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000dce:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000dd2:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8000dd6:	9b01      	ldr	r3, [sp, #4]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	429f      	cmp	r7, r3
 8000ddc:	9301      	str	r3, [sp, #4]
 8000dde:	d302      	bcc.n	8000de6 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000de0:	6813      	ldr	r3, [r2, #0]
 8000de2:	07db      	lsls	r3, r3, #31
 8000de4:	d4f7      	bmi.n	8000dd6 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8000de6:	2300      	movs	r3, #0
 8000de8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000dec:	2301      	movs	r3, #1
 8000dee:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000df2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000df4:	e7c7      	b.n	8000d86 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000dfc:	d108      	bne.n	8000e10 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000dfe:	6819      	ldr	r1, [r3, #0]
 8000e00:	f021 0110 	bic.w	r1, r1, #16
 8000e04:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000e06:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8000e08:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000e0c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000e10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e12:	e7cb      	b.n	8000dac <HAL_DMA_IRQHandler+0x108>
 8000e14:	20000000 	.word	0x20000000

08000e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e1c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e1e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e20:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000fd0 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e24:	4a68      	ldr	r2, [pc, #416]	; (8000fc8 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e26:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000fd4 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e2a:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e2c:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000e2e:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e32:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000e34:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e38:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000e3c:	45b6      	cmp	lr, r6
 8000e3e:	f040 80ae 	bne.w	8000f9e <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e42:	684c      	ldr	r4, [r1, #4]
 8000e44:	f024 0710 	bic.w	r7, r4, #16
 8000e48:	2f02      	cmp	r7, #2
 8000e4a:	d116      	bne.n	8000e7a <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000e4c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000e50:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e54:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000e58:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e5c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000e60:	f04f 0c0f 	mov.w	ip, #15
 8000e64:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000e68:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e6c:	690d      	ldr	r5, [r1, #16]
 8000e6e:	fa05 f50b 	lsl.w	r5, r5, fp
 8000e72:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000e76:	f8ca 5020 	str.w	r5, [sl, #32]
 8000e7a:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e7e:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000e80:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e84:	fa05 f50a 	lsl.w	r5, r5, sl
 8000e88:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e8a:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e8e:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e92:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e96:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e98:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e9c:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000e9e:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ea2:	d811      	bhi.n	8000ec8 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000ea4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ea6:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eaa:	68cf      	ldr	r7, [r1, #12]
 8000eac:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000eb0:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000eb4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000eb6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eb8:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ebc:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000ec0:	409f      	lsls	r7, r3
 8000ec2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000ec6:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000ec8:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eca:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ecc:	688f      	ldr	r7, [r1, #8]
 8000ece:	fa07 f70a 	lsl.w	r7, r7, sl
 8000ed2:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000ed4:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ed6:	00e5      	lsls	r5, r4, #3
 8000ed8:	d561      	bpl.n	8000f9e <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eda:	f04f 0b00 	mov.w	fp, #0
 8000ede:	f8cd b00c 	str.w	fp, [sp, #12]
 8000ee2:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ee6:	4d39      	ldr	r5, [pc, #228]	; (8000fcc <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee8:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000eec:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000ef0:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000ef4:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000ef8:	9703      	str	r7, [sp, #12]
 8000efa:	9f03      	ldr	r7, [sp, #12]
 8000efc:	f023 0703 	bic.w	r7, r3, #3
 8000f00:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000f04:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f08:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000f0c:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f10:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000f14:	f04f 0e0f 	mov.w	lr, #15
 8000f18:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f1c:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f1e:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f22:	d043      	beq.n	8000fac <HAL_GPIO_Init+0x194>
 8000f24:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f28:	42a8      	cmp	r0, r5
 8000f2a:	d041      	beq.n	8000fb0 <HAL_GPIO_Init+0x198>
 8000f2c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f30:	42a8      	cmp	r0, r5
 8000f32:	d03f      	beq.n	8000fb4 <HAL_GPIO_Init+0x19c>
 8000f34:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f38:	42a8      	cmp	r0, r5
 8000f3a:	d03d      	beq.n	8000fb8 <HAL_GPIO_Init+0x1a0>
 8000f3c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f40:	42a8      	cmp	r0, r5
 8000f42:	d03b      	beq.n	8000fbc <HAL_GPIO_Init+0x1a4>
 8000f44:	4548      	cmp	r0, r9
 8000f46:	d03b      	beq.n	8000fc0 <HAL_GPIO_Init+0x1a8>
 8000f48:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000f4c:	42a8      	cmp	r0, r5
 8000f4e:	d039      	beq.n	8000fc4 <HAL_GPIO_Init+0x1ac>
 8000f50:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f54:	42a8      	cmp	r0, r5
 8000f56:	bf14      	ite	ne
 8000f58:	2508      	movne	r5, #8
 8000f5a:	2507      	moveq	r5, #7
 8000f5c:	fa05 f50c 	lsl.w	r5, r5, ip
 8000f60:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f64:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000f66:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000f68:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f6a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000f6e:	bf0c      	ite	eq
 8000f70:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000f72:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000f74:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000f76:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f78:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000f7c:	bf0c      	ite	eq
 8000f7e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000f80:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000f82:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f84:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f86:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000f8a:	bf0c      	ite	eq
 8000f8c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000f8e:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000f90:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000f92:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f94:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000f96:	bf54      	ite	pl
 8000f98:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000f9a:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000f9c:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	2b10      	cmp	r3, #16
 8000fa2:	f47f af44 	bne.w	8000e2e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000fa6:	b005      	add	sp, #20
 8000fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fac:	465d      	mov	r5, fp
 8000fae:	e7d5      	b.n	8000f5c <HAL_GPIO_Init+0x144>
 8000fb0:	2501      	movs	r5, #1
 8000fb2:	e7d3      	b.n	8000f5c <HAL_GPIO_Init+0x144>
 8000fb4:	2502      	movs	r5, #2
 8000fb6:	e7d1      	b.n	8000f5c <HAL_GPIO_Init+0x144>
 8000fb8:	2503      	movs	r5, #3
 8000fba:	e7cf      	b.n	8000f5c <HAL_GPIO_Init+0x144>
 8000fbc:	2504      	movs	r5, #4
 8000fbe:	e7cd      	b.n	8000f5c <HAL_GPIO_Init+0x144>
 8000fc0:	2505      	movs	r5, #5
 8000fc2:	e7cb      	b.n	8000f5c <HAL_GPIO_Init+0x144>
 8000fc4:	2506      	movs	r5, #6
 8000fc6:	e7c9      	b.n	8000f5c <HAL_GPIO_Init+0x144>
 8000fc8:	40013c00 	.word	0x40013c00
 8000fcc:	40020000 	.word	0x40020000
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40021400 	.word	0x40021400

08000fd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fda:	4604      	mov	r4, r0
 8000fdc:	b910      	cbnz	r0, 8000fe4 <HAL_RCC_OscConfig+0xc>
  {
    return HAL_ERROR;
 8000fde:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000fe0:	b003      	add	sp, #12
 8000fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fe4:	6803      	ldr	r3, [r0, #0]
 8000fe6:	07d8      	lsls	r0, r3, #31
 8000fe8:	d43b      	bmi.n	8001062 <HAL_RCC_OscConfig+0x8a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fea:	6823      	ldr	r3, [r4, #0]
 8000fec:	0799      	lsls	r1, r3, #30
 8000fee:	f100 8084 	bmi.w	80010fa <HAL_RCC_OscConfig+0x122>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ff2:	6823      	ldr	r3, [r4, #0]
 8000ff4:	071e      	lsls	r6, r3, #28
 8000ff6:	f100 80c6 	bmi.w	8001186 <HAL_RCC_OscConfig+0x1ae>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ffa:	6823      	ldr	r3, [r4, #0]
 8000ffc:	075d      	lsls	r5, r3, #29
 8000ffe:	d52a      	bpl.n	8001056 <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001000:	2300      	movs	r3, #0
 8001002:	9301      	str	r3, [sp, #4]
 8001004:	4baa      	ldr	r3, [pc, #680]	; (80012b0 <HAL_RCC_OscConfig+0x2d8>)
    PWR->CR |= PWR_CR_DBP;
 8001006:	4dab      	ldr	r5, [pc, #684]	; (80012b4 <HAL_RCC_OscConfig+0x2dc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001008:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800100a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800100e:	641a      	str	r2, [r3, #64]	; 0x40
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001016:	9301      	str	r3, [sp, #4]
 8001018:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800101a:	682b      	ldr	r3, [r5, #0]
 800101c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001020:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001022:	f7ff fa8f 	bl	8000544 <HAL_GetTick>
 8001026:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001028:	682b      	ldr	r3, [r5, #0]
 800102a:	05da      	lsls	r2, r3, #23
 800102c:	f140 80cd 	bpl.w	80011ca <HAL_RCC_OscConfig+0x1f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001030:	68a3      	ldr	r3, [r4, #8]
 8001032:	4d9f      	ldr	r5, [pc, #636]	; (80012b0 <HAL_RCC_OscConfig+0x2d8>)
 8001034:	2b01      	cmp	r3, #1
 8001036:	f040 80cf 	bne.w	80011d8 <HAL_RCC_OscConfig+0x200>
 800103a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001042:	f7ff fa7f 	bl	8000544 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001046:	4d9a      	ldr	r5, [pc, #616]	; (80012b0 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8001048:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800104a:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800104e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001050:	079b      	lsls	r3, r3, #30
 8001052:	f140 80e2 	bpl.w	800121a <HAL_RCC_OscConfig+0x242>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001056:	69a2      	ldr	r2, [r4, #24]
 8001058:	2a00      	cmp	r2, #0
 800105a:	f040 80e5 	bne.w	8001228 <HAL_RCC_OscConfig+0x250>
  return HAL_OK;
 800105e:	2000      	movs	r0, #0
 8001060:	e7be      	b.n	8000fe0 <HAL_RCC_OscConfig+0x8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001062:	4b93      	ldr	r3, [pc, #588]	; (80012b0 <HAL_RCC_OscConfig+0x2d8>)
 8001064:	689a      	ldr	r2, [r3, #8]
 8001066:	f002 020c 	and.w	r2, r2, #12
 800106a:	2a04      	cmp	r2, #4
 800106c:	d007      	beq.n	800107e <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001074:	2a08      	cmp	r2, #8
 8001076:	d10a      	bne.n	800108e <HAL_RCC_OscConfig+0xb6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	025a      	lsls	r2, r3, #9
 800107c:	d507      	bpl.n	800108e <HAL_RCC_OscConfig+0xb6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800107e:	4b8c      	ldr	r3, [pc, #560]	; (80012b0 <HAL_RCC_OscConfig+0x2d8>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	039b      	lsls	r3, r3, #14
 8001084:	d5b1      	bpl.n	8000fea <HAL_RCC_OscConfig+0x12>
 8001086:	6863      	ldr	r3, [r4, #4]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1ae      	bne.n	8000fea <HAL_RCC_OscConfig+0x12>
 800108c:	e7a7      	b.n	8000fde <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800108e:	6863      	ldr	r3, [r4, #4]
 8001090:	4d87      	ldr	r5, [pc, #540]	; (80012b0 <HAL_RCC_OscConfig+0x2d8>)
 8001092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001096:	d111      	bne.n	80010bc <HAL_RCC_OscConfig+0xe4>
 8001098:	682b      	ldr	r3, [r5, #0]
 800109a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800109e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80010a0:	f7ff fa50 	bl	8000544 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a4:	4d82      	ldr	r5, [pc, #520]	; (80012b0 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 80010a6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a8:	682b      	ldr	r3, [r5, #0]
 80010aa:	039f      	lsls	r7, r3, #14
 80010ac:	d49d      	bmi.n	8000fea <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010ae:	f7ff fa49 	bl	8000544 <HAL_GetTick>
 80010b2:	1b80      	subs	r0, r0, r6
 80010b4:	2864      	cmp	r0, #100	; 0x64
 80010b6:	d9f7      	bls.n	80010a8 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 80010b8:	2003      	movs	r0, #3
 80010ba:	e791      	b.n	8000fe0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010c0:	d104      	bne.n	80010cc <HAL_RCC_OscConfig+0xf4>
 80010c2:	682b      	ldr	r3, [r5, #0]
 80010c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c8:	602b      	str	r3, [r5, #0]
 80010ca:	e7e5      	b.n	8001098 <HAL_RCC_OscConfig+0xc0>
 80010cc:	682a      	ldr	r2, [r5, #0]
 80010ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80010d2:	602a      	str	r2, [r5, #0]
 80010d4:	682a      	ldr	r2, [r5, #0]
 80010d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80010da:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d1df      	bne.n	80010a0 <HAL_RCC_OscConfig+0xc8>
        tickstart = HAL_GetTick();
 80010e0:	f7ff fa30 	bl	8000544 <HAL_GetTick>
 80010e4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010e6:	682b      	ldr	r3, [r5, #0]
 80010e8:	0398      	lsls	r0, r3, #14
 80010ea:	f57f af7e 	bpl.w	8000fea <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010ee:	f7ff fa29 	bl	8000544 <HAL_GetTick>
 80010f2:	1b80      	subs	r0, r0, r6
 80010f4:	2864      	cmp	r0, #100	; 0x64
 80010f6:	d9f6      	bls.n	80010e6 <HAL_RCC_OscConfig+0x10e>
 80010f8:	e7de      	b.n	80010b8 <HAL_RCC_OscConfig+0xe0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010fa:	4b6d      	ldr	r3, [pc, #436]	; (80012b0 <HAL_RCC_OscConfig+0x2d8>)
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	f012 0f0c 	tst.w	r2, #12
 8001102:	d007      	beq.n	8001114 <HAL_RCC_OscConfig+0x13c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001104:	689a      	ldr	r2, [r3, #8]
 8001106:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800110a:	2a08      	cmp	r2, #8
 800110c:	d112      	bne.n	8001134 <HAL_RCC_OscConfig+0x15c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	0259      	lsls	r1, r3, #9
 8001112:	d40f      	bmi.n	8001134 <HAL_RCC_OscConfig+0x15c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001114:	4b66      	ldr	r3, [pc, #408]	; (80012b0 <HAL_RCC_OscConfig+0x2d8>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	0792      	lsls	r2, r2, #30
 800111a:	d503      	bpl.n	8001124 <HAL_RCC_OscConfig+0x14c>
 800111c:	68e2      	ldr	r2, [r4, #12]
 800111e:	2a01      	cmp	r2, #1
 8001120:	f47f af5d 	bne.w	8000fde <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	6921      	ldr	r1, [r4, #16]
 8001128:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800112c:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001130:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001132:	e75e      	b.n	8000ff2 <HAL_RCC_OscConfig+0x1a>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001134:	68e2      	ldr	r2, [r4, #12]
 8001136:	4b60      	ldr	r3, [pc, #384]	; (80012b8 <HAL_RCC_OscConfig+0x2e0>)
 8001138:	b1b2      	cbz	r2, 8001168 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 800113a:	2201      	movs	r2, #1
 800113c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800113e:	f7ff fa01 	bl	8000544 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001142:	4d5b      	ldr	r5, [pc, #364]	; (80012b0 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8001144:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001146:	682b      	ldr	r3, [r5, #0]
 8001148:	079b      	lsls	r3, r3, #30
 800114a:	d507      	bpl.n	800115c <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800114c:	682b      	ldr	r3, [r5, #0]
 800114e:	6922      	ldr	r2, [r4, #16]
 8001150:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001154:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001158:	602b      	str	r3, [r5, #0]
 800115a:	e74a      	b.n	8000ff2 <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800115c:	f7ff f9f2 	bl	8000544 <HAL_GetTick>
 8001160:	1b80      	subs	r0, r0, r6
 8001162:	2802      	cmp	r0, #2
 8001164:	d9ef      	bls.n	8001146 <HAL_RCC_OscConfig+0x16e>
 8001166:	e7a7      	b.n	80010b8 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 8001168:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800116a:	f7ff f9eb 	bl	8000544 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800116e:	4d50      	ldr	r5, [pc, #320]	; (80012b0 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8001170:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001172:	682b      	ldr	r3, [r5, #0]
 8001174:	079f      	lsls	r7, r3, #30
 8001176:	f57f af3c 	bpl.w	8000ff2 <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800117a:	f7ff f9e3 	bl	8000544 <HAL_GetTick>
 800117e:	1b80      	subs	r0, r0, r6
 8001180:	2802      	cmp	r0, #2
 8001182:	d9f6      	bls.n	8001172 <HAL_RCC_OscConfig+0x19a>
 8001184:	e798      	b.n	80010b8 <HAL_RCC_OscConfig+0xe0>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001186:	6962      	ldr	r2, [r4, #20]
 8001188:	4b4c      	ldr	r3, [pc, #304]	; (80012bc <HAL_RCC_OscConfig+0x2e4>)
 800118a:	b17a      	cbz	r2, 80011ac <HAL_RCC_OscConfig+0x1d4>
      __HAL_RCC_LSI_ENABLE();
 800118c:	2201      	movs	r2, #1
 800118e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001190:	f7ff f9d8 	bl	8000544 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001194:	4d46      	ldr	r5, [pc, #280]	; (80012b0 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8001196:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001198:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800119a:	0798      	lsls	r0, r3, #30
 800119c:	f53f af2d 	bmi.w	8000ffa <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011a0:	f7ff f9d0 	bl	8000544 <HAL_GetTick>
 80011a4:	1b80      	subs	r0, r0, r6
 80011a6:	2802      	cmp	r0, #2
 80011a8:	d9f6      	bls.n	8001198 <HAL_RCC_OscConfig+0x1c0>
 80011aa:	e785      	b.n	80010b8 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_LSI_DISABLE();
 80011ac:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80011ae:	f7ff f9c9 	bl	8000544 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011b2:	4d3f      	ldr	r5, [pc, #252]	; (80012b0 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 80011b4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011b6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80011b8:	0799      	lsls	r1, r3, #30
 80011ba:	f57f af1e 	bpl.w	8000ffa <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011be:	f7ff f9c1 	bl	8000544 <HAL_GetTick>
 80011c2:	1b80      	subs	r0, r0, r6
 80011c4:	2802      	cmp	r0, #2
 80011c6:	d9f6      	bls.n	80011b6 <HAL_RCC_OscConfig+0x1de>
 80011c8:	e776      	b.n	80010b8 <HAL_RCC_OscConfig+0xe0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80011ca:	f7ff f9bb 	bl	8000544 <HAL_GetTick>
 80011ce:	1b80      	subs	r0, r0, r6
 80011d0:	2802      	cmp	r0, #2
 80011d2:	f67f af29 	bls.w	8001028 <HAL_RCC_OscConfig+0x50>
 80011d6:	e76f      	b.n	80010b8 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011d8:	2b05      	cmp	r3, #5
 80011da:	d104      	bne.n	80011e6 <HAL_RCC_OscConfig+0x20e>
 80011dc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80011de:	f043 0304 	orr.w	r3, r3, #4
 80011e2:	672b      	str	r3, [r5, #112]	; 0x70
 80011e4:	e729      	b.n	800103a <HAL_RCC_OscConfig+0x62>
 80011e6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80011e8:	f022 0201 	bic.w	r2, r2, #1
 80011ec:	672a      	str	r2, [r5, #112]	; 0x70
 80011ee:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80011f0:	f022 0204 	bic.w	r2, r2, #4
 80011f4:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f47f af23 	bne.w	8001042 <HAL_RCC_OscConfig+0x6a>
      tickstart = HAL_GetTick();
 80011fc:	f7ff f9a2 	bl	8000544 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001200:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001204:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001206:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001208:	0798      	lsls	r0, r3, #30
 800120a:	f57f af24 	bpl.w	8001056 <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800120e:	f7ff f999 	bl	8000544 <HAL_GetTick>
 8001212:	1b80      	subs	r0, r0, r6
 8001214:	42b8      	cmp	r0, r7
 8001216:	d9f6      	bls.n	8001206 <HAL_RCC_OscConfig+0x22e>
 8001218:	e74e      	b.n	80010b8 <HAL_RCC_OscConfig+0xe0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800121a:	f7ff f993 	bl	8000544 <HAL_GetTick>
 800121e:	1b80      	subs	r0, r0, r6
 8001220:	42b8      	cmp	r0, r7
 8001222:	f67f af14 	bls.w	800104e <HAL_RCC_OscConfig+0x76>
 8001226:	e747      	b.n	80010b8 <HAL_RCC_OscConfig+0xe0>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001228:	4d21      	ldr	r5, [pc, #132]	; (80012b0 <HAL_RCC_OscConfig+0x2d8>)
 800122a:	68ab      	ldr	r3, [r5, #8]
 800122c:	f003 030c 	and.w	r3, r3, #12
 8001230:	2b08      	cmp	r3, #8
 8001232:	f43f aed4 	beq.w	8000fde <HAL_RCC_OscConfig+0x6>
 8001236:	4e22      	ldr	r6, [pc, #136]	; (80012c0 <HAL_RCC_OscConfig+0x2e8>)
 8001238:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800123a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800123c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800123e:	d12a      	bne.n	8001296 <HAL_RCC_OscConfig+0x2be>
        tickstart = HAL_GetTick();
 8001240:	f7ff f980 	bl	8000544 <HAL_GetTick>
 8001244:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001246:	682b      	ldr	r3, [r5, #0]
 8001248:	0199      	lsls	r1, r3, #6
 800124a:	d41e      	bmi.n	800128a <HAL_RCC_OscConfig+0x2b2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800124c:	6a22      	ldr	r2, [r4, #32]
 800124e:	69e3      	ldr	r3, [r4, #28]
 8001250:	4313      	orrs	r3, r2
 8001252:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001254:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001258:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800125a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800125e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001260:	4c13      	ldr	r4, [pc, #76]	; (80012b0 <HAL_RCC_OscConfig+0x2d8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001262:	0852      	lsrs	r2, r2, #1
 8001264:	3a01      	subs	r2, #1
 8001266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800126a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800126c:	2301      	movs	r3, #1
 800126e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001270:	f7ff f968 	bl	8000544 <HAL_GetTick>
 8001274:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001276:	6823      	ldr	r3, [r4, #0]
 8001278:	019a      	lsls	r2, r3, #6
 800127a:	f53f aef0 	bmi.w	800105e <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800127e:	f7ff f961 	bl	8000544 <HAL_GetTick>
 8001282:	1b40      	subs	r0, r0, r5
 8001284:	2802      	cmp	r0, #2
 8001286:	d9f6      	bls.n	8001276 <HAL_RCC_OscConfig+0x29e>
 8001288:	e716      	b.n	80010b8 <HAL_RCC_OscConfig+0xe0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800128a:	f7ff f95b 	bl	8000544 <HAL_GetTick>
 800128e:	1bc0      	subs	r0, r0, r7
 8001290:	2802      	cmp	r0, #2
 8001292:	d9d8      	bls.n	8001246 <HAL_RCC_OscConfig+0x26e>
 8001294:	e710      	b.n	80010b8 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 8001296:	f7ff f955 	bl	8000544 <HAL_GetTick>
 800129a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800129c:	682b      	ldr	r3, [r5, #0]
 800129e:	019b      	lsls	r3, r3, #6
 80012a0:	f57f aedd 	bpl.w	800105e <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012a4:	f7ff f94e 	bl	8000544 <HAL_GetTick>
 80012a8:	1b00      	subs	r0, r0, r4
 80012aa:	2802      	cmp	r0, #2
 80012ac:	d9f6      	bls.n	800129c <HAL_RCC_OscConfig+0x2c4>
 80012ae:	e703      	b.n	80010b8 <HAL_RCC_OscConfig+0xe0>
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40007000 	.word	0x40007000
 80012b8:	42470000 	.word	0x42470000
 80012bc:	42470e80 	.word	0x42470e80
 80012c0:	42470060 	.word	0x42470060

080012c4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012c4:	4913      	ldr	r1, [pc, #76]	; (8001314 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80012c6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012c8:	688b      	ldr	r3, [r1, #8]
 80012ca:	f003 030c 	and.w	r3, r3, #12
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	d003      	beq.n	80012da <HAL_RCC_GetSysClockFreq+0x16>
 80012d2:	2b08      	cmp	r3, #8
 80012d4:	d003      	beq.n	80012de <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012d6:	4810      	ldr	r0, [pc, #64]	; (8001318 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80012d8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80012da:	4810      	ldr	r0, [pc, #64]	; (800131c <HAL_RCC_GetSysClockFreq+0x58>)
 80012dc:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012de:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012e0:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012e2:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012e4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012e8:	bf14      	ite	ne
 80012ea:	480c      	ldrne	r0, [pc, #48]	; (800131c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012ec:	480a      	ldreq	r0, [pc, #40]	; (8001318 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012ee:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80012f2:	bf18      	it	ne
 80012f4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012f6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012fa:	fba1 0100 	umull	r0, r1, r1, r0
 80012fe:	f7fe ff63 	bl	80001c8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001302:	4b04      	ldr	r3, [pc, #16]	; (8001314 <HAL_RCC_GetSysClockFreq+0x50>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800130a:	3301      	adds	r3, #1
 800130c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800130e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001312:	bd08      	pop	{r3, pc}
 8001314:	40023800 	.word	0x40023800
 8001318:	00f42400 	.word	0x00f42400
 800131c:	017d7840 	.word	0x017d7840

08001320 <HAL_RCC_ClockConfig>:
{
 8001320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001324:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001326:	4604      	mov	r4, r0
 8001328:	b910      	cbnz	r0, 8001330 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800132a:	2001      	movs	r0, #1
 800132c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001330:	4b44      	ldr	r3, [pc, #272]	; (8001444 <HAL_RCC_ClockConfig+0x124>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	f002 020f 	and.w	r2, r2, #15
 8001338:	428a      	cmp	r2, r1
 800133a:	d328      	bcc.n	800138e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800133c:	6821      	ldr	r1, [r4, #0]
 800133e:	078f      	lsls	r7, r1, #30
 8001340:	d42d      	bmi.n	800139e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001342:	07c8      	lsls	r0, r1, #31
 8001344:	d440      	bmi.n	80013c8 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001346:	4b3f      	ldr	r3, [pc, #252]	; (8001444 <HAL_RCC_ClockConfig+0x124>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	f002 020f 	and.w	r2, r2, #15
 800134e:	4295      	cmp	r5, r2
 8001350:	d366      	bcc.n	8001420 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001352:	6822      	ldr	r2, [r4, #0]
 8001354:	0751      	lsls	r1, r2, #29
 8001356:	d46c      	bmi.n	8001432 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001358:	0713      	lsls	r3, r2, #28
 800135a:	d507      	bpl.n	800136c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800135c:	4a3a      	ldr	r2, [pc, #232]	; (8001448 <HAL_RCC_ClockConfig+0x128>)
 800135e:	6921      	ldr	r1, [r4, #16]
 8001360:	6893      	ldr	r3, [r2, #8]
 8001362:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001366:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800136a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800136c:	f7ff ffaa 	bl	80012c4 <HAL_RCC_GetSysClockFreq>
 8001370:	4b35      	ldr	r3, [pc, #212]	; (8001448 <HAL_RCC_ClockConfig+0x128>)
 8001372:	4a36      	ldr	r2, [pc, #216]	; (800144c <HAL_RCC_ClockConfig+0x12c>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800137a:	5cd3      	ldrb	r3, [r2, r3]
 800137c:	40d8      	lsrs	r0, r3
 800137e:	4b34      	ldr	r3, [pc, #208]	; (8001450 <HAL_RCC_ClockConfig+0x130>)
 8001380:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001382:	2000      	movs	r0, #0
 8001384:	f7ff f8a8 	bl	80004d8 <HAL_InitTick>
  return HAL_OK;
 8001388:	2000      	movs	r0, #0
 800138a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800138e:	b2ca      	uxtb	r2, r1
 8001390:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 030f 	and.w	r3, r3, #15
 8001398:	4299      	cmp	r1, r3
 800139a:	d1c6      	bne.n	800132a <HAL_RCC_ClockConfig+0xa>
 800139c:	e7ce      	b.n	800133c <HAL_RCC_ClockConfig+0x1c>
 800139e:	4b2a      	ldr	r3, [pc, #168]	; (8001448 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a0:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013a4:	bf1e      	ittt	ne
 80013a6:	689a      	ldrne	r2, [r3, #8]
 80013a8:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80013ac:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ae:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013b0:	bf42      	ittt	mi
 80013b2:	689a      	ldrmi	r2, [r3, #8]
 80013b4:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80013b8:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	68a0      	ldr	r0, [r4, #8]
 80013be:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80013c2:	4302      	orrs	r2, r0
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	e7bc      	b.n	8001342 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013c8:	6862      	ldr	r2, [r4, #4]
 80013ca:	4b1f      	ldr	r3, [pc, #124]	; (8001448 <HAL_RCC_ClockConfig+0x128>)
 80013cc:	2a01      	cmp	r2, #1
 80013ce:	d11d      	bne.n	800140c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d6:	d0a8      	beq.n	800132a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013d8:	4e1b      	ldr	r6, [pc, #108]	; (8001448 <HAL_RCC_ClockConfig+0x128>)
 80013da:	68b3      	ldr	r3, [r6, #8]
 80013dc:	f023 0303 	bic.w	r3, r3, #3
 80013e0:	4313      	orrs	r3, r2
 80013e2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80013e4:	f7ff f8ae 	bl	8000544 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013e8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80013ec:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ee:	68b3      	ldr	r3, [r6, #8]
 80013f0:	6862      	ldr	r2, [r4, #4]
 80013f2:	f003 030c 	and.w	r3, r3, #12
 80013f6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80013fa:	d0a4      	beq.n	8001346 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013fc:	f7ff f8a2 	bl	8000544 <HAL_GetTick>
 8001400:	1bc0      	subs	r0, r0, r7
 8001402:	4540      	cmp	r0, r8
 8001404:	d9f3      	bls.n	80013ee <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001406:	2003      	movs	r0, #3
}
 8001408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800140c:	1e91      	subs	r1, r2, #2
 800140e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001410:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001412:	d802      	bhi.n	800141a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001414:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001418:	e7dd      	b.n	80013d6 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800141a:	f013 0f02 	tst.w	r3, #2
 800141e:	e7da      	b.n	80013d6 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001420:	b2ea      	uxtb	r2, r5
 8001422:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 030f 	and.w	r3, r3, #15
 800142a:	429d      	cmp	r5, r3
 800142c:	f47f af7d 	bne.w	800132a <HAL_RCC_ClockConfig+0xa>
 8001430:	e78f      	b.n	8001352 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001432:	4905      	ldr	r1, [pc, #20]	; (8001448 <HAL_RCC_ClockConfig+0x128>)
 8001434:	68e0      	ldr	r0, [r4, #12]
 8001436:	688b      	ldr	r3, [r1, #8]
 8001438:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800143c:	4303      	orrs	r3, r0
 800143e:	608b      	str	r3, [r1, #8]
 8001440:	e78a      	b.n	8001358 <HAL_RCC_ClockConfig+0x38>
 8001442:	bf00      	nop
 8001444:	40023c00 	.word	0x40023c00
 8001448:	40023800 	.word	0x40023800
 800144c:	08001fad 	.word	0x08001fad
 8001450:	20000000 	.word	0x20000000

08001454 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001454:	4b01      	ldr	r3, [pc, #4]	; (800145c <HAL_RCC_GetHCLKFreq+0x8>)
 8001456:	6818      	ldr	r0, [r3, #0]
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	20000000 	.word	0x20000000

08001460 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001460:	6a03      	ldr	r3, [r0, #32]
 8001462:	f023 0301 	bic.w	r3, r3, #1
 8001466:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001468:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800146a:	6842      	ldr	r2, [r0, #4]
{
 800146c:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800146e:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001470:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001472:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001476:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001478:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800147a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800147e:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001480:	4c0c      	ldr	r4, [pc, #48]	; (80014b4 <TIM_OC1_SetConfig+0x54>)
 8001482:	42a0      	cmp	r0, r4
 8001484:	d009      	beq.n	800149a <TIM_OC1_SetConfig+0x3a>
 8001486:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800148a:	42a0      	cmp	r0, r4
 800148c:	d005      	beq.n	800149a <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800148e:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001490:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001492:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001494:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001496:	6203      	str	r3, [r0, #32]
} 
 8001498:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 800149a:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 800149c:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 800149e:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80014a2:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 80014a4:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80014a6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80014aa:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80014ac:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80014b0:	4322      	orrs	r2, r4
 80014b2:	e7ec      	b.n	800148e <TIM_OC1_SetConfig+0x2e>
 80014b4:	40010000 	.word	0x40010000

080014b8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80014b8:	6a03      	ldr	r3, [r0, #32]
 80014ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014be:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80014c0:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80014c2:	6842      	ldr	r2, [r0, #4]
{
 80014c4:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80014c6:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80014c8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80014ca:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80014ce:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80014d0:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80014d2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80014d6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80014da:	4c0e      	ldr	r4, [pc, #56]	; (8001514 <TIM_OC3_SetConfig+0x5c>)
 80014dc:	42a0      	cmp	r0, r4
 80014de:	d009      	beq.n	80014f4 <TIM_OC3_SetConfig+0x3c>
 80014e0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80014e4:	42a0      	cmp	r0, r4
 80014e6:	d005      	beq.n	80014f4 <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80014e8:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80014ea:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80014ec:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80014ee:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80014f0:	6203      	str	r3, [r0, #32]
}
 80014f2:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80014f4:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80014f6:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 80014f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80014fc:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001500:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001502:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001506:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001508:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800150c:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8001510:	e7ea      	b.n	80014e8 <TIM_OC3_SetConfig+0x30>
 8001512:	bf00      	nop
 8001514:	40010000 	.word	0x40010000

08001518 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001518:	6a03      	ldr	r3, [r0, #32]
 800151a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800151e:	6203      	str	r3, [r0, #32]
{
 8001520:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001522:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001524:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001526:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001528:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800152a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800152e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001532:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001534:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001538:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800153c:	4d09      	ldr	r5, [pc, #36]	; (8001564 <TIM_OC4_SetConfig+0x4c>)
 800153e:	42a8      	cmp	r0, r5
 8001540:	d009      	beq.n	8001556 <TIM_OC4_SetConfig+0x3e>
 8001542:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001546:	42a8      	cmp	r0, r5
 8001548:	d005      	beq.n	8001556 <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800154a:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800154c:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800154e:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8001550:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001552:	6204      	str	r4, [r0, #32]
}
 8001554:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001556:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001558:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800155c:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8001560:	e7f3      	b.n	800154a <TIM_OC4_SetConfig+0x32>
 8001562:	bf00      	nop
 8001564:	40010000 	.word	0x40010000

08001568 <HAL_TIM_PWM_MspInit>:
 8001568:	4770      	bx	lr

0800156a <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800156a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800156e:	2b01      	cmp	r3, #1
{
 8001570:	b570      	push	{r4, r5, r6, lr}
 8001572:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001576:	d01c      	beq.n	80015b2 <HAL_TIM_ConfigClockSource+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8001578:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 800157c:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 800157e:	2201      	movs	r2, #1
 8001580:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 8001584:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001586:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800158a:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800158e:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8001590:	680a      	ldr	r2, [r1, #0]
 8001592:	2a40      	cmp	r2, #64	; 0x40
 8001594:	d079      	beq.n	800168a <HAL_TIM_ConfigClockSource+0x120>
 8001596:	d819      	bhi.n	80015cc <HAL_TIM_ConfigClockSource+0x62>
 8001598:	2a10      	cmp	r2, #16
 800159a:	f000 8093 	beq.w	80016c4 <HAL_TIM_ConfigClockSource+0x15a>
 800159e:	d80a      	bhi.n	80015b6 <HAL_TIM_ConfigClockSource+0x4c>
 80015a0:	2a00      	cmp	r2, #0
 80015a2:	f000 8089 	beq.w	80016b8 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 80015a6:	2301      	movs	r3, #1
 80015a8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 80015ac:	2300      	movs	r3, #0
 80015ae:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 80015b2:	4618      	mov	r0, r3
}
 80015b4:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80015b6:	2a20      	cmp	r2, #32
 80015b8:	f000 808a 	beq.w	80016d0 <HAL_TIM_ConfigClockSource+0x166>
 80015bc:	2a30      	cmp	r2, #48	; 0x30
 80015be:	d1f2      	bne.n	80015a6 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80015c0:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80015c2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80015c6:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 80015ca:	e036      	b.n	800163a <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80015cc:	2a70      	cmp	r2, #112	; 0x70
 80015ce:	d036      	beq.n	800163e <HAL_TIM_ConfigClockSource+0xd4>
 80015d0:	d81b      	bhi.n	800160a <HAL_TIM_ConfigClockSource+0xa0>
 80015d2:	2a50      	cmp	r2, #80	; 0x50
 80015d4:	d042      	beq.n	800165c <HAL_TIM_ConfigClockSource+0xf2>
 80015d6:	2a60      	cmp	r2, #96	; 0x60
 80015d8:	d1e5      	bne.n	80015a6 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80015da:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80015dc:	684d      	ldr	r5, [r1, #4]
 80015de:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80015e0:	f024 0410 	bic.w	r4, r4, #16
 80015e4:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80015e6:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80015e8:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80015ea:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80015ee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80015f2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80015f6:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80015fa:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80015fc:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80015fe:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001600:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001604:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8001608:	e017      	b.n	800163a <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800160a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800160e:	d011      	beq.n	8001634 <HAL_TIM_ConfigClockSource+0xca>
 8001610:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001614:	d1c7      	bne.n	80015a6 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001616:	688a      	ldr	r2, [r1, #8]
 8001618:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800161a:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800161c:	68c9      	ldr	r1, [r1, #12]
 800161e:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001620:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001624:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001628:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800162a:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800162c:	689a      	ldr	r2, [r3, #8]
 800162e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001632:	e002      	b.n	800163a <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001634:	689a      	ldr	r2, [r3, #8]
 8001636:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	e7b3      	b.n	80015a6 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800163e:	688a      	ldr	r2, [r1, #8]
 8001640:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001642:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001644:	68c9      	ldr	r1, [r1, #12]
 8001646:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001648:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800164c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001650:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001652:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001654:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001656:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 800165a:	e7ee      	b.n	800163a <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800165c:	684c      	ldr	r4, [r1, #4]
 800165e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001660:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001662:	6a1d      	ldr	r5, [r3, #32]
 8001664:	f025 0501 	bic.w	r5, r5, #1
 8001668:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800166a:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800166c:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001670:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001674:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001678:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800167a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800167c:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800167e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001680:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001684:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001688:	e7d7      	b.n	800163a <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800168a:	684c      	ldr	r4, [r1, #4]
 800168c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800168e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001690:	6a1d      	ldr	r5, [r3, #32]
 8001692:	f025 0501 	bic.w	r5, r5, #1
 8001696:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001698:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800169a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800169e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80016a2:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80016a6:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80016a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80016aa:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80016ac:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80016ae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80016b2:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 80016b6:	e7c0      	b.n	800163a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80016b8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80016ba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80016be:	f042 0207 	orr.w	r2, r2, #7
 80016c2:	e7ba      	b.n	800163a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80016c4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80016c6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80016ca:	f042 0217 	orr.w	r2, r2, #23
 80016ce:	e7b4      	b.n	800163a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80016d0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80016d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80016d6:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 80016da:	e7ae      	b.n	800163a <HAL_TIM_ConfigClockSource+0xd0>

080016dc <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80016dc:	4a2e      	ldr	r2, [pc, #184]	; (8001798 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 80016de:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80016e0:	4290      	cmp	r0, r2
 80016e2:	d012      	beq.n	800170a <TIM_Base_SetConfig+0x2e>
 80016e4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80016e8:	d00f      	beq.n	800170a <TIM_Base_SetConfig+0x2e>
 80016ea:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80016ee:	4290      	cmp	r0, r2
 80016f0:	d00b      	beq.n	800170a <TIM_Base_SetConfig+0x2e>
 80016f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016f6:	4290      	cmp	r0, r2
 80016f8:	d007      	beq.n	800170a <TIM_Base_SetConfig+0x2e>
 80016fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016fe:	4290      	cmp	r0, r2
 8001700:	d003      	beq.n	800170a <TIM_Base_SetConfig+0x2e>
 8001702:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001706:	4290      	cmp	r0, r2
 8001708:	d11d      	bne.n	8001746 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 800170a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800170c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001710:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001712:	4a21      	ldr	r2, [pc, #132]	; (8001798 <TIM_Base_SetConfig+0xbc>)
 8001714:	4290      	cmp	r0, r2
 8001716:	d104      	bne.n	8001722 <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001718:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800171a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800171e:	4313      	orrs	r3, r2
 8001720:	e028      	b.n	8001774 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001722:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001726:	d0f7      	beq.n	8001718 <TIM_Base_SetConfig+0x3c>
 8001728:	4a1c      	ldr	r2, [pc, #112]	; (800179c <TIM_Base_SetConfig+0xc0>)
 800172a:	4290      	cmp	r0, r2
 800172c:	d0f4      	beq.n	8001718 <TIM_Base_SetConfig+0x3c>
 800172e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001732:	4290      	cmp	r0, r2
 8001734:	d0f0      	beq.n	8001718 <TIM_Base_SetConfig+0x3c>
 8001736:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800173a:	4290      	cmp	r0, r2
 800173c:	d0ec      	beq.n	8001718 <TIM_Base_SetConfig+0x3c>
 800173e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001742:	4290      	cmp	r0, r2
 8001744:	d0e8      	beq.n	8001718 <TIM_Base_SetConfig+0x3c>
 8001746:	4a16      	ldr	r2, [pc, #88]	; (80017a0 <TIM_Base_SetConfig+0xc4>)
 8001748:	4290      	cmp	r0, r2
 800174a:	d0e5      	beq.n	8001718 <TIM_Base_SetConfig+0x3c>
 800174c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001750:	4290      	cmp	r0, r2
 8001752:	d0e1      	beq.n	8001718 <TIM_Base_SetConfig+0x3c>
 8001754:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001758:	4290      	cmp	r0, r2
 800175a:	d0dd      	beq.n	8001718 <TIM_Base_SetConfig+0x3c>
 800175c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001760:	4290      	cmp	r0, r2
 8001762:	d0d9      	beq.n	8001718 <TIM_Base_SetConfig+0x3c>
 8001764:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001768:	4290      	cmp	r0, r2
 800176a:	d0d5      	beq.n	8001718 <TIM_Base_SetConfig+0x3c>
 800176c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001770:	4290      	cmp	r0, r2
 8001772:	d0d1      	beq.n	8001718 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 8001774:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001776:	688b      	ldr	r3, [r1, #8]
 8001778:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800177a:	680b      	ldr	r3, [r1, #0]
 800177c:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800177e:	4b06      	ldr	r3, [pc, #24]	; (8001798 <TIM_Base_SetConfig+0xbc>)
 8001780:	4298      	cmp	r0, r3
 8001782:	d006      	beq.n	8001792 <TIM_Base_SetConfig+0xb6>
 8001784:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001788:	4298      	cmp	r0, r3
 800178a:	d002      	beq.n	8001792 <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 800178c:	2301      	movs	r3, #1
 800178e:	6143      	str	r3, [r0, #20]
}
 8001790:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001792:	690b      	ldr	r3, [r1, #16]
 8001794:	6303      	str	r3, [r0, #48]	; 0x30
 8001796:	e7f9      	b.n	800178c <TIM_Base_SetConfig+0xb0>
 8001798:	40010000 	.word	0x40010000
 800179c:	40000400 	.word	0x40000400
 80017a0:	40014000 	.word	0x40014000

080017a4 <HAL_TIM_Base_Init>:
{ 
 80017a4:	b510      	push	{r4, lr}
  if(htim == NULL)
 80017a6:	4604      	mov	r4, r0
 80017a8:	b1a0      	cbz	r0, 80017d4 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80017aa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80017ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80017b2:	b91b      	cbnz	r3, 80017bc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80017b4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80017b8:	f000 fae6 	bl	8001d88 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80017bc:	2302      	movs	r3, #2
 80017be:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80017c2:	6820      	ldr	r0, [r4, #0]
 80017c4:	1d21      	adds	r1, r4, #4
 80017c6:	f7ff ff89 	bl	80016dc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80017ca:	2301      	movs	r3, #1
 80017cc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80017d0:	2000      	movs	r0, #0
 80017d2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80017d4:	2001      	movs	r0, #1
}
 80017d6:	bd10      	pop	{r4, pc}

080017d8 <HAL_TIM_PWM_Init>:
{
 80017d8:	b510      	push	{r4, lr}
  if(htim == NULL)
 80017da:	4604      	mov	r4, r0
 80017dc:	b1a0      	cbz	r0, 8001808 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80017de:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80017e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80017e6:	b91b      	cbnz	r3, 80017f0 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80017e8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 80017ec:	f7ff febc 	bl	8001568 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 80017f0:	2302      	movs	r3, #2
 80017f2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80017f6:	6820      	ldr	r0, [r4, #0]
 80017f8:	1d21      	adds	r1, r4, #4
 80017fa:	f7ff ff6f 	bl	80016dc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80017fe:	2301      	movs	r3, #1
 8001800:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001804:	2000      	movs	r0, #0
 8001806:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001808:	2001      	movs	r0, #1
}  
 800180a:	bd10      	pop	{r4, pc}

0800180c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800180c:	6a03      	ldr	r3, [r0, #32]
 800180e:	f023 0310 	bic.w	r3, r3, #16
 8001812:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001814:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8001816:	6842      	ldr	r2, [r0, #4]
{
 8001818:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 800181a:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800181c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800181e:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001822:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001826:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001828:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800182c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001830:	4c0d      	ldr	r4, [pc, #52]	; (8001868 <TIM_OC2_SetConfig+0x5c>)
 8001832:	42a0      	cmp	r0, r4
 8001834:	d009      	beq.n	800184a <TIM_OC2_SetConfig+0x3e>
 8001836:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800183a:	42a0      	cmp	r0, r4
 800183c:	d005      	beq.n	800184a <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 800183e:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8001840:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001842:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001844:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001846:	6203      	str	r3, [r0, #32]
}
 8001848:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800184a:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800184c:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 800184e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001852:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001856:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001858:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800185c:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800185e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001862:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 8001866:	e7ea      	b.n	800183e <TIM_OC2_SetConfig+0x32>
 8001868:	40010000 	.word	0x40010000

0800186c <HAL_TIM_PWM_ConfigChannel>:
{
 800186c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800186e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001872:	2b01      	cmp	r3, #1
{
 8001874:	4604      	mov	r4, r0
 8001876:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800187a:	d025      	beq.n	80018c8 <HAL_TIM_PWM_ConfigChannel+0x5c>
 800187c:	2301      	movs	r3, #1
 800187e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8001882:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 8001886:	2a0c      	cmp	r2, #12
 8001888:	d818      	bhi.n	80018bc <HAL_TIM_PWM_ConfigChannel+0x50>
 800188a:	e8df f002 	tbb	[pc, r2]
 800188e:	1707      	.short	0x1707
 8001890:	171e1717 	.word	0x171e1717
 8001894:	172f1717 	.word	0x172f1717
 8001898:	1717      	.short	0x1717
 800189a:	40          	.byte	0x40
 800189b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800189c:	6820      	ldr	r0, [r4, #0]
 800189e:	f7ff fddf 	bl	8001460 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80018a2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80018a4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80018a6:	699a      	ldr	r2, [r3, #24]
 80018a8:	f042 0208 	orr.w	r2, r2, #8
 80018ac:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80018ae:	699a      	ldr	r2, [r3, #24]
 80018b0:	f022 0204 	bic.w	r2, r2, #4
 80018b4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80018b6:	699a      	ldr	r2, [r3, #24]
 80018b8:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80018ba:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80018bc:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80018be:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80018c0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 80018c4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 80018c8:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80018ca:	6820      	ldr	r0, [r4, #0]
 80018cc:	f7ff ff9e 	bl	800180c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80018d0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80018d2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80018d4:	699a      	ldr	r2, [r3, #24]
 80018d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80018dc:	699a      	ldr	r2, [r3, #24]
 80018de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80018e4:	699a      	ldr	r2, [r3, #24]
 80018e6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80018ea:	e7e6      	b.n	80018ba <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80018ec:	6820      	ldr	r0, [r4, #0]
 80018ee:	f7ff fde3 	bl	80014b8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80018f2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80018f4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80018f6:	69da      	ldr	r2, [r3, #28]
 80018f8:	f042 0208 	orr.w	r2, r2, #8
 80018fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80018fe:	69da      	ldr	r2, [r3, #28]
 8001900:	f022 0204 	bic.w	r2, r2, #4
 8001904:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8001906:	69da      	ldr	r2, [r3, #28]
 8001908:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800190a:	61da      	str	r2, [r3, #28]
    break;
 800190c:	e7d6      	b.n	80018bc <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800190e:	6820      	ldr	r0, [r4, #0]
 8001910:	f7ff fe02 	bl	8001518 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001914:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001916:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001918:	69da      	ldr	r2, [r3, #28]
 800191a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800191e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001920:	69da      	ldr	r2, [r3, #28]
 8001922:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001926:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001928:	69da      	ldr	r2, [r3, #28]
 800192a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800192e:	e7ec      	b.n	800190a <HAL_TIM_PWM_ConfigChannel+0x9e>

08001930 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8001930:	6a03      	ldr	r3, [r0, #32]
{
 8001932:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8001934:	2401      	movs	r4, #1
 8001936:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001938:	ea23 0304 	bic.w	r3, r3, r4
 800193c:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800193e:	6a03      	ldr	r3, [r0, #32]
 8001940:	408a      	lsls	r2, r1
 8001942:	431a      	orrs	r2, r3
 8001944:	6202      	str	r2, [r0, #32]
 8001946:	bd10      	pop	{r4, pc}

08001948 <HAL_TIM_PWM_Start>:
{
 8001948:	b510      	push	{r4, lr}
 800194a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800194c:	2201      	movs	r2, #1
 800194e:	6800      	ldr	r0, [r0, #0]
 8001950:	f7ff ffee 	bl	8001930 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001954:	6823      	ldr	r3, [r4, #0]
 8001956:	4a08      	ldr	r2, [pc, #32]	; (8001978 <HAL_TIM_PWM_Start+0x30>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d003      	beq.n	8001964 <HAL_TIM_PWM_Start+0x1c>
 800195c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001960:	4293      	cmp	r3, r2
 8001962:	d103      	bne.n	800196c <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8001964:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001966:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800196a:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	f042 0201 	orr.w	r2, r2, #1
 8001972:	601a      	str	r2, [r3, #0]
} 
 8001974:	2000      	movs	r0, #0
 8001976:	bd10      	pop	{r4, pc}
 8001978:	40010000 	.word	0x40010000

0800197c <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 800197c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001980:	2b01      	cmp	r3, #1
{
 8001982:	b510      	push	{r4, lr}
 8001984:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001988:	d018      	beq.n	80019bc <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 800198a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800198e:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001990:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001992:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001994:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001996:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800199a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 800199c:	685a      	ldr	r2, [r3, #4]
 800199e:	4322      	orrs	r2, r4
 80019a0:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019a8:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 80019b0:	2301      	movs	r3, #1
 80019b2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80019b6:	2300      	movs	r3, #0
 80019b8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 80019bc:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 80019be:	bd10      	pop	{r4, pc}

080019c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80019c0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d01f      	beq.n	8001a08 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80019c8:	68cb      	ldr	r3, [r1, #12]
 80019ca:	688a      	ldr	r2, [r1, #8]
 80019cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019d0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80019d2:	684a      	ldr	r2, [r1, #4]
 80019d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80019d8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80019da:	680a      	ldr	r2, [r1, #0]
 80019dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80019e0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80019e2:	690a      	ldr	r2, [r1, #16]
 80019e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019e8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80019ea:	694a      	ldr	r2, [r1, #20]
 80019ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80019f0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80019f2:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80019f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019f8:	4313      	orrs	r3, r2
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80019fa:	6802      	ldr	r2, [r0, #0]
 80019fc:	6453      	str	r3, [r2, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 80019fe:	2300      	movs	r3, #0
 8001a00:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8001a04:	4618      	mov	r0, r3
 8001a06:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001a08:	2002      	movs	r0, #2
}
 8001a0a:	4770      	bx	lr

08001a0c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001a0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 8001a0e:	4820      	ldr	r0, [pc, #128]	; (8001a90 <MX_ADC1_Init+0x84>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a10:	4b20      	ldr	r3, [pc, #128]	; (8001a94 <MX_ADC1_Init+0x88>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ENABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a12:	4a21      	ldr	r2, [pc, #132]	; (8001a98 <MX_ADC1_Init+0x8c>)
 8001a14:	6282      	str	r2, [r0, #40]	; 0x28
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a16:	2400      	movs	r4, #0
 8001a18:	e880 0018 	stmia.w	r0, {r3, r4}
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 3;
 8001a1c:	2203      	movs	r2, #3
  hadc1.Init.ScanConvMode = ENABLE;
 8001a1e:	2301      	movs	r3, #1
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a20:	6084      	str	r4, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001a22:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001a24:	6183      	str	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a26:	6204      	str	r4, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a28:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a2a:	60c4      	str	r4, [r0, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001a2c:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001a2e:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a30:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a32:	f7fe fd8d 	bl	8000550 <HAL_ADC_Init>
 8001a36:	b118      	cbz	r0, 8001a40 <MX_ADC1_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001a38:	214a      	movs	r1, #74	; 0x4a
 8001a3a:	4818      	ldr	r0, [pc, #96]	; (8001a9c <MX_ADC1_Init+0x90>)
 8001a3c:	f000 f938 	bl	8001cb0 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_0;
 8001a40:	9400      	str	r4, [sp, #0]
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001a42:	2307      	movs	r3, #7
  sConfig.Rank = 1;
 8001a44:	2401      	movs	r4, #1
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a46:	4669      	mov	r1, sp
 8001a48:	4811      	ldr	r0, [pc, #68]	; (8001a90 <MX_ADC1_Init+0x84>)
  sConfig.Rank = 1;
 8001a4a:	9401      	str	r4, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001a4c:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a4e:	f7fe ff47 	bl	80008e0 <HAL_ADC_ConfigChannel>
 8001a52:	b118      	cbz	r0, 8001a5c <MX_ADC1_Init+0x50>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001a54:	2154      	movs	r1, #84	; 0x54
 8001a56:	4811      	ldr	r0, [pc, #68]	; (8001a9c <MX_ADC1_Init+0x90>)
 8001a58:	f000 f92a 	bl	8001cb0 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_1;
 8001a5c:	9400      	str	r4, [sp, #0]
  sConfig.Rank = 2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a5e:	4669      	mov	r1, sp
  sConfig.Rank = 2;
 8001a60:	2402      	movs	r4, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a62:	480b      	ldr	r0, [pc, #44]	; (8001a90 <MX_ADC1_Init+0x84>)
  sConfig.Rank = 2;
 8001a64:	9401      	str	r4, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a66:	f7fe ff3b 	bl	80008e0 <HAL_ADC_ConfigChannel>
 8001a6a:	b118      	cbz	r0, 8001a74 <MX_ADC1_Init+0x68>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001a6c:	215d      	movs	r1, #93	; 0x5d
 8001a6e:	480b      	ldr	r0, [pc, #44]	; (8001a9c <MX_ADC1_Init+0x90>)
 8001a70:	f000 f91e 	bl	8001cb0 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_2;
  sConfig.Rank = 3;
 8001a74:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a76:	4669      	mov	r1, sp
 8001a78:	4805      	ldr	r0, [pc, #20]	; (8001a90 <MX_ADC1_Init+0x84>)
  sConfig.Channel = ADC_CHANNEL_2;
 8001a7a:	9400      	str	r4, [sp, #0]
  sConfig.Rank = 3;
 8001a7c:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a7e:	f7fe ff2f 	bl	80008e0 <HAL_ADC_ConfigChannel>
 8001a82:	b118      	cbz	r0, 8001a8c <MX_ADC1_Init+0x80>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001a84:	2166      	movs	r1, #102	; 0x66
 8001a86:	4805      	ldr	r0, [pc, #20]	; (8001a9c <MX_ADC1_Init+0x90>)
 8001a88:	f000 f912 	bl	8001cb0 <_Error_Handler>
  }

}
 8001a8c:	b004      	add	sp, #16
 8001a8e:	bd10      	pop	{r4, pc}
 8001a90:	20000024 	.word	0x20000024
 8001a94:	40012000 	.word	0x40012000
 8001a98:	0f000001 	.word	0x0f000001
 8001a9c:	08001fa0 	.word	0x08001fa0

08001aa0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001aa0:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 8001aa2:	6802      	ldr	r2, [r0, #0]
 8001aa4:	4b1d      	ldr	r3, [pc, #116]	; (8001b1c <HAL_ADC_MspInit+0x7c>)
 8001aa6:	429a      	cmp	r2, r3
{
 8001aa8:	b086      	sub	sp, #24
 8001aaa:	4606      	mov	r6, r0
  if(adcHandle->Instance==ADC1)
 8001aac:	d133      	bne.n	8001b16 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001aae:	2500      	movs	r5, #0
 8001ab0:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8001ab4:	9500      	str	r5, [sp, #0]
 8001ab6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA2     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab8:	4819      	ldr	r0, [pc, #100]	; (8001b20 <HAL_ADC_MspInit+0x80>)

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001aba:	4c1a      	ldr	r4, [pc, #104]	; (8001b24 <HAL_ADC_MspInit+0x84>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001abc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ac0:	645a      	str	r2, [r3, #68]	; 0x44
 8001ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	9503      	str	r5, [sp, #12]
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001ace:	2307      	movs	r3, #7
 8001ad0:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad2:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad8:	f7ff f99e 	bl	8000e18 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8001adc:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <HAL_ADC_MspInit+0x88>)
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ade:	60a5      	str	r5, [r4, #8]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001ae0:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ae8:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001aea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001aee:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001af0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001af4:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001af6:	4620      	mov	r0, r4
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001af8:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001afc:	60e5      	str	r5, [r4, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001afe:	61e3      	str	r3, [r4, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b00:	6225      	str	r5, [r4, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b02:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b04:	f7ff f812 	bl	8000b2c <HAL_DMA_Init>
 8001b08:	b118      	cbz	r0, 8001b12 <HAL_ADC_MspInit+0x72>
    {
      _Error_Handler(__FILE__, __LINE__);
 8001b0a:	218f      	movs	r1, #143	; 0x8f
 8001b0c:	4807      	ldr	r0, [pc, #28]	; (8001b2c <HAL_ADC_MspInit+0x8c>)
 8001b0e:	f000 f8cf 	bl	8001cb0 <_Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001b12:	63b4      	str	r4, [r6, #56]	; 0x38
 8001b14:	63a6      	str	r6, [r4, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001b16:	b006      	add	sp, #24
 8001b18:	bd70      	pop	{r4, r5, r6, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40012000 	.word	0x40012000
 8001b20:	40020000 	.word	0x40020000
 8001b24:	2000006c 	.word	0x2000006c
 8001b28:	40026410 	.word	0x40026410
 8001b2c:	08001fa0 	.word	0x08001fa0

08001b30 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001b30:	b507      	push	{r0, r1, r2, lr}
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b32:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <MX_DMA_Init+0x30>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	9201      	str	r2, [sp, #4]
 8001b38:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b3a:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8001b3e:	6319      	str	r1, [r3, #48]	; 0x30
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b46:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001b48:	4611      	mov	r1, r2
 8001b4a:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b4c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001b4e:	f7fe ff6f 	bl	8000a30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001b52:	2038      	movs	r0, #56	; 0x38
 8001b54:	f7fe ffa0 	bl	8000a98 <HAL_NVIC_EnableIRQ>

}
 8001b58:	b003      	add	sp, #12
 8001b5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800

08001b64 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8001b64:	b082      	sub	sp, #8

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b66:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <MX_GPIO_Init+0x34>)
 8001b68:	2100      	movs	r1, #0
 8001b6a:	9100      	str	r1, [sp, #0]
 8001b6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b6e:	f042 0201 	orr.w	r2, r2, #1
 8001b72:	631a      	str	r2, [r3, #48]	; 0x30
 8001b74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b76:	f002 0201 	and.w	r2, r2, #1
 8001b7a:	9200      	str	r2, [sp, #0]
 8001b7c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b7e:	9101      	str	r1, [sp, #4]
 8001b80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b82:	f042 0210 	orr.w	r2, r2, #16
 8001b86:	631a      	str	r2, [r3, #48]	; 0x30
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	f003 0310 	and.w	r3, r3, #16
 8001b8e:	9301      	str	r3, [sp, #4]
 8001b90:	9b01      	ldr	r3, [sp, #4]

}
 8001b92:	b002      	add	sp, #8
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	40023800 	.word	0x40023800

08001b9c <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8001b9c:	b510      	push	{r4, lr}
 8001b9e:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	4a21      	ldr	r2, [pc, #132]	; (8001c28 <SystemClock_Config+0x8c>)
 8001ba4:	9301      	str	r3, [sp, #4]
 8001ba6:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001ba8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001bac:	6411      	str	r1, [r2, #64]	; 0x40
 8001bae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001bb0:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001bb4:	9201      	str	r2, [sp, #4]
 8001bb6:	9a01      	ldr	r2, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bb8:	4a1c      	ldr	r2, [pc, #112]	; (8001c2c <SystemClock_Config+0x90>)
 8001bba:	9302      	str	r3, [sp, #8]
 8001bbc:	6811      	ldr	r1, [r2, #0]
 8001bbe:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001bc2:	6011      	str	r1, [r2, #0]
 8001bc4:	6812      	ldr	r2, [r2, #0]
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001bc6:	930e      	str	r3, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bc8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001bcc:	9202      	str	r2, [sp, #8]
 8001bce:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bd8:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001bda:	2210      	movs	r2, #16
 8001bdc:	920c      	str	r2, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bde:	f7ff f9fb 	bl	8000fd8 <HAL_RCC_OscConfig>
 8001be2:	4601      	mov	r1, r0
 8001be4:	b100      	cbz	r0, 8001be8 <SystemClock_Config+0x4c>
 8001be6:	e7fe      	b.n	8001be6 <SystemClock_Config+0x4a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001be8:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001bea:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bec:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bee:	9006      	str	r0, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bf0:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001bf2:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bf4:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001bf6:	f7ff fb93 	bl	8001320 <HAL_RCC_ClockConfig>
 8001bfa:	4604      	mov	r4, r0
 8001bfc:	b100      	cbz	r0, 8001c00 <SystemClock_Config+0x64>
 8001bfe:	e7fe      	b.n	8001bfe <SystemClock_Config+0x62>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001c00:	f7ff fc28 	bl	8001454 <HAL_RCC_GetHCLKFreq>
 8001c04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c08:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c0c:	f7fe ff50 	bl	8000ab0 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001c10:	2004      	movs	r0, #4
 8001c12:	f7fe ff63 	bl	8000adc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001c16:	4622      	mov	r2, r4
 8001c18:	4621      	mov	r1, r4
 8001c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8001c1e:	f7fe ff07 	bl	8000a30 <HAL_NVIC_SetPriority>
}
 8001c22:	b014      	add	sp, #80	; 0x50
 8001c24:	bd10      	pop	{r4, pc}
 8001c26:	bf00      	nop
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40007000 	.word	0x40007000

08001c30 <main>:
{
 8001c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_Init();
 8001c32:	f7fe fc65 	bl	8000500 <HAL_Init>
  SystemClock_Config();
 8001c36:	f7ff ffb1 	bl	8001b9c <SystemClock_Config>
  MX_GPIO_Init();
 8001c3a:	f7ff ff93 	bl	8001b64 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c3e:	f7ff ff77 	bl	8001b30 <MX_DMA_Init>
  MX_ADC1_Init();
 8001c42:	f7ff fee3 	bl	8001a0c <MX_ADC1_Init>
  MX_TIM1_Init();
 8001c46:	f000 f8d1 	bl	8001dec <MX_TIM1_Init>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8001c4a:	2104      	movs	r1, #4
 8001c4c:	4815      	ldr	r0, [pc, #84]	; (8001ca4 <main+0x74>)
	  HAL_ADC_Start(&hadc1);
 8001c4e:	4e16      	ldr	r6, [pc, #88]	; (8001ca8 <main+0x78>)
	  int signal2=(lectura_adc[1]*4/91)+45;
 8001c50:	4c16      	ldr	r4, [pc, #88]	; (8001cac <main+0x7c>)
	 	   	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,signal1);
 8001c52:	4d14      	ldr	r5, [pc, #80]	; (8001ca4 <main+0x74>)
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8001c54:	f7ff fe78 	bl	8001948 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8001c58:	2108      	movs	r1, #8
 8001c5a:	4812      	ldr	r0, [pc, #72]	; (8001ca4 <main+0x74>)
 8001c5c:	f7ff fe74 	bl	8001948 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8001c60:	210c      	movs	r1, #12
 8001c62:	4810      	ldr	r0, [pc, #64]	; (8001ca4 <main+0x74>)
 8001c64:	f7ff fe70 	bl	8001948 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)lectura_adc,3);
 8001c68:	2203      	movs	r2, #3
 8001c6a:	4910      	ldr	r1, [pc, #64]	; (8001cac <main+0x7c>)
 8001c6c:	480e      	ldr	r0, [pc, #56]	; (8001ca8 <main+0x78>)
 8001c6e:	f7fe fd73 	bl	8000758 <HAL_ADC_Start_DMA>
	  HAL_ADC_Start(&hadc1);
 8001c72:	4630      	mov	r0, r6
 8001c74:	f7fe fd10 	bl	8000698 <HAL_ADC_Start>
	  int signal2=(lectura_adc[1]*4/91)+45;
 8001c78:	8862      	ldrh	r2, [r4, #2]
	  int signal3=(lectura_adc[2]*4/91)+45;
 8001c7a:	88a3      	ldrh	r3, [r4, #4]
	  int signal1=(lectura_adc[0]*4/91)+45;
 8001c7c:	8821      	ldrh	r1, [r4, #0]
	 	   	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,signal1);
 8001c7e:	6828      	ldr	r0, [r5, #0]
	  int signal2=(lectura_adc[1]*4/91)+45;
 8001c80:	275b      	movs	r7, #91	; 0x5b
 8001c82:	0092      	lsls	r2, r2, #2
	  int signal3=(lectura_adc[2]*4/91)+45;
 8001c84:	009b      	lsls	r3, r3, #2
	  int signal2=(lectura_adc[1]*4/91)+45;
 8001c86:	fb92 f2f7 	sdiv	r2, r2, r7
	  int signal3=(lectura_adc[2]*4/91)+45;
 8001c8a:	fb93 f3f7 	sdiv	r3, r3, r7
	  int signal2=(lectura_adc[1]*4/91)+45;
 8001c8e:	322d      	adds	r2, #45	; 0x2d
	  int signal3=(lectura_adc[2]*4/91)+45;
 8001c90:	332d      	adds	r3, #45	; 0x2d
	  int signal1=(lectura_adc[0]*4/91)+45;
 8001c92:	0089      	lsls	r1, r1, #2
 8001c94:	fb91 f1f7 	sdiv	r1, r1, r7
 8001c98:	312d      	adds	r1, #45	; 0x2d
	 	   	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,signal1);
 8001c9a:	6381      	str	r1, [r0, #56]	; 0x38
	 	   __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,signal2);
 8001c9c:	63c2      	str	r2, [r0, #60]	; 0x3c
	 	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,signal3);
 8001c9e:	6403      	str	r3, [r0, #64]	; 0x40
 8001ca0:	e7e7      	b.n	8001c72 <main+0x42>
 8001ca2:	bf00      	nop
 8001ca4:	200000d4 	.word	0x200000d4
 8001ca8:	20000024 	.word	0x20000024
 8001cac:	200000cc 	.word	0x200000cc

08001cb0 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8001cb0:	e7fe      	b.n	8001cb0 <_Error_Handler>

08001cb2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cb2:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cb4:	2003      	movs	r0, #3
 8001cb6:	f7fe fea9 	bl	8000a0c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	4611      	mov	r1, r2
 8001cbe:	f06f 000b 	mvn.w	r0, #11
 8001cc2:	f7fe feb5 	bl	8000a30 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	4611      	mov	r1, r2
 8001cca:	f06f 000a 	mvn.w	r0, #10
 8001cce:	f7fe feaf 	bl	8000a30 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	4611      	mov	r1, r2
 8001cd6:	f06f 0009 	mvn.w	r0, #9
 8001cda:	f7fe fea9 	bl	8000a30 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001cde:	2200      	movs	r2, #0
 8001ce0:	4611      	mov	r1, r2
 8001ce2:	f06f 0004 	mvn.w	r0, #4
 8001ce6:	f7fe fea3 	bl	8000a30 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001cea:	2200      	movs	r2, #0
 8001cec:	4611      	mov	r1, r2
 8001cee:	f06f 0003 	mvn.w	r0, #3
 8001cf2:	f7fe fe9d 	bl	8000a30 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	4611      	mov	r1, r2
 8001cfa:	f06f 0001 	mvn.w	r0, #1
 8001cfe:	f7fe fe97 	bl	8000a30 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	4611      	mov	r1, r2
 8001d06:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001d0e:	f7fe be8f 	b.w	8000a30 <HAL_NVIC_SetPriority>

08001d12 <NMI_Handler>:
 8001d12:	4770      	bx	lr

08001d14 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001d14:	e7fe      	b.n	8001d14 <HardFault_Handler>

08001d16 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001d16:	e7fe      	b.n	8001d16 <MemManage_Handler>

08001d18 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001d18:	e7fe      	b.n	8001d18 <BusFault_Handler>

08001d1a <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001d1a:	e7fe      	b.n	8001d1a <UsageFault_Handler>

08001d1c <SVC_Handler>:
 8001d1c:	4770      	bx	lr

08001d1e <DebugMon_Handler>:
 8001d1e:	4770      	bx	lr

08001d20 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001d20:	4770      	bx	lr

08001d22 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001d22:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d24:	f7fe fc06 	bl	8000534 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001d2c:	f7fe bee3 	b.w	8000af6 <HAL_SYSTICK_IRQHandler>

08001d30 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d30:	4801      	ldr	r0, [pc, #4]	; (8001d38 <DMA2_Stream0_IRQHandler+0x8>)
 8001d32:	f7fe bfb7 	b.w	8000ca4 <HAL_DMA_IRQHandler>
 8001d36:	bf00      	nop
 8001d38:	2000006c 	.word	0x2000006c

08001d3c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d3c:	490f      	ldr	r1, [pc, #60]	; (8001d7c <SystemInit+0x40>)
 8001d3e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001d42:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001d4a:	4b0d      	ldr	r3, [pc, #52]	; (8001d80 <SystemInit+0x44>)
 8001d4c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d4e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001d50:	f042 0201 	orr.w	r2, r2, #1
 8001d54:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001d56:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001d5e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d62:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001d64:	4a07      	ldr	r2, [pc, #28]	; (8001d84 <SystemInit+0x48>)
 8001d66:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d6e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001d70:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d72:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001d76:	608b      	str	r3, [r1, #8]
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	e000ed00 	.word	0xe000ed00
 8001d80:	40023800 	.word	0x40023800
 8001d84:	24003010 	.word	0x24003010

08001d88 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 8001d88:	6802      	ldr	r2, [r0, #0]
 8001d8a:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <HAL_TIM_Base_MspInit+0x28>)
 8001d8c:	429a      	cmp	r2, r3
{
 8001d8e:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM1)
 8001d90:	d10b      	bne.n	8001daa <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	9301      	str	r3, [sp, #4]
 8001d96:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <HAL_TIM_Base_MspInit+0x2c>)
 8001d98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d9a:	f042 0201 	orr.w	r2, r2, #1
 8001d9e:	645a      	str	r2, [r3, #68]	; 0x44
 8001da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	9301      	str	r3, [sp, #4]
 8001da8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001daa:	b002      	add	sp, #8
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	40010000 	.word	0x40010000
 8001db4:	40023800 	.word	0x40023800

08001db8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001db8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM1)
 8001dba:	6802      	ldr	r2, [r0, #0]
 8001dbc:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <HAL_TIM_MspPostInit+0x2c>)
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d10d      	bne.n	8001dde <HAL_TIM_MspPostInit+0x26>
    /**TIM1 GPIO Configuration    
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8001dc2:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001dc6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dd2:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001dd4:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dd6:	4804      	ldr	r0, [pc, #16]	; (8001de8 <HAL_TIM_MspPostInit+0x30>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001dd8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dda:	f7ff f81d 	bl	8000e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001dde:	b007      	add	sp, #28
 8001de0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001de4:	40010000 	.word	0x40010000
 8001de8:	40021000 	.word	0x40021000

08001dec <MX_TIM1_Init>:
{
 8001dec:	b500      	push	{lr}
  htim1.Instance = TIM1;
 8001dee:	483a      	ldr	r0, [pc, #232]	; (8001ed8 <MX_TIM1_Init+0xec>)
  htim1.Init.Prescaler = 177;
 8001df0:	493a      	ldr	r1, [pc, #232]	; (8001edc <MX_TIM1_Init+0xf0>)
 8001df2:	23b1      	movs	r3, #177	; 0xb1
{
 8001df4:	b095      	sub	sp, #84	; 0x54
  htim1.Init.Prescaler = 177;
 8001df6:	e880 000a 	stmia.w	r0, {r1, r3}
  htim1.Init.Period = 1800;
 8001dfa:	f44f 62e1 	mov.w	r2, #1800	; 0x708
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 1800;
 8001e02:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e04:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e06:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e08:	f7ff fccc 	bl	80017a4 <HAL_TIM_Base_Init>
 8001e0c:	b118      	cbz	r0, 8001e16 <MX_TIM1_Init+0x2a>
    _Error_Handler(__FILE__, __LINE__);
 8001e0e:	2141      	movs	r1, #65	; 0x41
 8001e10:	4833      	ldr	r0, [pc, #204]	; (8001ee0 <MX_TIM1_Init+0xf4>)
 8001e12:	f7ff ff4d 	bl	8001cb0 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e16:	a914      	add	r1, sp, #80	; 0x50
 8001e18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e1c:	f841 3d48 	str.w	r3, [r1, #-72]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e20:	482d      	ldr	r0, [pc, #180]	; (8001ed8 <MX_TIM1_Init+0xec>)
 8001e22:	f7ff fba2 	bl	800156a <HAL_TIM_ConfigClockSource>
 8001e26:	b118      	cbz	r0, 8001e30 <MX_TIM1_Init+0x44>
    _Error_Handler(__FILE__, __LINE__);
 8001e28:	2147      	movs	r1, #71	; 0x47
 8001e2a:	482d      	ldr	r0, [pc, #180]	; (8001ee0 <MX_TIM1_Init+0xf4>)
 8001e2c:	f7ff ff40 	bl	8001cb0 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e30:	4829      	ldr	r0, [pc, #164]	; (8001ed8 <MX_TIM1_Init+0xec>)
 8001e32:	f7ff fcd1 	bl	80017d8 <HAL_TIM_PWM_Init>
 8001e36:	b118      	cbz	r0, 8001e40 <MX_TIM1_Init+0x54>
    _Error_Handler(__FILE__, __LINE__);
 8001e38:	214c      	movs	r1, #76	; 0x4c
 8001e3a:	4829      	ldr	r0, [pc, #164]	; (8001ee0 <MX_TIM1_Init+0xf4>)
 8001e3c:	f7ff ff38 	bl	8001cb0 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e40:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e42:	4669      	mov	r1, sp
 8001e44:	4824      	ldr	r0, [pc, #144]	; (8001ed8 <MX_TIM1_Init+0xec>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e46:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e48:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e4a:	f7ff fd97 	bl	800197c <HAL_TIMEx_MasterConfigSynchronization>
 8001e4e:	b118      	cbz	r0, 8001e58 <MX_TIM1_Init+0x6c>
    _Error_Handler(__FILE__, __LINE__);
 8001e50:	2153      	movs	r1, #83	; 0x53
 8001e52:	4823      	ldr	r0, [pc, #140]	; (8001ee0 <MX_TIM1_Init+0xf4>)
 8001e54:	f7ff ff2c 	bl	8001cb0 <_Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e58:	2360      	movs	r3, #96	; 0x60
 8001e5a:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e5c:	2204      	movs	r2, #4
  sConfigOC.Pulse = 0;
 8001e5e:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e60:	a906      	add	r1, sp, #24
 8001e62:	481d      	ldr	r0, [pc, #116]	; (8001ed8 <MX_TIM1_Init+0xec>)
  sConfigOC.Pulse = 0;
 8001e64:	9307      	str	r3, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e66:	9308      	str	r3, [sp, #32]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e68:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e6a:	930a      	str	r3, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e6c:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e6e:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e70:	f7ff fcfc 	bl	800186c <HAL_TIM_PWM_ConfigChannel>
 8001e74:	b118      	cbz	r0, 8001e7e <MX_TIM1_Init+0x92>
    _Error_Handler(__FILE__, __LINE__);
 8001e76:	215f      	movs	r1, #95	; 0x5f
 8001e78:	4819      	ldr	r0, [pc, #100]	; (8001ee0 <MX_TIM1_Init+0xf4>)
 8001e7a:	f7ff ff19 	bl	8001cb0 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e7e:	2208      	movs	r2, #8
 8001e80:	a906      	add	r1, sp, #24
 8001e82:	4815      	ldr	r0, [pc, #84]	; (8001ed8 <MX_TIM1_Init+0xec>)
 8001e84:	f7ff fcf2 	bl	800186c <HAL_TIM_PWM_ConfigChannel>
 8001e88:	b118      	cbz	r0, 8001e92 <MX_TIM1_Init+0xa6>
    _Error_Handler(__FILE__, __LINE__);
 8001e8a:	2164      	movs	r1, #100	; 0x64
 8001e8c:	4814      	ldr	r0, [pc, #80]	; (8001ee0 <MX_TIM1_Init+0xf4>)
 8001e8e:	f7ff ff0f 	bl	8001cb0 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e92:	220c      	movs	r2, #12
 8001e94:	a906      	add	r1, sp, #24
 8001e96:	4810      	ldr	r0, [pc, #64]	; (8001ed8 <MX_TIM1_Init+0xec>)
 8001e98:	f7ff fce8 	bl	800186c <HAL_TIM_PWM_ConfigChannel>
 8001e9c:	b118      	cbz	r0, 8001ea6 <MX_TIM1_Init+0xba>
    _Error_Handler(__FILE__, __LINE__);
 8001e9e:	2169      	movs	r1, #105	; 0x69
 8001ea0:	480f      	ldr	r0, [pc, #60]	; (8001ee0 <MX_TIM1_Init+0xf4>)
 8001ea2:	f7ff ff05 	bl	8001cb0 <_Error_Handler>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ea6:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ea8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001eac:	a90d      	add	r1, sp, #52	; 0x34
 8001eae:	480a      	ldr	r0, [pc, #40]	; (8001ed8 <MX_TIM1_Init+0xec>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001eb0:	930d      	str	r3, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001eb2:	930e      	str	r3, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001eb4:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.DeadTime = 0;
 8001eb6:	9310      	str	r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001eb8:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001eba:	9212      	str	r2, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ebc:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ebe:	f7ff fd7f 	bl	80019c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ec2:	b118      	cbz	r0, 8001ecc <MX_TIM1_Init+0xe0>
    _Error_Handler(__FILE__, __LINE__);
 8001ec4:	2175      	movs	r1, #117	; 0x75
 8001ec6:	4806      	ldr	r0, [pc, #24]	; (8001ee0 <MX_TIM1_Init+0xf4>)
 8001ec8:	f7ff fef2 	bl	8001cb0 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8001ecc:	4802      	ldr	r0, [pc, #8]	; (8001ed8 <MX_TIM1_Init+0xec>)
 8001ece:	f7ff ff73 	bl	8001db8 <HAL_TIM_MspPostInit>
}
 8001ed2:	b015      	add	sp, #84	; 0x54
 8001ed4:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ed8:	200000d4 	.word	0x200000d4
 8001edc:	40010000 	.word	0x40010000
 8001ee0:	08001fbd 	.word	0x08001fbd

08001ee4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ee4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f1c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ee8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001eea:	e003      	b.n	8001ef4 <LoopCopyDataInit>

08001eec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001eec:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001eee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ef0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ef2:	3104      	adds	r1, #4

08001ef4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ef4:	480b      	ldr	r0, [pc, #44]	; (8001f24 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ef6:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ef8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001efa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001efc:	d3f6      	bcc.n	8001eec <CopyDataInit>
  ldr  r2, =_sbss
 8001efe:	4a0b      	ldr	r2, [pc, #44]	; (8001f2c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f00:	e002      	b.n	8001f08 <LoopFillZerobss>

08001f02 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f02:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f04:	f842 3b04 	str.w	r3, [r2], #4

08001f08 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f08:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f0c:	d3f9      	bcc.n	8001f02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f0e:	f7ff ff15 	bl	8001d3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f12:	f000 f811 	bl	8001f38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f16:	f7ff fe8b 	bl	8001c30 <main>
  bx  lr    
 8001f1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f1c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001f20:	08001fdc 	.word	0x08001fdc
  ldr  r0, =_sdata
 8001f24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001f28:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8001f2c:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8001f30:	20000110 	.word	0x20000110

08001f34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f34:	e7fe      	b.n	8001f34 <ADC_IRQHandler>
	...

08001f38 <__libc_init_array>:
 8001f38:	b570      	push	{r4, r5, r6, lr}
 8001f3a:	4e0d      	ldr	r6, [pc, #52]	; (8001f70 <__libc_init_array+0x38>)
 8001f3c:	4c0d      	ldr	r4, [pc, #52]	; (8001f74 <__libc_init_array+0x3c>)
 8001f3e:	1ba4      	subs	r4, r4, r6
 8001f40:	10a4      	asrs	r4, r4, #2
 8001f42:	2500      	movs	r5, #0
 8001f44:	42a5      	cmp	r5, r4
 8001f46:	d109      	bne.n	8001f5c <__libc_init_array+0x24>
 8001f48:	4e0b      	ldr	r6, [pc, #44]	; (8001f78 <__libc_init_array+0x40>)
 8001f4a:	4c0c      	ldr	r4, [pc, #48]	; (8001f7c <__libc_init_array+0x44>)
 8001f4c:	f000 f818 	bl	8001f80 <_init>
 8001f50:	1ba4      	subs	r4, r4, r6
 8001f52:	10a4      	asrs	r4, r4, #2
 8001f54:	2500      	movs	r5, #0
 8001f56:	42a5      	cmp	r5, r4
 8001f58:	d105      	bne.n	8001f66 <__libc_init_array+0x2e>
 8001f5a:	bd70      	pop	{r4, r5, r6, pc}
 8001f5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f60:	4798      	blx	r3
 8001f62:	3501      	adds	r5, #1
 8001f64:	e7ee      	b.n	8001f44 <__libc_init_array+0xc>
 8001f66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f6a:	4798      	blx	r3
 8001f6c:	3501      	adds	r5, #1
 8001f6e:	e7f2      	b.n	8001f56 <__libc_init_array+0x1e>
 8001f70:	08001fd4 	.word	0x08001fd4
 8001f74:	08001fd4 	.word	0x08001fd4
 8001f78:	08001fd4 	.word	0x08001fd4
 8001f7c:	08001fd8 	.word	0x08001fd8

08001f80 <_init>:
 8001f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f82:	bf00      	nop
 8001f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f86:	bc08      	pop	{r3}
 8001f88:	469e      	mov	lr, r3
 8001f8a:	4770      	bx	lr

08001f8c <_fini>:
 8001f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f8e:	bf00      	nop
 8001f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f92:	bc08      	pop	{r3}
 8001f94:	469e      	mov	lr, r3
 8001f96:	4770      	bx	lr
