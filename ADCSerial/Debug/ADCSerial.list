
ADCSerial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dc4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  08004f58  08004f58  00014f58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005208  08005208  00015208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005210  08005210  00015210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005214  08005214  00015214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000674  20000000  08005218  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020674  2**0
                  CONTENTS
  8 .bss          000000f0  20000674  20000674  00020674  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000764  20000764  00020674  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020674  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000ea26  00000000  00000000  000206a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000020f4  00000000  00000000  0002f0ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000028c0  00000000  00000000  000311be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005d8  00000000  00000000  00033a80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006b0  00000000  00000000  00034058  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00003b18  00000000  00000000  00034708  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000267b  00000000  00000000  00038220  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0003a89b  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000018e8  00000000  00000000  0003a918  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000674 	.word	0x20000674
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004f3c 	.word	0x08004f3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000678 	.word	0x20000678
 80001cc:	08004f3c 	.word	0x08004f3c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b97a 	b.w	8000eac <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	460d      	mov	r5, r1
 8000bd8:	4604      	mov	r4, r0
 8000bda:	9e08      	ldr	r6, [sp, #32]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d151      	bne.n	8000c84 <__udivmoddi4+0xb4>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4617      	mov	r7, r2
 8000be4:	d96d      	bls.n	8000cc2 <__udivmoddi4+0xf2>
 8000be6:	fab2 fe82 	clz	lr, r2
 8000bea:	f1be 0f00 	cmp.w	lr, #0
 8000bee:	d00b      	beq.n	8000c08 <__udivmoddi4+0x38>
 8000bf0:	f1ce 0c20 	rsb	ip, lr, #32
 8000bf4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000bf8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bfc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c00:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c04:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c08:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c0c:	0c25      	lsrs	r5, r4, #16
 8000c0e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c12:	fa1f f987 	uxth.w	r9, r7
 8000c16:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c1a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c1e:	fb08 f309 	mul.w	r3, r8, r9
 8000c22:	42ab      	cmp	r3, r5
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x6c>
 8000c26:	19ed      	adds	r5, r5, r7
 8000c28:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c2c:	f080 8123 	bcs.w	8000e76 <__udivmoddi4+0x2a6>
 8000c30:	42ab      	cmp	r3, r5
 8000c32:	f240 8120 	bls.w	8000e76 <__udivmoddi4+0x2a6>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	443d      	add	r5, r7
 8000c3c:	1aed      	subs	r5, r5, r3
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c44:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c4c:	fb00 f909 	mul.w	r9, r0, r9
 8000c50:	45a1      	cmp	r9, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x98>
 8000c54:	19e4      	adds	r4, r4, r7
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5a:	f080 810a 	bcs.w	8000e72 <__udivmoddi4+0x2a2>
 8000c5e:	45a1      	cmp	r9, r4
 8000c60:	f240 8107 	bls.w	8000e72 <__udivmoddi4+0x2a2>
 8000c64:	3802      	subs	r0, #2
 8000c66:	443c      	add	r4, r7
 8000c68:	eba4 0409 	sub.w	r4, r4, r9
 8000c6c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c70:	2100      	movs	r1, #0
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d061      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000c76:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	6034      	str	r4, [r6, #0]
 8000c7e:	6073      	str	r3, [r6, #4]
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	428b      	cmp	r3, r1
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0xc8>
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	d054      	beq.n	8000d36 <__udivmoddi4+0x166>
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c92:	4608      	mov	r0, r1
 8000c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c98:	fab3 f183 	clz	r1, r3
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	f040 808e 	bne.w	8000dbe <__udivmoddi4+0x1ee>
 8000ca2:	42ab      	cmp	r3, r5
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xdc>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80fa 	bhi.w	8000ea0 <__udivmoddi4+0x2d0>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb65 0503 	sbc.w	r5, r5, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	46ac      	mov	ip, r5
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d03f      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000cba:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	b912      	cbnz	r2, 8000cca <__udivmoddi4+0xfa>
 8000cc4:	2701      	movs	r7, #1
 8000cc6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cca:	fab7 fe87 	clz	lr, r7
 8000cce:	f1be 0f00 	cmp.w	lr, #0
 8000cd2:	d134      	bne.n	8000d3e <__udivmoddi4+0x16e>
 8000cd4:	1beb      	subs	r3, r5, r7
 8000cd6:	0c3a      	lsrs	r2, r7, #16
 8000cd8:	fa1f fc87 	uxth.w	ip, r7
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fbb3 f8f2 	udiv	r8, r3, r2
 8000ce2:	0c25      	lsrs	r5, r4, #16
 8000ce4:	fb02 3318 	mls	r3, r2, r8, r3
 8000ce8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cec:	fb0c f308 	mul.w	r3, ip, r8
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x134>
 8000cf4:	19ed      	adds	r5, r5, r7
 8000cf6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x132>
 8000cfc:	42ab      	cmp	r3, r5
 8000cfe:	f200 80d1 	bhi.w	8000ea4 <__udivmoddi4+0x2d4>
 8000d02:	4680      	mov	r8, r0
 8000d04:	1aed      	subs	r5, r5, r3
 8000d06:	b2a3      	uxth	r3, r4
 8000d08:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d0c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d10:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d14:	fb0c fc00 	mul.w	ip, ip, r0
 8000d18:	45a4      	cmp	ip, r4
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x15c>
 8000d1c:	19e4      	adds	r4, r4, r7
 8000d1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x15a>
 8000d24:	45a4      	cmp	ip, r4
 8000d26:	f200 80b8 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	eba4 040c 	sub.w	r4, r4, ip
 8000d30:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d34:	e79d      	b.n	8000c72 <__udivmoddi4+0xa2>
 8000d36:	4631      	mov	r1, r6
 8000d38:	4630      	mov	r0, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	f1ce 0420 	rsb	r4, lr, #32
 8000d42:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d46:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d4a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d4e:	0c3a      	lsrs	r2, r7, #16
 8000d50:	fa25 f404 	lsr.w	r4, r5, r4
 8000d54:	ea48 0803 	orr.w	r8, r8, r3
 8000d58:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d5c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d60:	fb02 4411 	mls	r4, r2, r1, r4
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d6c:	fb01 f30c 	mul.w	r3, r1, ip
 8000d70:	42ab      	cmp	r3, r5
 8000d72:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d76:	d909      	bls.n	8000d8c <__udivmoddi4+0x1bc>
 8000d78:	19ed      	adds	r5, r5, r7
 8000d7a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d7e:	f080 808a 	bcs.w	8000e96 <__udivmoddi4+0x2c6>
 8000d82:	42ab      	cmp	r3, r5
 8000d84:	f240 8087 	bls.w	8000e96 <__udivmoddi4+0x2c6>
 8000d88:	3902      	subs	r1, #2
 8000d8a:	443d      	add	r5, r7
 8000d8c:	1aeb      	subs	r3, r5, r3
 8000d8e:	fa1f f588 	uxth.w	r5, r8
 8000d92:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d96:	fb02 3310 	mls	r3, r2, r0, r3
 8000d9a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d9e:	fb00 f30c 	mul.w	r3, r0, ip
 8000da2:	42ab      	cmp	r3, r5
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x1e6>
 8000da6:	19ed      	adds	r5, r5, r7
 8000da8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dac:	d26f      	bcs.n	8000e8e <__udivmoddi4+0x2be>
 8000dae:	42ab      	cmp	r3, r5
 8000db0:	d96d      	bls.n	8000e8e <__udivmoddi4+0x2be>
 8000db2:	3802      	subs	r0, #2
 8000db4:	443d      	add	r5, r7
 8000db6:	1aeb      	subs	r3, r5, r3
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	e78f      	b.n	8000cde <__udivmoddi4+0x10e>
 8000dbe:	f1c1 0720 	rsb	r7, r1, #32
 8000dc2:	fa22 f807 	lsr.w	r8, r2, r7
 8000dc6:	408b      	lsls	r3, r1
 8000dc8:	fa05 f401 	lsl.w	r4, r5, r1
 8000dcc:	ea48 0303 	orr.w	r3, r8, r3
 8000dd0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000dd4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dde:	fbb5 f9fc 	udiv	r9, r5, ip
 8000de2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000de6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000dea:	fa1f f883 	uxth.w	r8, r3
 8000dee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000df2:	fb09 f408 	mul.w	r4, r9, r8
 8000df6:	42ac      	cmp	r4, r5
 8000df8:	fa02 f201 	lsl.w	r2, r2, r1
 8000dfc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x244>
 8000e02:	18ed      	adds	r5, r5, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	d243      	bcs.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0a:	42ac      	cmp	r4, r5
 8000e0c:	d941      	bls.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e12:	441d      	add	r5, r3
 8000e14:	1b2d      	subs	r5, r5, r4
 8000e16:	fa1f fe8e 	uxth.w	lr, lr
 8000e1a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e1e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e22:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e26:	fb00 f808 	mul.w	r8, r0, r8
 8000e2a:	45a0      	cmp	r8, r4
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x26e>
 8000e2e:	18e4      	adds	r4, r4, r3
 8000e30:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e34:	d229      	bcs.n	8000e8a <__udivmoddi4+0x2ba>
 8000e36:	45a0      	cmp	r8, r4
 8000e38:	d927      	bls.n	8000e8a <__udivmoddi4+0x2ba>
 8000e3a:	3802      	subs	r0, #2
 8000e3c:	441c      	add	r4, r3
 8000e3e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e42:	eba4 0408 	sub.w	r4, r4, r8
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	454c      	cmp	r4, r9
 8000e4c:	46c6      	mov	lr, r8
 8000e4e:	464d      	mov	r5, r9
 8000e50:	d315      	bcc.n	8000e7e <__udivmoddi4+0x2ae>
 8000e52:	d012      	beq.n	8000e7a <__udivmoddi4+0x2aa>
 8000e54:	b156      	cbz	r6, 8000e6c <__udivmoddi4+0x29c>
 8000e56:	ebba 030e 	subs.w	r3, sl, lr
 8000e5a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e62:	40cb      	lsrs	r3, r1
 8000e64:	431f      	orrs	r7, r3
 8000e66:	40cc      	lsrs	r4, r1
 8000e68:	6037      	str	r7, [r6, #0]
 8000e6a:	6074      	str	r4, [r6, #4]
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	4618      	mov	r0, r3
 8000e74:	e6f8      	b.n	8000c68 <__udivmoddi4+0x98>
 8000e76:	4690      	mov	r8, r2
 8000e78:	e6e0      	b.n	8000c3c <__udivmoddi4+0x6c>
 8000e7a:	45c2      	cmp	sl, r8
 8000e7c:	d2ea      	bcs.n	8000e54 <__udivmoddi4+0x284>
 8000e7e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e82:	eb69 0503 	sbc.w	r5, r9, r3
 8000e86:	3801      	subs	r0, #1
 8000e88:	e7e4      	b.n	8000e54 <__udivmoddi4+0x284>
 8000e8a:	4628      	mov	r0, r5
 8000e8c:	e7d7      	b.n	8000e3e <__udivmoddi4+0x26e>
 8000e8e:	4640      	mov	r0, r8
 8000e90:	e791      	b.n	8000db6 <__udivmoddi4+0x1e6>
 8000e92:	4681      	mov	r9, r0
 8000e94:	e7be      	b.n	8000e14 <__udivmoddi4+0x244>
 8000e96:	4601      	mov	r1, r0
 8000e98:	e778      	b.n	8000d8c <__udivmoddi4+0x1bc>
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	e745      	b.n	8000d2c <__udivmoddi4+0x15c>
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	e708      	b.n	8000cb6 <__udivmoddi4+0xe6>
 8000ea4:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea8:	443d      	add	r5, r7
 8000eaa:	e72b      	b.n	8000d04 <__udivmoddi4+0x134>

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <HAL_InitTick+0x24>)
{
 8000eb4:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000eb6:	6818      	ldr	r0, [r3, #0]
 8000eb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ebc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ec0:	f000 fa16 	bl	80012f0 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	4621      	mov	r1, r4
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ecc:	f000 f9dc 	bl	8001288 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	bd10      	pop	{r4, pc}
 8000ed4:	20000000 	.word	0x20000000

08000ed8 <HAL_Init>:
{
 8000ed8:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eda:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <HAL_Init+0x30>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ee2:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000eea:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ef2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef4:	2003      	movs	r0, #3
 8000ef6:	f000 f9b5 	bl	8001264 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000efa:	2000      	movs	r0, #0
 8000efc:	f7ff ffd8 	bl	8000eb0 <HAL_InitTick>
  HAL_MspInit();
 8000f00:	f001 f825 	bl	8001f4e <HAL_MspInit>
}
 8000f04:	2000      	movs	r0, #0
 8000f06:	bd08      	pop	{r3, pc}
 8000f08:	40023c00 	.word	0x40023c00

08000f0c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000f0c:	4a02      	ldr	r2, [pc, #8]	; (8000f18 <HAL_IncTick+0xc>)
 8000f0e:	6813      	ldr	r3, [r2, #0]
 8000f10:	3301      	adds	r3, #1
 8000f12:	6013      	str	r3, [r2, #0]
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	200006c8 	.word	0x200006c8

08000f1c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f1c:	4b01      	ldr	r3, [pc, #4]	; (8000f24 <HAL_GetTick+0x8>)
 8000f1e:	6818      	ldr	r0, [r3, #0]
}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	200006c8 	.word	0x200006c8

08000f28 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f28:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f2a:	4604      	mov	r4, r0
 8000f2c:	2800      	cmp	r0, #0
 8000f2e:	f000 8099 	beq.w	8001064 <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f32:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000f34:	b923      	cbnz	r3, 8000f40 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f36:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f38:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f3c:	f000 ff42 	bl	8001dc4 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f42:	06db      	lsls	r3, r3, #27
 8000f44:	f100 808c 	bmi.w	8001060 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f4a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f4e:	f023 0302 	bic.w	r3, r3, #2
 8000f52:	f043 0302 	orr.w	r3, r3, #2
 8000f56:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000f58:	4b43      	ldr	r3, [pc, #268]	; (8001068 <HAL_ADC_Init+0x140>)
 8000f5a:	685a      	ldr	r2, [r3, #4]
 8000f5c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000f60:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000f62:	685a      	ldr	r2, [r3, #4]
 8000f64:	6861      	ldr	r1, [r4, #4]
 8000f66:	430a      	orrs	r2, r1
 8000f68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000f6a:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000f6c:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000f6e:	685a      	ldr	r2, [r3, #4]
 8000f70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000f76:	685a      	ldr	r2, [r3, #4]
 8000f78:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000f7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000f7e:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000f80:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000f82:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000f86:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000f88:	685a      	ldr	r2, [r3, #4]
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000f8e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000f90:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000f92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000f98:	689a      	ldr	r2, [r3, #8]
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f9e:	4933      	ldr	r1, [pc, #204]	; (800106c <HAL_ADC_Init+0x144>)
 8000fa0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000fa2:	428a      	cmp	r2, r1
 8000fa4:	d050      	beq.n	8001048 <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000fa6:	6899      	ldr	r1, [r3, #8]
 8000fa8:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000fac:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000fae:	6899      	ldr	r1, [r3, #8]
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000fb4:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000fb6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000fb8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000fbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000fbe:	689a      	ldr	r2, [r3, #8]
 8000fc0:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000fc2:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000fc4:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000fc6:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000fc8:	f022 0202 	bic.w	r2, r2, #2
 8000fcc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000fce:	689a      	ldr	r2, [r3, #8]
 8000fd0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000fd4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000fd6:	6a22      	ldr	r2, [r4, #32]
 8000fd8:	2a00      	cmp	r2, #0
 8000fda:	d03d      	beq.n	8001058 <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000fdc:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000fde:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000fe0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000fe4:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000fe6:	685a      	ldr	r2, [r3, #4]
 8000fe8:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000fec:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	3901      	subs	r1, #1
 8000ff2:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000ff6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000ffa:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000ffc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001000:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001004:	3901      	subs	r1, #1
 8001006:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800100a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800100c:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800100e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001010:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001014:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 800101c:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800101e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001020:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001022:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001026:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001028:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800102a:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800102c:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8001030:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001032:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001034:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001036:	f023 0303 	bic.w	r3, r3, #3
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8001040:	2300      	movs	r3, #0
 8001042:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8001046:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001048:	689a      	ldr	r2, [r3, #8]
 800104a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800104e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001050:	689a      	ldr	r2, [r3, #8]
 8001052:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001056:	e7b4      	b.n	8000fc2 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001058:	685a      	ldr	r2, [r3, #4]
 800105a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800105e:	e7ca      	b.n	8000ff6 <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 8001060:	2001      	movs	r0, #1
 8001062:	e7ed      	b.n	8001040 <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 8001064:	2001      	movs	r0, #1
}
 8001066:	bd10      	pop	{r4, pc}
 8001068:	40012300 	.word	0x40012300
 800106c:	0f000001 	.word	0x0f000001

08001070 <HAL_ADC_Start>:
{
 8001070:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8001072:	2300      	movs	r3, #0
 8001074:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001076:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800107a:	2b01      	cmp	r3, #1
 800107c:	d04e      	beq.n	800111c <HAL_ADC_Start+0xac>
 800107e:	2301      	movs	r3, #1
 8001080:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001084:	6803      	ldr	r3, [r0, #0]
 8001086:	689a      	ldr	r2, [r3, #8]
 8001088:	07d1      	lsls	r1, r2, #31
 800108a:	d505      	bpl.n	8001098 <HAL_ADC_Start+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800108c:	689a      	ldr	r2, [r3, #8]
 800108e:	07d2      	lsls	r2, r2, #31
 8001090:	d414      	bmi.n	80010bc <HAL_ADC_Start+0x4c>
  return HAL_OK;
 8001092:	2000      	movs	r0, #0
}
 8001094:	b002      	add	sp, #8
 8001096:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 8001098:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800109a:	4921      	ldr	r1, [pc, #132]	; (8001120 <HAL_ADC_Start+0xb0>)
    __HAL_ADC_ENABLE(hadc);
 800109c:	f042 0201 	orr.w	r2, r2, #1
 80010a0:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010a2:	4a20      	ldr	r2, [pc, #128]	; (8001124 <HAL_ADC_Start+0xb4>)
 80010a4:	6812      	ldr	r2, [r2, #0]
 80010a6:	fbb2 f2f1 	udiv	r2, r2, r1
 80010aa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 80010ae:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 80010b0:	9a01      	ldr	r2, [sp, #4]
 80010b2:	2a00      	cmp	r2, #0
 80010b4:	d0ea      	beq.n	800108c <HAL_ADC_Start+0x1c>
      counter--;
 80010b6:	9a01      	ldr	r2, [sp, #4]
 80010b8:	3a01      	subs	r2, #1
 80010ba:	e7f8      	b.n	80010ae <HAL_ADC_Start+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 80010bc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80010be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80010c2:	f022 0201 	bic.w	r2, r2, #1
 80010c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010ca:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010cc:	685a      	ldr	r2, [r3, #4]
 80010ce:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010d0:	bf41      	itttt	mi
 80010d2:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 80010d4:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80010d8:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80010dc:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010de:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80010e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010e4:	bf1c      	itt	ne
 80010e6:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 80010e8:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80010ec:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 80010ee:	2200      	movs	r2, #0
 80010f0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80010f4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80010f8:	601a      	str	r2, [r3, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80010fa:	4a0b      	ldr	r2, [pc, #44]	; (8001128 <HAL_ADC_Start+0xb8>)
 80010fc:	6852      	ldr	r2, [r2, #4]
 80010fe:	06d2      	lsls	r2, r2, #27
 8001100:	d108      	bne.n	8001114 <HAL_ADC_Start+0xa4>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001102:	6898      	ldr	r0, [r3, #8]
 8001104:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8001108:	d1c3      	bne.n	8001092 <HAL_ADC_Start+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	e7bf      	b.n	8001094 <HAL_ADC_Start+0x24>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001114:	4a05      	ldr	r2, [pc, #20]	; (800112c <HAL_ADC_Start+0xbc>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d1bb      	bne.n	8001092 <HAL_ADC_Start+0x22>
 800111a:	e7f2      	b.n	8001102 <HAL_ADC_Start+0x92>
  __HAL_LOCK(hadc);
 800111c:	2002      	movs	r0, #2
 800111e:	e7b9      	b.n	8001094 <HAL_ADC_Start+0x24>
 8001120:	000f4240 	.word	0x000f4240
 8001124:	20000000 	.word	0x20000000
 8001128:	40012300 	.word	0x40012300
 800112c:	40012000 	.word	0x40012000

08001130 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8001130:	6803      	ldr	r3, [r0, #0]
 8001132:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8001134:	4770      	bx	lr
	...

08001138 <HAL_ADC_ConfigChannel>:
{
 8001138:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 800113a:	2300      	movs	r3, #0
 800113c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800113e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001142:	2b01      	cmp	r3, #1
 8001144:	f000 8083 	beq.w	800124e <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001148:	680d      	ldr	r5, [r1, #0]
 800114a:	6804      	ldr	r4, [r0, #0]
 800114c:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 800114e:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001150:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8001152:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8001156:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001158:	d92a      	bls.n	80011b0 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800115a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800115e:	68e7      	ldr	r7, [r4, #12]
 8001160:	3b1e      	subs	r3, #30
 8001162:	f04f 0e07 	mov.w	lr, #7
 8001166:	fa0e fe03 	lsl.w	lr, lr, r3
 800116a:	ea27 070e 	bic.w	r7, r7, lr
 800116e:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001170:	68e7      	ldr	r7, [r4, #12]
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	433b      	orrs	r3, r7
 8001178:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 800117a:	684a      	ldr	r2, [r1, #4]
 800117c:	2a06      	cmp	r2, #6
 800117e:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8001182:	d825      	bhi.n	80011d0 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001184:	4413      	add	r3, r2
 8001186:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8001188:	1f59      	subs	r1, r3, #5
 800118a:	231f      	movs	r3, #31
 800118c:	408b      	lsls	r3, r1
 800118e:	ea27 0303 	bic.w	r3, r7, r3
 8001192:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001194:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001196:	fa06 f101 	lsl.w	r1, r6, r1
 800119a:	4311      	orrs	r1, r2
 800119c:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800119e:	4b2d      	ldr	r3, [pc, #180]	; (8001254 <HAL_ADC_ConfigChannel+0x11c>)
 80011a0:	429c      	cmp	r4, r3
 80011a2:	d034      	beq.n	800120e <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 80011a4:	2300      	movs	r3, #0
 80011a6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80011aa:	4618      	mov	r0, r3
}
 80011ac:	b003      	add	sp, #12
 80011ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80011b0:	6927      	ldr	r7, [r4, #16]
 80011b2:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80011b6:	f04f 0e07 	mov.w	lr, #7
 80011ba:	fa0e fe03 	lsl.w	lr, lr, r3
 80011be:	ea27 070e 	bic.w	r7, r7, lr
 80011c2:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80011c4:	6927      	ldr	r7, [r4, #16]
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	433b      	orrs	r3, r7
 80011cc:	6123      	str	r3, [r4, #16]
 80011ce:	e7d4      	b.n	800117a <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 80011d0:	2a0c      	cmp	r2, #12
 80011d2:	d80e      	bhi.n	80011f2 <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011d4:	4413      	add	r3, r2
 80011d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80011d8:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 80011dc:	231f      	movs	r3, #31
 80011de:	4093      	lsls	r3, r2
 80011e0:	ea21 0303 	bic.w	r3, r1, r3
 80011e4:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80011e8:	fa06 f202 	lsl.w	r2, r6, r2
 80011ec:	431a      	orrs	r2, r3
 80011ee:	6322      	str	r2, [r4, #48]	; 0x30
 80011f0:	e7d5      	b.n	800119e <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80011f2:	4413      	add	r3, r2
 80011f4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80011f6:	3b41      	subs	r3, #65	; 0x41
 80011f8:	221f      	movs	r2, #31
 80011fa:	409a      	lsls	r2, r3
 80011fc:	ea21 0202 	bic.w	r2, r1, r2
 8001200:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001202:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001204:	fa06 f103 	lsl.w	r1, r6, r3
 8001208:	4311      	orrs	r1, r2
 800120a:	62e1      	str	r1, [r4, #44]	; 0x2c
 800120c:	e7c7      	b.n	800119e <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800120e:	2d12      	cmp	r5, #18
 8001210:	d104      	bne.n	800121c <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001212:	4a11      	ldr	r2, [pc, #68]	; (8001258 <HAL_ADC_ConfigChannel+0x120>)
 8001214:	6853      	ldr	r3, [r2, #4]
 8001216:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800121a:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800121c:	f1a5 0310 	sub.w	r3, r5, #16
 8001220:	2b01      	cmp	r3, #1
 8001222:	d8bf      	bhi.n	80011a4 <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001224:	4a0c      	ldr	r2, [pc, #48]	; (8001258 <HAL_ADC_ConfigChannel+0x120>)
 8001226:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001228:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800122a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800122e:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001230:	d1b8      	bne.n	80011a4 <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001232:	4b0a      	ldr	r3, [pc, #40]	; (800125c <HAL_ADC_ConfigChannel+0x124>)
 8001234:	4a0a      	ldr	r2, [pc, #40]	; (8001260 <HAL_ADC_ConfigChannel+0x128>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	fbb3 f2f2 	udiv	r2, r3, r2
 800123c:	230a      	movs	r3, #10
 800123e:	4353      	muls	r3, r2
        counter--;
 8001240:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8001242:	9b01      	ldr	r3, [sp, #4]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d0ad      	beq.n	80011a4 <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 8001248:	9b01      	ldr	r3, [sp, #4]
 800124a:	3b01      	subs	r3, #1
 800124c:	e7f8      	b.n	8001240 <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 800124e:	2002      	movs	r0, #2
 8001250:	e7ac      	b.n	80011ac <HAL_ADC_ConfigChannel+0x74>
 8001252:	bf00      	nop
 8001254:	40012000 	.word	0x40012000
 8001258:	40012300 	.word	0x40012300
 800125c:	20000000 	.word	0x20000000
 8001260:	000f4240 	.word	0x000f4240

08001264 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001264:	4a07      	ldr	r2, [pc, #28]	; (8001284 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001266:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001268:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800126c:	041b      	lsls	r3, r3, #16
 800126e:	0c1b      	lsrs	r3, r3, #16
 8001270:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001274:	0200      	lsls	r0, r0, #8
 8001276:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800127a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800127e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001280:	60d3      	str	r3, [r2, #12]
 8001282:	4770      	bx	lr
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001288:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800128a:	b530      	push	{r4, r5, lr}
 800128c:	68dc      	ldr	r4, [r3, #12]
 800128e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001292:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001296:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001298:	2b04      	cmp	r3, #4
 800129a:	bf28      	it	cs
 800129c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a0:	f04f 0501 	mov.w	r5, #1
 80012a4:	fa05 f303 	lsl.w	r3, r5, r3
 80012a8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ac:	bf8c      	ite	hi
 80012ae:	3c03      	subhi	r4, #3
 80012b0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b2:	4019      	ands	r1, r3
 80012b4:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b6:	fa05 f404 	lsl.w	r4, r5, r4
 80012ba:	3c01      	subs	r4, #1
 80012bc:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80012be:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c0:	ea42 0201 	orr.w	r2, r2, r1
 80012c4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c8:	bfaf      	iteee	ge
 80012ca:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ce:	f000 000f 	andlt.w	r0, r0, #15
 80012d2:	4b06      	ldrlt	r3, [pc, #24]	; (80012ec <HAL_NVIC_SetPriority+0x64>)
 80012d4:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d6:	bfa5      	ittet	ge
 80012d8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80012dc:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012de:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80012e4:	bd30      	pop	{r4, r5, pc}
 80012e6:	bf00      	nop
 80012e8:	e000ed00 	.word	0xe000ed00
 80012ec:	e000ed14 	.word	0xe000ed14

080012f0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f0:	3801      	subs	r0, #1
 80012f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80012f6:	d20a      	bcs.n	800130e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fa:	4a07      	ldr	r2, [pc, #28]	; (8001318 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012fc:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fe:	21f0      	movs	r1, #240	; 0xf0
 8001300:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001304:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001306:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001308:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800130e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	e000e010 	.word	0xe000e010
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800131c:	4b04      	ldr	r3, [pc, #16]	; (8001330 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800131e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001320:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001322:	bf0c      	ite	eq
 8001324:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001328:	f022 0204 	bicne.w	r2, r2, #4
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	4770      	bx	lr
 8001330:	e000e010 	.word	0xe000e010

08001334 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001334:	4770      	bx	lr

08001336 <HAL_SYSTICK_IRQHandler>:
{
 8001336:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001338:	f7ff fffc 	bl	8001334 <HAL_SYSTICK_Callback>
 800133c:	bd08      	pop	{r3, pc}
	...

08001340 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001344:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001346:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001348:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80014f8 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800134c:	4a68      	ldr	r2, [pc, #416]	; (80014f0 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800134e:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80014fc <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001352:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001354:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8001356:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800135a:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 800135c:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001360:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8001364:	45b6      	cmp	lr, r6
 8001366:	f040 80ae 	bne.w	80014c6 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800136a:	684c      	ldr	r4, [r1, #4]
 800136c:	f024 0710 	bic.w	r7, r4, #16
 8001370:	2f02      	cmp	r7, #2
 8001372:	d116      	bne.n	80013a2 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8001374:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001378:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800137c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001380:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001384:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001388:	f04f 0c0f 	mov.w	ip, #15
 800138c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001390:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001394:	690d      	ldr	r5, [r1, #16]
 8001396:	fa05 f50b 	lsl.w	r5, r5, fp
 800139a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800139e:	f8ca 5020 	str.w	r5, [sl, #32]
 80013a2:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013a6:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80013a8:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013ac:	fa05 f50a 	lsl.w	r5, r5, sl
 80013b0:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013b2:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013b6:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013ba:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013be:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013c0:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013c4:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80013c6:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013ca:	d811      	bhi.n	80013f0 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80013cc:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013ce:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013d2:	68cf      	ldr	r7, [r1, #12]
 80013d4:	fa07 fc0a 	lsl.w	ip, r7, sl
 80013d8:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80013dc:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80013de:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013e0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013e4:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80013e8:	409f      	lsls	r7, r3
 80013ea:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80013ee:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80013f0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013f2:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013f4:	688f      	ldr	r7, [r1, #8]
 80013f6:	fa07 f70a 	lsl.w	r7, r7, sl
 80013fa:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80013fc:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013fe:	00e5      	lsls	r5, r4, #3
 8001400:	d561      	bpl.n	80014c6 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001402:	f04f 0b00 	mov.w	fp, #0
 8001406:	f8cd b00c 	str.w	fp, [sp, #12]
 800140a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800140e:	4d39      	ldr	r5, [pc, #228]	; (80014f4 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001410:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001414:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001418:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800141c:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001420:	9703      	str	r7, [sp, #12]
 8001422:	9f03      	ldr	r7, [sp, #12]
 8001424:	f023 0703 	bic.w	r7, r3, #3
 8001428:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800142c:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001430:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001434:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001438:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800143c:	f04f 0e0f 	mov.w	lr, #15
 8001440:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001444:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001446:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800144a:	d043      	beq.n	80014d4 <HAL_GPIO_Init+0x194>
 800144c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001450:	42a8      	cmp	r0, r5
 8001452:	d041      	beq.n	80014d8 <HAL_GPIO_Init+0x198>
 8001454:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001458:	42a8      	cmp	r0, r5
 800145a:	d03f      	beq.n	80014dc <HAL_GPIO_Init+0x19c>
 800145c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001460:	42a8      	cmp	r0, r5
 8001462:	d03d      	beq.n	80014e0 <HAL_GPIO_Init+0x1a0>
 8001464:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001468:	42a8      	cmp	r0, r5
 800146a:	d03b      	beq.n	80014e4 <HAL_GPIO_Init+0x1a4>
 800146c:	4548      	cmp	r0, r9
 800146e:	d03b      	beq.n	80014e8 <HAL_GPIO_Init+0x1a8>
 8001470:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001474:	42a8      	cmp	r0, r5
 8001476:	d039      	beq.n	80014ec <HAL_GPIO_Init+0x1ac>
 8001478:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800147c:	42a8      	cmp	r0, r5
 800147e:	bf14      	ite	ne
 8001480:	2508      	movne	r5, #8
 8001482:	2507      	moveq	r5, #7
 8001484:	fa05 f50c 	lsl.w	r5, r5, ip
 8001488:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800148c:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800148e:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001490:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001492:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001496:	bf0c      	ite	eq
 8001498:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800149a:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 800149c:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800149e:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014a0:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80014a4:	bf0c      	ite	eq
 80014a6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80014a8:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80014aa:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ac:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014ae:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80014b2:	bf0c      	ite	eq
 80014b4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80014b6:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80014b8:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80014ba:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014bc:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80014be:	bf54      	ite	pl
 80014c0:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80014c2:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80014c4:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014c6:	3301      	adds	r3, #1
 80014c8:	2b10      	cmp	r3, #16
 80014ca:	f47f af44 	bne.w	8001356 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80014ce:	b005      	add	sp, #20
 80014d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014d4:	465d      	mov	r5, fp
 80014d6:	e7d5      	b.n	8001484 <HAL_GPIO_Init+0x144>
 80014d8:	2501      	movs	r5, #1
 80014da:	e7d3      	b.n	8001484 <HAL_GPIO_Init+0x144>
 80014dc:	2502      	movs	r5, #2
 80014de:	e7d1      	b.n	8001484 <HAL_GPIO_Init+0x144>
 80014e0:	2503      	movs	r5, #3
 80014e2:	e7cf      	b.n	8001484 <HAL_GPIO_Init+0x144>
 80014e4:	2504      	movs	r5, #4
 80014e6:	e7cd      	b.n	8001484 <HAL_GPIO_Init+0x144>
 80014e8:	2505      	movs	r5, #5
 80014ea:	e7cb      	b.n	8001484 <HAL_GPIO_Init+0x144>
 80014ec:	2506      	movs	r5, #6
 80014ee:	e7c9      	b.n	8001484 <HAL_GPIO_Init+0x144>
 80014f0:	40013c00 	.word	0x40013c00
 80014f4:	40020000 	.word	0x40020000
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40021400 	.word	0x40021400

08001500 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001500:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001502:	4604      	mov	r4, r0
 8001504:	b910      	cbnz	r0, 800150c <HAL_RCC_OscConfig+0xc>
  {
    return HAL_ERROR;
 8001506:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001508:	b003      	add	sp, #12
 800150a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800150c:	6803      	ldr	r3, [r0, #0]
 800150e:	07d8      	lsls	r0, r3, #31
 8001510:	d43b      	bmi.n	800158a <HAL_RCC_OscConfig+0x8a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001512:	6823      	ldr	r3, [r4, #0]
 8001514:	0799      	lsls	r1, r3, #30
 8001516:	f100 8084 	bmi.w	8001622 <HAL_RCC_OscConfig+0x122>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800151a:	6823      	ldr	r3, [r4, #0]
 800151c:	071e      	lsls	r6, r3, #28
 800151e:	f100 80c6 	bmi.w	80016ae <HAL_RCC_OscConfig+0x1ae>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001522:	6823      	ldr	r3, [r4, #0]
 8001524:	075d      	lsls	r5, r3, #29
 8001526:	d52a      	bpl.n	800157e <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001528:	2300      	movs	r3, #0
 800152a:	9301      	str	r3, [sp, #4]
 800152c:	4baa      	ldr	r3, [pc, #680]	; (80017d8 <HAL_RCC_OscConfig+0x2d8>)
    PWR->CR |= PWR_CR_DBP;
 800152e:	4dab      	ldr	r5, [pc, #684]	; (80017dc <HAL_RCC_OscConfig+0x2dc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001530:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001532:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001536:	641a      	str	r2, [r3, #64]	; 0x40
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153e:	9301      	str	r3, [sp, #4]
 8001540:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001542:	682b      	ldr	r3, [r5, #0]
 8001544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001548:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800154a:	f7ff fce7 	bl	8000f1c <HAL_GetTick>
 800154e:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001550:	682b      	ldr	r3, [r5, #0]
 8001552:	05da      	lsls	r2, r3, #23
 8001554:	f140 80cd 	bpl.w	80016f2 <HAL_RCC_OscConfig+0x1f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001558:	68a3      	ldr	r3, [r4, #8]
 800155a:	4d9f      	ldr	r5, [pc, #636]	; (80017d8 <HAL_RCC_OscConfig+0x2d8>)
 800155c:	2b01      	cmp	r3, #1
 800155e:	f040 80cf 	bne.w	8001700 <HAL_RCC_OscConfig+0x200>
 8001562:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800156a:	f7ff fcd7 	bl	8000f1c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800156e:	4d9a      	ldr	r5, [pc, #616]	; (80017d8 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8001570:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001572:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001576:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001578:	079b      	lsls	r3, r3, #30
 800157a:	f140 80e2 	bpl.w	8001742 <HAL_RCC_OscConfig+0x242>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800157e:	69a2      	ldr	r2, [r4, #24]
 8001580:	2a00      	cmp	r2, #0
 8001582:	f040 80e5 	bne.w	8001750 <HAL_RCC_OscConfig+0x250>
  return HAL_OK;
 8001586:	2000      	movs	r0, #0
 8001588:	e7be      	b.n	8001508 <HAL_RCC_OscConfig+0x8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800158a:	4b93      	ldr	r3, [pc, #588]	; (80017d8 <HAL_RCC_OscConfig+0x2d8>)
 800158c:	689a      	ldr	r2, [r3, #8]
 800158e:	f002 020c 	and.w	r2, r2, #12
 8001592:	2a04      	cmp	r2, #4
 8001594:	d007      	beq.n	80015a6 <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001596:	689a      	ldr	r2, [r3, #8]
 8001598:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800159c:	2a08      	cmp	r2, #8
 800159e:	d10a      	bne.n	80015b6 <HAL_RCC_OscConfig+0xb6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	025a      	lsls	r2, r3, #9
 80015a4:	d507      	bpl.n	80015b6 <HAL_RCC_OscConfig+0xb6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a6:	4b8c      	ldr	r3, [pc, #560]	; (80017d8 <HAL_RCC_OscConfig+0x2d8>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	039b      	lsls	r3, r3, #14
 80015ac:	d5b1      	bpl.n	8001512 <HAL_RCC_OscConfig+0x12>
 80015ae:	6863      	ldr	r3, [r4, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1ae      	bne.n	8001512 <HAL_RCC_OscConfig+0x12>
 80015b4:	e7a7      	b.n	8001506 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015b6:	6863      	ldr	r3, [r4, #4]
 80015b8:	4d87      	ldr	r5, [pc, #540]	; (80017d8 <HAL_RCC_OscConfig+0x2d8>)
 80015ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015be:	d111      	bne.n	80015e4 <HAL_RCC_OscConfig+0xe4>
 80015c0:	682b      	ldr	r3, [r5, #0]
 80015c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80015c8:	f7ff fca8 	bl	8000f1c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015cc:	4d82      	ldr	r5, [pc, #520]	; (80017d8 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 80015ce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d0:	682b      	ldr	r3, [r5, #0]
 80015d2:	039f      	lsls	r7, r3, #14
 80015d4:	d49d      	bmi.n	8001512 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015d6:	f7ff fca1 	bl	8000f1c <HAL_GetTick>
 80015da:	1b80      	subs	r0, r0, r6
 80015dc:	2864      	cmp	r0, #100	; 0x64
 80015de:	d9f7      	bls.n	80015d0 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 80015e0:	2003      	movs	r0, #3
 80015e2:	e791      	b.n	8001508 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015e8:	d104      	bne.n	80015f4 <HAL_RCC_OscConfig+0xf4>
 80015ea:	682b      	ldr	r3, [r5, #0]
 80015ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f0:	602b      	str	r3, [r5, #0]
 80015f2:	e7e5      	b.n	80015c0 <HAL_RCC_OscConfig+0xc0>
 80015f4:	682a      	ldr	r2, [r5, #0]
 80015f6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80015fa:	602a      	str	r2, [r5, #0]
 80015fc:	682a      	ldr	r2, [r5, #0]
 80015fe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001602:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1df      	bne.n	80015c8 <HAL_RCC_OscConfig+0xc8>
        tickstart = HAL_GetTick();
 8001608:	f7ff fc88 	bl	8000f1c <HAL_GetTick>
 800160c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800160e:	682b      	ldr	r3, [r5, #0]
 8001610:	0398      	lsls	r0, r3, #14
 8001612:	f57f af7e 	bpl.w	8001512 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001616:	f7ff fc81 	bl	8000f1c <HAL_GetTick>
 800161a:	1b80      	subs	r0, r0, r6
 800161c:	2864      	cmp	r0, #100	; 0x64
 800161e:	d9f6      	bls.n	800160e <HAL_RCC_OscConfig+0x10e>
 8001620:	e7de      	b.n	80015e0 <HAL_RCC_OscConfig+0xe0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001622:	4b6d      	ldr	r3, [pc, #436]	; (80017d8 <HAL_RCC_OscConfig+0x2d8>)
 8001624:	689a      	ldr	r2, [r3, #8]
 8001626:	f012 0f0c 	tst.w	r2, #12
 800162a:	d007      	beq.n	800163c <HAL_RCC_OscConfig+0x13c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800162c:	689a      	ldr	r2, [r3, #8]
 800162e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001632:	2a08      	cmp	r2, #8
 8001634:	d112      	bne.n	800165c <HAL_RCC_OscConfig+0x15c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	0259      	lsls	r1, r3, #9
 800163a:	d40f      	bmi.n	800165c <HAL_RCC_OscConfig+0x15c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800163c:	4b66      	ldr	r3, [pc, #408]	; (80017d8 <HAL_RCC_OscConfig+0x2d8>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	0792      	lsls	r2, r2, #30
 8001642:	d503      	bpl.n	800164c <HAL_RCC_OscConfig+0x14c>
 8001644:	68e2      	ldr	r2, [r4, #12]
 8001646:	2a01      	cmp	r2, #1
 8001648:	f47f af5d 	bne.w	8001506 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	6921      	ldr	r1, [r4, #16]
 8001650:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001654:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001658:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800165a:	e75e      	b.n	800151a <HAL_RCC_OscConfig+0x1a>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800165c:	68e2      	ldr	r2, [r4, #12]
 800165e:	4b60      	ldr	r3, [pc, #384]	; (80017e0 <HAL_RCC_OscConfig+0x2e0>)
 8001660:	b1b2      	cbz	r2, 8001690 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 8001662:	2201      	movs	r2, #1
 8001664:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001666:	f7ff fc59 	bl	8000f1c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800166a:	4d5b      	ldr	r5, [pc, #364]	; (80017d8 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 800166c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800166e:	682b      	ldr	r3, [r5, #0]
 8001670:	079b      	lsls	r3, r3, #30
 8001672:	d507      	bpl.n	8001684 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001674:	682b      	ldr	r3, [r5, #0]
 8001676:	6922      	ldr	r2, [r4, #16]
 8001678:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800167c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001680:	602b      	str	r3, [r5, #0]
 8001682:	e74a      	b.n	800151a <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001684:	f7ff fc4a 	bl	8000f1c <HAL_GetTick>
 8001688:	1b80      	subs	r0, r0, r6
 800168a:	2802      	cmp	r0, #2
 800168c:	d9ef      	bls.n	800166e <HAL_RCC_OscConfig+0x16e>
 800168e:	e7a7      	b.n	80015e0 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 8001690:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001692:	f7ff fc43 	bl	8000f1c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001696:	4d50      	ldr	r5, [pc, #320]	; (80017d8 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8001698:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800169a:	682b      	ldr	r3, [r5, #0]
 800169c:	079f      	lsls	r7, r3, #30
 800169e:	f57f af3c 	bpl.w	800151a <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016a2:	f7ff fc3b 	bl	8000f1c <HAL_GetTick>
 80016a6:	1b80      	subs	r0, r0, r6
 80016a8:	2802      	cmp	r0, #2
 80016aa:	d9f6      	bls.n	800169a <HAL_RCC_OscConfig+0x19a>
 80016ac:	e798      	b.n	80015e0 <HAL_RCC_OscConfig+0xe0>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016ae:	6962      	ldr	r2, [r4, #20]
 80016b0:	4b4c      	ldr	r3, [pc, #304]	; (80017e4 <HAL_RCC_OscConfig+0x2e4>)
 80016b2:	b17a      	cbz	r2, 80016d4 <HAL_RCC_OscConfig+0x1d4>
      __HAL_RCC_LSI_ENABLE();
 80016b4:	2201      	movs	r2, #1
 80016b6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80016b8:	f7ff fc30 	bl	8000f1c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016bc:	4d46      	ldr	r5, [pc, #280]	; (80017d8 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 80016be:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80016c2:	0798      	lsls	r0, r3, #30
 80016c4:	f53f af2d 	bmi.w	8001522 <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016c8:	f7ff fc28 	bl	8000f1c <HAL_GetTick>
 80016cc:	1b80      	subs	r0, r0, r6
 80016ce:	2802      	cmp	r0, #2
 80016d0:	d9f6      	bls.n	80016c0 <HAL_RCC_OscConfig+0x1c0>
 80016d2:	e785      	b.n	80015e0 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_LSI_DISABLE();
 80016d4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80016d6:	f7ff fc21 	bl	8000f1c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016da:	4d3f      	ldr	r5, [pc, #252]	; (80017d8 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 80016dc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016de:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80016e0:	0799      	lsls	r1, r3, #30
 80016e2:	f57f af1e 	bpl.w	8001522 <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016e6:	f7ff fc19 	bl	8000f1c <HAL_GetTick>
 80016ea:	1b80      	subs	r0, r0, r6
 80016ec:	2802      	cmp	r0, #2
 80016ee:	d9f6      	bls.n	80016de <HAL_RCC_OscConfig+0x1de>
 80016f0:	e776      	b.n	80015e0 <HAL_RCC_OscConfig+0xe0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80016f2:	f7ff fc13 	bl	8000f1c <HAL_GetTick>
 80016f6:	1b80      	subs	r0, r0, r6
 80016f8:	2802      	cmp	r0, #2
 80016fa:	f67f af29 	bls.w	8001550 <HAL_RCC_OscConfig+0x50>
 80016fe:	e76f      	b.n	80015e0 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001700:	2b05      	cmp	r3, #5
 8001702:	d104      	bne.n	800170e <HAL_RCC_OscConfig+0x20e>
 8001704:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001706:	f043 0304 	orr.w	r3, r3, #4
 800170a:	672b      	str	r3, [r5, #112]	; 0x70
 800170c:	e729      	b.n	8001562 <HAL_RCC_OscConfig+0x62>
 800170e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001710:	f022 0201 	bic.w	r2, r2, #1
 8001714:	672a      	str	r2, [r5, #112]	; 0x70
 8001716:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001718:	f022 0204 	bic.w	r2, r2, #4
 800171c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800171e:	2b00      	cmp	r3, #0
 8001720:	f47f af23 	bne.w	800156a <HAL_RCC_OscConfig+0x6a>
      tickstart = HAL_GetTick();
 8001724:	f7ff fbfa 	bl	8000f1c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001728:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800172c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800172e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001730:	0798      	lsls	r0, r3, #30
 8001732:	f57f af24 	bpl.w	800157e <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001736:	f7ff fbf1 	bl	8000f1c <HAL_GetTick>
 800173a:	1b80      	subs	r0, r0, r6
 800173c:	42b8      	cmp	r0, r7
 800173e:	d9f6      	bls.n	800172e <HAL_RCC_OscConfig+0x22e>
 8001740:	e74e      	b.n	80015e0 <HAL_RCC_OscConfig+0xe0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001742:	f7ff fbeb 	bl	8000f1c <HAL_GetTick>
 8001746:	1b80      	subs	r0, r0, r6
 8001748:	42b8      	cmp	r0, r7
 800174a:	f67f af14 	bls.w	8001576 <HAL_RCC_OscConfig+0x76>
 800174e:	e747      	b.n	80015e0 <HAL_RCC_OscConfig+0xe0>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001750:	4d21      	ldr	r5, [pc, #132]	; (80017d8 <HAL_RCC_OscConfig+0x2d8>)
 8001752:	68ab      	ldr	r3, [r5, #8]
 8001754:	f003 030c 	and.w	r3, r3, #12
 8001758:	2b08      	cmp	r3, #8
 800175a:	f43f aed4 	beq.w	8001506 <HAL_RCC_OscConfig+0x6>
 800175e:	4e22      	ldr	r6, [pc, #136]	; (80017e8 <HAL_RCC_OscConfig+0x2e8>)
 8001760:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001762:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001764:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001766:	d12a      	bne.n	80017be <HAL_RCC_OscConfig+0x2be>
        tickstart = HAL_GetTick();
 8001768:	f7ff fbd8 	bl	8000f1c <HAL_GetTick>
 800176c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800176e:	682b      	ldr	r3, [r5, #0]
 8001770:	0199      	lsls	r1, r3, #6
 8001772:	d41e      	bmi.n	80017b2 <HAL_RCC_OscConfig+0x2b2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001774:	6a22      	ldr	r2, [r4, #32]
 8001776:	69e3      	ldr	r3, [r4, #28]
 8001778:	4313      	orrs	r3, r2
 800177a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800177c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001780:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001782:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001786:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001788:	4c13      	ldr	r4, [pc, #76]	; (80017d8 <HAL_RCC_OscConfig+0x2d8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800178a:	0852      	lsrs	r2, r2, #1
 800178c:	3a01      	subs	r2, #1
 800178e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001792:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001794:	2301      	movs	r3, #1
 8001796:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001798:	f7ff fbc0 	bl	8000f1c <HAL_GetTick>
 800179c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800179e:	6823      	ldr	r3, [r4, #0]
 80017a0:	019a      	lsls	r2, r3, #6
 80017a2:	f53f aef0 	bmi.w	8001586 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017a6:	f7ff fbb9 	bl	8000f1c <HAL_GetTick>
 80017aa:	1b40      	subs	r0, r0, r5
 80017ac:	2802      	cmp	r0, #2
 80017ae:	d9f6      	bls.n	800179e <HAL_RCC_OscConfig+0x29e>
 80017b0:	e716      	b.n	80015e0 <HAL_RCC_OscConfig+0xe0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b2:	f7ff fbb3 	bl	8000f1c <HAL_GetTick>
 80017b6:	1bc0      	subs	r0, r0, r7
 80017b8:	2802      	cmp	r0, #2
 80017ba:	d9d8      	bls.n	800176e <HAL_RCC_OscConfig+0x26e>
 80017bc:	e710      	b.n	80015e0 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 80017be:	f7ff fbad 	bl	8000f1c <HAL_GetTick>
 80017c2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017c4:	682b      	ldr	r3, [r5, #0]
 80017c6:	019b      	lsls	r3, r3, #6
 80017c8:	f57f aedd 	bpl.w	8001586 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017cc:	f7ff fba6 	bl	8000f1c <HAL_GetTick>
 80017d0:	1b00      	subs	r0, r0, r4
 80017d2:	2802      	cmp	r0, #2
 80017d4:	d9f6      	bls.n	80017c4 <HAL_RCC_OscConfig+0x2c4>
 80017d6:	e703      	b.n	80015e0 <HAL_RCC_OscConfig+0xe0>
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40007000 	.word	0x40007000
 80017e0:	42470000 	.word	0x42470000
 80017e4:	42470e80 	.word	0x42470e80
 80017e8:	42470060 	.word	0x42470060

080017ec <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017ec:	4913      	ldr	r1, [pc, #76]	; (800183c <HAL_RCC_GetSysClockFreq+0x50>)
{
 80017ee:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017f0:	688b      	ldr	r3, [r1, #8]
 80017f2:	f003 030c 	and.w	r3, r3, #12
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	d003      	beq.n	8001802 <HAL_RCC_GetSysClockFreq+0x16>
 80017fa:	2b08      	cmp	r3, #8
 80017fc:	d003      	beq.n	8001806 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017fe:	4810      	ldr	r0, [pc, #64]	; (8001840 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001800:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001802:	4810      	ldr	r0, [pc, #64]	; (8001844 <HAL_RCC_GetSysClockFreq+0x58>)
 8001804:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001806:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001808:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800180a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800180c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001810:	bf14      	ite	ne
 8001812:	480c      	ldrne	r0, [pc, #48]	; (8001844 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001814:	480a      	ldreq	r0, [pc, #40]	; (8001840 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001816:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800181a:	bf18      	it	ne
 800181c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800181e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001822:	fba1 0100 	umull	r0, r1, r1, r0
 8001826:	f7ff f9bb 	bl	8000ba0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800182a:	4b04      	ldr	r3, [pc, #16]	; (800183c <HAL_RCC_GetSysClockFreq+0x50>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001832:	3301      	adds	r3, #1
 8001834:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001836:	fbb0 f0f3 	udiv	r0, r0, r3
 800183a:	bd08      	pop	{r3, pc}
 800183c:	40023800 	.word	0x40023800
 8001840:	00f42400 	.word	0x00f42400
 8001844:	017d7840 	.word	0x017d7840

08001848 <HAL_RCC_ClockConfig>:
{
 8001848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800184c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800184e:	4604      	mov	r4, r0
 8001850:	b910      	cbnz	r0, 8001858 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001852:	2001      	movs	r0, #1
 8001854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001858:	4b44      	ldr	r3, [pc, #272]	; (800196c <HAL_RCC_ClockConfig+0x124>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	f002 020f 	and.w	r2, r2, #15
 8001860:	428a      	cmp	r2, r1
 8001862:	d328      	bcc.n	80018b6 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001864:	6821      	ldr	r1, [r4, #0]
 8001866:	078f      	lsls	r7, r1, #30
 8001868:	d42d      	bmi.n	80018c6 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800186a:	07c8      	lsls	r0, r1, #31
 800186c:	d440      	bmi.n	80018f0 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800186e:	4b3f      	ldr	r3, [pc, #252]	; (800196c <HAL_RCC_ClockConfig+0x124>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	f002 020f 	and.w	r2, r2, #15
 8001876:	4295      	cmp	r5, r2
 8001878:	d366      	bcc.n	8001948 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800187a:	6822      	ldr	r2, [r4, #0]
 800187c:	0751      	lsls	r1, r2, #29
 800187e:	d46c      	bmi.n	800195a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001880:	0713      	lsls	r3, r2, #28
 8001882:	d507      	bpl.n	8001894 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001884:	4a3a      	ldr	r2, [pc, #232]	; (8001970 <HAL_RCC_ClockConfig+0x128>)
 8001886:	6921      	ldr	r1, [r4, #16]
 8001888:	6893      	ldr	r3, [r2, #8]
 800188a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800188e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001892:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001894:	f7ff ffaa 	bl	80017ec <HAL_RCC_GetSysClockFreq>
 8001898:	4b35      	ldr	r3, [pc, #212]	; (8001970 <HAL_RCC_ClockConfig+0x128>)
 800189a:	4a36      	ldr	r2, [pc, #216]	; (8001974 <HAL_RCC_ClockConfig+0x12c>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80018a2:	5cd3      	ldrb	r3, [r2, r3]
 80018a4:	40d8      	lsrs	r0, r3
 80018a6:	4b34      	ldr	r3, [pc, #208]	; (8001978 <HAL_RCC_ClockConfig+0x130>)
 80018a8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80018aa:	2000      	movs	r0, #0
 80018ac:	f7ff fb00 	bl	8000eb0 <HAL_InitTick>
  return HAL_OK;
 80018b0:	2000      	movs	r0, #0
 80018b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b6:	b2ca      	uxtb	r2, r1
 80018b8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 030f 	and.w	r3, r3, #15
 80018c0:	4299      	cmp	r1, r3
 80018c2:	d1c6      	bne.n	8001852 <HAL_RCC_ClockConfig+0xa>
 80018c4:	e7ce      	b.n	8001864 <HAL_RCC_ClockConfig+0x1c>
 80018c6:	4b2a      	ldr	r3, [pc, #168]	; (8001970 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c8:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018cc:	bf1e      	ittt	ne
 80018ce:	689a      	ldrne	r2, [r3, #8]
 80018d0:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80018d4:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d6:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018d8:	bf42      	ittt	mi
 80018da:	689a      	ldrmi	r2, [r3, #8]
 80018dc:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80018e0:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	68a0      	ldr	r0, [r4, #8]
 80018e6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80018ea:	4302      	orrs	r2, r0
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	e7bc      	b.n	800186a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018f0:	6862      	ldr	r2, [r4, #4]
 80018f2:	4b1f      	ldr	r3, [pc, #124]	; (8001970 <HAL_RCC_ClockConfig+0x128>)
 80018f4:	2a01      	cmp	r2, #1
 80018f6:	d11d      	bne.n	8001934 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018fe:	d0a8      	beq.n	8001852 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001900:	4e1b      	ldr	r6, [pc, #108]	; (8001970 <HAL_RCC_ClockConfig+0x128>)
 8001902:	68b3      	ldr	r3, [r6, #8]
 8001904:	f023 0303 	bic.w	r3, r3, #3
 8001908:	4313      	orrs	r3, r2
 800190a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800190c:	f7ff fb06 	bl	8000f1c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001910:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001914:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001916:	68b3      	ldr	r3, [r6, #8]
 8001918:	6862      	ldr	r2, [r4, #4]
 800191a:	f003 030c 	and.w	r3, r3, #12
 800191e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001922:	d0a4      	beq.n	800186e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001924:	f7ff fafa 	bl	8000f1c <HAL_GetTick>
 8001928:	1bc0      	subs	r0, r0, r7
 800192a:	4540      	cmp	r0, r8
 800192c:	d9f3      	bls.n	8001916 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 800192e:	2003      	movs	r0, #3
}
 8001930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001934:	1e91      	subs	r1, r2, #2
 8001936:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001938:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800193a:	d802      	bhi.n	8001942 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800193c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001940:	e7dd      	b.n	80018fe <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001942:	f013 0f02 	tst.w	r3, #2
 8001946:	e7da      	b.n	80018fe <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001948:	b2ea      	uxtb	r2, r5
 800194a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	429d      	cmp	r5, r3
 8001954:	f47f af7d 	bne.w	8001852 <HAL_RCC_ClockConfig+0xa>
 8001958:	e78f      	b.n	800187a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800195a:	4905      	ldr	r1, [pc, #20]	; (8001970 <HAL_RCC_ClockConfig+0x128>)
 800195c:	68e0      	ldr	r0, [r4, #12]
 800195e:	688b      	ldr	r3, [r1, #8]
 8001960:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001964:	4303      	orrs	r3, r0
 8001966:	608b      	str	r3, [r1, #8]
 8001968:	e78a      	b.n	8001880 <HAL_RCC_ClockConfig+0x38>
 800196a:	bf00      	nop
 800196c:	40023c00 	.word	0x40023c00
 8001970:	40023800 	.word	0x40023800
 8001974:	08004f73 	.word	0x08004f73
 8001978:	20000000 	.word	0x20000000

0800197c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800197c:	4b01      	ldr	r3, [pc, #4]	; (8001984 <HAL_RCC_GetHCLKFreq+0x8>)
 800197e:	6818      	ldr	r0, [r3, #0]
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	20000000 	.word	0x20000000

08001988 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001988:	4b04      	ldr	r3, [pc, #16]	; (800199c <HAL_RCC_GetPCLK1Freq+0x14>)
 800198a:	4a05      	ldr	r2, [pc, #20]	; (80019a0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001992:	5cd3      	ldrb	r3, [r2, r3]
 8001994:	4a03      	ldr	r2, [pc, #12]	; (80019a4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001996:	6810      	ldr	r0, [r2, #0]
}
 8001998:	40d8      	lsrs	r0, r3
 800199a:	4770      	bx	lr
 800199c:	40023800 	.word	0x40023800
 80019a0:	08004f83 	.word	0x08004f83
 80019a4:	20000000 	.word	0x20000000

080019a8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019a8:	4b04      	ldr	r3, [pc, #16]	; (80019bc <HAL_RCC_GetPCLK2Freq+0x14>)
 80019aa:	4a05      	ldr	r2, [pc, #20]	; (80019c0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80019b2:	5cd3      	ldrb	r3, [r2, r3]
 80019b4:	4a03      	ldr	r2, [pc, #12]	; (80019c4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80019b6:	6810      	ldr	r0, [r2, #0]
}
 80019b8:	40d8      	lsrs	r0, r3
 80019ba:	4770      	bx	lr
 80019bc:	40023800 	.word	0x40023800
 80019c0:	08004f83 	.word	0x08004f83
 80019c4:	20000000 	.word	0x20000000

080019c8 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80019c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80019cc:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80019ce:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 80019d0:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80019d2:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80019d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80019d8:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80019da:	6133      	str	r3, [r6, #16]
{
 80019dc:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80019de:	6883      	ldr	r3, [r0, #8]
 80019e0:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 80019e2:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80019e4:	4303      	orrs	r3, r0
 80019e6:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80019e8:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80019ec:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80019ee:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80019f2:	430b      	orrs	r3, r1
 80019f4:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80019f6:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80019f8:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80019fa:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80019fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8001a00:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a02:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001a06:	6173      	str	r3, [r6, #20]
 8001a08:	4b7a      	ldr	r3, [pc, #488]	; (8001bf4 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a0a:	d17c      	bne.n	8001b06 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001a0c:	429e      	cmp	r6, r3
 8001a0e:	d003      	beq.n	8001a18 <UART_SetConfig+0x50>
 8001a10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a14:	429e      	cmp	r6, r3
 8001a16:	d144      	bne.n	8001aa2 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001a18:	f7ff ffc6 	bl	80019a8 <HAL_RCC_GetPCLK2Freq>
 8001a1c:	2519      	movs	r5, #25
 8001a1e:	fb05 f300 	mul.w	r3, r5, r0
 8001a22:	6860      	ldr	r0, [r4, #4]
 8001a24:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001a28:	0040      	lsls	r0, r0, #1
 8001a2a:	fbb3 f3f0 	udiv	r3, r3, r0
 8001a2e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a32:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001a36:	f7ff ffb7 	bl	80019a8 <HAL_RCC_GetPCLK2Freq>
 8001a3a:	6863      	ldr	r3, [r4, #4]
 8001a3c:	4368      	muls	r0, r5
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	fbb0 f7f3 	udiv	r7, r0, r3
 8001a44:	f7ff ffb0 	bl	80019a8 <HAL_RCC_GetPCLK2Freq>
 8001a48:	6863      	ldr	r3, [r4, #4]
 8001a4a:	4368      	muls	r0, r5
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a52:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a56:	fb09 7313 	mls	r3, r9, r3, r7
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	3332      	adds	r3, #50	; 0x32
 8001a5e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001a68:	f7ff ff9e 	bl	80019a8 <HAL_RCC_GetPCLK2Freq>
 8001a6c:	6862      	ldr	r2, [r4, #4]
 8001a6e:	4368      	muls	r0, r5
 8001a70:	0052      	lsls	r2, r2, #1
 8001a72:	fbb0 faf2 	udiv	sl, r0, r2
 8001a76:	f7ff ff97 	bl	80019a8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001a7a:	6863      	ldr	r3, [r4, #4]
 8001a7c:	4368      	muls	r0, r5
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a84:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a88:	fb09 a313 	mls	r3, r9, r3, sl
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	3332      	adds	r3, #50	; 0x32
 8001a90:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001a9a:	443b      	add	r3, r7
 8001a9c:	60b3      	str	r3, [r6, #8]
 8001a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001aa2:	f7ff ff71 	bl	8001988 <HAL_RCC_GetPCLK1Freq>
 8001aa6:	2519      	movs	r5, #25
 8001aa8:	fb05 f300 	mul.w	r3, r5, r0
 8001aac:	6860      	ldr	r0, [r4, #4]
 8001aae:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001ab2:	0040      	lsls	r0, r0, #1
 8001ab4:	fbb3 f3f0 	udiv	r3, r3, r0
 8001ab8:	fbb3 f3f9 	udiv	r3, r3, r9
 8001abc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001ac0:	f7ff ff62 	bl	8001988 <HAL_RCC_GetPCLK1Freq>
 8001ac4:	6863      	ldr	r3, [r4, #4]
 8001ac6:	4368      	muls	r0, r5
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	fbb0 f7f3 	udiv	r7, r0, r3
 8001ace:	f7ff ff5b 	bl	8001988 <HAL_RCC_GetPCLK1Freq>
 8001ad2:	6863      	ldr	r3, [r4, #4]
 8001ad4:	4368      	muls	r0, r5
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001adc:	fbb3 f3f9 	udiv	r3, r3, r9
 8001ae0:	fb09 7313 	mls	r3, r9, r3, r7
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	3332      	adds	r3, #50	; 0x32
 8001ae8:	fbb3 f3f9 	udiv	r3, r3, r9
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001af2:	f7ff ff49 	bl	8001988 <HAL_RCC_GetPCLK1Freq>
 8001af6:	6862      	ldr	r2, [r4, #4]
 8001af8:	4368      	muls	r0, r5
 8001afa:	0052      	lsls	r2, r2, #1
 8001afc:	fbb0 faf2 	udiv	sl, r0, r2
 8001b00:	f7ff ff42 	bl	8001988 <HAL_RCC_GetPCLK1Freq>
 8001b04:	e7b9      	b.n	8001a7a <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001b06:	429e      	cmp	r6, r3
 8001b08:	d002      	beq.n	8001b10 <UART_SetConfig+0x148>
 8001b0a:	4b3b      	ldr	r3, [pc, #236]	; (8001bf8 <UART_SetConfig+0x230>)
 8001b0c:	429e      	cmp	r6, r3
 8001b0e:	d140      	bne.n	8001b92 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001b10:	f7ff ff4a 	bl	80019a8 <HAL_RCC_GetPCLK2Freq>
 8001b14:	6867      	ldr	r7, [r4, #4]
 8001b16:	2519      	movs	r5, #25
 8001b18:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001b1c:	fb05 f300 	mul.w	r3, r5, r0
 8001b20:	00bf      	lsls	r7, r7, #2
 8001b22:	fbb3 f3f7 	udiv	r3, r3, r7
 8001b26:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b2a:	011f      	lsls	r7, r3, #4
 8001b2c:	f7ff ff3c 	bl	80019a8 <HAL_RCC_GetPCLK2Freq>
 8001b30:	6863      	ldr	r3, [r4, #4]
 8001b32:	4368      	muls	r0, r5
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	fbb0 f8f3 	udiv	r8, r0, r3
 8001b3a:	f7ff ff35 	bl	80019a8 <HAL_RCC_GetPCLK2Freq>
 8001b3e:	6863      	ldr	r3, [r4, #4]
 8001b40:	4368      	muls	r0, r5
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b48:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b4c:	fb09 8313 	mls	r3, r9, r3, r8
 8001b50:	011b      	lsls	r3, r3, #4
 8001b52:	3332      	adds	r3, #50	; 0x32
 8001b54:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b58:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001b5c:	f7ff ff24 	bl	80019a8 <HAL_RCC_GetPCLK2Freq>
 8001b60:	6862      	ldr	r2, [r4, #4]
 8001b62:	4368      	muls	r0, r5
 8001b64:	0092      	lsls	r2, r2, #2
 8001b66:	fbb0 faf2 	udiv	sl, r0, r2
 8001b6a:	f7ff ff1d 	bl	80019a8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001b6e:	6863      	ldr	r3, [r4, #4]
 8001b70:	4368      	muls	r0, r5
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b78:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b7c:	fb09 a313 	mls	r3, r9, r3, sl
 8001b80:	011b      	lsls	r3, r3, #4
 8001b82:	3332      	adds	r3, #50	; 0x32
 8001b84:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b88:	f003 030f 	and.w	r3, r3, #15
 8001b8c:	ea43 0308 	orr.w	r3, r3, r8
 8001b90:	e783      	b.n	8001a9a <UART_SetConfig+0xd2>
 8001b92:	f7ff fef9 	bl	8001988 <HAL_RCC_GetPCLK1Freq>
 8001b96:	6867      	ldr	r7, [r4, #4]
 8001b98:	2519      	movs	r5, #25
 8001b9a:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001b9e:	fb05 f300 	mul.w	r3, r5, r0
 8001ba2:	00bf      	lsls	r7, r7, #2
 8001ba4:	fbb3 f3f7 	udiv	r3, r3, r7
 8001ba8:	fbb3 f3f9 	udiv	r3, r3, r9
 8001bac:	011f      	lsls	r7, r3, #4
 8001bae:	f7ff feeb 	bl	8001988 <HAL_RCC_GetPCLK1Freq>
 8001bb2:	6863      	ldr	r3, [r4, #4]
 8001bb4:	4368      	muls	r0, r5
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	fbb0 f8f3 	udiv	r8, r0, r3
 8001bbc:	f7ff fee4 	bl	8001988 <HAL_RCC_GetPCLK1Freq>
 8001bc0:	6863      	ldr	r3, [r4, #4]
 8001bc2:	4368      	muls	r0, r5
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bca:	fbb3 f3f9 	udiv	r3, r3, r9
 8001bce:	fb09 8313 	mls	r3, r9, r3, r8
 8001bd2:	011b      	lsls	r3, r3, #4
 8001bd4:	3332      	adds	r3, #50	; 0x32
 8001bd6:	fbb3 f3f9 	udiv	r3, r3, r9
 8001bda:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001bde:	f7ff fed3 	bl	8001988 <HAL_RCC_GetPCLK1Freq>
 8001be2:	6862      	ldr	r2, [r4, #4]
 8001be4:	4368      	muls	r0, r5
 8001be6:	0092      	lsls	r2, r2, #2
 8001be8:	fbb0 faf2 	udiv	sl, r0, r2
 8001bec:	f7ff fecc 	bl	8001988 <HAL_RCC_GetPCLK1Freq>
 8001bf0:	e7bd      	b.n	8001b6e <UART_SetConfig+0x1a6>
 8001bf2:	bf00      	nop
 8001bf4:	40011000 	.word	0x40011000
 8001bf8:	40011400 	.word	0x40011400

08001bfc <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bfe:	4604      	mov	r4, r0
 8001c00:	460e      	mov	r6, r1
 8001c02:	4617      	mov	r7, r2
 8001c04:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001c06:	6821      	ldr	r1, [r4, #0]
 8001c08:	680b      	ldr	r3, [r1, #0]
 8001c0a:	ea36 0303 	bics.w	r3, r6, r3
 8001c0e:	d101      	bne.n	8001c14 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001c10:	2000      	movs	r0, #0
}
 8001c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001c14:	1c6b      	adds	r3, r5, #1
 8001c16:	d0f7      	beq.n	8001c08 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001c18:	b995      	cbnz	r5, 8001c40 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c1a:	6823      	ldr	r3, [r4, #0]
 8001c1c:	68da      	ldr	r2, [r3, #12]
 8001c1e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001c22:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c24:	695a      	ldr	r2, [r3, #20]
 8001c26:	f022 0201 	bic.w	r2, r2, #1
 8001c2a:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001c2c:	2320      	movs	r3, #32
 8001c2e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001c32:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001c36:	2300      	movs	r3, #0
 8001c38:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001c3c:	2003      	movs	r0, #3
 8001c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001c40:	f7ff f96c 	bl	8000f1c <HAL_GetTick>
 8001c44:	1bc0      	subs	r0, r0, r7
 8001c46:	4285      	cmp	r5, r0
 8001c48:	d2dd      	bcs.n	8001c06 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001c4a:	e7e6      	b.n	8001c1a <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001c4c <HAL_UART_Init>:
{
 8001c4c:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001c4e:	4604      	mov	r4, r0
 8001c50:	b340      	cbz	r0, 8001ca4 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001c52:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001c56:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c5a:	b91b      	cbnz	r3, 8001c64 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001c5c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001c60:	f000 f9fa 	bl	8002058 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001c64:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001c66:	2324      	movs	r3, #36	; 0x24
 8001c68:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001c6c:	68d3      	ldr	r3, [r2, #12]
 8001c6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001c72:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001c74:	4620      	mov	r0, r4
 8001c76:	f7ff fea7 	bl	80019c8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c7a:	6823      	ldr	r3, [r4, #0]
 8001c7c:	691a      	ldr	r2, [r3, #16]
 8001c7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c82:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c84:	695a      	ldr	r2, [r3, #20]
 8001c86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c8a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001c8c:	68da      	ldr	r2, [r3, #12]
 8001c8e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c92:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c94:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001c96:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c98:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001c9a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001c9e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001ca2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001ca4:	2001      	movs	r0, #1
}
 8001ca6:	bd10      	pop	{r4, pc}

08001ca8 <HAL_UART_Transmit>:
{
 8001ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cac:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 8001cae:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001cb2:	2b20      	cmp	r3, #32
{
 8001cb4:	4604      	mov	r4, r0
 8001cb6:	460d      	mov	r5, r1
 8001cb8:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 8001cba:	d14f      	bne.n	8001d5c <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 8001cbc:	2900      	cmp	r1, #0
 8001cbe:	d04a      	beq.n	8001d56 <HAL_UART_Transmit+0xae>
 8001cc0:	2a00      	cmp	r2, #0
 8001cc2:	d048      	beq.n	8001d56 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8001cc4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d047      	beq.n	8001d5c <HAL_UART_Transmit+0xb4>
 8001ccc:	2301      	movs	r3, #1
 8001cce:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cd6:	2321      	movs	r3, #33	; 0x21
 8001cd8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001cdc:	f7ff f91e 	bl	8000f1c <HAL_GetTick>
    huart->TxXferSize = Size;
 8001ce0:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001ce4:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001ce6:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001cea:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	b96b      	cbnz	r3, 8001d0c <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cf0:	463b      	mov	r3, r7
 8001cf2:	4632      	mov	r2, r6
 8001cf4:	2140      	movs	r1, #64	; 0x40
 8001cf6:	4620      	mov	r0, r4
 8001cf8:	f7ff ff80 	bl	8001bfc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001cfc:	b9b0      	cbnz	r0, 8001d2c <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 8001cfe:	2320      	movs	r3, #32
 8001d00:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001d04:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001d0c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001d14:	68a3      	ldr	r3, [r4, #8]
 8001d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d1a:	4632      	mov	r2, r6
 8001d1c:	463b      	mov	r3, r7
 8001d1e:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001d22:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001d24:	d10e      	bne.n	8001d44 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d26:	f7ff ff69 	bl	8001bfc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001d2a:	b110      	cbz	r0, 8001d32 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8001d2c:	2003      	movs	r0, #3
 8001d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001d32:	882b      	ldrh	r3, [r5, #0]
 8001d34:	6822      	ldr	r2, [r4, #0]
 8001d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d3a:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001d3c:	6923      	ldr	r3, [r4, #16]
 8001d3e:	b943      	cbnz	r3, 8001d52 <HAL_UART_Transmit+0xaa>
          pData +=2U;
 8001d40:	3502      	adds	r5, #2
 8001d42:	e7d2      	b.n	8001cea <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d44:	f7ff ff5a 	bl	8001bfc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001d48:	2800      	cmp	r0, #0
 8001d4a:	d1ef      	bne.n	8001d2c <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001d4c:	6823      	ldr	r3, [r4, #0]
 8001d4e:	782a      	ldrb	r2, [r5, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	3501      	adds	r5, #1
 8001d54:	e7c9      	b.n	8001cea <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001d56:	2001      	movs	r0, #1
 8001d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001d5c:	2002      	movs	r0, #2
}
 8001d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001d64 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001d64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 8001d66:	4813      	ldr	r0, [pc, #76]	; (8001db4 <MX_ADC1_Init+0x50>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001d68:	4b13      	ldr	r3, [pc, #76]	; (8001db8 <MX_ADC1_Init+0x54>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d6a:	4a14      	ldr	r2, [pc, #80]	; (8001dbc <MX_ADC1_Init+0x58>)
 8001d6c:	6282      	str	r2, [r0, #40]	; 0x28
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001d6e:	2400      	movs	r4, #0
 8001d70:	e880 0018 	stmia.w	r0, {r3, r4}
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d74:	2301      	movs	r3, #1
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d76:	6084      	str	r4, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001d78:	6104      	str	r4, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d7a:	6183      	str	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d7c:	6204      	str	r4, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d7e:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d80:	60c4      	str	r4, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001d82:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d84:	6304      	str	r4, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d86:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d88:	f7ff f8ce 	bl	8000f28 <HAL_ADC_Init>
 8001d8c:	b118      	cbz	r0, 8001d96 <MX_ADC1_Init+0x32>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001d8e:	2148      	movs	r1, #72	; 0x48
 8001d90:	480b      	ldr	r0, [pc, #44]	; (8001dc0 <MX_ADC1_Init+0x5c>)
 8001d92:	f000 f8db 	bl	8001f4c <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = 1;
 8001d96:	2301      	movs	r3, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d98:	4669      	mov	r1, sp
 8001d9a:	4806      	ldr	r0, [pc, #24]	; (8001db4 <MX_ADC1_Init+0x50>)
  sConfig.Channel = ADC_CHANNEL_0;
 8001d9c:	9400      	str	r4, [sp, #0]
  sConfig.Rank = 1;
 8001d9e:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001da0:	9402      	str	r4, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001da2:	f7ff f9c9 	bl	8001138 <HAL_ADC_ConfigChannel>
 8001da6:	b118      	cbz	r0, 8001db0 <MX_ADC1_Init+0x4c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001da8:	2152      	movs	r1, #82	; 0x52
 8001daa:	4805      	ldr	r0, [pc, #20]	; (8001dc0 <MX_ADC1_Init+0x5c>)
 8001dac:	f000 f8ce 	bl	8001f4c <_Error_Handler>
  }

}
 8001db0:	b004      	add	sp, #16
 8001db2:	bd10      	pop	{r4, pc}
 8001db4:	200006cc 	.word	0x200006cc
 8001db8:	40012000 	.word	0x40012000
 8001dbc:	0f000001 	.word	0x0f000001
 8001dc0:	08004f58 	.word	0x08004f58

08001dc4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001dc4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 8001dc6:	6802      	ldr	r2, [r0, #0]
 8001dc8:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <HAL_ADC_MspInit+0x3c>)
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d115      	bne.n	8001dfa <HAL_ADC_MspInit+0x36>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dce:	2100      	movs	r1, #0
 8001dd0:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8001dd4:	9100      	str	r1, [sp, #0]
 8001dd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd8:	480a      	ldr	r0, [pc, #40]	; (8001e04 <HAL_ADC_MspInit+0x40>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dde:	645a      	str	r2, [r3, #68]	; 0x44
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	9103      	str	r1, [sp, #12]
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001dec:	2301      	movs	r3, #1
 8001dee:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df0:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001df2:	2303      	movs	r3, #3
 8001df4:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df6:	f7ff faa3 	bl	8001340 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001dfa:	b007      	add	sp, #28
 8001dfc:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e00:	40012000 	.word	0x40012000
 8001e04:	40020000 	.word	0x40020000

08001e08 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8001e08:	b082      	sub	sp, #8

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0a:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <MX_GPIO_Init+0x34>)
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	9100      	str	r1, [sp, #0]
 8001e10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e12:	f042 0201 	orr.w	r2, r2, #1
 8001e16:	631a      	str	r2, [r3, #48]	; 0x30
 8001e18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e1a:	f002 0201 	and.w	r2, r2, #1
 8001e1e:	9200      	str	r2, [sp, #0]
 8001e20:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e22:	9101      	str	r1, [sp, #4]
 8001e24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e26:	f042 0202 	orr.w	r2, r2, #2
 8001e2a:	631a      	str	r2, [r3, #48]	; 0x30
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	9301      	str	r3, [sp, #4]
 8001e34:	9b01      	ldr	r3, [sp, #4]

}
 8001e36:	b002      	add	sp, #8
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40023800 	.word	0x40023800

08001e40 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8001e40:	b510      	push	{r4, lr}
 8001e42:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e44:	2300      	movs	r3, #0
 8001e46:	4a21      	ldr	r2, [pc, #132]	; (8001ecc <SystemClock_Config+0x8c>)
 8001e48:	9301      	str	r3, [sp, #4]
 8001e4a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001e4c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001e50:	6411      	str	r1, [r2, #64]	; 0x40
 8001e52:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e54:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001e58:	9201      	str	r2, [sp, #4]
 8001e5a:	9a01      	ldr	r2, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e5c:	4a1c      	ldr	r2, [pc, #112]	; (8001ed0 <SystemClock_Config+0x90>)
 8001e5e:	9302      	str	r3, [sp, #8]
 8001e60:	6811      	ldr	r1, [r2, #0]
 8001e62:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001e66:	6011      	str	r1, [r2, #0]
 8001e68:	6812      	ldr	r2, [r2, #0]
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001e6a:	930e      	str	r3, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e6c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001e70:	9202      	str	r2, [sp, #8]
 8001e72:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e74:	2202      	movs	r2, #2
 8001e76:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e78:	2201      	movs	r2, #1
 8001e7a:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e7c:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001e7e:	2210      	movs	r2, #16
 8001e80:	920c      	str	r2, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e82:	f7ff fb3d 	bl	8001500 <HAL_RCC_OscConfig>
 8001e86:	4601      	mov	r1, r0
 8001e88:	b100      	cbz	r0, 8001e8c <SystemClock_Config+0x4c>
 8001e8a:	e7fe      	b.n	8001e8a <SystemClock_Config+0x4a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e8c:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001e8e:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e90:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e92:	9006      	str	r0, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e94:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e96:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e98:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e9a:	f7ff fcd5 	bl	8001848 <HAL_RCC_ClockConfig>
 8001e9e:	4604      	mov	r4, r0
 8001ea0:	b100      	cbz	r0, 8001ea4 <SystemClock_Config+0x64>
 8001ea2:	e7fe      	b.n	8001ea2 <SystemClock_Config+0x62>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001ea4:	f7ff fd6a 	bl	800197c <HAL_RCC_GetHCLKFreq>
 8001ea8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eac:	fbb0 f0f3 	udiv	r0, r0, r3
 8001eb0:	f7ff fa1e 	bl	80012f0 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001eb4:	2004      	movs	r0, #4
 8001eb6:	f7ff fa31 	bl	800131c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001eba:	4622      	mov	r2, r4
 8001ebc:	4621      	mov	r1, r4
 8001ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec2:	f7ff f9e1 	bl	8001288 <HAL_NVIC_SetPriority>
}
 8001ec6:	b014      	add	sp, #80	; 0x50
 8001ec8:	bd10      	pop	{r4, pc}
 8001eca:	bf00      	nop
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40007000 	.word	0x40007000
 8001ed4:	00000000 	.word	0x00000000

08001ed8 <main>:
{
 8001ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eda:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8001edc:	f7fe fffc 	bl	8000ed8 <HAL_Init>
	   double valor=lectura/1241;
 8001ee0:	a718      	add	r7, pc, #96	; (adr r7, 8001f44 <main+0x6c>)
 8001ee2:	e9d7 6700 	ldrd	r6, r7, [r7]
  SystemClock_Config();
 8001ee6:	f7ff ffab 	bl	8001e40 <SystemClock_Config>
  MX_GPIO_Init();
 8001eea:	f7ff ff8d 	bl	8001e08 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001eee:	f7ff ff39 	bl	8001d64 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8001ef2:	f000 f891 	bl	8002018 <MX_USART3_UART_Init>
	  HAL_ADC_Start(&hadc1);	//Inicializamos el ADC
 8001ef6:	4c10      	ldr	r4, [pc, #64]	; (8001f38 <main+0x60>)
	  sprintf(buffer,"valor=%3.2f\n\r",valor);
 8001ef8:	4d10      	ldr	r5, [pc, #64]	; (8001f3c <main+0x64>)
	  HAL_ADC_Start(&hadc1);	//Inicializamos el ADC
 8001efa:	4620      	mov	r0, r4
 8001efc:	f7ff f8b8 	bl	8001070 <HAL_ADC_Start>
	  double lectura=HAL_ADC_GetValue(&hadc1);
 8001f00:	4620      	mov	r0, r4
 8001f02:	f7ff f915 	bl	8001130 <HAL_ADC_GetValue>
 8001f06:	f7fe fafd 	bl	8000504 <__aeabi_ui2d>
	   double valor=lectura/1241;
 8001f0a:	4632      	mov	r2, r6
 8001f0c:	463b      	mov	r3, r7
 8001f0e:	f7fe fc99 	bl	8000844 <__aeabi_ddiv>
	  sprintf(buffer,"valor=%3.2f\n\r",valor);
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4668      	mov	r0, sp
 8001f18:	4629      	mov	r1, r5
 8001f1a:	f000 f915 	bl	8002148 <sprintf>
	  HAL_UART_Transmit(&huart3,(uint8_t*)buffer,(uint16_t)strlen(buffer),(uint32_t)100);
 8001f1e:	4668      	mov	r0, sp
 8001f20:	f7fe f956 	bl	80001d0 <strlen>
 8001f24:	2364      	movs	r3, #100	; 0x64
 8001f26:	b282      	uxth	r2, r0
 8001f28:	4669      	mov	r1, sp
 8001f2a:	4805      	ldr	r0, [pc, #20]	; (8001f40 <main+0x68>)
 8001f2c:	f7ff febc 	bl	8001ca8 <HAL_UART_Transmit>
 8001f30:	e7e3      	b.n	8001efa <main+0x22>
 8001f32:	bf00      	nop
 8001f34:	f3af 8000 	nop.w
 8001f38:	200006cc 	.word	0x200006cc
 8001f3c:	08004f65 	.word	0x08004f65
 8001f40:	20000714 	.word	0x20000714
 8001f44:	00000000 	.word	0x00000000
 8001f48:	40936400 	.word	0x40936400

08001f4c <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8001f4c:	e7fe      	b.n	8001f4c <_Error_Handler>

08001f4e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f4e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f50:	2003      	movs	r0, #3
 8001f52:	f7ff f987 	bl	8001264 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001f56:	2200      	movs	r2, #0
 8001f58:	4611      	mov	r1, r2
 8001f5a:	f06f 000b 	mvn.w	r0, #11
 8001f5e:	f7ff f993 	bl	8001288 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001f62:	2200      	movs	r2, #0
 8001f64:	4611      	mov	r1, r2
 8001f66:	f06f 000a 	mvn.w	r0, #10
 8001f6a:	f7ff f98d 	bl	8001288 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	4611      	mov	r1, r2
 8001f72:	f06f 0009 	mvn.w	r0, #9
 8001f76:	f7ff f987 	bl	8001288 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	f06f 0004 	mvn.w	r0, #4
 8001f82:	f7ff f981 	bl	8001288 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001f86:	2200      	movs	r2, #0
 8001f88:	4611      	mov	r1, r2
 8001f8a:	f06f 0003 	mvn.w	r0, #3
 8001f8e:	f7ff f97b 	bl	8001288 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001f92:	2200      	movs	r2, #0
 8001f94:	4611      	mov	r1, r2
 8001f96:	f06f 0001 	mvn.w	r0, #1
 8001f9a:	f7ff f975 	bl	8001288 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	4611      	mov	r1, r2
 8001fa2:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fa6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001faa:	f7ff b96d 	b.w	8001288 <HAL_NVIC_SetPriority>

08001fae <NMI_Handler>:
 8001fae:	4770      	bx	lr

08001fb0 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001fb0:	e7fe      	b.n	8001fb0 <HardFault_Handler>

08001fb2 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001fb2:	e7fe      	b.n	8001fb2 <MemManage_Handler>

08001fb4 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001fb4:	e7fe      	b.n	8001fb4 <BusFault_Handler>

08001fb6 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001fb6:	e7fe      	b.n	8001fb6 <UsageFault_Handler>

08001fb8 <SVC_Handler>:
 8001fb8:	4770      	bx	lr

08001fba <DebugMon_Handler>:
 8001fba:	4770      	bx	lr

08001fbc <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001fbc:	4770      	bx	lr

08001fbe <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001fbe:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fc0:	f7fe ffa4 	bl	8000f0c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fc4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001fc8:	f7ff b9b5 	b.w	8001336 <HAL_SYSTICK_IRQHandler>

08001fcc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fcc:	490f      	ldr	r1, [pc, #60]	; (800200c <SystemInit+0x40>)
 8001fce:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001fd2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001fda:	4b0d      	ldr	r3, [pc, #52]	; (8002010 <SystemInit+0x44>)
 8001fdc:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001fde:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001fe0:	f042 0201 	orr.w	r2, r2, #1
 8001fe4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001fe6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001fee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ff2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001ff4:	4a07      	ldr	r2, [pc, #28]	; (8002014 <SystemInit+0x48>)
 8001ff6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ffe:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002000:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002002:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002006:	608b      	str	r3, [r1, #8]
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	e000ed00 	.word	0xe000ed00
 8002010:	40023800 	.word	0x40023800
 8002014:	24003010 	.word	0x24003010

08002018 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002018:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 800201a:	480c      	ldr	r0, [pc, #48]	; (800204c <MX_USART3_UART_Init+0x34>)
  huart3.Init.BaudRate = 115200;
 800201c:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <MX_USART3_UART_Init+0x38>)
 800201e:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8002022:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002026:	220c      	movs	r2, #12
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002028:	2300      	movs	r3, #0
 800202a:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800202c:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800202e:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002030:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002032:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002034:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002036:	f7ff fe09 	bl	8001c4c <HAL_UART_Init>
 800203a:	b128      	cbz	r0, 8002048 <MX_USART3_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
 800203c:	2142      	movs	r1, #66	; 0x42
 800203e:	4805      	ldr	r0, [pc, #20]	; (8002054 <MX_USART3_UART_Init+0x3c>)
  }

}
 8002040:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8002044:	f7ff bf82 	b.w	8001f4c <_Error_Handler>
 8002048:	bd08      	pop	{r3, pc}
 800204a:	bf00      	nop
 800204c:	20000714 	.word	0x20000714
 8002050:	40004800 	.word	0x40004800
 8002054:	08004f8b 	.word	0x08004f8b

08002058 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002058:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART3)
 800205a:	6802      	ldr	r2, [r0, #0]
 800205c:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <HAL_UART_MspInit+0x48>)
 800205e:	429a      	cmp	r2, r3
 8002060:	d11a      	bne.n	8002098 <HAL_UART_MspInit+0x40>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <HAL_UART_MspInit+0x4c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002068:	480f      	ldr	r0, [pc, #60]	; (80020a8 <HAL_UART_MspInit+0x50>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800206a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800206c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002070:	641a      	str	r2, [r3, #64]	; 0x40
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800207c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002080:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002082:	2302      	movs	r3, #2
 8002084:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002086:	2301      	movs	r3, #1
 8002088:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208a:	2303      	movs	r3, #3
 800208c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800208e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002090:	2307      	movs	r3, #7
 8002092:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002094:	f7ff f954 	bl	8001340 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002098:	b007      	add	sp, #28
 800209a:	f85d fb04 	ldr.w	pc, [sp], #4
 800209e:	bf00      	nop
 80020a0:	40004800 	.word	0x40004800
 80020a4:	40023800 	.word	0x40023800
 80020a8:	40020400 	.word	0x40020400

080020ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80020b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80020b2:	e003      	b.n	80020bc <LoopCopyDataInit>

080020b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80020b4:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80020b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80020b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80020ba:	3104      	adds	r1, #4

080020bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80020bc:	480b      	ldr	r0, [pc, #44]	; (80020ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80020be:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80020c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80020c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80020c4:	d3f6      	bcc.n	80020b4 <CopyDataInit>
  ldr  r2, =_sbss
 80020c6:	4a0b      	ldr	r2, [pc, #44]	; (80020f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80020c8:	e002      	b.n	80020d0 <LoopFillZerobss>

080020ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80020ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80020cc:	f842 3b04 	str.w	r3, [r2], #4

080020d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80020d0:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80020d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80020d4:	d3f9      	bcc.n	80020ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80020d6:	f7ff ff79 	bl	8001fcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020da:	f000 f811 	bl	8002100 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020de:	f7ff fefb 	bl	8001ed8 <main>
  bx  lr    
 80020e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020e4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80020e8:	08005218 	.word	0x08005218
  ldr  r0, =_sdata
 80020ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80020f0:	20000674 	.word	0x20000674
  ldr  r2, =_sbss
 80020f4:	20000674 	.word	0x20000674
  ldr  r3, = _ebss
 80020f8:	20000764 	.word	0x20000764

080020fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020fc:	e7fe      	b.n	80020fc <ADC_IRQHandler>
	...

08002100 <__libc_init_array>:
 8002100:	b570      	push	{r4, r5, r6, lr}
 8002102:	4e0d      	ldr	r6, [pc, #52]	; (8002138 <__libc_init_array+0x38>)
 8002104:	4c0d      	ldr	r4, [pc, #52]	; (800213c <__libc_init_array+0x3c>)
 8002106:	1ba4      	subs	r4, r4, r6
 8002108:	10a4      	asrs	r4, r4, #2
 800210a:	2500      	movs	r5, #0
 800210c:	42a5      	cmp	r5, r4
 800210e:	d109      	bne.n	8002124 <__libc_init_array+0x24>
 8002110:	4e0b      	ldr	r6, [pc, #44]	; (8002140 <__libc_init_array+0x40>)
 8002112:	4c0c      	ldr	r4, [pc, #48]	; (8002144 <__libc_init_array+0x44>)
 8002114:	f002 ff12 	bl	8004f3c <_init>
 8002118:	1ba4      	subs	r4, r4, r6
 800211a:	10a4      	asrs	r4, r4, #2
 800211c:	2500      	movs	r5, #0
 800211e:	42a5      	cmp	r5, r4
 8002120:	d105      	bne.n	800212e <__libc_init_array+0x2e>
 8002122:	bd70      	pop	{r4, r5, r6, pc}
 8002124:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002128:	4798      	blx	r3
 800212a:	3501      	adds	r5, #1
 800212c:	e7ee      	b.n	800210c <__libc_init_array+0xc>
 800212e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002132:	4798      	blx	r3
 8002134:	3501      	adds	r5, #1
 8002136:	e7f2      	b.n	800211e <__libc_init_array+0x1e>
 8002138:	08005210 	.word	0x08005210
 800213c:	08005210 	.word	0x08005210
 8002140:	08005210 	.word	0x08005210
 8002144:	08005214 	.word	0x08005214

08002148 <sprintf>:
 8002148:	b40e      	push	{r1, r2, r3}
 800214a:	b500      	push	{lr}
 800214c:	b09c      	sub	sp, #112	; 0x70
 800214e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002152:	ab1d      	add	r3, sp, #116	; 0x74
 8002154:	f8ad 1014 	strh.w	r1, [sp, #20]
 8002158:	9002      	str	r0, [sp, #8]
 800215a:	9006      	str	r0, [sp, #24]
 800215c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002160:	480a      	ldr	r0, [pc, #40]	; (800218c <sprintf+0x44>)
 8002162:	9104      	str	r1, [sp, #16]
 8002164:	9107      	str	r1, [sp, #28]
 8002166:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800216a:	f853 2b04 	ldr.w	r2, [r3], #4
 800216e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8002172:	6800      	ldr	r0, [r0, #0]
 8002174:	9301      	str	r3, [sp, #4]
 8002176:	a902      	add	r1, sp, #8
 8002178:	f000 f80a 	bl	8002190 <_svfprintf_r>
 800217c:	9b02      	ldr	r3, [sp, #8]
 800217e:	2200      	movs	r2, #0
 8002180:	701a      	strb	r2, [r3, #0]
 8002182:	b01c      	add	sp, #112	; 0x70
 8002184:	f85d eb04 	ldr.w	lr, [sp], #4
 8002188:	b003      	add	sp, #12
 800218a:	4770      	bx	lr
 800218c:	20000004 	.word	0x20000004

08002190 <_svfprintf_r>:
 8002190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002194:	b0bd      	sub	sp, #244	; 0xf4
 8002196:	468a      	mov	sl, r1
 8002198:	4615      	mov	r5, r2
 800219a:	461f      	mov	r7, r3
 800219c:	4683      	mov	fp, r0
 800219e:	f001 fe25 	bl	8003dec <_localeconv_r>
 80021a2:	6803      	ldr	r3, [r0, #0]
 80021a4:	930d      	str	r3, [sp, #52]	; 0x34
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7fe f812 	bl	80001d0 <strlen>
 80021ac:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80021b0:	9008      	str	r0, [sp, #32]
 80021b2:	061b      	lsls	r3, r3, #24
 80021b4:	d518      	bpl.n	80021e8 <_svfprintf_r+0x58>
 80021b6:	f8da 3010 	ldr.w	r3, [sl, #16]
 80021ba:	b9ab      	cbnz	r3, 80021e8 <_svfprintf_r+0x58>
 80021bc:	2140      	movs	r1, #64	; 0x40
 80021be:	4658      	mov	r0, fp
 80021c0:	f001 fe2a 	bl	8003e18 <_malloc_r>
 80021c4:	f8ca 0000 	str.w	r0, [sl]
 80021c8:	f8ca 0010 	str.w	r0, [sl, #16]
 80021cc:	b948      	cbnz	r0, 80021e2 <_svfprintf_r+0x52>
 80021ce:	230c      	movs	r3, #12
 80021d0:	f8cb 3000 	str.w	r3, [fp]
 80021d4:	f04f 33ff 	mov.w	r3, #4294967295
 80021d8:	9309      	str	r3, [sp, #36]	; 0x24
 80021da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80021dc:	b03d      	add	sp, #244	; 0xf4
 80021de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021e2:	2340      	movs	r3, #64	; 0x40
 80021e4:	f8ca 3014 	str.w	r3, [sl, #20]
 80021e8:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8002450 <_svfprintf_r+0x2c0>
 80021ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 80021f0:	2300      	movs	r3, #0
 80021f2:	ac2c      	add	r4, sp, #176	; 0xb0
 80021f4:	941f      	str	r4, [sp, #124]	; 0x7c
 80021f6:	9321      	str	r3, [sp, #132]	; 0x84
 80021f8:	9320      	str	r3, [sp, #128]	; 0x80
 80021fa:	9505      	str	r5, [sp, #20]
 80021fc:	9303      	str	r3, [sp, #12]
 80021fe:	9311      	str	r3, [sp, #68]	; 0x44
 8002200:	9310      	str	r3, [sp, #64]	; 0x40
 8002202:	9309      	str	r3, [sp, #36]	; 0x24
 8002204:	9d05      	ldr	r5, [sp, #20]
 8002206:	462b      	mov	r3, r5
 8002208:	f813 2b01 	ldrb.w	r2, [r3], #1
 800220c:	b112      	cbz	r2, 8002214 <_svfprintf_r+0x84>
 800220e:	2a25      	cmp	r2, #37	; 0x25
 8002210:	f040 8083 	bne.w	800231a <_svfprintf_r+0x18a>
 8002214:	9b05      	ldr	r3, [sp, #20]
 8002216:	1aee      	subs	r6, r5, r3
 8002218:	d00d      	beq.n	8002236 <_svfprintf_r+0xa6>
 800221a:	e884 0048 	stmia.w	r4, {r3, r6}
 800221e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002220:	4433      	add	r3, r6
 8002222:	9321      	str	r3, [sp, #132]	; 0x84
 8002224:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002226:	3301      	adds	r3, #1
 8002228:	2b07      	cmp	r3, #7
 800222a:	9320      	str	r3, [sp, #128]	; 0x80
 800222c:	dc77      	bgt.n	800231e <_svfprintf_r+0x18e>
 800222e:	3408      	adds	r4, #8
 8002230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002232:	4433      	add	r3, r6
 8002234:	9309      	str	r3, [sp, #36]	; 0x24
 8002236:	782b      	ldrb	r3, [r5, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 8729 	beq.w	8003090 <_svfprintf_r+0xf00>
 800223e:	2300      	movs	r3, #0
 8002240:	1c69      	adds	r1, r5, #1
 8002242:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8002246:	461a      	mov	r2, r3
 8002248:	f04f 39ff 	mov.w	r9, #4294967295
 800224c:	930a      	str	r3, [sp, #40]	; 0x28
 800224e:	461d      	mov	r5, r3
 8002250:	200a      	movs	r0, #10
 8002252:	1c4e      	adds	r6, r1, #1
 8002254:	7809      	ldrb	r1, [r1, #0]
 8002256:	9605      	str	r6, [sp, #20]
 8002258:	9102      	str	r1, [sp, #8]
 800225a:	9902      	ldr	r1, [sp, #8]
 800225c:	3920      	subs	r1, #32
 800225e:	2958      	cmp	r1, #88	; 0x58
 8002260:	f200 8418 	bhi.w	8002a94 <_svfprintf_r+0x904>
 8002264:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002268:	041600a6 	.word	0x041600a6
 800226c:	00ab0416 	.word	0x00ab0416
 8002270:	04160416 	.word	0x04160416
 8002274:	04160416 	.word	0x04160416
 8002278:	04160416 	.word	0x04160416
 800227c:	006500ae 	.word	0x006500ae
 8002280:	00b70416 	.word	0x00b70416
 8002284:	041600ba 	.word	0x041600ba
 8002288:	00da00d7 	.word	0x00da00d7
 800228c:	00da00da 	.word	0x00da00da
 8002290:	00da00da 	.word	0x00da00da
 8002294:	00da00da 	.word	0x00da00da
 8002298:	00da00da 	.word	0x00da00da
 800229c:	04160416 	.word	0x04160416
 80022a0:	04160416 	.word	0x04160416
 80022a4:	04160416 	.word	0x04160416
 80022a8:	04160416 	.word	0x04160416
 80022ac:	04160416 	.word	0x04160416
 80022b0:	012b0115 	.word	0x012b0115
 80022b4:	012b0416 	.word	0x012b0416
 80022b8:	04160416 	.word	0x04160416
 80022bc:	04160416 	.word	0x04160416
 80022c0:	041600ed 	.word	0x041600ed
 80022c4:	03400416 	.word	0x03400416
 80022c8:	04160416 	.word	0x04160416
 80022cc:	04160416 	.word	0x04160416
 80022d0:	03a80416 	.word	0x03a80416
 80022d4:	04160416 	.word	0x04160416
 80022d8:	04160086 	.word	0x04160086
 80022dc:	04160416 	.word	0x04160416
 80022e0:	04160416 	.word	0x04160416
 80022e4:	04160416 	.word	0x04160416
 80022e8:	04160416 	.word	0x04160416
 80022ec:	01070416 	.word	0x01070416
 80022f0:	012b006b 	.word	0x012b006b
 80022f4:	012b012b 	.word	0x012b012b
 80022f8:	006b00f0 	.word	0x006b00f0
 80022fc:	04160416 	.word	0x04160416
 8002300:	041600fa 	.word	0x041600fa
 8002304:	03420322 	.word	0x03420322
 8002308:	01010376 	.word	0x01010376
 800230c:	03870416 	.word	0x03870416
 8002310:	03aa0416 	.word	0x03aa0416
 8002314:	04160416 	.word	0x04160416
 8002318:	03c2      	.short	0x03c2
 800231a:	461d      	mov	r5, r3
 800231c:	e773      	b.n	8002206 <_svfprintf_r+0x76>
 800231e:	aa1f      	add	r2, sp, #124	; 0x7c
 8002320:	4651      	mov	r1, sl
 8002322:	4658      	mov	r0, fp
 8002324:	f002 fa7e 	bl	8004824 <__ssprint_r>
 8002328:	2800      	cmp	r0, #0
 800232a:	f040 8692 	bne.w	8003052 <_svfprintf_r+0xec2>
 800232e:	ac2c      	add	r4, sp, #176	; 0xb0
 8002330:	e77e      	b.n	8002230 <_svfprintf_r+0xa0>
 8002332:	2301      	movs	r3, #1
 8002334:	222b      	movs	r2, #43	; 0x2b
 8002336:	9905      	ldr	r1, [sp, #20]
 8002338:	e78b      	b.n	8002252 <_svfprintf_r+0xc2>
 800233a:	460f      	mov	r7, r1
 800233c:	e7fb      	b.n	8002336 <_svfprintf_r+0x1a6>
 800233e:	b10b      	cbz	r3, 8002344 <_svfprintf_r+0x1b4>
 8002340:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002344:	06ae      	lsls	r6, r5, #26
 8002346:	f140 80aa 	bpl.w	800249e <_svfprintf_r+0x30e>
 800234a:	3707      	adds	r7, #7
 800234c:	f027 0707 	bic.w	r7, r7, #7
 8002350:	f107 0308 	add.w	r3, r7, #8
 8002354:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002358:	9304      	str	r3, [sp, #16]
 800235a:	2e00      	cmp	r6, #0
 800235c:	f177 0300 	sbcs.w	r3, r7, #0
 8002360:	da06      	bge.n	8002370 <_svfprintf_r+0x1e0>
 8002362:	4276      	negs	r6, r6
 8002364:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8002368:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800236c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8002370:	2301      	movs	r3, #1
 8002372:	e2ca      	b.n	800290a <_svfprintf_r+0x77a>
 8002374:	b10b      	cbz	r3, 800237a <_svfprintf_r+0x1ea>
 8002376:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800237a:	4b37      	ldr	r3, [pc, #220]	; (8002458 <_svfprintf_r+0x2c8>)
 800237c:	9311      	str	r3, [sp, #68]	; 0x44
 800237e:	06ab      	lsls	r3, r5, #26
 8002380:	f140 8339 	bpl.w	80029f6 <_svfprintf_r+0x866>
 8002384:	3707      	adds	r7, #7
 8002386:	f027 0707 	bic.w	r7, r7, #7
 800238a:	f107 0308 	add.w	r3, r7, #8
 800238e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002392:	9304      	str	r3, [sp, #16]
 8002394:	07e8      	lsls	r0, r5, #31
 8002396:	d50b      	bpl.n	80023b0 <_svfprintf_r+0x220>
 8002398:	ea56 0307 	orrs.w	r3, r6, r7
 800239c:	d008      	beq.n	80023b0 <_svfprintf_r+0x220>
 800239e:	2330      	movs	r3, #48	; 0x30
 80023a0:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80023a4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80023a8:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 80023ac:	f045 0502 	orr.w	r5, r5, #2
 80023b0:	2302      	movs	r3, #2
 80023b2:	e2a7      	b.n	8002904 <_svfprintf_r+0x774>
 80023b4:	2a00      	cmp	r2, #0
 80023b6:	d1be      	bne.n	8002336 <_svfprintf_r+0x1a6>
 80023b8:	2301      	movs	r3, #1
 80023ba:	2220      	movs	r2, #32
 80023bc:	e7bb      	b.n	8002336 <_svfprintf_r+0x1a6>
 80023be:	f045 0501 	orr.w	r5, r5, #1
 80023c2:	e7b8      	b.n	8002336 <_svfprintf_r+0x1a6>
 80023c4:	683e      	ldr	r6, [r7, #0]
 80023c6:	960a      	str	r6, [sp, #40]	; 0x28
 80023c8:	2e00      	cmp	r6, #0
 80023ca:	f107 0104 	add.w	r1, r7, #4
 80023ce:	dab4      	bge.n	800233a <_svfprintf_r+0x1aa>
 80023d0:	4276      	negs	r6, r6
 80023d2:	960a      	str	r6, [sp, #40]	; 0x28
 80023d4:	460f      	mov	r7, r1
 80023d6:	f045 0504 	orr.w	r5, r5, #4
 80023da:	e7ac      	b.n	8002336 <_svfprintf_r+0x1a6>
 80023dc:	9905      	ldr	r1, [sp, #20]
 80023de:	1c4e      	adds	r6, r1, #1
 80023e0:	7809      	ldrb	r1, [r1, #0]
 80023e2:	9102      	str	r1, [sp, #8]
 80023e4:	292a      	cmp	r1, #42	; 0x2a
 80023e6:	d010      	beq.n	800240a <_svfprintf_r+0x27a>
 80023e8:	f04f 0900 	mov.w	r9, #0
 80023ec:	9605      	str	r6, [sp, #20]
 80023ee:	9902      	ldr	r1, [sp, #8]
 80023f0:	3930      	subs	r1, #48	; 0x30
 80023f2:	2909      	cmp	r1, #9
 80023f4:	f63f af31 	bhi.w	800225a <_svfprintf_r+0xca>
 80023f8:	fb00 1909 	mla	r9, r0, r9, r1
 80023fc:	9905      	ldr	r1, [sp, #20]
 80023fe:	460e      	mov	r6, r1
 8002400:	f816 1b01 	ldrb.w	r1, [r6], #1
 8002404:	9102      	str	r1, [sp, #8]
 8002406:	9605      	str	r6, [sp, #20]
 8002408:	e7f1      	b.n	80023ee <_svfprintf_r+0x25e>
 800240a:	6839      	ldr	r1, [r7, #0]
 800240c:	9605      	str	r6, [sp, #20]
 800240e:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 8002412:	3704      	adds	r7, #4
 8002414:	e78f      	b.n	8002336 <_svfprintf_r+0x1a6>
 8002416:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800241a:	e78c      	b.n	8002336 <_svfprintf_r+0x1a6>
 800241c:	2100      	movs	r1, #0
 800241e:	910a      	str	r1, [sp, #40]	; 0x28
 8002420:	9902      	ldr	r1, [sp, #8]
 8002422:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8002424:	3930      	subs	r1, #48	; 0x30
 8002426:	fb00 1106 	mla	r1, r0, r6, r1
 800242a:	910a      	str	r1, [sp, #40]	; 0x28
 800242c:	9905      	ldr	r1, [sp, #20]
 800242e:	460e      	mov	r6, r1
 8002430:	f816 1b01 	ldrb.w	r1, [r6], #1
 8002434:	9102      	str	r1, [sp, #8]
 8002436:	9902      	ldr	r1, [sp, #8]
 8002438:	9605      	str	r6, [sp, #20]
 800243a:	3930      	subs	r1, #48	; 0x30
 800243c:	2909      	cmp	r1, #9
 800243e:	d9ef      	bls.n	8002420 <_svfprintf_r+0x290>
 8002440:	e70b      	b.n	800225a <_svfprintf_r+0xca>
 8002442:	f045 0508 	orr.w	r5, r5, #8
 8002446:	e776      	b.n	8002336 <_svfprintf_r+0x1a6>
 8002448:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 800244c:	e773      	b.n	8002336 <_svfprintf_r+0x1a6>
 800244e:	bf00      	nop
	...
 8002458:	08004faa 	.word	0x08004faa
 800245c:	9905      	ldr	r1, [sp, #20]
 800245e:	7809      	ldrb	r1, [r1, #0]
 8002460:	296c      	cmp	r1, #108	; 0x6c
 8002462:	d105      	bne.n	8002470 <_svfprintf_r+0x2e0>
 8002464:	9905      	ldr	r1, [sp, #20]
 8002466:	3101      	adds	r1, #1
 8002468:	9105      	str	r1, [sp, #20]
 800246a:	f045 0520 	orr.w	r5, r5, #32
 800246e:	e762      	b.n	8002336 <_svfprintf_r+0x1a6>
 8002470:	f045 0510 	orr.w	r5, r5, #16
 8002474:	e75f      	b.n	8002336 <_svfprintf_r+0x1a6>
 8002476:	1d3b      	adds	r3, r7, #4
 8002478:	9304      	str	r3, [sp, #16]
 800247a:	2600      	movs	r6, #0
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8002482:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8002486:	f04f 0901 	mov.w	r9, #1
 800248a:	4637      	mov	r7, r6
 800248c:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8002490:	e11b      	b.n	80026ca <_svfprintf_r+0x53a>
 8002492:	b10b      	cbz	r3, 8002498 <_svfprintf_r+0x308>
 8002494:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002498:	f045 0510 	orr.w	r5, r5, #16
 800249c:	e752      	b.n	8002344 <_svfprintf_r+0x1b4>
 800249e:	f015 0f10 	tst.w	r5, #16
 80024a2:	f107 0304 	add.w	r3, r7, #4
 80024a6:	d003      	beq.n	80024b0 <_svfprintf_r+0x320>
 80024a8:	683e      	ldr	r6, [r7, #0]
 80024aa:	9304      	str	r3, [sp, #16]
 80024ac:	17f7      	asrs	r7, r6, #31
 80024ae:	e754      	b.n	800235a <_svfprintf_r+0x1ca>
 80024b0:	683e      	ldr	r6, [r7, #0]
 80024b2:	9304      	str	r3, [sp, #16]
 80024b4:	f015 0f40 	tst.w	r5, #64	; 0x40
 80024b8:	bf18      	it	ne
 80024ba:	b236      	sxthne	r6, r6
 80024bc:	e7f6      	b.n	80024ac <_svfprintf_r+0x31c>
 80024be:	b10b      	cbz	r3, 80024c4 <_svfprintf_r+0x334>
 80024c0:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80024c4:	3707      	adds	r7, #7
 80024c6:	f027 0707 	bic.w	r7, r7, #7
 80024ca:	f107 0308 	add.w	r3, r7, #8
 80024ce:	9304      	str	r3, [sp, #16]
 80024d0:	ed97 7b00 	vldr	d7, [r7]
 80024d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80024d8:	9b06      	ldr	r3, [sp, #24]
 80024da:	9312      	str	r3, [sp, #72]	; 0x48
 80024dc:	9b07      	ldr	r3, [sp, #28]
 80024de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024e2:	9313      	str	r3, [sp, #76]	; 0x4c
 80024e4:	f04f 32ff 	mov.w	r2, #4294967295
 80024e8:	4b4a      	ldr	r3, [pc, #296]	; (8002614 <_svfprintf_r+0x484>)
 80024ea:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80024ee:	f7fe fb19 	bl	8000b24 <__aeabi_dcmpun>
 80024f2:	2800      	cmp	r0, #0
 80024f4:	f040 85d5 	bne.w	80030a2 <_svfprintf_r+0xf12>
 80024f8:	f04f 32ff 	mov.w	r2, #4294967295
 80024fc:	4b45      	ldr	r3, [pc, #276]	; (8002614 <_svfprintf_r+0x484>)
 80024fe:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8002502:	f7fe faf1 	bl	8000ae8 <__aeabi_dcmple>
 8002506:	2800      	cmp	r0, #0
 8002508:	f040 85cb 	bne.w	80030a2 <_svfprintf_r+0xf12>
 800250c:	2200      	movs	r2, #0
 800250e:	2300      	movs	r3, #0
 8002510:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002514:	f7fe fade 	bl	8000ad4 <__aeabi_dcmplt>
 8002518:	b110      	cbz	r0, 8002520 <_svfprintf_r+0x390>
 800251a:	232d      	movs	r3, #45	; 0x2d
 800251c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8002520:	4b3d      	ldr	r3, [pc, #244]	; (8002618 <_svfprintf_r+0x488>)
 8002522:	4a3e      	ldr	r2, [pc, #248]	; (800261c <_svfprintf_r+0x48c>)
 8002524:	9902      	ldr	r1, [sp, #8]
 8002526:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800252a:	2947      	cmp	r1, #71	; 0x47
 800252c:	bfcc      	ite	gt
 800252e:	4690      	movgt	r8, r2
 8002530:	4698      	movle	r8, r3
 8002532:	f04f 0903 	mov.w	r9, #3
 8002536:	2600      	movs	r6, #0
 8002538:	4637      	mov	r7, r6
 800253a:	e0c6      	b.n	80026ca <_svfprintf_r+0x53a>
 800253c:	f1b9 3fff 	cmp.w	r9, #4294967295
 8002540:	d022      	beq.n	8002588 <_svfprintf_r+0x3f8>
 8002542:	9b02      	ldr	r3, [sp, #8]
 8002544:	f023 0320 	bic.w	r3, r3, #32
 8002548:	2b47      	cmp	r3, #71	; 0x47
 800254a:	d104      	bne.n	8002556 <_svfprintf_r+0x3c6>
 800254c:	f1b9 0f00 	cmp.w	r9, #0
 8002550:	bf08      	it	eq
 8002552:	f04f 0901 	moveq.w	r9, #1
 8002556:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800255a:	930c      	str	r3, [sp, #48]	; 0x30
 800255c:	9b07      	ldr	r3, [sp, #28]
 800255e:	2b00      	cmp	r3, #0
 8002560:	da15      	bge.n	800258e <_svfprintf_r+0x3fe>
 8002562:	9b06      	ldr	r3, [sp, #24]
 8002564:	930e      	str	r3, [sp, #56]	; 0x38
 8002566:	9b07      	ldr	r3, [sp, #28]
 8002568:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800256c:	930f      	str	r3, [sp, #60]	; 0x3c
 800256e:	232d      	movs	r3, #45	; 0x2d
 8002570:	930b      	str	r3, [sp, #44]	; 0x2c
 8002572:	9b02      	ldr	r3, [sp, #8]
 8002574:	f023 0720 	bic.w	r7, r3, #32
 8002578:	2f46      	cmp	r7, #70	; 0x46
 800257a:	d00e      	beq.n	800259a <_svfprintf_r+0x40a>
 800257c:	2f45      	cmp	r7, #69	; 0x45
 800257e:	d146      	bne.n	800260e <_svfprintf_r+0x47e>
 8002580:	f109 0601 	add.w	r6, r9, #1
 8002584:	2102      	movs	r1, #2
 8002586:	e00a      	b.n	800259e <_svfprintf_r+0x40e>
 8002588:	f04f 0906 	mov.w	r9, #6
 800258c:	e7e3      	b.n	8002556 <_svfprintf_r+0x3c6>
 800258e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8002592:	2300      	movs	r3, #0
 8002594:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8002598:	e7ea      	b.n	8002570 <_svfprintf_r+0x3e0>
 800259a:	464e      	mov	r6, r9
 800259c:	2103      	movs	r1, #3
 800259e:	ab1d      	add	r3, sp, #116	; 0x74
 80025a0:	9301      	str	r3, [sp, #4]
 80025a2:	ab1a      	add	r3, sp, #104	; 0x68
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	4632      	mov	r2, r6
 80025a8:	ab19      	add	r3, sp, #100	; 0x64
 80025aa:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 80025ae:	4658      	mov	r0, fp
 80025b0:	f000 fe4e 	bl	8003250 <_dtoa_r>
 80025b4:	2f47      	cmp	r7, #71	; 0x47
 80025b6:	4680      	mov	r8, r0
 80025b8:	d102      	bne.n	80025c0 <_svfprintf_r+0x430>
 80025ba:	07e8      	lsls	r0, r5, #31
 80025bc:	f140 857e 	bpl.w	80030bc <_svfprintf_r+0xf2c>
 80025c0:	eb08 0306 	add.w	r3, r8, r6
 80025c4:	2f46      	cmp	r7, #70	; 0x46
 80025c6:	9303      	str	r3, [sp, #12]
 80025c8:	d111      	bne.n	80025ee <_svfprintf_r+0x45e>
 80025ca:	f898 3000 	ldrb.w	r3, [r8]
 80025ce:	2b30      	cmp	r3, #48	; 0x30
 80025d0:	d109      	bne.n	80025e6 <_svfprintf_r+0x456>
 80025d2:	2200      	movs	r2, #0
 80025d4:	2300      	movs	r3, #0
 80025d6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80025da:	f7fe fa71 	bl	8000ac0 <__aeabi_dcmpeq>
 80025de:	b910      	cbnz	r0, 80025e6 <_svfprintf_r+0x456>
 80025e0:	f1c6 0601 	rsb	r6, r6, #1
 80025e4:	9619      	str	r6, [sp, #100]	; 0x64
 80025e6:	9a03      	ldr	r2, [sp, #12]
 80025e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80025ea:	441a      	add	r2, r3
 80025ec:	9203      	str	r2, [sp, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	2300      	movs	r3, #0
 80025f2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80025f6:	f7fe fa63 	bl	8000ac0 <__aeabi_dcmpeq>
 80025fa:	b988      	cbnz	r0, 8002620 <_svfprintf_r+0x490>
 80025fc:	2230      	movs	r2, #48	; 0x30
 80025fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002600:	9903      	ldr	r1, [sp, #12]
 8002602:	4299      	cmp	r1, r3
 8002604:	d90e      	bls.n	8002624 <_svfprintf_r+0x494>
 8002606:	1c59      	adds	r1, r3, #1
 8002608:	911d      	str	r1, [sp, #116]	; 0x74
 800260a:	701a      	strb	r2, [r3, #0]
 800260c:	e7f7      	b.n	80025fe <_svfprintf_r+0x46e>
 800260e:	464e      	mov	r6, r9
 8002610:	e7b8      	b.n	8002584 <_svfprintf_r+0x3f4>
 8002612:	bf00      	nop
 8002614:	7fefffff 	.word	0x7fefffff
 8002618:	08004f9a 	.word	0x08004f9a
 800261c:	08004f9e 	.word	0x08004f9e
 8002620:	9b03      	ldr	r3, [sp, #12]
 8002622:	931d      	str	r3, [sp, #116]	; 0x74
 8002624:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002626:	2f47      	cmp	r7, #71	; 0x47
 8002628:	eba3 0308 	sub.w	r3, r3, r8
 800262c:	9303      	str	r3, [sp, #12]
 800262e:	f040 80fa 	bne.w	8002826 <_svfprintf_r+0x696>
 8002632:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002634:	1cd9      	adds	r1, r3, #3
 8002636:	db02      	blt.n	800263e <_svfprintf_r+0x4ae>
 8002638:	4599      	cmp	r9, r3
 800263a:	f280 8120 	bge.w	800287e <_svfprintf_r+0x6ee>
 800263e:	9b02      	ldr	r3, [sp, #8]
 8002640:	3b02      	subs	r3, #2
 8002642:	9302      	str	r3, [sp, #8]
 8002644:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8002646:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800264a:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 800264e:	1e53      	subs	r3, r2, #1
 8002650:	2b00      	cmp	r3, #0
 8002652:	9319      	str	r3, [sp, #100]	; 0x64
 8002654:	bfb6      	itet	lt
 8002656:	f1c2 0301 	rsblt	r3, r2, #1
 800265a:	222b      	movge	r2, #43	; 0x2b
 800265c:	222d      	movlt	r2, #45	; 0x2d
 800265e:	2b09      	cmp	r3, #9
 8002660:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8002664:	f340 80fb 	ble.w	800285e <_svfprintf_r+0x6ce>
 8002668:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800266c:	260a      	movs	r6, #10
 800266e:	fb93 f0f6 	sdiv	r0, r3, r6
 8002672:	fb06 3310 	mls	r3, r6, r0, r3
 8002676:	3330      	adds	r3, #48	; 0x30
 8002678:	2809      	cmp	r0, #9
 800267a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800267e:	f102 31ff 	add.w	r1, r2, #4294967295
 8002682:	4603      	mov	r3, r0
 8002684:	f300 80e4 	bgt.w	8002850 <_svfprintf_r+0x6c0>
 8002688:	3330      	adds	r3, #48	; 0x30
 800268a:	f801 3c01 	strb.w	r3, [r1, #-1]
 800268e:	3a02      	subs	r2, #2
 8002690:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8002694:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8002698:	4282      	cmp	r2, r0
 800269a:	4619      	mov	r1, r3
 800269c:	f0c0 80da 	bcc.w	8002854 <_svfprintf_r+0x6c4>
 80026a0:	9a03      	ldr	r2, [sp, #12]
 80026a2:	ab1b      	add	r3, sp, #108	; 0x6c
 80026a4:	1acb      	subs	r3, r1, r3
 80026a6:	2a01      	cmp	r2, #1
 80026a8:	9310      	str	r3, [sp, #64]	; 0x40
 80026aa:	eb03 0902 	add.w	r9, r3, r2
 80026ae:	dc02      	bgt.n	80026b6 <_svfprintf_r+0x526>
 80026b0:	f015 0701 	ands.w	r7, r5, #1
 80026b4:	d002      	beq.n	80026bc <_svfprintf_r+0x52c>
 80026b6:	9b08      	ldr	r3, [sp, #32]
 80026b8:	2700      	movs	r7, #0
 80026ba:	4499      	add	r9, r3
 80026bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80026be:	b113      	cbz	r3, 80026c6 <_svfprintf_r+0x536>
 80026c0:	232d      	movs	r3, #45	; 0x2d
 80026c2:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80026c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80026c8:	2600      	movs	r6, #0
 80026ca:	454e      	cmp	r6, r9
 80026cc:	4633      	mov	r3, r6
 80026ce:	bfb8      	it	lt
 80026d0:	464b      	movlt	r3, r9
 80026d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80026d4:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 80026d8:	b113      	cbz	r3, 80026e0 <_svfprintf_r+0x550>
 80026da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80026dc:	3301      	adds	r3, #1
 80026de:	930b      	str	r3, [sp, #44]	; 0x2c
 80026e0:	f015 0302 	ands.w	r3, r5, #2
 80026e4:	9314      	str	r3, [sp, #80]	; 0x50
 80026e6:	bf1e      	ittt	ne
 80026e8:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 80026ea:	3302      	addne	r3, #2
 80026ec:	930b      	strne	r3, [sp, #44]	; 0x2c
 80026ee:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 80026f2:	9315      	str	r3, [sp, #84]	; 0x54
 80026f4:	d118      	bne.n	8002728 <_svfprintf_r+0x598>
 80026f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80026f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80026fa:	1a9b      	subs	r3, r3, r2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	930c      	str	r3, [sp, #48]	; 0x30
 8002700:	dd12      	ble.n	8002728 <_svfprintf_r+0x598>
 8002702:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002704:	2b10      	cmp	r3, #16
 8002706:	4ba9      	ldr	r3, [pc, #676]	; (80029ac <_svfprintf_r+0x81c>)
 8002708:	6023      	str	r3, [r4, #0]
 800270a:	f300 81d5 	bgt.w	8002ab8 <_svfprintf_r+0x928>
 800270e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002710:	6063      	str	r3, [r4, #4]
 8002712:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002714:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002716:	4413      	add	r3, r2
 8002718:	9321      	str	r3, [sp, #132]	; 0x84
 800271a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800271c:	3301      	adds	r3, #1
 800271e:	2b07      	cmp	r3, #7
 8002720:	9320      	str	r3, [sp, #128]	; 0x80
 8002722:	f300 81e2 	bgt.w	8002aea <_svfprintf_r+0x95a>
 8002726:	3408      	adds	r4, #8
 8002728:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800272c:	b173      	cbz	r3, 800274c <_svfprintf_r+0x5bc>
 800272e:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8002732:	6023      	str	r3, [r4, #0]
 8002734:	2301      	movs	r3, #1
 8002736:	6063      	str	r3, [r4, #4]
 8002738:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800273a:	3301      	adds	r3, #1
 800273c:	9321      	str	r3, [sp, #132]	; 0x84
 800273e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002740:	3301      	adds	r3, #1
 8002742:	2b07      	cmp	r3, #7
 8002744:	9320      	str	r3, [sp, #128]	; 0x80
 8002746:	f300 81da 	bgt.w	8002afe <_svfprintf_r+0x96e>
 800274a:	3408      	adds	r4, #8
 800274c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800274e:	b16b      	cbz	r3, 800276c <_svfprintf_r+0x5dc>
 8002750:	ab18      	add	r3, sp, #96	; 0x60
 8002752:	6023      	str	r3, [r4, #0]
 8002754:	2302      	movs	r3, #2
 8002756:	6063      	str	r3, [r4, #4]
 8002758:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800275a:	3302      	adds	r3, #2
 800275c:	9321      	str	r3, [sp, #132]	; 0x84
 800275e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002760:	3301      	adds	r3, #1
 8002762:	2b07      	cmp	r3, #7
 8002764:	9320      	str	r3, [sp, #128]	; 0x80
 8002766:	f300 81d4 	bgt.w	8002b12 <_svfprintf_r+0x982>
 800276a:	3408      	adds	r4, #8
 800276c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800276e:	2b80      	cmp	r3, #128	; 0x80
 8002770:	d114      	bne.n	800279c <_svfprintf_r+0x60c>
 8002772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002774:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002776:	1a9b      	subs	r3, r3, r2
 8002778:	2b00      	cmp	r3, #0
 800277a:	dd0f      	ble.n	800279c <_svfprintf_r+0x60c>
 800277c:	4a8c      	ldr	r2, [pc, #560]	; (80029b0 <_svfprintf_r+0x820>)
 800277e:	6022      	str	r2, [r4, #0]
 8002780:	2b10      	cmp	r3, #16
 8002782:	f300 81d0 	bgt.w	8002b26 <_svfprintf_r+0x996>
 8002786:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002788:	6063      	str	r3, [r4, #4]
 800278a:	4413      	add	r3, r2
 800278c:	9321      	str	r3, [sp, #132]	; 0x84
 800278e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002790:	3301      	adds	r3, #1
 8002792:	2b07      	cmp	r3, #7
 8002794:	9320      	str	r3, [sp, #128]	; 0x80
 8002796:	f300 81df 	bgt.w	8002b58 <_svfprintf_r+0x9c8>
 800279a:	3408      	adds	r4, #8
 800279c:	eba6 0609 	sub.w	r6, r6, r9
 80027a0:	2e00      	cmp	r6, #0
 80027a2:	dd0f      	ble.n	80027c4 <_svfprintf_r+0x634>
 80027a4:	4b82      	ldr	r3, [pc, #520]	; (80029b0 <_svfprintf_r+0x820>)
 80027a6:	6023      	str	r3, [r4, #0]
 80027a8:	2e10      	cmp	r6, #16
 80027aa:	f300 81df 	bgt.w	8002b6c <_svfprintf_r+0x9dc>
 80027ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80027b0:	9821      	ldr	r0, [sp, #132]	; 0x84
 80027b2:	6066      	str	r6, [r4, #4]
 80027b4:	3301      	adds	r3, #1
 80027b6:	4406      	add	r6, r0
 80027b8:	2b07      	cmp	r3, #7
 80027ba:	9621      	str	r6, [sp, #132]	; 0x84
 80027bc:	9320      	str	r3, [sp, #128]	; 0x80
 80027be:	f300 81ec 	bgt.w	8002b9a <_svfprintf_r+0xa0a>
 80027c2:	3408      	adds	r4, #8
 80027c4:	05eb      	lsls	r3, r5, #23
 80027c6:	f100 81f2 	bmi.w	8002bae <_svfprintf_r+0xa1e>
 80027ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80027cc:	e884 0300 	stmia.w	r4, {r8, r9}
 80027d0:	444b      	add	r3, r9
 80027d2:	9321      	str	r3, [sp, #132]	; 0x84
 80027d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80027d6:	3301      	adds	r3, #1
 80027d8:	2b07      	cmp	r3, #7
 80027da:	9320      	str	r3, [sp, #128]	; 0x80
 80027dc:	f340 8419 	ble.w	8003012 <_svfprintf_r+0xe82>
 80027e0:	aa1f      	add	r2, sp, #124	; 0x7c
 80027e2:	4651      	mov	r1, sl
 80027e4:	4658      	mov	r0, fp
 80027e6:	f002 f81d 	bl	8004824 <__ssprint_r>
 80027ea:	2800      	cmp	r0, #0
 80027ec:	f040 8431 	bne.w	8003052 <_svfprintf_r+0xec2>
 80027f0:	ac2c      	add	r4, sp, #176	; 0xb0
 80027f2:	076b      	lsls	r3, r5, #29
 80027f4:	f100 8410 	bmi.w	8003018 <_svfprintf_r+0xe88>
 80027f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80027fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80027fe:	428a      	cmp	r2, r1
 8002800:	bfac      	ite	ge
 8002802:	189b      	addge	r3, r3, r2
 8002804:	185b      	addlt	r3, r3, r1
 8002806:	9309      	str	r3, [sp, #36]	; 0x24
 8002808:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800280a:	b13b      	cbz	r3, 800281c <_svfprintf_r+0x68c>
 800280c:	aa1f      	add	r2, sp, #124	; 0x7c
 800280e:	4651      	mov	r1, sl
 8002810:	4658      	mov	r0, fp
 8002812:	f002 f807 	bl	8004824 <__ssprint_r>
 8002816:	2800      	cmp	r0, #0
 8002818:	f040 841b 	bne.w	8003052 <_svfprintf_r+0xec2>
 800281c:	2300      	movs	r3, #0
 800281e:	9320      	str	r3, [sp, #128]	; 0x80
 8002820:	9f04      	ldr	r7, [sp, #16]
 8002822:	ac2c      	add	r4, sp, #176	; 0xb0
 8002824:	e4ee      	b.n	8002204 <_svfprintf_r+0x74>
 8002826:	9b02      	ldr	r3, [sp, #8]
 8002828:	2b65      	cmp	r3, #101	; 0x65
 800282a:	f77f af0b 	ble.w	8002644 <_svfprintf_r+0x4b4>
 800282e:	9b02      	ldr	r3, [sp, #8]
 8002830:	2b66      	cmp	r3, #102	; 0x66
 8002832:	d124      	bne.n	800287e <_svfprintf_r+0x6ee>
 8002834:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002836:	2b00      	cmp	r3, #0
 8002838:	dd19      	ble.n	800286e <_svfprintf_r+0x6de>
 800283a:	f1b9 0f00 	cmp.w	r9, #0
 800283e:	d101      	bne.n	8002844 <_svfprintf_r+0x6b4>
 8002840:	07ea      	lsls	r2, r5, #31
 8002842:	d502      	bpl.n	800284a <_svfprintf_r+0x6ba>
 8002844:	9a08      	ldr	r2, [sp, #32]
 8002846:	4413      	add	r3, r2
 8002848:	444b      	add	r3, r9
 800284a:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800284c:	4699      	mov	r9, r3
 800284e:	e735      	b.n	80026bc <_svfprintf_r+0x52c>
 8002850:	460a      	mov	r2, r1
 8002852:	e70c      	b.n	800266e <_svfprintf_r+0x4de>
 8002854:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002858:	f803 1b01 	strb.w	r1, [r3], #1
 800285c:	e71c      	b.n	8002698 <_svfprintf_r+0x508>
 800285e:	2230      	movs	r2, #48	; 0x30
 8002860:	4413      	add	r3, r2
 8002862:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8002866:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800286a:	a91c      	add	r1, sp, #112	; 0x70
 800286c:	e718      	b.n	80026a0 <_svfprintf_r+0x510>
 800286e:	f1b9 0f00 	cmp.w	r9, #0
 8002872:	d101      	bne.n	8002878 <_svfprintf_r+0x6e8>
 8002874:	07eb      	lsls	r3, r5, #31
 8002876:	d515      	bpl.n	80028a4 <_svfprintf_r+0x714>
 8002878:	9b08      	ldr	r3, [sp, #32]
 800287a:	3301      	adds	r3, #1
 800287c:	e7e4      	b.n	8002848 <_svfprintf_r+0x6b8>
 800287e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8002880:	9b03      	ldr	r3, [sp, #12]
 8002882:	429a      	cmp	r2, r3
 8002884:	db06      	blt.n	8002894 <_svfprintf_r+0x704>
 8002886:	07ef      	lsls	r7, r5, #31
 8002888:	d50e      	bpl.n	80028a8 <_svfprintf_r+0x718>
 800288a:	9b08      	ldr	r3, [sp, #32]
 800288c:	4413      	add	r3, r2
 800288e:	2267      	movs	r2, #103	; 0x67
 8002890:	9202      	str	r2, [sp, #8]
 8002892:	e7da      	b.n	800284a <_svfprintf_r+0x6ba>
 8002894:	9b03      	ldr	r3, [sp, #12]
 8002896:	9908      	ldr	r1, [sp, #32]
 8002898:	2a00      	cmp	r2, #0
 800289a:	440b      	add	r3, r1
 800289c:	dcf7      	bgt.n	800288e <_svfprintf_r+0x6fe>
 800289e:	f1c2 0201 	rsb	r2, r2, #1
 80028a2:	e7f3      	b.n	800288c <_svfprintf_r+0x6fc>
 80028a4:	2301      	movs	r3, #1
 80028a6:	e7d0      	b.n	800284a <_svfprintf_r+0x6ba>
 80028a8:	4613      	mov	r3, r2
 80028aa:	e7f0      	b.n	800288e <_svfprintf_r+0x6fe>
 80028ac:	b10b      	cbz	r3, 80028b2 <_svfprintf_r+0x722>
 80028ae:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80028b2:	f015 0f20 	tst.w	r5, #32
 80028b6:	f107 0304 	add.w	r3, r7, #4
 80028ba:	d008      	beq.n	80028ce <_svfprintf_r+0x73e>
 80028bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	17ce      	asrs	r6, r1, #31
 80028c2:	4608      	mov	r0, r1
 80028c4:	4631      	mov	r1, r6
 80028c6:	e9c2 0100 	strd	r0, r1, [r2]
 80028ca:	461f      	mov	r7, r3
 80028cc:	e49a      	b.n	8002204 <_svfprintf_r+0x74>
 80028ce:	06ee      	lsls	r6, r5, #27
 80028d0:	d503      	bpl.n	80028da <_svfprintf_r+0x74a>
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80028d6:	6011      	str	r1, [r2, #0]
 80028d8:	e7f7      	b.n	80028ca <_svfprintf_r+0x73a>
 80028da:	0668      	lsls	r0, r5, #25
 80028dc:	d5f9      	bpl.n	80028d2 <_svfprintf_r+0x742>
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80028e4:	8011      	strh	r1, [r2, #0]
 80028e6:	e7f0      	b.n	80028ca <_svfprintf_r+0x73a>
 80028e8:	f045 0510 	orr.w	r5, r5, #16
 80028ec:	f015 0320 	ands.w	r3, r5, #32
 80028f0:	d022      	beq.n	8002938 <_svfprintf_r+0x7a8>
 80028f2:	3707      	adds	r7, #7
 80028f4:	f027 0707 	bic.w	r7, r7, #7
 80028f8:	f107 0308 	add.w	r3, r7, #8
 80028fc:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002900:	9304      	str	r3, [sp, #16]
 8002902:	2300      	movs	r3, #0
 8002904:	2200      	movs	r2, #0
 8002906:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800290a:	f1b9 3fff 	cmp.w	r9, #4294967295
 800290e:	f000 83db 	beq.w	80030c8 <_svfprintf_r+0xf38>
 8002912:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 8002916:	920b      	str	r2, [sp, #44]	; 0x2c
 8002918:	ea56 0207 	orrs.w	r2, r6, r7
 800291c:	f040 83d9 	bne.w	80030d2 <_svfprintf_r+0xf42>
 8002920:	f1b9 0f00 	cmp.w	r9, #0
 8002924:	f000 80aa 	beq.w	8002a7c <_svfprintf_r+0x8ec>
 8002928:	2b01      	cmp	r3, #1
 800292a:	d076      	beq.n	8002a1a <_svfprintf_r+0x88a>
 800292c:	2b02      	cmp	r3, #2
 800292e:	f000 8091 	beq.w	8002a54 <_svfprintf_r+0x8c4>
 8002932:	2600      	movs	r6, #0
 8002934:	2700      	movs	r7, #0
 8002936:	e3d2      	b.n	80030de <_svfprintf_r+0xf4e>
 8002938:	1d3a      	adds	r2, r7, #4
 800293a:	f015 0110 	ands.w	r1, r5, #16
 800293e:	9204      	str	r2, [sp, #16]
 8002940:	d002      	beq.n	8002948 <_svfprintf_r+0x7b8>
 8002942:	683e      	ldr	r6, [r7, #0]
 8002944:	2700      	movs	r7, #0
 8002946:	e7dd      	b.n	8002904 <_svfprintf_r+0x774>
 8002948:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 800294c:	d0f9      	beq.n	8002942 <_svfprintf_r+0x7b2>
 800294e:	883e      	ldrh	r6, [r7, #0]
 8002950:	2700      	movs	r7, #0
 8002952:	e7d6      	b.n	8002902 <_svfprintf_r+0x772>
 8002954:	1d3b      	adds	r3, r7, #4
 8002956:	9304      	str	r3, [sp, #16]
 8002958:	2330      	movs	r3, #48	; 0x30
 800295a:	2278      	movs	r2, #120	; 0x78
 800295c:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8002960:	4b14      	ldr	r3, [pc, #80]	; (80029b4 <_svfprintf_r+0x824>)
 8002962:	683e      	ldr	r6, [r7, #0]
 8002964:	9311      	str	r3, [sp, #68]	; 0x44
 8002966:	2700      	movs	r7, #0
 8002968:	f045 0502 	orr.w	r5, r5, #2
 800296c:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8002970:	2302      	movs	r3, #2
 8002972:	9202      	str	r2, [sp, #8]
 8002974:	e7c6      	b.n	8002904 <_svfprintf_r+0x774>
 8002976:	1d3b      	adds	r3, r7, #4
 8002978:	2600      	movs	r6, #0
 800297a:	f1b9 3fff 	cmp.w	r9, #4294967295
 800297e:	9304      	str	r3, [sp, #16]
 8002980:	f8d7 8000 	ldr.w	r8, [r7]
 8002984:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8002988:	d00a      	beq.n	80029a0 <_svfprintf_r+0x810>
 800298a:	464a      	mov	r2, r9
 800298c:	4631      	mov	r1, r6
 800298e:	4640      	mov	r0, r8
 8002990:	f7fd fc26 	bl	80001e0 <memchr>
 8002994:	2800      	cmp	r0, #0
 8002996:	f000 808d 	beq.w	8002ab4 <_svfprintf_r+0x924>
 800299a:	eba0 0908 	sub.w	r9, r0, r8
 800299e:	e5cb      	b.n	8002538 <_svfprintf_r+0x3a8>
 80029a0:	4640      	mov	r0, r8
 80029a2:	f7fd fc15 	bl	80001d0 <strlen>
 80029a6:	4681      	mov	r9, r0
 80029a8:	e5c6      	b.n	8002538 <_svfprintf_r+0x3a8>
 80029aa:	bf00      	nop
 80029ac:	08004fce 	.word	0x08004fce
 80029b0:	08004fde 	.word	0x08004fde
 80029b4:	08004fbb 	.word	0x08004fbb
 80029b8:	f045 0510 	orr.w	r5, r5, #16
 80029bc:	06a9      	lsls	r1, r5, #26
 80029be:	d509      	bpl.n	80029d4 <_svfprintf_r+0x844>
 80029c0:	3707      	adds	r7, #7
 80029c2:	f027 0707 	bic.w	r7, r7, #7
 80029c6:	f107 0308 	add.w	r3, r7, #8
 80029ca:	e9d7 6700 	ldrd	r6, r7, [r7]
 80029ce:	9304      	str	r3, [sp, #16]
 80029d0:	2301      	movs	r3, #1
 80029d2:	e797      	b.n	8002904 <_svfprintf_r+0x774>
 80029d4:	1d3b      	adds	r3, r7, #4
 80029d6:	f015 0f10 	tst.w	r5, #16
 80029da:	9304      	str	r3, [sp, #16]
 80029dc:	d001      	beq.n	80029e2 <_svfprintf_r+0x852>
 80029de:	683e      	ldr	r6, [r7, #0]
 80029e0:	e002      	b.n	80029e8 <_svfprintf_r+0x858>
 80029e2:	066a      	lsls	r2, r5, #25
 80029e4:	d5fb      	bpl.n	80029de <_svfprintf_r+0x84e>
 80029e6:	883e      	ldrh	r6, [r7, #0]
 80029e8:	2700      	movs	r7, #0
 80029ea:	e7f1      	b.n	80029d0 <_svfprintf_r+0x840>
 80029ec:	b10b      	cbz	r3, 80029f2 <_svfprintf_r+0x862>
 80029ee:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80029f2:	4ba3      	ldr	r3, [pc, #652]	; (8002c80 <_svfprintf_r+0xaf0>)
 80029f4:	e4c2      	b.n	800237c <_svfprintf_r+0x1ec>
 80029f6:	1d3b      	adds	r3, r7, #4
 80029f8:	f015 0f10 	tst.w	r5, #16
 80029fc:	9304      	str	r3, [sp, #16]
 80029fe:	d001      	beq.n	8002a04 <_svfprintf_r+0x874>
 8002a00:	683e      	ldr	r6, [r7, #0]
 8002a02:	e002      	b.n	8002a0a <_svfprintf_r+0x87a>
 8002a04:	066e      	lsls	r6, r5, #25
 8002a06:	d5fb      	bpl.n	8002a00 <_svfprintf_r+0x870>
 8002a08:	883e      	ldrh	r6, [r7, #0]
 8002a0a:	2700      	movs	r7, #0
 8002a0c:	e4c2      	b.n	8002394 <_svfprintf_r+0x204>
 8002a0e:	4643      	mov	r3, r8
 8002a10:	e366      	b.n	80030e0 <_svfprintf_r+0xf50>
 8002a12:	2f00      	cmp	r7, #0
 8002a14:	bf08      	it	eq
 8002a16:	2e0a      	cmpeq	r6, #10
 8002a18:	d205      	bcs.n	8002a26 <_svfprintf_r+0x896>
 8002a1a:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8002a1e:	3630      	adds	r6, #48	; 0x30
 8002a20:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8002a24:	e377      	b.n	8003116 <_svfprintf_r+0xf86>
 8002a26:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8002a2a:	4630      	mov	r0, r6
 8002a2c:	4639      	mov	r1, r7
 8002a2e:	220a      	movs	r2, #10
 8002a30:	2300      	movs	r3, #0
 8002a32:	f7fe f8b5 	bl	8000ba0 <__aeabi_uldivmod>
 8002a36:	3230      	adds	r2, #48	; 0x30
 8002a38:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	4630      	mov	r0, r6
 8002a40:	4639      	mov	r1, r7
 8002a42:	220a      	movs	r2, #10
 8002a44:	f7fe f8ac 	bl	8000ba0 <__aeabi_uldivmod>
 8002a48:	4606      	mov	r6, r0
 8002a4a:	460f      	mov	r7, r1
 8002a4c:	ea56 0307 	orrs.w	r3, r6, r7
 8002a50:	d1eb      	bne.n	8002a2a <_svfprintf_r+0x89a>
 8002a52:	e360      	b.n	8003116 <_svfprintf_r+0xf86>
 8002a54:	2600      	movs	r6, #0
 8002a56:	2700      	movs	r7, #0
 8002a58:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8002a5c:	f006 030f 	and.w	r3, r6, #15
 8002a60:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002a62:	5cd3      	ldrb	r3, [r2, r3]
 8002a64:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8002a68:	0933      	lsrs	r3, r6, #4
 8002a6a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8002a6e:	093a      	lsrs	r2, r7, #4
 8002a70:	461e      	mov	r6, r3
 8002a72:	4617      	mov	r7, r2
 8002a74:	ea56 0307 	orrs.w	r3, r6, r7
 8002a78:	d1f0      	bne.n	8002a5c <_svfprintf_r+0x8cc>
 8002a7a:	e34c      	b.n	8003116 <_svfprintf_r+0xf86>
 8002a7c:	b93b      	cbnz	r3, 8002a8e <_svfprintf_r+0x8fe>
 8002a7e:	07ea      	lsls	r2, r5, #31
 8002a80:	d505      	bpl.n	8002a8e <_svfprintf_r+0x8fe>
 8002a82:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8002a86:	2330      	movs	r3, #48	; 0x30
 8002a88:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8002a8c:	e343      	b.n	8003116 <_svfprintf_r+0xf86>
 8002a8e:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8002a92:	e340      	b.n	8003116 <_svfprintf_r+0xf86>
 8002a94:	b10b      	cbz	r3, 8002a9a <_svfprintf_r+0x90a>
 8002a96:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002a9a:	9b02      	ldr	r3, [sp, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 82f7 	beq.w	8003090 <_svfprintf_r+0xf00>
 8002aa2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002aa6:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8002aaa:	2600      	movs	r6, #0
 8002aac:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8002ab0:	9704      	str	r7, [sp, #16]
 8002ab2:	e4e8      	b.n	8002486 <_svfprintf_r+0x2f6>
 8002ab4:	4606      	mov	r6, r0
 8002ab6:	e53f      	b.n	8002538 <_svfprintf_r+0x3a8>
 8002ab8:	2310      	movs	r3, #16
 8002aba:	6063      	str	r3, [r4, #4]
 8002abc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002abe:	3310      	adds	r3, #16
 8002ac0:	9321      	str	r3, [sp, #132]	; 0x84
 8002ac2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	2b07      	cmp	r3, #7
 8002ac8:	9320      	str	r3, [sp, #128]	; 0x80
 8002aca:	dc04      	bgt.n	8002ad6 <_svfprintf_r+0x946>
 8002acc:	3408      	adds	r4, #8
 8002ace:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002ad0:	3b10      	subs	r3, #16
 8002ad2:	930c      	str	r3, [sp, #48]	; 0x30
 8002ad4:	e615      	b.n	8002702 <_svfprintf_r+0x572>
 8002ad6:	aa1f      	add	r2, sp, #124	; 0x7c
 8002ad8:	4651      	mov	r1, sl
 8002ada:	4658      	mov	r0, fp
 8002adc:	f001 fea2 	bl	8004824 <__ssprint_r>
 8002ae0:	2800      	cmp	r0, #0
 8002ae2:	f040 82b6 	bne.w	8003052 <_svfprintf_r+0xec2>
 8002ae6:	ac2c      	add	r4, sp, #176	; 0xb0
 8002ae8:	e7f1      	b.n	8002ace <_svfprintf_r+0x93e>
 8002aea:	aa1f      	add	r2, sp, #124	; 0x7c
 8002aec:	4651      	mov	r1, sl
 8002aee:	4658      	mov	r0, fp
 8002af0:	f001 fe98 	bl	8004824 <__ssprint_r>
 8002af4:	2800      	cmp	r0, #0
 8002af6:	f040 82ac 	bne.w	8003052 <_svfprintf_r+0xec2>
 8002afa:	ac2c      	add	r4, sp, #176	; 0xb0
 8002afc:	e614      	b.n	8002728 <_svfprintf_r+0x598>
 8002afe:	aa1f      	add	r2, sp, #124	; 0x7c
 8002b00:	4651      	mov	r1, sl
 8002b02:	4658      	mov	r0, fp
 8002b04:	f001 fe8e 	bl	8004824 <__ssprint_r>
 8002b08:	2800      	cmp	r0, #0
 8002b0a:	f040 82a2 	bne.w	8003052 <_svfprintf_r+0xec2>
 8002b0e:	ac2c      	add	r4, sp, #176	; 0xb0
 8002b10:	e61c      	b.n	800274c <_svfprintf_r+0x5bc>
 8002b12:	aa1f      	add	r2, sp, #124	; 0x7c
 8002b14:	4651      	mov	r1, sl
 8002b16:	4658      	mov	r0, fp
 8002b18:	f001 fe84 	bl	8004824 <__ssprint_r>
 8002b1c:	2800      	cmp	r0, #0
 8002b1e:	f040 8298 	bne.w	8003052 <_svfprintf_r+0xec2>
 8002b22:	ac2c      	add	r4, sp, #176	; 0xb0
 8002b24:	e622      	b.n	800276c <_svfprintf_r+0x5dc>
 8002b26:	2210      	movs	r2, #16
 8002b28:	6062      	str	r2, [r4, #4]
 8002b2a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002b2c:	3210      	adds	r2, #16
 8002b2e:	9221      	str	r2, [sp, #132]	; 0x84
 8002b30:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002b32:	3201      	adds	r2, #1
 8002b34:	2a07      	cmp	r2, #7
 8002b36:	9220      	str	r2, [sp, #128]	; 0x80
 8002b38:	dc02      	bgt.n	8002b40 <_svfprintf_r+0x9b0>
 8002b3a:	3408      	adds	r4, #8
 8002b3c:	3b10      	subs	r3, #16
 8002b3e:	e61d      	b.n	800277c <_svfprintf_r+0x5ec>
 8002b40:	aa1f      	add	r2, sp, #124	; 0x7c
 8002b42:	4651      	mov	r1, sl
 8002b44:	4658      	mov	r0, fp
 8002b46:	930c      	str	r3, [sp, #48]	; 0x30
 8002b48:	f001 fe6c 	bl	8004824 <__ssprint_r>
 8002b4c:	2800      	cmp	r0, #0
 8002b4e:	f040 8280 	bne.w	8003052 <_svfprintf_r+0xec2>
 8002b52:	ac2c      	add	r4, sp, #176	; 0xb0
 8002b54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002b56:	e7f1      	b.n	8002b3c <_svfprintf_r+0x9ac>
 8002b58:	aa1f      	add	r2, sp, #124	; 0x7c
 8002b5a:	4651      	mov	r1, sl
 8002b5c:	4658      	mov	r0, fp
 8002b5e:	f001 fe61 	bl	8004824 <__ssprint_r>
 8002b62:	2800      	cmp	r0, #0
 8002b64:	f040 8275 	bne.w	8003052 <_svfprintf_r+0xec2>
 8002b68:	ac2c      	add	r4, sp, #176	; 0xb0
 8002b6a:	e617      	b.n	800279c <_svfprintf_r+0x60c>
 8002b6c:	2310      	movs	r3, #16
 8002b6e:	6063      	str	r3, [r4, #4]
 8002b70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002b72:	3310      	adds	r3, #16
 8002b74:	9321      	str	r3, [sp, #132]	; 0x84
 8002b76:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002b78:	3301      	adds	r3, #1
 8002b7a:	2b07      	cmp	r3, #7
 8002b7c:	9320      	str	r3, [sp, #128]	; 0x80
 8002b7e:	dc02      	bgt.n	8002b86 <_svfprintf_r+0x9f6>
 8002b80:	3408      	adds	r4, #8
 8002b82:	3e10      	subs	r6, #16
 8002b84:	e60e      	b.n	80027a4 <_svfprintf_r+0x614>
 8002b86:	aa1f      	add	r2, sp, #124	; 0x7c
 8002b88:	4651      	mov	r1, sl
 8002b8a:	4658      	mov	r0, fp
 8002b8c:	f001 fe4a 	bl	8004824 <__ssprint_r>
 8002b90:	2800      	cmp	r0, #0
 8002b92:	f040 825e 	bne.w	8003052 <_svfprintf_r+0xec2>
 8002b96:	ac2c      	add	r4, sp, #176	; 0xb0
 8002b98:	e7f3      	b.n	8002b82 <_svfprintf_r+0x9f2>
 8002b9a:	aa1f      	add	r2, sp, #124	; 0x7c
 8002b9c:	4651      	mov	r1, sl
 8002b9e:	4658      	mov	r0, fp
 8002ba0:	f001 fe40 	bl	8004824 <__ssprint_r>
 8002ba4:	2800      	cmp	r0, #0
 8002ba6:	f040 8254 	bne.w	8003052 <_svfprintf_r+0xec2>
 8002baa:	ac2c      	add	r4, sp, #176	; 0xb0
 8002bac:	e60a      	b.n	80027c4 <_svfprintf_r+0x634>
 8002bae:	9b02      	ldr	r3, [sp, #8]
 8002bb0:	2b65      	cmp	r3, #101	; 0x65
 8002bb2:	f340 81a9 	ble.w	8002f08 <_svfprintf_r+0xd78>
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	2300      	movs	r3, #0
 8002bba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002bbe:	f7fd ff7f 	bl	8000ac0 <__aeabi_dcmpeq>
 8002bc2:	2800      	cmp	r0, #0
 8002bc4:	d062      	beq.n	8002c8c <_svfprintf_r+0xafc>
 8002bc6:	4b2f      	ldr	r3, [pc, #188]	; (8002c84 <_svfprintf_r+0xaf4>)
 8002bc8:	6023      	str	r3, [r4, #0]
 8002bca:	2301      	movs	r3, #1
 8002bcc:	6063      	str	r3, [r4, #4]
 8002bce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	9321      	str	r3, [sp, #132]	; 0x84
 8002bd4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	2b07      	cmp	r3, #7
 8002bda:	9320      	str	r3, [sp, #128]	; 0x80
 8002bdc:	dc25      	bgt.n	8002c2a <_svfprintf_r+0xa9a>
 8002bde:	3408      	adds	r4, #8
 8002be0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002be2:	9a03      	ldr	r2, [sp, #12]
 8002be4:	4293      	cmp	r3, r2
 8002be6:	db02      	blt.n	8002bee <_svfprintf_r+0xa5e>
 8002be8:	07ee      	lsls	r6, r5, #31
 8002bea:	f57f ae02 	bpl.w	80027f2 <_svfprintf_r+0x662>
 8002bee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002bf0:	6023      	str	r3, [r4, #0]
 8002bf2:	9b08      	ldr	r3, [sp, #32]
 8002bf4:	6063      	str	r3, [r4, #4]
 8002bf6:	9a08      	ldr	r2, [sp, #32]
 8002bf8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002bfa:	4413      	add	r3, r2
 8002bfc:	9321      	str	r3, [sp, #132]	; 0x84
 8002bfe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002c00:	3301      	adds	r3, #1
 8002c02:	2b07      	cmp	r3, #7
 8002c04:	9320      	str	r3, [sp, #128]	; 0x80
 8002c06:	dc1a      	bgt.n	8002c3e <_svfprintf_r+0xaae>
 8002c08:	3408      	adds	r4, #8
 8002c0a:	9b03      	ldr	r3, [sp, #12]
 8002c0c:	1e5e      	subs	r6, r3, #1
 8002c0e:	2e00      	cmp	r6, #0
 8002c10:	f77f adef 	ble.w	80027f2 <_svfprintf_r+0x662>
 8002c14:	4f1c      	ldr	r7, [pc, #112]	; (8002c88 <_svfprintf_r+0xaf8>)
 8002c16:	f04f 0810 	mov.w	r8, #16
 8002c1a:	2e10      	cmp	r6, #16
 8002c1c:	6027      	str	r7, [r4, #0]
 8002c1e:	dc18      	bgt.n	8002c52 <_svfprintf_r+0xac2>
 8002c20:	6066      	str	r6, [r4, #4]
 8002c22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002c24:	441e      	add	r6, r3
 8002c26:	9621      	str	r6, [sp, #132]	; 0x84
 8002c28:	e5d4      	b.n	80027d4 <_svfprintf_r+0x644>
 8002c2a:	aa1f      	add	r2, sp, #124	; 0x7c
 8002c2c:	4651      	mov	r1, sl
 8002c2e:	4658      	mov	r0, fp
 8002c30:	f001 fdf8 	bl	8004824 <__ssprint_r>
 8002c34:	2800      	cmp	r0, #0
 8002c36:	f040 820c 	bne.w	8003052 <_svfprintf_r+0xec2>
 8002c3a:	ac2c      	add	r4, sp, #176	; 0xb0
 8002c3c:	e7d0      	b.n	8002be0 <_svfprintf_r+0xa50>
 8002c3e:	aa1f      	add	r2, sp, #124	; 0x7c
 8002c40:	4651      	mov	r1, sl
 8002c42:	4658      	mov	r0, fp
 8002c44:	f001 fdee 	bl	8004824 <__ssprint_r>
 8002c48:	2800      	cmp	r0, #0
 8002c4a:	f040 8202 	bne.w	8003052 <_svfprintf_r+0xec2>
 8002c4e:	ac2c      	add	r4, sp, #176	; 0xb0
 8002c50:	e7db      	b.n	8002c0a <_svfprintf_r+0xa7a>
 8002c52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002c54:	f8c4 8004 	str.w	r8, [r4, #4]
 8002c58:	3310      	adds	r3, #16
 8002c5a:	9321      	str	r3, [sp, #132]	; 0x84
 8002c5c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002c5e:	3301      	adds	r3, #1
 8002c60:	2b07      	cmp	r3, #7
 8002c62:	9320      	str	r3, [sp, #128]	; 0x80
 8002c64:	dc02      	bgt.n	8002c6c <_svfprintf_r+0xadc>
 8002c66:	3408      	adds	r4, #8
 8002c68:	3e10      	subs	r6, #16
 8002c6a:	e7d6      	b.n	8002c1a <_svfprintf_r+0xa8a>
 8002c6c:	aa1f      	add	r2, sp, #124	; 0x7c
 8002c6e:	4651      	mov	r1, sl
 8002c70:	4658      	mov	r0, fp
 8002c72:	f001 fdd7 	bl	8004824 <__ssprint_r>
 8002c76:	2800      	cmp	r0, #0
 8002c78:	f040 81eb 	bne.w	8003052 <_svfprintf_r+0xec2>
 8002c7c:	ac2c      	add	r4, sp, #176	; 0xb0
 8002c7e:	e7f3      	b.n	8002c68 <_svfprintf_r+0xad8>
 8002c80:	08004fbb 	.word	0x08004fbb
 8002c84:	08004fcc 	.word	0x08004fcc
 8002c88:	08004fde 	.word	0x08004fde
 8002c8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	dc7a      	bgt.n	8002d88 <_svfprintf_r+0xbf8>
 8002c92:	4b9b      	ldr	r3, [pc, #620]	; (8002f00 <_svfprintf_r+0xd70>)
 8002c94:	6023      	str	r3, [r4, #0]
 8002c96:	2301      	movs	r3, #1
 8002c98:	6063      	str	r3, [r4, #4]
 8002c9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	9321      	str	r3, [sp, #132]	; 0x84
 8002ca0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	2b07      	cmp	r3, #7
 8002ca6:	9320      	str	r3, [sp, #128]	; 0x80
 8002ca8:	dc44      	bgt.n	8002d34 <_svfprintf_r+0xba4>
 8002caa:	3408      	adds	r4, #8
 8002cac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002cae:	b923      	cbnz	r3, 8002cba <_svfprintf_r+0xb2a>
 8002cb0:	9b03      	ldr	r3, [sp, #12]
 8002cb2:	b913      	cbnz	r3, 8002cba <_svfprintf_r+0xb2a>
 8002cb4:	07e8      	lsls	r0, r5, #31
 8002cb6:	f57f ad9c 	bpl.w	80027f2 <_svfprintf_r+0x662>
 8002cba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002cbc:	6023      	str	r3, [r4, #0]
 8002cbe:	9b08      	ldr	r3, [sp, #32]
 8002cc0:	6063      	str	r3, [r4, #4]
 8002cc2:	9a08      	ldr	r2, [sp, #32]
 8002cc4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002cc6:	4413      	add	r3, r2
 8002cc8:	9321      	str	r3, [sp, #132]	; 0x84
 8002cca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002ccc:	3301      	adds	r3, #1
 8002cce:	2b07      	cmp	r3, #7
 8002cd0:	9320      	str	r3, [sp, #128]	; 0x80
 8002cd2:	dc39      	bgt.n	8002d48 <_svfprintf_r+0xbb8>
 8002cd4:	f104 0308 	add.w	r3, r4, #8
 8002cd8:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8002cda:	2e00      	cmp	r6, #0
 8002cdc:	da19      	bge.n	8002d12 <_svfprintf_r+0xb82>
 8002cde:	4f89      	ldr	r7, [pc, #548]	; (8002f04 <_svfprintf_r+0xd74>)
 8002ce0:	4276      	negs	r6, r6
 8002ce2:	2410      	movs	r4, #16
 8002ce4:	2e10      	cmp	r6, #16
 8002ce6:	601f      	str	r7, [r3, #0]
 8002ce8:	dc38      	bgt.n	8002d5c <_svfprintf_r+0xbcc>
 8002cea:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002cec:	605e      	str	r6, [r3, #4]
 8002cee:	4416      	add	r6, r2
 8002cf0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002cf2:	9621      	str	r6, [sp, #132]	; 0x84
 8002cf4:	3201      	adds	r2, #1
 8002cf6:	2a07      	cmp	r2, #7
 8002cf8:	f103 0308 	add.w	r3, r3, #8
 8002cfc:	9220      	str	r2, [sp, #128]	; 0x80
 8002cfe:	dd08      	ble.n	8002d12 <_svfprintf_r+0xb82>
 8002d00:	aa1f      	add	r2, sp, #124	; 0x7c
 8002d02:	4651      	mov	r1, sl
 8002d04:	4658      	mov	r0, fp
 8002d06:	f001 fd8d 	bl	8004824 <__ssprint_r>
 8002d0a:	2800      	cmp	r0, #0
 8002d0c:	f040 81a1 	bne.w	8003052 <_svfprintf_r+0xec2>
 8002d10:	ab2c      	add	r3, sp, #176	; 0xb0
 8002d12:	9a03      	ldr	r2, [sp, #12]
 8002d14:	605a      	str	r2, [r3, #4]
 8002d16:	9903      	ldr	r1, [sp, #12]
 8002d18:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002d1a:	f8c3 8000 	str.w	r8, [r3]
 8002d1e:	440a      	add	r2, r1
 8002d20:	9221      	str	r2, [sp, #132]	; 0x84
 8002d22:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002d24:	3201      	adds	r2, #1
 8002d26:	2a07      	cmp	r2, #7
 8002d28:	9220      	str	r2, [sp, #128]	; 0x80
 8002d2a:	f73f ad59 	bgt.w	80027e0 <_svfprintf_r+0x650>
 8002d2e:	f103 0408 	add.w	r4, r3, #8
 8002d32:	e55e      	b.n	80027f2 <_svfprintf_r+0x662>
 8002d34:	aa1f      	add	r2, sp, #124	; 0x7c
 8002d36:	4651      	mov	r1, sl
 8002d38:	4658      	mov	r0, fp
 8002d3a:	f001 fd73 	bl	8004824 <__ssprint_r>
 8002d3e:	2800      	cmp	r0, #0
 8002d40:	f040 8187 	bne.w	8003052 <_svfprintf_r+0xec2>
 8002d44:	ac2c      	add	r4, sp, #176	; 0xb0
 8002d46:	e7b1      	b.n	8002cac <_svfprintf_r+0xb1c>
 8002d48:	aa1f      	add	r2, sp, #124	; 0x7c
 8002d4a:	4651      	mov	r1, sl
 8002d4c:	4658      	mov	r0, fp
 8002d4e:	f001 fd69 	bl	8004824 <__ssprint_r>
 8002d52:	2800      	cmp	r0, #0
 8002d54:	f040 817d 	bne.w	8003052 <_svfprintf_r+0xec2>
 8002d58:	ab2c      	add	r3, sp, #176	; 0xb0
 8002d5a:	e7bd      	b.n	8002cd8 <_svfprintf_r+0xb48>
 8002d5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002d5e:	605c      	str	r4, [r3, #4]
 8002d60:	3210      	adds	r2, #16
 8002d62:	9221      	str	r2, [sp, #132]	; 0x84
 8002d64:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002d66:	3201      	adds	r2, #1
 8002d68:	2a07      	cmp	r2, #7
 8002d6a:	9220      	str	r2, [sp, #128]	; 0x80
 8002d6c:	dc02      	bgt.n	8002d74 <_svfprintf_r+0xbe4>
 8002d6e:	3308      	adds	r3, #8
 8002d70:	3e10      	subs	r6, #16
 8002d72:	e7b7      	b.n	8002ce4 <_svfprintf_r+0xb54>
 8002d74:	aa1f      	add	r2, sp, #124	; 0x7c
 8002d76:	4651      	mov	r1, sl
 8002d78:	4658      	mov	r0, fp
 8002d7a:	f001 fd53 	bl	8004824 <__ssprint_r>
 8002d7e:	2800      	cmp	r0, #0
 8002d80:	f040 8167 	bne.w	8003052 <_svfprintf_r+0xec2>
 8002d84:	ab2c      	add	r3, sp, #176	; 0xb0
 8002d86:	e7f3      	b.n	8002d70 <_svfprintf_r+0xbe0>
 8002d88:	9b03      	ldr	r3, [sp, #12]
 8002d8a:	42bb      	cmp	r3, r7
 8002d8c:	bfa8      	it	ge
 8002d8e:	463b      	movge	r3, r7
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	461e      	mov	r6, r3
 8002d94:	dd0b      	ble.n	8002dae <_svfprintf_r+0xc1e>
 8002d96:	6063      	str	r3, [r4, #4]
 8002d98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002d9a:	f8c4 8000 	str.w	r8, [r4]
 8002d9e:	4433      	add	r3, r6
 8002da0:	9321      	str	r3, [sp, #132]	; 0x84
 8002da2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002da4:	3301      	adds	r3, #1
 8002da6:	2b07      	cmp	r3, #7
 8002da8:	9320      	str	r3, [sp, #128]	; 0x80
 8002daa:	dc5f      	bgt.n	8002e6c <_svfprintf_r+0xcdc>
 8002dac:	3408      	adds	r4, #8
 8002dae:	2e00      	cmp	r6, #0
 8002db0:	bfac      	ite	ge
 8002db2:	1bbe      	subge	r6, r7, r6
 8002db4:	463e      	movlt	r6, r7
 8002db6:	2e00      	cmp	r6, #0
 8002db8:	dd0f      	ble.n	8002dda <_svfprintf_r+0xc4a>
 8002dba:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8002f04 <_svfprintf_r+0xd74>
 8002dbe:	f8c4 9000 	str.w	r9, [r4]
 8002dc2:	2e10      	cmp	r6, #16
 8002dc4:	dc5c      	bgt.n	8002e80 <_svfprintf_r+0xcf0>
 8002dc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002dc8:	6066      	str	r6, [r4, #4]
 8002dca:	441e      	add	r6, r3
 8002dcc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002dce:	9621      	str	r6, [sp, #132]	; 0x84
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	2b07      	cmp	r3, #7
 8002dd4:	9320      	str	r3, [sp, #128]	; 0x80
 8002dd6:	dc6a      	bgt.n	8002eae <_svfprintf_r+0xd1e>
 8002dd8:	3408      	adds	r4, #8
 8002dda:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002ddc:	9a03      	ldr	r2, [sp, #12]
 8002dde:	4293      	cmp	r3, r2
 8002de0:	db01      	blt.n	8002de6 <_svfprintf_r+0xc56>
 8002de2:	07e9      	lsls	r1, r5, #31
 8002de4:	d50d      	bpl.n	8002e02 <_svfprintf_r+0xc72>
 8002de6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002de8:	6023      	str	r3, [r4, #0]
 8002dea:	9b08      	ldr	r3, [sp, #32]
 8002dec:	6063      	str	r3, [r4, #4]
 8002dee:	9a08      	ldr	r2, [sp, #32]
 8002df0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002df2:	4413      	add	r3, r2
 8002df4:	9321      	str	r3, [sp, #132]	; 0x84
 8002df6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002df8:	3301      	adds	r3, #1
 8002dfa:	2b07      	cmp	r3, #7
 8002dfc:	9320      	str	r3, [sp, #128]	; 0x80
 8002dfe:	dc60      	bgt.n	8002ec2 <_svfprintf_r+0xd32>
 8002e00:	3408      	adds	r4, #8
 8002e02:	9b03      	ldr	r3, [sp, #12]
 8002e04:	9a03      	ldr	r2, [sp, #12]
 8002e06:	1bde      	subs	r6, r3, r7
 8002e08:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	429e      	cmp	r6, r3
 8002e0e:	bfa8      	it	ge
 8002e10:	461e      	movge	r6, r3
 8002e12:	2e00      	cmp	r6, #0
 8002e14:	dd0b      	ble.n	8002e2e <_svfprintf_r+0xc9e>
 8002e16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002e18:	6066      	str	r6, [r4, #4]
 8002e1a:	4433      	add	r3, r6
 8002e1c:	9321      	str	r3, [sp, #132]	; 0x84
 8002e1e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002e20:	3301      	adds	r3, #1
 8002e22:	4447      	add	r7, r8
 8002e24:	2b07      	cmp	r3, #7
 8002e26:	6027      	str	r7, [r4, #0]
 8002e28:	9320      	str	r3, [sp, #128]	; 0x80
 8002e2a:	dc54      	bgt.n	8002ed6 <_svfprintf_r+0xd46>
 8002e2c:	3408      	adds	r4, #8
 8002e2e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002e30:	9a03      	ldr	r2, [sp, #12]
 8002e32:	2e00      	cmp	r6, #0
 8002e34:	eba2 0303 	sub.w	r3, r2, r3
 8002e38:	bfac      	ite	ge
 8002e3a:	1b9e      	subge	r6, r3, r6
 8002e3c:	461e      	movlt	r6, r3
 8002e3e:	2e00      	cmp	r6, #0
 8002e40:	f77f acd7 	ble.w	80027f2 <_svfprintf_r+0x662>
 8002e44:	4f2f      	ldr	r7, [pc, #188]	; (8002f04 <_svfprintf_r+0xd74>)
 8002e46:	f04f 0810 	mov.w	r8, #16
 8002e4a:	2e10      	cmp	r6, #16
 8002e4c:	6027      	str	r7, [r4, #0]
 8002e4e:	f77f aee7 	ble.w	8002c20 <_svfprintf_r+0xa90>
 8002e52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002e54:	f8c4 8004 	str.w	r8, [r4, #4]
 8002e58:	3310      	adds	r3, #16
 8002e5a:	9321      	str	r3, [sp, #132]	; 0x84
 8002e5c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002e5e:	3301      	adds	r3, #1
 8002e60:	2b07      	cmp	r3, #7
 8002e62:	9320      	str	r3, [sp, #128]	; 0x80
 8002e64:	dc41      	bgt.n	8002eea <_svfprintf_r+0xd5a>
 8002e66:	3408      	adds	r4, #8
 8002e68:	3e10      	subs	r6, #16
 8002e6a:	e7ee      	b.n	8002e4a <_svfprintf_r+0xcba>
 8002e6c:	aa1f      	add	r2, sp, #124	; 0x7c
 8002e6e:	4651      	mov	r1, sl
 8002e70:	4658      	mov	r0, fp
 8002e72:	f001 fcd7 	bl	8004824 <__ssprint_r>
 8002e76:	2800      	cmp	r0, #0
 8002e78:	f040 80eb 	bne.w	8003052 <_svfprintf_r+0xec2>
 8002e7c:	ac2c      	add	r4, sp, #176	; 0xb0
 8002e7e:	e796      	b.n	8002dae <_svfprintf_r+0xc1e>
 8002e80:	2310      	movs	r3, #16
 8002e82:	6063      	str	r3, [r4, #4]
 8002e84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002e86:	3310      	adds	r3, #16
 8002e88:	9321      	str	r3, [sp, #132]	; 0x84
 8002e8a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	2b07      	cmp	r3, #7
 8002e90:	9320      	str	r3, [sp, #128]	; 0x80
 8002e92:	dc02      	bgt.n	8002e9a <_svfprintf_r+0xd0a>
 8002e94:	3408      	adds	r4, #8
 8002e96:	3e10      	subs	r6, #16
 8002e98:	e791      	b.n	8002dbe <_svfprintf_r+0xc2e>
 8002e9a:	aa1f      	add	r2, sp, #124	; 0x7c
 8002e9c:	4651      	mov	r1, sl
 8002e9e:	4658      	mov	r0, fp
 8002ea0:	f001 fcc0 	bl	8004824 <__ssprint_r>
 8002ea4:	2800      	cmp	r0, #0
 8002ea6:	f040 80d4 	bne.w	8003052 <_svfprintf_r+0xec2>
 8002eaa:	ac2c      	add	r4, sp, #176	; 0xb0
 8002eac:	e7f3      	b.n	8002e96 <_svfprintf_r+0xd06>
 8002eae:	aa1f      	add	r2, sp, #124	; 0x7c
 8002eb0:	4651      	mov	r1, sl
 8002eb2:	4658      	mov	r0, fp
 8002eb4:	f001 fcb6 	bl	8004824 <__ssprint_r>
 8002eb8:	2800      	cmp	r0, #0
 8002eba:	f040 80ca 	bne.w	8003052 <_svfprintf_r+0xec2>
 8002ebe:	ac2c      	add	r4, sp, #176	; 0xb0
 8002ec0:	e78b      	b.n	8002dda <_svfprintf_r+0xc4a>
 8002ec2:	aa1f      	add	r2, sp, #124	; 0x7c
 8002ec4:	4651      	mov	r1, sl
 8002ec6:	4658      	mov	r0, fp
 8002ec8:	f001 fcac 	bl	8004824 <__ssprint_r>
 8002ecc:	2800      	cmp	r0, #0
 8002ece:	f040 80c0 	bne.w	8003052 <_svfprintf_r+0xec2>
 8002ed2:	ac2c      	add	r4, sp, #176	; 0xb0
 8002ed4:	e795      	b.n	8002e02 <_svfprintf_r+0xc72>
 8002ed6:	aa1f      	add	r2, sp, #124	; 0x7c
 8002ed8:	4651      	mov	r1, sl
 8002eda:	4658      	mov	r0, fp
 8002edc:	f001 fca2 	bl	8004824 <__ssprint_r>
 8002ee0:	2800      	cmp	r0, #0
 8002ee2:	f040 80b6 	bne.w	8003052 <_svfprintf_r+0xec2>
 8002ee6:	ac2c      	add	r4, sp, #176	; 0xb0
 8002ee8:	e7a1      	b.n	8002e2e <_svfprintf_r+0xc9e>
 8002eea:	aa1f      	add	r2, sp, #124	; 0x7c
 8002eec:	4651      	mov	r1, sl
 8002eee:	4658      	mov	r0, fp
 8002ef0:	f001 fc98 	bl	8004824 <__ssprint_r>
 8002ef4:	2800      	cmp	r0, #0
 8002ef6:	f040 80ac 	bne.w	8003052 <_svfprintf_r+0xec2>
 8002efa:	ac2c      	add	r4, sp, #176	; 0xb0
 8002efc:	e7b4      	b.n	8002e68 <_svfprintf_r+0xcd8>
 8002efe:	bf00      	nop
 8002f00:	08004fcc 	.word	0x08004fcc
 8002f04:	08004fde 	.word	0x08004fde
 8002f08:	9b03      	ldr	r3, [sp, #12]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	dc01      	bgt.n	8002f12 <_svfprintf_r+0xd82>
 8002f0e:	07ea      	lsls	r2, r5, #31
 8002f10:	d576      	bpl.n	8003000 <_svfprintf_r+0xe70>
 8002f12:	2301      	movs	r3, #1
 8002f14:	6063      	str	r3, [r4, #4]
 8002f16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002f18:	f8c4 8000 	str.w	r8, [r4]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	9321      	str	r3, [sp, #132]	; 0x84
 8002f20:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002f22:	3301      	adds	r3, #1
 8002f24:	2b07      	cmp	r3, #7
 8002f26:	9320      	str	r3, [sp, #128]	; 0x80
 8002f28:	dc36      	bgt.n	8002f98 <_svfprintf_r+0xe08>
 8002f2a:	3408      	adds	r4, #8
 8002f2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002f2e:	6023      	str	r3, [r4, #0]
 8002f30:	9b08      	ldr	r3, [sp, #32]
 8002f32:	6063      	str	r3, [r4, #4]
 8002f34:	9a08      	ldr	r2, [sp, #32]
 8002f36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002f38:	4413      	add	r3, r2
 8002f3a:	9321      	str	r3, [sp, #132]	; 0x84
 8002f3c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002f3e:	3301      	adds	r3, #1
 8002f40:	2b07      	cmp	r3, #7
 8002f42:	9320      	str	r3, [sp, #128]	; 0x80
 8002f44:	dc31      	bgt.n	8002faa <_svfprintf_r+0xe1a>
 8002f46:	3408      	adds	r4, #8
 8002f48:	2300      	movs	r3, #0
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002f50:	f7fd fdb6 	bl	8000ac0 <__aeabi_dcmpeq>
 8002f54:	9b03      	ldr	r3, [sp, #12]
 8002f56:	1e5e      	subs	r6, r3, #1
 8002f58:	2800      	cmp	r0, #0
 8002f5a:	d12f      	bne.n	8002fbc <_svfprintf_r+0xe2c>
 8002f5c:	f108 0301 	add.w	r3, r8, #1
 8002f60:	e884 0048 	stmia.w	r4, {r3, r6}
 8002f64:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002f66:	9a03      	ldr	r2, [sp, #12]
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	4413      	add	r3, r2
 8002f6c:	9321      	str	r3, [sp, #132]	; 0x84
 8002f6e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002f70:	3301      	adds	r3, #1
 8002f72:	2b07      	cmp	r3, #7
 8002f74:	9320      	str	r3, [sp, #128]	; 0x80
 8002f76:	dd4a      	ble.n	800300e <_svfprintf_r+0xe7e>
 8002f78:	aa1f      	add	r2, sp, #124	; 0x7c
 8002f7a:	4651      	mov	r1, sl
 8002f7c:	4658      	mov	r0, fp
 8002f7e:	f001 fc51 	bl	8004824 <__ssprint_r>
 8002f82:	2800      	cmp	r0, #0
 8002f84:	d165      	bne.n	8003052 <_svfprintf_r+0xec2>
 8002f86:	ac2c      	add	r4, sp, #176	; 0xb0
 8002f88:	ab1b      	add	r3, sp, #108	; 0x6c
 8002f8a:	6023      	str	r3, [r4, #0]
 8002f8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002f8e:	6063      	str	r3, [r4, #4]
 8002f90:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002f92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002f94:	4413      	add	r3, r2
 8002f96:	e41c      	b.n	80027d2 <_svfprintf_r+0x642>
 8002f98:	aa1f      	add	r2, sp, #124	; 0x7c
 8002f9a:	4651      	mov	r1, sl
 8002f9c:	4658      	mov	r0, fp
 8002f9e:	f001 fc41 	bl	8004824 <__ssprint_r>
 8002fa2:	2800      	cmp	r0, #0
 8002fa4:	d155      	bne.n	8003052 <_svfprintf_r+0xec2>
 8002fa6:	ac2c      	add	r4, sp, #176	; 0xb0
 8002fa8:	e7c0      	b.n	8002f2c <_svfprintf_r+0xd9c>
 8002faa:	aa1f      	add	r2, sp, #124	; 0x7c
 8002fac:	4651      	mov	r1, sl
 8002fae:	4658      	mov	r0, fp
 8002fb0:	f001 fc38 	bl	8004824 <__ssprint_r>
 8002fb4:	2800      	cmp	r0, #0
 8002fb6:	d14c      	bne.n	8003052 <_svfprintf_r+0xec2>
 8002fb8:	ac2c      	add	r4, sp, #176	; 0xb0
 8002fba:	e7c5      	b.n	8002f48 <_svfprintf_r+0xdb8>
 8002fbc:	2e00      	cmp	r6, #0
 8002fbe:	dde3      	ble.n	8002f88 <_svfprintf_r+0xdf8>
 8002fc0:	4f59      	ldr	r7, [pc, #356]	; (8003128 <_svfprintf_r+0xf98>)
 8002fc2:	f04f 0810 	mov.w	r8, #16
 8002fc6:	2e10      	cmp	r6, #16
 8002fc8:	6027      	str	r7, [r4, #0]
 8002fca:	dc04      	bgt.n	8002fd6 <_svfprintf_r+0xe46>
 8002fcc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002fce:	6066      	str	r6, [r4, #4]
 8002fd0:	441e      	add	r6, r3
 8002fd2:	9621      	str	r6, [sp, #132]	; 0x84
 8002fd4:	e7cb      	b.n	8002f6e <_svfprintf_r+0xdde>
 8002fd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002fd8:	f8c4 8004 	str.w	r8, [r4, #4]
 8002fdc:	3310      	adds	r3, #16
 8002fde:	9321      	str	r3, [sp, #132]	; 0x84
 8002fe0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	2b07      	cmp	r3, #7
 8002fe6:	9320      	str	r3, [sp, #128]	; 0x80
 8002fe8:	dc02      	bgt.n	8002ff0 <_svfprintf_r+0xe60>
 8002fea:	3408      	adds	r4, #8
 8002fec:	3e10      	subs	r6, #16
 8002fee:	e7ea      	b.n	8002fc6 <_svfprintf_r+0xe36>
 8002ff0:	aa1f      	add	r2, sp, #124	; 0x7c
 8002ff2:	4651      	mov	r1, sl
 8002ff4:	4658      	mov	r0, fp
 8002ff6:	f001 fc15 	bl	8004824 <__ssprint_r>
 8002ffa:	bb50      	cbnz	r0, 8003052 <_svfprintf_r+0xec2>
 8002ffc:	ac2c      	add	r4, sp, #176	; 0xb0
 8002ffe:	e7f5      	b.n	8002fec <_svfprintf_r+0xe5c>
 8003000:	2301      	movs	r3, #1
 8003002:	6063      	str	r3, [r4, #4]
 8003004:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003006:	f8c4 8000 	str.w	r8, [r4]
 800300a:	3301      	adds	r3, #1
 800300c:	e7ae      	b.n	8002f6c <_svfprintf_r+0xddc>
 800300e:	3408      	adds	r4, #8
 8003010:	e7ba      	b.n	8002f88 <_svfprintf_r+0xdf8>
 8003012:	3408      	adds	r4, #8
 8003014:	f7ff bbed 	b.w	80027f2 <_svfprintf_r+0x662>
 8003018:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800301a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800301c:	1a9d      	subs	r5, r3, r2
 800301e:	2d00      	cmp	r5, #0
 8003020:	f77f abea 	ble.w	80027f8 <_svfprintf_r+0x668>
 8003024:	2610      	movs	r6, #16
 8003026:	4b41      	ldr	r3, [pc, #260]	; (800312c <_svfprintf_r+0xf9c>)
 8003028:	6023      	str	r3, [r4, #0]
 800302a:	2d10      	cmp	r5, #16
 800302c:	dc1b      	bgt.n	8003066 <_svfprintf_r+0xed6>
 800302e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003030:	6065      	str	r5, [r4, #4]
 8003032:	441d      	add	r5, r3
 8003034:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003036:	9521      	str	r5, [sp, #132]	; 0x84
 8003038:	3301      	adds	r3, #1
 800303a:	2b07      	cmp	r3, #7
 800303c:	9320      	str	r3, [sp, #128]	; 0x80
 800303e:	f77f abdb 	ble.w	80027f8 <_svfprintf_r+0x668>
 8003042:	aa1f      	add	r2, sp, #124	; 0x7c
 8003044:	4651      	mov	r1, sl
 8003046:	4658      	mov	r0, fp
 8003048:	f001 fbec 	bl	8004824 <__ssprint_r>
 800304c:	2800      	cmp	r0, #0
 800304e:	f43f abd3 	beq.w	80027f8 <_svfprintf_r+0x668>
 8003052:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8003056:	f013 0f40 	tst.w	r3, #64	; 0x40
 800305a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800305c:	bf18      	it	ne
 800305e:	f04f 33ff 	movne.w	r3, #4294967295
 8003062:	f7ff b8b9 	b.w	80021d8 <_svfprintf_r+0x48>
 8003066:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003068:	6066      	str	r6, [r4, #4]
 800306a:	3310      	adds	r3, #16
 800306c:	9321      	str	r3, [sp, #132]	; 0x84
 800306e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003070:	3301      	adds	r3, #1
 8003072:	2b07      	cmp	r3, #7
 8003074:	9320      	str	r3, [sp, #128]	; 0x80
 8003076:	dc02      	bgt.n	800307e <_svfprintf_r+0xeee>
 8003078:	3408      	adds	r4, #8
 800307a:	3d10      	subs	r5, #16
 800307c:	e7d3      	b.n	8003026 <_svfprintf_r+0xe96>
 800307e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003080:	4651      	mov	r1, sl
 8003082:	4658      	mov	r0, fp
 8003084:	f001 fbce 	bl	8004824 <__ssprint_r>
 8003088:	2800      	cmp	r0, #0
 800308a:	d1e2      	bne.n	8003052 <_svfprintf_r+0xec2>
 800308c:	ac2c      	add	r4, sp, #176	; 0xb0
 800308e:	e7f4      	b.n	800307a <_svfprintf_r+0xeea>
 8003090:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003092:	2b00      	cmp	r3, #0
 8003094:	d0dd      	beq.n	8003052 <_svfprintf_r+0xec2>
 8003096:	aa1f      	add	r2, sp, #124	; 0x7c
 8003098:	4651      	mov	r1, sl
 800309a:	4658      	mov	r0, fp
 800309c:	f001 fbc2 	bl	8004824 <__ssprint_r>
 80030a0:	e7d7      	b.n	8003052 <_svfprintf_r+0xec2>
 80030a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80030a6:	4610      	mov	r0, r2
 80030a8:	4619      	mov	r1, r3
 80030aa:	f7fd fd3b 	bl	8000b24 <__aeabi_dcmpun>
 80030ae:	2800      	cmp	r0, #0
 80030b0:	f43f aa44 	beq.w	800253c <_svfprintf_r+0x3ac>
 80030b4:	4b1e      	ldr	r3, [pc, #120]	; (8003130 <_svfprintf_r+0xfa0>)
 80030b6:	4a1f      	ldr	r2, [pc, #124]	; (8003134 <_svfprintf_r+0xfa4>)
 80030b8:	f7ff ba34 	b.w	8002524 <_svfprintf_r+0x394>
 80030bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80030be:	eba3 0308 	sub.w	r3, r3, r8
 80030c2:	9303      	str	r3, [sp, #12]
 80030c4:	f7ff bab5 	b.w	8002632 <_svfprintf_r+0x4a2>
 80030c8:	ea56 0207 	orrs.w	r2, r6, r7
 80030cc:	950b      	str	r5, [sp, #44]	; 0x2c
 80030ce:	f43f ac2b 	beq.w	8002928 <_svfprintf_r+0x798>
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	f43f ac9d 	beq.w	8002a12 <_svfprintf_r+0x882>
 80030d8:	2b02      	cmp	r3, #2
 80030da:	f43f acbd 	beq.w	8002a58 <_svfprintf_r+0x8c8>
 80030de:	ab2c      	add	r3, sp, #176	; 0xb0
 80030e0:	08f1      	lsrs	r1, r6, #3
 80030e2:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 80030e6:	08f8      	lsrs	r0, r7, #3
 80030e8:	f006 0207 	and.w	r2, r6, #7
 80030ec:	4607      	mov	r7, r0
 80030ee:	460e      	mov	r6, r1
 80030f0:	3230      	adds	r2, #48	; 0x30
 80030f2:	ea56 0107 	orrs.w	r1, r6, r7
 80030f6:	f103 38ff 	add.w	r8, r3, #4294967295
 80030fa:	f803 2c01 	strb.w	r2, [r3, #-1]
 80030fe:	f47f ac86 	bne.w	8002a0e <_svfprintf_r+0x87e>
 8003102:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003104:	07c9      	lsls	r1, r1, #31
 8003106:	d506      	bpl.n	8003116 <_svfprintf_r+0xf86>
 8003108:	2a30      	cmp	r2, #48	; 0x30
 800310a:	d004      	beq.n	8003116 <_svfprintf_r+0xf86>
 800310c:	2230      	movs	r2, #48	; 0x30
 800310e:	f808 2c01 	strb.w	r2, [r8, #-1]
 8003112:	f1a3 0802 	sub.w	r8, r3, #2
 8003116:	464e      	mov	r6, r9
 8003118:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 800311c:	eba9 0908 	sub.w	r9, r9, r8
 8003120:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003122:	2700      	movs	r7, #0
 8003124:	f7ff bad1 	b.w	80026ca <_svfprintf_r+0x53a>
 8003128:	08004fde 	.word	0x08004fde
 800312c:	08004fce 	.word	0x08004fce
 8003130:	08004fa2 	.word	0x08004fa2
 8003134:	08004fa6 	.word	0x08004fa6

08003138 <quorem>:
 8003138:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800313c:	6903      	ldr	r3, [r0, #16]
 800313e:	690c      	ldr	r4, [r1, #16]
 8003140:	429c      	cmp	r4, r3
 8003142:	4680      	mov	r8, r0
 8003144:	f300 8082 	bgt.w	800324c <quorem+0x114>
 8003148:	3c01      	subs	r4, #1
 800314a:	f101 0714 	add.w	r7, r1, #20
 800314e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8003152:	f100 0614 	add.w	r6, r0, #20
 8003156:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800315a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800315e:	eb06 030e 	add.w	r3, r6, lr
 8003162:	3501      	adds	r5, #1
 8003164:	eb07 090e 	add.w	r9, r7, lr
 8003168:	9301      	str	r3, [sp, #4]
 800316a:	fbb0 f5f5 	udiv	r5, r0, r5
 800316e:	b395      	cbz	r5, 80031d6 <quorem+0x9e>
 8003170:	f04f 0a00 	mov.w	sl, #0
 8003174:	4638      	mov	r0, r7
 8003176:	46b4      	mov	ip, r6
 8003178:	46d3      	mov	fp, sl
 800317a:	f850 2b04 	ldr.w	r2, [r0], #4
 800317e:	b293      	uxth	r3, r2
 8003180:	fb05 a303 	mla	r3, r5, r3, sl
 8003184:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003188:	b29b      	uxth	r3, r3
 800318a:	ebab 0303 	sub.w	r3, fp, r3
 800318e:	0c12      	lsrs	r2, r2, #16
 8003190:	f8bc b000 	ldrh.w	fp, [ip]
 8003194:	fb05 a202 	mla	r2, r5, r2, sl
 8003198:	fa13 f38b 	uxtah	r3, r3, fp
 800319c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80031a0:	fa1f fb82 	uxth.w	fp, r2
 80031a4:	f8dc 2000 	ldr.w	r2, [ip]
 80031a8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80031ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80031b6:	4581      	cmp	r9, r0
 80031b8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80031bc:	f84c 3b04 	str.w	r3, [ip], #4
 80031c0:	d2db      	bcs.n	800317a <quorem+0x42>
 80031c2:	f856 300e 	ldr.w	r3, [r6, lr]
 80031c6:	b933      	cbnz	r3, 80031d6 <quorem+0x9e>
 80031c8:	9b01      	ldr	r3, [sp, #4]
 80031ca:	3b04      	subs	r3, #4
 80031cc:	429e      	cmp	r6, r3
 80031ce:	461a      	mov	r2, r3
 80031d0:	d330      	bcc.n	8003234 <quorem+0xfc>
 80031d2:	f8c8 4010 	str.w	r4, [r8, #16]
 80031d6:	4640      	mov	r0, r8
 80031d8:	f001 fa4d 	bl	8004676 <__mcmp>
 80031dc:	2800      	cmp	r0, #0
 80031de:	db25      	blt.n	800322c <quorem+0xf4>
 80031e0:	3501      	adds	r5, #1
 80031e2:	4630      	mov	r0, r6
 80031e4:	f04f 0e00 	mov.w	lr, #0
 80031e8:	f857 2b04 	ldr.w	r2, [r7], #4
 80031ec:	f8d0 c000 	ldr.w	ip, [r0]
 80031f0:	b293      	uxth	r3, r2
 80031f2:	ebae 0303 	sub.w	r3, lr, r3
 80031f6:	0c12      	lsrs	r2, r2, #16
 80031f8:	fa13 f38c 	uxtah	r3, r3, ip
 80031fc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003200:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003204:	b29b      	uxth	r3, r3
 8003206:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800320a:	45b9      	cmp	r9, r7
 800320c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8003210:	f840 3b04 	str.w	r3, [r0], #4
 8003214:	d2e8      	bcs.n	80031e8 <quorem+0xb0>
 8003216:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800321a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800321e:	b92a      	cbnz	r2, 800322c <quorem+0xf4>
 8003220:	3b04      	subs	r3, #4
 8003222:	429e      	cmp	r6, r3
 8003224:	461a      	mov	r2, r3
 8003226:	d30b      	bcc.n	8003240 <quorem+0x108>
 8003228:	f8c8 4010 	str.w	r4, [r8, #16]
 800322c:	4628      	mov	r0, r5
 800322e:	b003      	add	sp, #12
 8003230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003234:	6812      	ldr	r2, [r2, #0]
 8003236:	3b04      	subs	r3, #4
 8003238:	2a00      	cmp	r2, #0
 800323a:	d1ca      	bne.n	80031d2 <quorem+0x9a>
 800323c:	3c01      	subs	r4, #1
 800323e:	e7c5      	b.n	80031cc <quorem+0x94>
 8003240:	6812      	ldr	r2, [r2, #0]
 8003242:	3b04      	subs	r3, #4
 8003244:	2a00      	cmp	r2, #0
 8003246:	d1ef      	bne.n	8003228 <quorem+0xf0>
 8003248:	3c01      	subs	r4, #1
 800324a:	e7ea      	b.n	8003222 <quorem+0xea>
 800324c:	2000      	movs	r0, #0
 800324e:	e7ee      	b.n	800322e <quorem+0xf6>

08003250 <_dtoa_r>:
 8003250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003254:	ec57 6b10 	vmov	r6, r7, d0
 8003258:	b097      	sub	sp, #92	; 0x5c
 800325a:	e9cd 6700 	strd	r6, r7, [sp]
 800325e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003260:	9107      	str	r1, [sp, #28]
 8003262:	4604      	mov	r4, r0
 8003264:	920a      	str	r2, [sp, #40]	; 0x28
 8003266:	930f      	str	r3, [sp, #60]	; 0x3c
 8003268:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800326a:	b93e      	cbnz	r6, 800327c <_dtoa_r+0x2c>
 800326c:	2010      	movs	r0, #16
 800326e:	f000 fdcb 	bl	8003e08 <malloc>
 8003272:	6260      	str	r0, [r4, #36]	; 0x24
 8003274:	6046      	str	r6, [r0, #4]
 8003276:	6086      	str	r6, [r0, #8]
 8003278:	6006      	str	r6, [r0, #0]
 800327a:	60c6      	str	r6, [r0, #12]
 800327c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800327e:	6819      	ldr	r1, [r3, #0]
 8003280:	b151      	cbz	r1, 8003298 <_dtoa_r+0x48>
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	604a      	str	r2, [r1, #4]
 8003286:	2301      	movs	r3, #1
 8003288:	4093      	lsls	r3, r2
 800328a:	608b      	str	r3, [r1, #8]
 800328c:	4620      	mov	r0, r4
 800328e:	f001 f81d 	bl	80042cc <_Bfree>
 8003292:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	9b01      	ldr	r3, [sp, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	bfbf      	itttt	lt
 800329e:	2301      	movlt	r3, #1
 80032a0:	602b      	strlt	r3, [r5, #0]
 80032a2:	9b01      	ldrlt	r3, [sp, #4]
 80032a4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80032a8:	bfb2      	itee	lt
 80032aa:	9301      	strlt	r3, [sp, #4]
 80032ac:	2300      	movge	r3, #0
 80032ae:	602b      	strge	r3, [r5, #0]
 80032b0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80032b4:	4ba8      	ldr	r3, [pc, #672]	; (8003558 <_dtoa_r+0x308>)
 80032b6:	ea33 0308 	bics.w	r3, r3, r8
 80032ba:	d11b      	bne.n	80032f4 <_dtoa_r+0xa4>
 80032bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80032be:	f242 730f 	movw	r3, #9999	; 0x270f
 80032c2:	6013      	str	r3, [r2, #0]
 80032c4:	9b00      	ldr	r3, [sp, #0]
 80032c6:	b923      	cbnz	r3, 80032d2 <_dtoa_r+0x82>
 80032c8:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80032cc:	2800      	cmp	r0, #0
 80032ce:	f000 8578 	beq.w	8003dc2 <_dtoa_r+0xb72>
 80032d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80032d4:	b953      	cbnz	r3, 80032ec <_dtoa_r+0x9c>
 80032d6:	4ba1      	ldr	r3, [pc, #644]	; (800355c <_dtoa_r+0x30c>)
 80032d8:	e021      	b.n	800331e <_dtoa_r+0xce>
 80032da:	4ba1      	ldr	r3, [pc, #644]	; (8003560 <_dtoa_r+0x310>)
 80032dc:	9302      	str	r3, [sp, #8]
 80032de:	3308      	adds	r3, #8
 80032e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80032e2:	6013      	str	r3, [r2, #0]
 80032e4:	9802      	ldr	r0, [sp, #8]
 80032e6:	b017      	add	sp, #92	; 0x5c
 80032e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032ec:	4b9b      	ldr	r3, [pc, #620]	; (800355c <_dtoa_r+0x30c>)
 80032ee:	9302      	str	r3, [sp, #8]
 80032f0:	3303      	adds	r3, #3
 80032f2:	e7f5      	b.n	80032e0 <_dtoa_r+0x90>
 80032f4:	e9dd 6700 	ldrd	r6, r7, [sp]
 80032f8:	2200      	movs	r2, #0
 80032fa:	2300      	movs	r3, #0
 80032fc:	4630      	mov	r0, r6
 80032fe:	4639      	mov	r1, r7
 8003300:	f7fd fbde 	bl	8000ac0 <__aeabi_dcmpeq>
 8003304:	4681      	mov	r9, r0
 8003306:	b160      	cbz	r0, 8003322 <_dtoa_r+0xd2>
 8003308:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800330a:	2301      	movs	r3, #1
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 8553 	beq.w	8003dbc <_dtoa_r+0xb6c>
 8003316:	4b93      	ldr	r3, [pc, #588]	; (8003564 <_dtoa_r+0x314>)
 8003318:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800331a:	6013      	str	r3, [r2, #0]
 800331c:	3b01      	subs	r3, #1
 800331e:	9302      	str	r3, [sp, #8]
 8003320:	e7e0      	b.n	80032e4 <_dtoa_r+0x94>
 8003322:	aa14      	add	r2, sp, #80	; 0x50
 8003324:	a915      	add	r1, sp, #84	; 0x54
 8003326:	ec47 6b10 	vmov	d0, r6, r7
 800332a:	4620      	mov	r0, r4
 800332c:	f001 fa1b 	bl	8004766 <__d2b>
 8003330:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003334:	4682      	mov	sl, r0
 8003336:	2d00      	cmp	r5, #0
 8003338:	d07e      	beq.n	8003438 <_dtoa_r+0x1e8>
 800333a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800333e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003342:	4630      	mov	r0, r6
 8003344:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003348:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800334c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8003350:	2200      	movs	r2, #0
 8003352:	4b85      	ldr	r3, [pc, #532]	; (8003568 <_dtoa_r+0x318>)
 8003354:	f7fc ff98 	bl	8000288 <__aeabi_dsub>
 8003358:	a379      	add	r3, pc, #484	; (adr r3, 8003540 <_dtoa_r+0x2f0>)
 800335a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800335e:	f7fd f947 	bl	80005f0 <__aeabi_dmul>
 8003362:	a379      	add	r3, pc, #484	; (adr r3, 8003548 <_dtoa_r+0x2f8>)
 8003364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003368:	f7fc ff90 	bl	800028c <__adddf3>
 800336c:	4606      	mov	r6, r0
 800336e:	4628      	mov	r0, r5
 8003370:	460f      	mov	r7, r1
 8003372:	f7fd f8d7 	bl	8000524 <__aeabi_i2d>
 8003376:	a376      	add	r3, pc, #472	; (adr r3, 8003550 <_dtoa_r+0x300>)
 8003378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337c:	f7fd f938 	bl	80005f0 <__aeabi_dmul>
 8003380:	4602      	mov	r2, r0
 8003382:	460b      	mov	r3, r1
 8003384:	4630      	mov	r0, r6
 8003386:	4639      	mov	r1, r7
 8003388:	f7fc ff80 	bl	800028c <__adddf3>
 800338c:	4606      	mov	r6, r0
 800338e:	460f      	mov	r7, r1
 8003390:	f7fd fbde 	bl	8000b50 <__aeabi_d2iz>
 8003394:	2200      	movs	r2, #0
 8003396:	4683      	mov	fp, r0
 8003398:	2300      	movs	r3, #0
 800339a:	4630      	mov	r0, r6
 800339c:	4639      	mov	r1, r7
 800339e:	f7fd fb99 	bl	8000ad4 <__aeabi_dcmplt>
 80033a2:	b158      	cbz	r0, 80033bc <_dtoa_r+0x16c>
 80033a4:	4658      	mov	r0, fp
 80033a6:	f7fd f8bd 	bl	8000524 <__aeabi_i2d>
 80033aa:	4602      	mov	r2, r0
 80033ac:	460b      	mov	r3, r1
 80033ae:	4630      	mov	r0, r6
 80033b0:	4639      	mov	r1, r7
 80033b2:	f7fd fb85 	bl	8000ac0 <__aeabi_dcmpeq>
 80033b6:	b908      	cbnz	r0, 80033bc <_dtoa_r+0x16c>
 80033b8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80033bc:	f1bb 0f16 	cmp.w	fp, #22
 80033c0:	d859      	bhi.n	8003476 <_dtoa_r+0x226>
 80033c2:	496a      	ldr	r1, [pc, #424]	; (800356c <_dtoa_r+0x31c>)
 80033c4:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80033c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80033cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80033d0:	f7fd fb9e 	bl	8000b10 <__aeabi_dcmpgt>
 80033d4:	2800      	cmp	r0, #0
 80033d6:	d050      	beq.n	800347a <_dtoa_r+0x22a>
 80033d8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80033dc:	2300      	movs	r3, #0
 80033de:	930e      	str	r3, [sp, #56]	; 0x38
 80033e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80033e2:	1b5d      	subs	r5, r3, r5
 80033e4:	1e6b      	subs	r3, r5, #1
 80033e6:	9306      	str	r3, [sp, #24]
 80033e8:	bf45      	ittet	mi
 80033ea:	f1c5 0301 	rsbmi	r3, r5, #1
 80033ee:	9305      	strmi	r3, [sp, #20]
 80033f0:	2300      	movpl	r3, #0
 80033f2:	2300      	movmi	r3, #0
 80033f4:	bf4c      	ite	mi
 80033f6:	9306      	strmi	r3, [sp, #24]
 80033f8:	9305      	strpl	r3, [sp, #20]
 80033fa:	f1bb 0f00 	cmp.w	fp, #0
 80033fe:	db3e      	blt.n	800347e <_dtoa_r+0x22e>
 8003400:	9b06      	ldr	r3, [sp, #24]
 8003402:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8003406:	445b      	add	r3, fp
 8003408:	9306      	str	r3, [sp, #24]
 800340a:	2300      	movs	r3, #0
 800340c:	9308      	str	r3, [sp, #32]
 800340e:	9b07      	ldr	r3, [sp, #28]
 8003410:	2b09      	cmp	r3, #9
 8003412:	f200 80af 	bhi.w	8003574 <_dtoa_r+0x324>
 8003416:	2b05      	cmp	r3, #5
 8003418:	bfc4      	itt	gt
 800341a:	3b04      	subgt	r3, #4
 800341c:	9307      	strgt	r3, [sp, #28]
 800341e:	9b07      	ldr	r3, [sp, #28]
 8003420:	f1a3 0302 	sub.w	r3, r3, #2
 8003424:	bfcc      	ite	gt
 8003426:	2600      	movgt	r6, #0
 8003428:	2601      	movle	r6, #1
 800342a:	2b03      	cmp	r3, #3
 800342c:	f200 80ae 	bhi.w	800358c <_dtoa_r+0x33c>
 8003430:	e8df f003 	tbb	[pc, r3]
 8003434:	772f8482 	.word	0x772f8482
 8003438:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800343a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800343c:	441d      	add	r5, r3
 800343e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003442:	2b20      	cmp	r3, #32
 8003444:	dd11      	ble.n	800346a <_dtoa_r+0x21a>
 8003446:	9a00      	ldr	r2, [sp, #0]
 8003448:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800344c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003450:	fa22 f000 	lsr.w	r0, r2, r0
 8003454:	fa08 f303 	lsl.w	r3, r8, r3
 8003458:	4318      	orrs	r0, r3
 800345a:	f7fd f853 	bl	8000504 <__aeabi_ui2d>
 800345e:	2301      	movs	r3, #1
 8003460:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003464:	3d01      	subs	r5, #1
 8003466:	9312      	str	r3, [sp, #72]	; 0x48
 8003468:	e772      	b.n	8003350 <_dtoa_r+0x100>
 800346a:	f1c3 0020 	rsb	r0, r3, #32
 800346e:	9b00      	ldr	r3, [sp, #0]
 8003470:	fa03 f000 	lsl.w	r0, r3, r0
 8003474:	e7f1      	b.n	800345a <_dtoa_r+0x20a>
 8003476:	2301      	movs	r3, #1
 8003478:	e7b1      	b.n	80033de <_dtoa_r+0x18e>
 800347a:	900e      	str	r0, [sp, #56]	; 0x38
 800347c:	e7b0      	b.n	80033e0 <_dtoa_r+0x190>
 800347e:	9b05      	ldr	r3, [sp, #20]
 8003480:	eba3 030b 	sub.w	r3, r3, fp
 8003484:	9305      	str	r3, [sp, #20]
 8003486:	f1cb 0300 	rsb	r3, fp, #0
 800348a:	9308      	str	r3, [sp, #32]
 800348c:	2300      	movs	r3, #0
 800348e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003490:	e7bd      	b.n	800340e <_dtoa_r+0x1be>
 8003492:	2301      	movs	r3, #1
 8003494:	9309      	str	r3, [sp, #36]	; 0x24
 8003496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003498:	2b00      	cmp	r3, #0
 800349a:	dd7a      	ble.n	8003592 <_dtoa_r+0x342>
 800349c:	9304      	str	r3, [sp, #16]
 800349e:	9303      	str	r3, [sp, #12]
 80034a0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80034a2:	2200      	movs	r2, #0
 80034a4:	606a      	str	r2, [r5, #4]
 80034a6:	2104      	movs	r1, #4
 80034a8:	f101 0214 	add.w	r2, r1, #20
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d975      	bls.n	800359c <_dtoa_r+0x34c>
 80034b0:	6869      	ldr	r1, [r5, #4]
 80034b2:	4620      	mov	r0, r4
 80034b4:	f000 fed6 	bl	8004264 <_Balloc>
 80034b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034ba:	6028      	str	r0, [r5, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	9302      	str	r3, [sp, #8]
 80034c0:	9b03      	ldr	r3, [sp, #12]
 80034c2:	2b0e      	cmp	r3, #14
 80034c4:	f200 80e5 	bhi.w	8003692 <_dtoa_r+0x442>
 80034c8:	2e00      	cmp	r6, #0
 80034ca:	f000 80e2 	beq.w	8003692 <_dtoa_r+0x442>
 80034ce:	ed9d 7b00 	vldr	d7, [sp]
 80034d2:	f1bb 0f00 	cmp.w	fp, #0
 80034d6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80034da:	dd74      	ble.n	80035c6 <_dtoa_r+0x376>
 80034dc:	4a23      	ldr	r2, [pc, #140]	; (800356c <_dtoa_r+0x31c>)
 80034de:	f00b 030f 	and.w	r3, fp, #15
 80034e2:	ea4f 162b 	mov.w	r6, fp, asr #4
 80034e6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80034ea:	06f0      	lsls	r0, r6, #27
 80034ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80034f0:	d559      	bpl.n	80035a6 <_dtoa_r+0x356>
 80034f2:	4b1f      	ldr	r3, [pc, #124]	; (8003570 <_dtoa_r+0x320>)
 80034f4:	ec51 0b17 	vmov	r0, r1, d7
 80034f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80034fc:	f7fd f9a2 	bl	8000844 <__aeabi_ddiv>
 8003500:	e9cd 0100 	strd	r0, r1, [sp]
 8003504:	f006 060f 	and.w	r6, r6, #15
 8003508:	2503      	movs	r5, #3
 800350a:	4f19      	ldr	r7, [pc, #100]	; (8003570 <_dtoa_r+0x320>)
 800350c:	2e00      	cmp	r6, #0
 800350e:	d14c      	bne.n	80035aa <_dtoa_r+0x35a>
 8003510:	4642      	mov	r2, r8
 8003512:	464b      	mov	r3, r9
 8003514:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003518:	f7fd f994 	bl	8000844 <__aeabi_ddiv>
 800351c:	e9cd 0100 	strd	r0, r1, [sp]
 8003520:	e06a      	b.n	80035f8 <_dtoa_r+0x3a8>
 8003522:	2301      	movs	r3, #1
 8003524:	9309      	str	r3, [sp, #36]	; 0x24
 8003526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003528:	445b      	add	r3, fp
 800352a:	9304      	str	r3, [sp, #16]
 800352c:	3301      	adds	r3, #1
 800352e:	2b01      	cmp	r3, #1
 8003530:	9303      	str	r3, [sp, #12]
 8003532:	bfb8      	it	lt
 8003534:	2301      	movlt	r3, #1
 8003536:	e7b3      	b.n	80034a0 <_dtoa_r+0x250>
 8003538:	2300      	movs	r3, #0
 800353a:	e7ab      	b.n	8003494 <_dtoa_r+0x244>
 800353c:	2300      	movs	r3, #0
 800353e:	e7f1      	b.n	8003524 <_dtoa_r+0x2d4>
 8003540:	636f4361 	.word	0x636f4361
 8003544:	3fd287a7 	.word	0x3fd287a7
 8003548:	8b60c8b3 	.word	0x8b60c8b3
 800354c:	3fc68a28 	.word	0x3fc68a28
 8003550:	509f79fb 	.word	0x509f79fb
 8003554:	3fd34413 	.word	0x3fd34413
 8003558:	7ff00000 	.word	0x7ff00000
 800355c:	08004ff7 	.word	0x08004ff7
 8003560:	08004fee 	.word	0x08004fee
 8003564:	08004fcd 	.word	0x08004fcd
 8003568:	3ff80000 	.word	0x3ff80000
 800356c:	08005028 	.word	0x08005028
 8003570:	08005000 	.word	0x08005000
 8003574:	2601      	movs	r6, #1
 8003576:	2300      	movs	r3, #0
 8003578:	9307      	str	r3, [sp, #28]
 800357a:	9609      	str	r6, [sp, #36]	; 0x24
 800357c:	f04f 33ff 	mov.w	r3, #4294967295
 8003580:	9304      	str	r3, [sp, #16]
 8003582:	9303      	str	r3, [sp, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	2312      	movs	r3, #18
 8003588:	920a      	str	r2, [sp, #40]	; 0x28
 800358a:	e789      	b.n	80034a0 <_dtoa_r+0x250>
 800358c:	2301      	movs	r3, #1
 800358e:	9309      	str	r3, [sp, #36]	; 0x24
 8003590:	e7f4      	b.n	800357c <_dtoa_r+0x32c>
 8003592:	2301      	movs	r3, #1
 8003594:	9304      	str	r3, [sp, #16]
 8003596:	9303      	str	r3, [sp, #12]
 8003598:	461a      	mov	r2, r3
 800359a:	e7f5      	b.n	8003588 <_dtoa_r+0x338>
 800359c:	686a      	ldr	r2, [r5, #4]
 800359e:	3201      	adds	r2, #1
 80035a0:	606a      	str	r2, [r5, #4]
 80035a2:	0049      	lsls	r1, r1, #1
 80035a4:	e780      	b.n	80034a8 <_dtoa_r+0x258>
 80035a6:	2502      	movs	r5, #2
 80035a8:	e7af      	b.n	800350a <_dtoa_r+0x2ba>
 80035aa:	07f1      	lsls	r1, r6, #31
 80035ac:	d508      	bpl.n	80035c0 <_dtoa_r+0x370>
 80035ae:	4640      	mov	r0, r8
 80035b0:	4649      	mov	r1, r9
 80035b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035b6:	f7fd f81b 	bl	80005f0 <__aeabi_dmul>
 80035ba:	3501      	adds	r5, #1
 80035bc:	4680      	mov	r8, r0
 80035be:	4689      	mov	r9, r1
 80035c0:	1076      	asrs	r6, r6, #1
 80035c2:	3708      	adds	r7, #8
 80035c4:	e7a2      	b.n	800350c <_dtoa_r+0x2bc>
 80035c6:	f000 809d 	beq.w	8003704 <_dtoa_r+0x4b4>
 80035ca:	f1cb 0600 	rsb	r6, fp, #0
 80035ce:	4b9f      	ldr	r3, [pc, #636]	; (800384c <_dtoa_r+0x5fc>)
 80035d0:	4f9f      	ldr	r7, [pc, #636]	; (8003850 <_dtoa_r+0x600>)
 80035d2:	f006 020f 	and.w	r2, r6, #15
 80035d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80035da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80035e2:	f7fd f805 	bl	80005f0 <__aeabi_dmul>
 80035e6:	e9cd 0100 	strd	r0, r1, [sp]
 80035ea:	1136      	asrs	r6, r6, #4
 80035ec:	2300      	movs	r3, #0
 80035ee:	2502      	movs	r5, #2
 80035f0:	2e00      	cmp	r6, #0
 80035f2:	d17c      	bne.n	80036ee <_dtoa_r+0x49e>
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d191      	bne.n	800351c <_dtoa_r+0x2cc>
 80035f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 8084 	beq.w	8003708 <_dtoa_r+0x4b8>
 8003600:	e9dd 8900 	ldrd	r8, r9, [sp]
 8003604:	2200      	movs	r2, #0
 8003606:	4b93      	ldr	r3, [pc, #588]	; (8003854 <_dtoa_r+0x604>)
 8003608:	4640      	mov	r0, r8
 800360a:	4649      	mov	r1, r9
 800360c:	f7fd fa62 	bl	8000ad4 <__aeabi_dcmplt>
 8003610:	2800      	cmp	r0, #0
 8003612:	d079      	beq.n	8003708 <_dtoa_r+0x4b8>
 8003614:	9b03      	ldr	r3, [sp, #12]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d076      	beq.n	8003708 <_dtoa_r+0x4b8>
 800361a:	9b04      	ldr	r3, [sp, #16]
 800361c:	2b00      	cmp	r3, #0
 800361e:	dd34      	ble.n	800368a <_dtoa_r+0x43a>
 8003620:	2200      	movs	r2, #0
 8003622:	4b8d      	ldr	r3, [pc, #564]	; (8003858 <_dtoa_r+0x608>)
 8003624:	4640      	mov	r0, r8
 8003626:	4649      	mov	r1, r9
 8003628:	f7fc ffe2 	bl	80005f0 <__aeabi_dmul>
 800362c:	e9cd 0100 	strd	r0, r1, [sp]
 8003630:	9e04      	ldr	r6, [sp, #16]
 8003632:	f10b 37ff 	add.w	r7, fp, #4294967295
 8003636:	3501      	adds	r5, #1
 8003638:	4628      	mov	r0, r5
 800363a:	f7fc ff73 	bl	8000524 <__aeabi_i2d>
 800363e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003642:	f7fc ffd5 	bl	80005f0 <__aeabi_dmul>
 8003646:	2200      	movs	r2, #0
 8003648:	4b84      	ldr	r3, [pc, #528]	; (800385c <_dtoa_r+0x60c>)
 800364a:	f7fc fe1f 	bl	800028c <__adddf3>
 800364e:	4680      	mov	r8, r0
 8003650:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8003654:	2e00      	cmp	r6, #0
 8003656:	d15a      	bne.n	800370e <_dtoa_r+0x4be>
 8003658:	2200      	movs	r2, #0
 800365a:	4b81      	ldr	r3, [pc, #516]	; (8003860 <_dtoa_r+0x610>)
 800365c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003660:	f7fc fe12 	bl	8000288 <__aeabi_dsub>
 8003664:	4642      	mov	r2, r8
 8003666:	464b      	mov	r3, r9
 8003668:	e9cd 0100 	strd	r0, r1, [sp]
 800366c:	f7fd fa50 	bl	8000b10 <__aeabi_dcmpgt>
 8003670:	2800      	cmp	r0, #0
 8003672:	f040 829b 	bne.w	8003bac <_dtoa_r+0x95c>
 8003676:	4642      	mov	r2, r8
 8003678:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800367c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003680:	f7fd fa28 	bl	8000ad4 <__aeabi_dcmplt>
 8003684:	2800      	cmp	r0, #0
 8003686:	f040 828f 	bne.w	8003ba8 <_dtoa_r+0x958>
 800368a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800368e:	e9cd 2300 	strd	r2, r3, [sp]
 8003692:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003694:	2b00      	cmp	r3, #0
 8003696:	f2c0 8150 	blt.w	800393a <_dtoa_r+0x6ea>
 800369a:	f1bb 0f0e 	cmp.w	fp, #14
 800369e:	f300 814c 	bgt.w	800393a <_dtoa_r+0x6ea>
 80036a2:	4b6a      	ldr	r3, [pc, #424]	; (800384c <_dtoa_r+0x5fc>)
 80036a4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80036a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80036ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f280 80da 	bge.w	8003868 <_dtoa_r+0x618>
 80036b4:	9b03      	ldr	r3, [sp, #12]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f300 80d6 	bgt.w	8003868 <_dtoa_r+0x618>
 80036bc:	f040 8273 	bne.w	8003ba6 <_dtoa_r+0x956>
 80036c0:	2200      	movs	r2, #0
 80036c2:	4b67      	ldr	r3, [pc, #412]	; (8003860 <_dtoa_r+0x610>)
 80036c4:	4640      	mov	r0, r8
 80036c6:	4649      	mov	r1, r9
 80036c8:	f7fc ff92 	bl	80005f0 <__aeabi_dmul>
 80036cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80036d0:	f7fd fa14 	bl	8000afc <__aeabi_dcmpge>
 80036d4:	9e03      	ldr	r6, [sp, #12]
 80036d6:	4637      	mov	r7, r6
 80036d8:	2800      	cmp	r0, #0
 80036da:	f040 824a 	bne.w	8003b72 <_dtoa_r+0x922>
 80036de:	9b02      	ldr	r3, [sp, #8]
 80036e0:	9a02      	ldr	r2, [sp, #8]
 80036e2:	1c5d      	adds	r5, r3, #1
 80036e4:	2331      	movs	r3, #49	; 0x31
 80036e6:	7013      	strb	r3, [r2, #0]
 80036e8:	f10b 0b01 	add.w	fp, fp, #1
 80036ec:	e245      	b.n	8003b7a <_dtoa_r+0x92a>
 80036ee:	07f2      	lsls	r2, r6, #31
 80036f0:	d505      	bpl.n	80036fe <_dtoa_r+0x4ae>
 80036f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036f6:	f7fc ff7b 	bl	80005f0 <__aeabi_dmul>
 80036fa:	3501      	adds	r5, #1
 80036fc:	2301      	movs	r3, #1
 80036fe:	1076      	asrs	r6, r6, #1
 8003700:	3708      	adds	r7, #8
 8003702:	e775      	b.n	80035f0 <_dtoa_r+0x3a0>
 8003704:	2502      	movs	r5, #2
 8003706:	e777      	b.n	80035f8 <_dtoa_r+0x3a8>
 8003708:	465f      	mov	r7, fp
 800370a:	9e03      	ldr	r6, [sp, #12]
 800370c:	e794      	b.n	8003638 <_dtoa_r+0x3e8>
 800370e:	9a02      	ldr	r2, [sp, #8]
 8003710:	4b4e      	ldr	r3, [pc, #312]	; (800384c <_dtoa_r+0x5fc>)
 8003712:	4432      	add	r2, r6
 8003714:	9213      	str	r2, [sp, #76]	; 0x4c
 8003716:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003718:	1e71      	subs	r1, r6, #1
 800371a:	2a00      	cmp	r2, #0
 800371c:	d048      	beq.n	80037b0 <_dtoa_r+0x560>
 800371e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003726:	2000      	movs	r0, #0
 8003728:	494e      	ldr	r1, [pc, #312]	; (8003864 <_dtoa_r+0x614>)
 800372a:	f7fd f88b 	bl	8000844 <__aeabi_ddiv>
 800372e:	4642      	mov	r2, r8
 8003730:	464b      	mov	r3, r9
 8003732:	f7fc fda9 	bl	8000288 <__aeabi_dsub>
 8003736:	9d02      	ldr	r5, [sp, #8]
 8003738:	4680      	mov	r8, r0
 800373a:	4689      	mov	r9, r1
 800373c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003740:	f7fd fa06 	bl	8000b50 <__aeabi_d2iz>
 8003744:	4606      	mov	r6, r0
 8003746:	f7fc feed 	bl	8000524 <__aeabi_i2d>
 800374a:	4602      	mov	r2, r0
 800374c:	460b      	mov	r3, r1
 800374e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003752:	f7fc fd99 	bl	8000288 <__aeabi_dsub>
 8003756:	3630      	adds	r6, #48	; 0x30
 8003758:	f805 6b01 	strb.w	r6, [r5], #1
 800375c:	4642      	mov	r2, r8
 800375e:	464b      	mov	r3, r9
 8003760:	e9cd 0100 	strd	r0, r1, [sp]
 8003764:	f7fd f9b6 	bl	8000ad4 <__aeabi_dcmplt>
 8003768:	2800      	cmp	r0, #0
 800376a:	d165      	bne.n	8003838 <_dtoa_r+0x5e8>
 800376c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003770:	2000      	movs	r0, #0
 8003772:	4938      	ldr	r1, [pc, #224]	; (8003854 <_dtoa_r+0x604>)
 8003774:	f7fc fd88 	bl	8000288 <__aeabi_dsub>
 8003778:	4642      	mov	r2, r8
 800377a:	464b      	mov	r3, r9
 800377c:	f7fd f9aa 	bl	8000ad4 <__aeabi_dcmplt>
 8003780:	2800      	cmp	r0, #0
 8003782:	f040 80ba 	bne.w	80038fa <_dtoa_r+0x6aa>
 8003786:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003788:	429d      	cmp	r5, r3
 800378a:	f43f af7e 	beq.w	800368a <_dtoa_r+0x43a>
 800378e:	2200      	movs	r2, #0
 8003790:	4b31      	ldr	r3, [pc, #196]	; (8003858 <_dtoa_r+0x608>)
 8003792:	4640      	mov	r0, r8
 8003794:	4649      	mov	r1, r9
 8003796:	f7fc ff2b 	bl	80005f0 <__aeabi_dmul>
 800379a:	2200      	movs	r2, #0
 800379c:	4680      	mov	r8, r0
 800379e:	4689      	mov	r9, r1
 80037a0:	4b2d      	ldr	r3, [pc, #180]	; (8003858 <_dtoa_r+0x608>)
 80037a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80037a6:	f7fc ff23 	bl	80005f0 <__aeabi_dmul>
 80037aa:	e9cd 0100 	strd	r0, r1, [sp]
 80037ae:	e7c5      	b.n	800373c <_dtoa_r+0x4ec>
 80037b0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80037b4:	4642      	mov	r2, r8
 80037b6:	464b      	mov	r3, r9
 80037b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80037bc:	f7fc ff18 	bl	80005f0 <__aeabi_dmul>
 80037c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80037c4:	9d02      	ldr	r5, [sp, #8]
 80037c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80037ca:	f7fd f9c1 	bl	8000b50 <__aeabi_d2iz>
 80037ce:	4606      	mov	r6, r0
 80037d0:	f7fc fea8 	bl	8000524 <__aeabi_i2d>
 80037d4:	3630      	adds	r6, #48	; 0x30
 80037d6:	4602      	mov	r2, r0
 80037d8:	460b      	mov	r3, r1
 80037da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80037de:	f7fc fd53 	bl	8000288 <__aeabi_dsub>
 80037e2:	f805 6b01 	strb.w	r6, [r5], #1
 80037e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80037e8:	42ab      	cmp	r3, r5
 80037ea:	4680      	mov	r8, r0
 80037ec:	4689      	mov	r9, r1
 80037ee:	f04f 0200 	mov.w	r2, #0
 80037f2:	d125      	bne.n	8003840 <_dtoa_r+0x5f0>
 80037f4:	4b1b      	ldr	r3, [pc, #108]	; (8003864 <_dtoa_r+0x614>)
 80037f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80037fa:	f7fc fd47 	bl	800028c <__adddf3>
 80037fe:	4602      	mov	r2, r0
 8003800:	460b      	mov	r3, r1
 8003802:	4640      	mov	r0, r8
 8003804:	4649      	mov	r1, r9
 8003806:	f7fd f983 	bl	8000b10 <__aeabi_dcmpgt>
 800380a:	2800      	cmp	r0, #0
 800380c:	d175      	bne.n	80038fa <_dtoa_r+0x6aa>
 800380e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003812:	2000      	movs	r0, #0
 8003814:	4913      	ldr	r1, [pc, #76]	; (8003864 <_dtoa_r+0x614>)
 8003816:	f7fc fd37 	bl	8000288 <__aeabi_dsub>
 800381a:	4602      	mov	r2, r0
 800381c:	460b      	mov	r3, r1
 800381e:	4640      	mov	r0, r8
 8003820:	4649      	mov	r1, r9
 8003822:	f7fd f957 	bl	8000ad4 <__aeabi_dcmplt>
 8003826:	2800      	cmp	r0, #0
 8003828:	f43f af2f 	beq.w	800368a <_dtoa_r+0x43a>
 800382c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003830:	2b30      	cmp	r3, #48	; 0x30
 8003832:	f105 32ff 	add.w	r2, r5, #4294967295
 8003836:	d001      	beq.n	800383c <_dtoa_r+0x5ec>
 8003838:	46bb      	mov	fp, r7
 800383a:	e04d      	b.n	80038d8 <_dtoa_r+0x688>
 800383c:	4615      	mov	r5, r2
 800383e:	e7f5      	b.n	800382c <_dtoa_r+0x5dc>
 8003840:	4b05      	ldr	r3, [pc, #20]	; (8003858 <_dtoa_r+0x608>)
 8003842:	f7fc fed5 	bl	80005f0 <__aeabi_dmul>
 8003846:	e9cd 0100 	strd	r0, r1, [sp]
 800384a:	e7bc      	b.n	80037c6 <_dtoa_r+0x576>
 800384c:	08005028 	.word	0x08005028
 8003850:	08005000 	.word	0x08005000
 8003854:	3ff00000 	.word	0x3ff00000
 8003858:	40240000 	.word	0x40240000
 800385c:	401c0000 	.word	0x401c0000
 8003860:	40140000 	.word	0x40140000
 8003864:	3fe00000 	.word	0x3fe00000
 8003868:	e9dd 6700 	ldrd	r6, r7, [sp]
 800386c:	9d02      	ldr	r5, [sp, #8]
 800386e:	4642      	mov	r2, r8
 8003870:	464b      	mov	r3, r9
 8003872:	4630      	mov	r0, r6
 8003874:	4639      	mov	r1, r7
 8003876:	f7fc ffe5 	bl	8000844 <__aeabi_ddiv>
 800387a:	f7fd f969 	bl	8000b50 <__aeabi_d2iz>
 800387e:	9000      	str	r0, [sp, #0]
 8003880:	f7fc fe50 	bl	8000524 <__aeabi_i2d>
 8003884:	4642      	mov	r2, r8
 8003886:	464b      	mov	r3, r9
 8003888:	f7fc feb2 	bl	80005f0 <__aeabi_dmul>
 800388c:	4602      	mov	r2, r0
 800388e:	460b      	mov	r3, r1
 8003890:	4630      	mov	r0, r6
 8003892:	4639      	mov	r1, r7
 8003894:	f7fc fcf8 	bl	8000288 <__aeabi_dsub>
 8003898:	9e00      	ldr	r6, [sp, #0]
 800389a:	9f03      	ldr	r7, [sp, #12]
 800389c:	3630      	adds	r6, #48	; 0x30
 800389e:	f805 6b01 	strb.w	r6, [r5], #1
 80038a2:	9e02      	ldr	r6, [sp, #8]
 80038a4:	1bae      	subs	r6, r5, r6
 80038a6:	42b7      	cmp	r7, r6
 80038a8:	4602      	mov	r2, r0
 80038aa:	460b      	mov	r3, r1
 80038ac:	d138      	bne.n	8003920 <_dtoa_r+0x6d0>
 80038ae:	f7fc fced 	bl	800028c <__adddf3>
 80038b2:	4606      	mov	r6, r0
 80038b4:	460f      	mov	r7, r1
 80038b6:	4602      	mov	r2, r0
 80038b8:	460b      	mov	r3, r1
 80038ba:	4640      	mov	r0, r8
 80038bc:	4649      	mov	r1, r9
 80038be:	f7fd f909 	bl	8000ad4 <__aeabi_dcmplt>
 80038c2:	b9c8      	cbnz	r0, 80038f8 <_dtoa_r+0x6a8>
 80038c4:	4632      	mov	r2, r6
 80038c6:	463b      	mov	r3, r7
 80038c8:	4640      	mov	r0, r8
 80038ca:	4649      	mov	r1, r9
 80038cc:	f7fd f8f8 	bl	8000ac0 <__aeabi_dcmpeq>
 80038d0:	b110      	cbz	r0, 80038d8 <_dtoa_r+0x688>
 80038d2:	9b00      	ldr	r3, [sp, #0]
 80038d4:	07db      	lsls	r3, r3, #31
 80038d6:	d40f      	bmi.n	80038f8 <_dtoa_r+0x6a8>
 80038d8:	4651      	mov	r1, sl
 80038da:	4620      	mov	r0, r4
 80038dc:	f000 fcf6 	bl	80042cc <_Bfree>
 80038e0:	2300      	movs	r3, #0
 80038e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80038e4:	702b      	strb	r3, [r5, #0]
 80038e6:	f10b 0301 	add.w	r3, fp, #1
 80038ea:	6013      	str	r3, [r2, #0]
 80038ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f43f acf8 	beq.w	80032e4 <_dtoa_r+0x94>
 80038f4:	601d      	str	r5, [r3, #0]
 80038f6:	e4f5      	b.n	80032e4 <_dtoa_r+0x94>
 80038f8:	465f      	mov	r7, fp
 80038fa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80038fe:	2a39      	cmp	r2, #57	; 0x39
 8003900:	f105 33ff 	add.w	r3, r5, #4294967295
 8003904:	d106      	bne.n	8003914 <_dtoa_r+0x6c4>
 8003906:	9a02      	ldr	r2, [sp, #8]
 8003908:	429a      	cmp	r2, r3
 800390a:	d107      	bne.n	800391c <_dtoa_r+0x6cc>
 800390c:	2330      	movs	r3, #48	; 0x30
 800390e:	7013      	strb	r3, [r2, #0]
 8003910:	3701      	adds	r7, #1
 8003912:	4613      	mov	r3, r2
 8003914:	781a      	ldrb	r2, [r3, #0]
 8003916:	3201      	adds	r2, #1
 8003918:	701a      	strb	r2, [r3, #0]
 800391a:	e78d      	b.n	8003838 <_dtoa_r+0x5e8>
 800391c:	461d      	mov	r5, r3
 800391e:	e7ec      	b.n	80038fa <_dtoa_r+0x6aa>
 8003920:	2200      	movs	r2, #0
 8003922:	4ba4      	ldr	r3, [pc, #656]	; (8003bb4 <_dtoa_r+0x964>)
 8003924:	f7fc fe64 	bl	80005f0 <__aeabi_dmul>
 8003928:	2200      	movs	r2, #0
 800392a:	2300      	movs	r3, #0
 800392c:	4606      	mov	r6, r0
 800392e:	460f      	mov	r7, r1
 8003930:	f7fd f8c6 	bl	8000ac0 <__aeabi_dcmpeq>
 8003934:	2800      	cmp	r0, #0
 8003936:	d09a      	beq.n	800386e <_dtoa_r+0x61e>
 8003938:	e7ce      	b.n	80038d8 <_dtoa_r+0x688>
 800393a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800393c:	2a00      	cmp	r2, #0
 800393e:	f000 80cd 	beq.w	8003adc <_dtoa_r+0x88c>
 8003942:	9a07      	ldr	r2, [sp, #28]
 8003944:	2a01      	cmp	r2, #1
 8003946:	f300 80af 	bgt.w	8003aa8 <_dtoa_r+0x858>
 800394a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800394c:	2a00      	cmp	r2, #0
 800394e:	f000 80a7 	beq.w	8003aa0 <_dtoa_r+0x850>
 8003952:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003956:	9e08      	ldr	r6, [sp, #32]
 8003958:	9d05      	ldr	r5, [sp, #20]
 800395a:	9a05      	ldr	r2, [sp, #20]
 800395c:	441a      	add	r2, r3
 800395e:	9205      	str	r2, [sp, #20]
 8003960:	9a06      	ldr	r2, [sp, #24]
 8003962:	2101      	movs	r1, #1
 8003964:	441a      	add	r2, r3
 8003966:	4620      	mov	r0, r4
 8003968:	9206      	str	r2, [sp, #24]
 800396a:	f000 fd4f 	bl	800440c <__i2b>
 800396e:	4607      	mov	r7, r0
 8003970:	2d00      	cmp	r5, #0
 8003972:	dd0c      	ble.n	800398e <_dtoa_r+0x73e>
 8003974:	9b06      	ldr	r3, [sp, #24]
 8003976:	2b00      	cmp	r3, #0
 8003978:	dd09      	ble.n	800398e <_dtoa_r+0x73e>
 800397a:	42ab      	cmp	r3, r5
 800397c:	9a05      	ldr	r2, [sp, #20]
 800397e:	bfa8      	it	ge
 8003980:	462b      	movge	r3, r5
 8003982:	1ad2      	subs	r2, r2, r3
 8003984:	9205      	str	r2, [sp, #20]
 8003986:	9a06      	ldr	r2, [sp, #24]
 8003988:	1aed      	subs	r5, r5, r3
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	9306      	str	r3, [sp, #24]
 800398e:	9b08      	ldr	r3, [sp, #32]
 8003990:	b1f3      	cbz	r3, 80039d0 <_dtoa_r+0x780>
 8003992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 80a5 	beq.w	8003ae4 <_dtoa_r+0x894>
 800399a:	2e00      	cmp	r6, #0
 800399c:	dd10      	ble.n	80039c0 <_dtoa_r+0x770>
 800399e:	4639      	mov	r1, r7
 80039a0:	4632      	mov	r2, r6
 80039a2:	4620      	mov	r0, r4
 80039a4:	f000 fdc8 	bl	8004538 <__pow5mult>
 80039a8:	4652      	mov	r2, sl
 80039aa:	4601      	mov	r1, r0
 80039ac:	4607      	mov	r7, r0
 80039ae:	4620      	mov	r0, r4
 80039b0:	f000 fd35 	bl	800441e <__multiply>
 80039b4:	4651      	mov	r1, sl
 80039b6:	4680      	mov	r8, r0
 80039b8:	4620      	mov	r0, r4
 80039ba:	f000 fc87 	bl	80042cc <_Bfree>
 80039be:	46c2      	mov	sl, r8
 80039c0:	9b08      	ldr	r3, [sp, #32]
 80039c2:	1b9a      	subs	r2, r3, r6
 80039c4:	d004      	beq.n	80039d0 <_dtoa_r+0x780>
 80039c6:	4651      	mov	r1, sl
 80039c8:	4620      	mov	r0, r4
 80039ca:	f000 fdb5 	bl	8004538 <__pow5mult>
 80039ce:	4682      	mov	sl, r0
 80039d0:	2101      	movs	r1, #1
 80039d2:	4620      	mov	r0, r4
 80039d4:	f000 fd1a 	bl	800440c <__i2b>
 80039d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80039da:	2b00      	cmp	r3, #0
 80039dc:	4606      	mov	r6, r0
 80039de:	f340 8083 	ble.w	8003ae8 <_dtoa_r+0x898>
 80039e2:	461a      	mov	r2, r3
 80039e4:	4601      	mov	r1, r0
 80039e6:	4620      	mov	r0, r4
 80039e8:	f000 fda6 	bl	8004538 <__pow5mult>
 80039ec:	9b07      	ldr	r3, [sp, #28]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	4606      	mov	r6, r0
 80039f2:	dd7c      	ble.n	8003aee <_dtoa_r+0x89e>
 80039f4:	f04f 0800 	mov.w	r8, #0
 80039f8:	6933      	ldr	r3, [r6, #16]
 80039fa:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80039fe:	6918      	ldr	r0, [r3, #16]
 8003a00:	f000 fcb6 	bl	8004370 <__hi0bits>
 8003a04:	f1c0 0020 	rsb	r0, r0, #32
 8003a08:	9b06      	ldr	r3, [sp, #24]
 8003a0a:	4418      	add	r0, r3
 8003a0c:	f010 001f 	ands.w	r0, r0, #31
 8003a10:	f000 8096 	beq.w	8003b40 <_dtoa_r+0x8f0>
 8003a14:	f1c0 0320 	rsb	r3, r0, #32
 8003a18:	2b04      	cmp	r3, #4
 8003a1a:	f340 8087 	ble.w	8003b2c <_dtoa_r+0x8dc>
 8003a1e:	9b05      	ldr	r3, [sp, #20]
 8003a20:	f1c0 001c 	rsb	r0, r0, #28
 8003a24:	4403      	add	r3, r0
 8003a26:	9305      	str	r3, [sp, #20]
 8003a28:	9b06      	ldr	r3, [sp, #24]
 8003a2a:	4405      	add	r5, r0
 8003a2c:	4403      	add	r3, r0
 8003a2e:	9306      	str	r3, [sp, #24]
 8003a30:	9b05      	ldr	r3, [sp, #20]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	dd05      	ble.n	8003a42 <_dtoa_r+0x7f2>
 8003a36:	4651      	mov	r1, sl
 8003a38:	461a      	mov	r2, r3
 8003a3a:	4620      	mov	r0, r4
 8003a3c:	f000 fdca 	bl	80045d4 <__lshift>
 8003a40:	4682      	mov	sl, r0
 8003a42:	9b06      	ldr	r3, [sp, #24]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	dd05      	ble.n	8003a54 <_dtoa_r+0x804>
 8003a48:	4631      	mov	r1, r6
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	4620      	mov	r0, r4
 8003a4e:	f000 fdc1 	bl	80045d4 <__lshift>
 8003a52:	4606      	mov	r6, r0
 8003a54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d074      	beq.n	8003b44 <_dtoa_r+0x8f4>
 8003a5a:	4631      	mov	r1, r6
 8003a5c:	4650      	mov	r0, sl
 8003a5e:	f000 fe0a 	bl	8004676 <__mcmp>
 8003a62:	2800      	cmp	r0, #0
 8003a64:	da6e      	bge.n	8003b44 <_dtoa_r+0x8f4>
 8003a66:	2300      	movs	r3, #0
 8003a68:	4651      	mov	r1, sl
 8003a6a:	220a      	movs	r2, #10
 8003a6c:	4620      	mov	r0, r4
 8003a6e:	f000 fc44 	bl	80042fa <__multadd>
 8003a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a74:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003a78:	4682      	mov	sl, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 81a8 	beq.w	8003dd0 <_dtoa_r+0xb80>
 8003a80:	2300      	movs	r3, #0
 8003a82:	4639      	mov	r1, r7
 8003a84:	220a      	movs	r2, #10
 8003a86:	4620      	mov	r0, r4
 8003a88:	f000 fc37 	bl	80042fa <__multadd>
 8003a8c:	9b04      	ldr	r3, [sp, #16]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	4607      	mov	r7, r0
 8003a92:	f300 80c8 	bgt.w	8003c26 <_dtoa_r+0x9d6>
 8003a96:	9b07      	ldr	r3, [sp, #28]
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	f340 80c4 	ble.w	8003c26 <_dtoa_r+0x9d6>
 8003a9e:	e059      	b.n	8003b54 <_dtoa_r+0x904>
 8003aa0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003aa2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003aa6:	e756      	b.n	8003956 <_dtoa_r+0x706>
 8003aa8:	9b03      	ldr	r3, [sp, #12]
 8003aaa:	1e5e      	subs	r6, r3, #1
 8003aac:	9b08      	ldr	r3, [sp, #32]
 8003aae:	42b3      	cmp	r3, r6
 8003ab0:	bfbf      	itttt	lt
 8003ab2:	9b08      	ldrlt	r3, [sp, #32]
 8003ab4:	9608      	strlt	r6, [sp, #32]
 8003ab6:	1af2      	sublt	r2, r6, r3
 8003ab8:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8003aba:	bfb6      	itet	lt
 8003abc:	189b      	addlt	r3, r3, r2
 8003abe:	1b9e      	subge	r6, r3, r6
 8003ac0:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8003ac2:	9b03      	ldr	r3, [sp, #12]
 8003ac4:	bfb8      	it	lt
 8003ac6:	2600      	movlt	r6, #0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	bfb9      	ittee	lt
 8003acc:	9b05      	ldrlt	r3, [sp, #20]
 8003ace:	9a03      	ldrlt	r2, [sp, #12]
 8003ad0:	9d05      	ldrge	r5, [sp, #20]
 8003ad2:	9b03      	ldrge	r3, [sp, #12]
 8003ad4:	bfbc      	itt	lt
 8003ad6:	1a9d      	sublt	r5, r3, r2
 8003ad8:	2300      	movlt	r3, #0
 8003ada:	e73e      	b.n	800395a <_dtoa_r+0x70a>
 8003adc:	9e08      	ldr	r6, [sp, #32]
 8003ade:	9d05      	ldr	r5, [sp, #20]
 8003ae0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003ae2:	e745      	b.n	8003970 <_dtoa_r+0x720>
 8003ae4:	9a08      	ldr	r2, [sp, #32]
 8003ae6:	e76e      	b.n	80039c6 <_dtoa_r+0x776>
 8003ae8:	9b07      	ldr	r3, [sp, #28]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	dc19      	bgt.n	8003b22 <_dtoa_r+0x8d2>
 8003aee:	9b00      	ldr	r3, [sp, #0]
 8003af0:	b9bb      	cbnz	r3, 8003b22 <_dtoa_r+0x8d2>
 8003af2:	9b01      	ldr	r3, [sp, #4]
 8003af4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003af8:	b99b      	cbnz	r3, 8003b22 <_dtoa_r+0x8d2>
 8003afa:	9b01      	ldr	r3, [sp, #4]
 8003afc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b00:	0d1b      	lsrs	r3, r3, #20
 8003b02:	051b      	lsls	r3, r3, #20
 8003b04:	b183      	cbz	r3, 8003b28 <_dtoa_r+0x8d8>
 8003b06:	9b05      	ldr	r3, [sp, #20]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	9305      	str	r3, [sp, #20]
 8003b0c:	9b06      	ldr	r3, [sp, #24]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	9306      	str	r3, [sp, #24]
 8003b12:	f04f 0801 	mov.w	r8, #1
 8003b16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f47f af6d 	bne.w	80039f8 <_dtoa_r+0x7a8>
 8003b1e:	2001      	movs	r0, #1
 8003b20:	e772      	b.n	8003a08 <_dtoa_r+0x7b8>
 8003b22:	f04f 0800 	mov.w	r8, #0
 8003b26:	e7f6      	b.n	8003b16 <_dtoa_r+0x8c6>
 8003b28:	4698      	mov	r8, r3
 8003b2a:	e7f4      	b.n	8003b16 <_dtoa_r+0x8c6>
 8003b2c:	d080      	beq.n	8003a30 <_dtoa_r+0x7e0>
 8003b2e:	9a05      	ldr	r2, [sp, #20]
 8003b30:	331c      	adds	r3, #28
 8003b32:	441a      	add	r2, r3
 8003b34:	9205      	str	r2, [sp, #20]
 8003b36:	9a06      	ldr	r2, [sp, #24]
 8003b38:	441a      	add	r2, r3
 8003b3a:	441d      	add	r5, r3
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	e776      	b.n	8003a2e <_dtoa_r+0x7de>
 8003b40:	4603      	mov	r3, r0
 8003b42:	e7f4      	b.n	8003b2e <_dtoa_r+0x8de>
 8003b44:	9b03      	ldr	r3, [sp, #12]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	dc36      	bgt.n	8003bb8 <_dtoa_r+0x968>
 8003b4a:	9b07      	ldr	r3, [sp, #28]
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	dd33      	ble.n	8003bb8 <_dtoa_r+0x968>
 8003b50:	9b03      	ldr	r3, [sp, #12]
 8003b52:	9304      	str	r3, [sp, #16]
 8003b54:	9b04      	ldr	r3, [sp, #16]
 8003b56:	b963      	cbnz	r3, 8003b72 <_dtoa_r+0x922>
 8003b58:	4631      	mov	r1, r6
 8003b5a:	2205      	movs	r2, #5
 8003b5c:	4620      	mov	r0, r4
 8003b5e:	f000 fbcc 	bl	80042fa <__multadd>
 8003b62:	4601      	mov	r1, r0
 8003b64:	4606      	mov	r6, r0
 8003b66:	4650      	mov	r0, sl
 8003b68:	f000 fd85 	bl	8004676 <__mcmp>
 8003b6c:	2800      	cmp	r0, #0
 8003b6e:	f73f adb6 	bgt.w	80036de <_dtoa_r+0x48e>
 8003b72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b74:	9d02      	ldr	r5, [sp, #8]
 8003b76:	ea6f 0b03 	mvn.w	fp, r3
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	9303      	str	r3, [sp, #12]
 8003b7e:	4631      	mov	r1, r6
 8003b80:	4620      	mov	r0, r4
 8003b82:	f000 fba3 	bl	80042cc <_Bfree>
 8003b86:	2f00      	cmp	r7, #0
 8003b88:	f43f aea6 	beq.w	80038d8 <_dtoa_r+0x688>
 8003b8c:	9b03      	ldr	r3, [sp, #12]
 8003b8e:	b12b      	cbz	r3, 8003b9c <_dtoa_r+0x94c>
 8003b90:	42bb      	cmp	r3, r7
 8003b92:	d003      	beq.n	8003b9c <_dtoa_r+0x94c>
 8003b94:	4619      	mov	r1, r3
 8003b96:	4620      	mov	r0, r4
 8003b98:	f000 fb98 	bl	80042cc <_Bfree>
 8003b9c:	4639      	mov	r1, r7
 8003b9e:	4620      	mov	r0, r4
 8003ba0:	f000 fb94 	bl	80042cc <_Bfree>
 8003ba4:	e698      	b.n	80038d8 <_dtoa_r+0x688>
 8003ba6:	2600      	movs	r6, #0
 8003ba8:	4637      	mov	r7, r6
 8003baa:	e7e2      	b.n	8003b72 <_dtoa_r+0x922>
 8003bac:	46bb      	mov	fp, r7
 8003bae:	4637      	mov	r7, r6
 8003bb0:	e595      	b.n	80036de <_dtoa_r+0x48e>
 8003bb2:	bf00      	nop
 8003bb4:	40240000 	.word	0x40240000
 8003bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bba:	bb93      	cbnz	r3, 8003c22 <_dtoa_r+0x9d2>
 8003bbc:	9b03      	ldr	r3, [sp, #12]
 8003bbe:	9304      	str	r3, [sp, #16]
 8003bc0:	9d02      	ldr	r5, [sp, #8]
 8003bc2:	4631      	mov	r1, r6
 8003bc4:	4650      	mov	r0, sl
 8003bc6:	f7ff fab7 	bl	8003138 <quorem>
 8003bca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003bce:	f805 9b01 	strb.w	r9, [r5], #1
 8003bd2:	9b02      	ldr	r3, [sp, #8]
 8003bd4:	9a04      	ldr	r2, [sp, #16]
 8003bd6:	1aeb      	subs	r3, r5, r3
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	f300 80dc 	bgt.w	8003d96 <_dtoa_r+0xb46>
 8003bde:	9b02      	ldr	r3, [sp, #8]
 8003be0:	2a01      	cmp	r2, #1
 8003be2:	bfac      	ite	ge
 8003be4:	189b      	addge	r3, r3, r2
 8003be6:	3301      	addlt	r3, #1
 8003be8:	4698      	mov	r8, r3
 8003bea:	2300      	movs	r3, #0
 8003bec:	9303      	str	r3, [sp, #12]
 8003bee:	4651      	mov	r1, sl
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	f000 fcee 	bl	80045d4 <__lshift>
 8003bf8:	4631      	mov	r1, r6
 8003bfa:	4682      	mov	sl, r0
 8003bfc:	f000 fd3b 	bl	8004676 <__mcmp>
 8003c00:	2800      	cmp	r0, #0
 8003c02:	f300 808d 	bgt.w	8003d20 <_dtoa_r+0xad0>
 8003c06:	d103      	bne.n	8003c10 <_dtoa_r+0x9c0>
 8003c08:	f019 0f01 	tst.w	r9, #1
 8003c0c:	f040 8088 	bne.w	8003d20 <_dtoa_r+0xad0>
 8003c10:	4645      	mov	r5, r8
 8003c12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003c16:	2b30      	cmp	r3, #48	; 0x30
 8003c18:	f105 32ff 	add.w	r2, r5, #4294967295
 8003c1c:	d1af      	bne.n	8003b7e <_dtoa_r+0x92e>
 8003c1e:	4615      	mov	r5, r2
 8003c20:	e7f7      	b.n	8003c12 <_dtoa_r+0x9c2>
 8003c22:	9b03      	ldr	r3, [sp, #12]
 8003c24:	9304      	str	r3, [sp, #16]
 8003c26:	2d00      	cmp	r5, #0
 8003c28:	dd05      	ble.n	8003c36 <_dtoa_r+0x9e6>
 8003c2a:	4639      	mov	r1, r7
 8003c2c:	462a      	mov	r2, r5
 8003c2e:	4620      	mov	r0, r4
 8003c30:	f000 fcd0 	bl	80045d4 <__lshift>
 8003c34:	4607      	mov	r7, r0
 8003c36:	f1b8 0f00 	cmp.w	r8, #0
 8003c3a:	d04c      	beq.n	8003cd6 <_dtoa_r+0xa86>
 8003c3c:	6879      	ldr	r1, [r7, #4]
 8003c3e:	4620      	mov	r0, r4
 8003c40:	f000 fb10 	bl	8004264 <_Balloc>
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	3202      	adds	r2, #2
 8003c48:	4605      	mov	r5, r0
 8003c4a:	0092      	lsls	r2, r2, #2
 8003c4c:	f107 010c 	add.w	r1, r7, #12
 8003c50:	300c      	adds	r0, #12
 8003c52:	f000 faef 	bl	8004234 <memcpy>
 8003c56:	2201      	movs	r2, #1
 8003c58:	4629      	mov	r1, r5
 8003c5a:	4620      	mov	r0, r4
 8003c5c:	f000 fcba 	bl	80045d4 <__lshift>
 8003c60:	9b00      	ldr	r3, [sp, #0]
 8003c62:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8003c66:	9703      	str	r7, [sp, #12]
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	4607      	mov	r7, r0
 8003c6e:	9305      	str	r3, [sp, #20]
 8003c70:	4631      	mov	r1, r6
 8003c72:	4650      	mov	r0, sl
 8003c74:	f7ff fa60 	bl	8003138 <quorem>
 8003c78:	9903      	ldr	r1, [sp, #12]
 8003c7a:	4605      	mov	r5, r0
 8003c7c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003c80:	4650      	mov	r0, sl
 8003c82:	f000 fcf8 	bl	8004676 <__mcmp>
 8003c86:	463a      	mov	r2, r7
 8003c88:	9000      	str	r0, [sp, #0]
 8003c8a:	4631      	mov	r1, r6
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	f000 fd0c 	bl	80046aa <__mdiff>
 8003c92:	68c3      	ldr	r3, [r0, #12]
 8003c94:	4602      	mov	r2, r0
 8003c96:	bb03      	cbnz	r3, 8003cda <_dtoa_r+0xa8a>
 8003c98:	4601      	mov	r1, r0
 8003c9a:	9006      	str	r0, [sp, #24]
 8003c9c:	4650      	mov	r0, sl
 8003c9e:	f000 fcea 	bl	8004676 <__mcmp>
 8003ca2:	9a06      	ldr	r2, [sp, #24]
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	4611      	mov	r1, r2
 8003ca8:	4620      	mov	r0, r4
 8003caa:	9306      	str	r3, [sp, #24]
 8003cac:	f000 fb0e 	bl	80042cc <_Bfree>
 8003cb0:	9b06      	ldr	r3, [sp, #24]
 8003cb2:	b9a3      	cbnz	r3, 8003cde <_dtoa_r+0xa8e>
 8003cb4:	9a07      	ldr	r2, [sp, #28]
 8003cb6:	b992      	cbnz	r2, 8003cde <_dtoa_r+0xa8e>
 8003cb8:	9a05      	ldr	r2, [sp, #20]
 8003cba:	b982      	cbnz	r2, 8003cde <_dtoa_r+0xa8e>
 8003cbc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003cc0:	d029      	beq.n	8003d16 <_dtoa_r+0xac6>
 8003cc2:	9b00      	ldr	r3, [sp, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	dd01      	ble.n	8003ccc <_dtoa_r+0xa7c>
 8003cc8:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8003ccc:	f108 0501 	add.w	r5, r8, #1
 8003cd0:	f888 9000 	strb.w	r9, [r8]
 8003cd4:	e753      	b.n	8003b7e <_dtoa_r+0x92e>
 8003cd6:	4638      	mov	r0, r7
 8003cd8:	e7c2      	b.n	8003c60 <_dtoa_r+0xa10>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e7e3      	b.n	8003ca6 <_dtoa_r+0xa56>
 8003cde:	9a00      	ldr	r2, [sp, #0]
 8003ce0:	2a00      	cmp	r2, #0
 8003ce2:	db04      	blt.n	8003cee <_dtoa_r+0xa9e>
 8003ce4:	d125      	bne.n	8003d32 <_dtoa_r+0xae2>
 8003ce6:	9a07      	ldr	r2, [sp, #28]
 8003ce8:	bb1a      	cbnz	r2, 8003d32 <_dtoa_r+0xae2>
 8003cea:	9a05      	ldr	r2, [sp, #20]
 8003cec:	bb0a      	cbnz	r2, 8003d32 <_dtoa_r+0xae2>
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	ddec      	ble.n	8003ccc <_dtoa_r+0xa7c>
 8003cf2:	4651      	mov	r1, sl
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	4620      	mov	r0, r4
 8003cf8:	f000 fc6c 	bl	80045d4 <__lshift>
 8003cfc:	4631      	mov	r1, r6
 8003cfe:	4682      	mov	sl, r0
 8003d00:	f000 fcb9 	bl	8004676 <__mcmp>
 8003d04:	2800      	cmp	r0, #0
 8003d06:	dc03      	bgt.n	8003d10 <_dtoa_r+0xac0>
 8003d08:	d1e0      	bne.n	8003ccc <_dtoa_r+0xa7c>
 8003d0a:	f019 0f01 	tst.w	r9, #1
 8003d0e:	d0dd      	beq.n	8003ccc <_dtoa_r+0xa7c>
 8003d10:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003d14:	d1d8      	bne.n	8003cc8 <_dtoa_r+0xa78>
 8003d16:	2339      	movs	r3, #57	; 0x39
 8003d18:	f888 3000 	strb.w	r3, [r8]
 8003d1c:	f108 0801 	add.w	r8, r8, #1
 8003d20:	4645      	mov	r5, r8
 8003d22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003d26:	2b39      	cmp	r3, #57	; 0x39
 8003d28:	f105 32ff 	add.w	r2, r5, #4294967295
 8003d2c:	d03b      	beq.n	8003da6 <_dtoa_r+0xb56>
 8003d2e:	3301      	adds	r3, #1
 8003d30:	e040      	b.n	8003db4 <_dtoa_r+0xb64>
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f108 0501 	add.w	r5, r8, #1
 8003d38:	dd05      	ble.n	8003d46 <_dtoa_r+0xaf6>
 8003d3a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003d3e:	d0ea      	beq.n	8003d16 <_dtoa_r+0xac6>
 8003d40:	f109 0901 	add.w	r9, r9, #1
 8003d44:	e7c4      	b.n	8003cd0 <_dtoa_r+0xa80>
 8003d46:	9b02      	ldr	r3, [sp, #8]
 8003d48:	9a04      	ldr	r2, [sp, #16]
 8003d4a:	f805 9c01 	strb.w	r9, [r5, #-1]
 8003d4e:	1aeb      	subs	r3, r5, r3
 8003d50:	4293      	cmp	r3, r2
 8003d52:	46a8      	mov	r8, r5
 8003d54:	f43f af4b 	beq.w	8003bee <_dtoa_r+0x99e>
 8003d58:	4651      	mov	r1, sl
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	220a      	movs	r2, #10
 8003d5e:	4620      	mov	r0, r4
 8003d60:	f000 facb 	bl	80042fa <__multadd>
 8003d64:	9b03      	ldr	r3, [sp, #12]
 8003d66:	9903      	ldr	r1, [sp, #12]
 8003d68:	42bb      	cmp	r3, r7
 8003d6a:	4682      	mov	sl, r0
 8003d6c:	f04f 0300 	mov.w	r3, #0
 8003d70:	f04f 020a 	mov.w	r2, #10
 8003d74:	4620      	mov	r0, r4
 8003d76:	d104      	bne.n	8003d82 <_dtoa_r+0xb32>
 8003d78:	f000 fabf 	bl	80042fa <__multadd>
 8003d7c:	9003      	str	r0, [sp, #12]
 8003d7e:	4607      	mov	r7, r0
 8003d80:	e776      	b.n	8003c70 <_dtoa_r+0xa20>
 8003d82:	f000 faba 	bl	80042fa <__multadd>
 8003d86:	2300      	movs	r3, #0
 8003d88:	9003      	str	r0, [sp, #12]
 8003d8a:	220a      	movs	r2, #10
 8003d8c:	4639      	mov	r1, r7
 8003d8e:	4620      	mov	r0, r4
 8003d90:	f000 fab3 	bl	80042fa <__multadd>
 8003d94:	e7f3      	b.n	8003d7e <_dtoa_r+0xb2e>
 8003d96:	4651      	mov	r1, sl
 8003d98:	2300      	movs	r3, #0
 8003d9a:	220a      	movs	r2, #10
 8003d9c:	4620      	mov	r0, r4
 8003d9e:	f000 faac 	bl	80042fa <__multadd>
 8003da2:	4682      	mov	sl, r0
 8003da4:	e70d      	b.n	8003bc2 <_dtoa_r+0x972>
 8003da6:	9b02      	ldr	r3, [sp, #8]
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d105      	bne.n	8003db8 <_dtoa_r+0xb68>
 8003dac:	9a02      	ldr	r2, [sp, #8]
 8003dae:	f10b 0b01 	add.w	fp, fp, #1
 8003db2:	2331      	movs	r3, #49	; 0x31
 8003db4:	7013      	strb	r3, [r2, #0]
 8003db6:	e6e2      	b.n	8003b7e <_dtoa_r+0x92e>
 8003db8:	4615      	mov	r5, r2
 8003dba:	e7b2      	b.n	8003d22 <_dtoa_r+0xad2>
 8003dbc:	4b09      	ldr	r3, [pc, #36]	; (8003de4 <_dtoa_r+0xb94>)
 8003dbe:	f7ff baae 	b.w	800331e <_dtoa_r+0xce>
 8003dc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f47f aa88 	bne.w	80032da <_dtoa_r+0x8a>
 8003dca:	4b07      	ldr	r3, [pc, #28]	; (8003de8 <_dtoa_r+0xb98>)
 8003dcc:	f7ff baa7 	b.w	800331e <_dtoa_r+0xce>
 8003dd0:	9b04      	ldr	r3, [sp, #16]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f73f aef4 	bgt.w	8003bc0 <_dtoa_r+0x970>
 8003dd8:	9b07      	ldr	r3, [sp, #28]
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	f77f aef0 	ble.w	8003bc0 <_dtoa_r+0x970>
 8003de0:	e6b8      	b.n	8003b54 <_dtoa_r+0x904>
 8003de2:	bf00      	nop
 8003de4:	08004fcc 	.word	0x08004fcc
 8003de8:	08004fee 	.word	0x08004fee

08003dec <_localeconv_r>:
 8003dec:	4b04      	ldr	r3, [pc, #16]	; (8003e00 <_localeconv_r+0x14>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6a18      	ldr	r0, [r3, #32]
 8003df2:	4b04      	ldr	r3, [pc, #16]	; (8003e04 <_localeconv_r+0x18>)
 8003df4:	2800      	cmp	r0, #0
 8003df6:	bf08      	it	eq
 8003df8:	4618      	moveq	r0, r3
 8003dfa:	30f0      	adds	r0, #240	; 0xf0
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	20000004 	.word	0x20000004
 8003e04:	20000508 	.word	0x20000508

08003e08 <malloc>:
 8003e08:	4b02      	ldr	r3, [pc, #8]	; (8003e14 <malloc+0xc>)
 8003e0a:	4601      	mov	r1, r0
 8003e0c:	6818      	ldr	r0, [r3, #0]
 8003e0e:	f000 b803 	b.w	8003e18 <_malloc_r>
 8003e12:	bf00      	nop
 8003e14:	20000004 	.word	0x20000004

08003e18 <_malloc_r>:
 8003e18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e1c:	f101 040b 	add.w	r4, r1, #11
 8003e20:	2c16      	cmp	r4, #22
 8003e22:	4681      	mov	r9, r0
 8003e24:	d907      	bls.n	8003e36 <_malloc_r+0x1e>
 8003e26:	f034 0407 	bics.w	r4, r4, #7
 8003e2a:	d505      	bpl.n	8003e38 <_malloc_r+0x20>
 8003e2c:	230c      	movs	r3, #12
 8003e2e:	f8c9 3000 	str.w	r3, [r9]
 8003e32:	2600      	movs	r6, #0
 8003e34:	e131      	b.n	800409a <_malloc_r+0x282>
 8003e36:	2410      	movs	r4, #16
 8003e38:	428c      	cmp	r4, r1
 8003e3a:	d3f7      	bcc.n	8003e2c <_malloc_r+0x14>
 8003e3c:	4648      	mov	r0, r9
 8003e3e:	f000 fa05 	bl	800424c <__malloc_lock>
 8003e42:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8003e46:	4d9c      	ldr	r5, [pc, #624]	; (80040b8 <_malloc_r+0x2a0>)
 8003e48:	d236      	bcs.n	8003eb8 <_malloc_r+0xa0>
 8003e4a:	f104 0208 	add.w	r2, r4, #8
 8003e4e:	442a      	add	r2, r5
 8003e50:	f1a2 0108 	sub.w	r1, r2, #8
 8003e54:	6856      	ldr	r6, [r2, #4]
 8003e56:	428e      	cmp	r6, r1
 8003e58:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8003e5c:	d102      	bne.n	8003e64 <_malloc_r+0x4c>
 8003e5e:	68d6      	ldr	r6, [r2, #12]
 8003e60:	42b2      	cmp	r2, r6
 8003e62:	d010      	beq.n	8003e86 <_malloc_r+0x6e>
 8003e64:	6873      	ldr	r3, [r6, #4]
 8003e66:	68f2      	ldr	r2, [r6, #12]
 8003e68:	68b1      	ldr	r1, [r6, #8]
 8003e6a:	f023 0303 	bic.w	r3, r3, #3
 8003e6e:	60ca      	str	r2, [r1, #12]
 8003e70:	4433      	add	r3, r6
 8003e72:	6091      	str	r1, [r2, #8]
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	f042 0201 	orr.w	r2, r2, #1
 8003e7a:	605a      	str	r2, [r3, #4]
 8003e7c:	4648      	mov	r0, r9
 8003e7e:	f000 f9eb 	bl	8004258 <__malloc_unlock>
 8003e82:	3608      	adds	r6, #8
 8003e84:	e109      	b.n	800409a <_malloc_r+0x282>
 8003e86:	3302      	adds	r3, #2
 8003e88:	4a8c      	ldr	r2, [pc, #560]	; (80040bc <_malloc_r+0x2a4>)
 8003e8a:	692e      	ldr	r6, [r5, #16]
 8003e8c:	4296      	cmp	r6, r2
 8003e8e:	4611      	mov	r1, r2
 8003e90:	d06d      	beq.n	8003f6e <_malloc_r+0x156>
 8003e92:	6870      	ldr	r0, [r6, #4]
 8003e94:	f020 0003 	bic.w	r0, r0, #3
 8003e98:	1b07      	subs	r7, r0, r4
 8003e9a:	2f0f      	cmp	r7, #15
 8003e9c:	dd47      	ble.n	8003f2e <_malloc_r+0x116>
 8003e9e:	1933      	adds	r3, r6, r4
 8003ea0:	f044 0401 	orr.w	r4, r4, #1
 8003ea4:	6074      	str	r4, [r6, #4]
 8003ea6:	616b      	str	r3, [r5, #20]
 8003ea8:	612b      	str	r3, [r5, #16]
 8003eaa:	60da      	str	r2, [r3, #12]
 8003eac:	609a      	str	r2, [r3, #8]
 8003eae:	f047 0201 	orr.w	r2, r7, #1
 8003eb2:	605a      	str	r2, [r3, #4]
 8003eb4:	5037      	str	r7, [r6, r0]
 8003eb6:	e7e1      	b.n	8003e7c <_malloc_r+0x64>
 8003eb8:	0a63      	lsrs	r3, r4, #9
 8003eba:	d02a      	beq.n	8003f12 <_malloc_r+0xfa>
 8003ebc:	2b04      	cmp	r3, #4
 8003ebe:	d812      	bhi.n	8003ee6 <_malloc_r+0xce>
 8003ec0:	09a3      	lsrs	r3, r4, #6
 8003ec2:	3338      	adds	r3, #56	; 0x38
 8003ec4:	1c5a      	adds	r2, r3, #1
 8003ec6:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8003eca:	f1a2 0008 	sub.w	r0, r2, #8
 8003ece:	6856      	ldr	r6, [r2, #4]
 8003ed0:	4286      	cmp	r6, r0
 8003ed2:	d006      	beq.n	8003ee2 <_malloc_r+0xca>
 8003ed4:	6872      	ldr	r2, [r6, #4]
 8003ed6:	f022 0203 	bic.w	r2, r2, #3
 8003eda:	1b11      	subs	r1, r2, r4
 8003edc:	290f      	cmp	r1, #15
 8003ede:	dd1c      	ble.n	8003f1a <_malloc_r+0x102>
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	e7d0      	b.n	8003e88 <_malloc_r+0x70>
 8003ee6:	2b14      	cmp	r3, #20
 8003ee8:	d801      	bhi.n	8003eee <_malloc_r+0xd6>
 8003eea:	335b      	adds	r3, #91	; 0x5b
 8003eec:	e7ea      	b.n	8003ec4 <_malloc_r+0xac>
 8003eee:	2b54      	cmp	r3, #84	; 0x54
 8003ef0:	d802      	bhi.n	8003ef8 <_malloc_r+0xe0>
 8003ef2:	0b23      	lsrs	r3, r4, #12
 8003ef4:	336e      	adds	r3, #110	; 0x6e
 8003ef6:	e7e5      	b.n	8003ec4 <_malloc_r+0xac>
 8003ef8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8003efc:	d802      	bhi.n	8003f04 <_malloc_r+0xec>
 8003efe:	0be3      	lsrs	r3, r4, #15
 8003f00:	3377      	adds	r3, #119	; 0x77
 8003f02:	e7df      	b.n	8003ec4 <_malloc_r+0xac>
 8003f04:	f240 5254 	movw	r2, #1364	; 0x554
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d804      	bhi.n	8003f16 <_malloc_r+0xfe>
 8003f0c:	0ca3      	lsrs	r3, r4, #18
 8003f0e:	337c      	adds	r3, #124	; 0x7c
 8003f10:	e7d8      	b.n	8003ec4 <_malloc_r+0xac>
 8003f12:	233f      	movs	r3, #63	; 0x3f
 8003f14:	e7d6      	b.n	8003ec4 <_malloc_r+0xac>
 8003f16:	237e      	movs	r3, #126	; 0x7e
 8003f18:	e7d4      	b.n	8003ec4 <_malloc_r+0xac>
 8003f1a:	2900      	cmp	r1, #0
 8003f1c:	68f1      	ldr	r1, [r6, #12]
 8003f1e:	db04      	blt.n	8003f2a <_malloc_r+0x112>
 8003f20:	68b3      	ldr	r3, [r6, #8]
 8003f22:	60d9      	str	r1, [r3, #12]
 8003f24:	608b      	str	r3, [r1, #8]
 8003f26:	18b3      	adds	r3, r6, r2
 8003f28:	e7a4      	b.n	8003e74 <_malloc_r+0x5c>
 8003f2a:	460e      	mov	r6, r1
 8003f2c:	e7d0      	b.n	8003ed0 <_malloc_r+0xb8>
 8003f2e:	2f00      	cmp	r7, #0
 8003f30:	616a      	str	r2, [r5, #20]
 8003f32:	612a      	str	r2, [r5, #16]
 8003f34:	db05      	blt.n	8003f42 <_malloc_r+0x12a>
 8003f36:	4430      	add	r0, r6
 8003f38:	6843      	ldr	r3, [r0, #4]
 8003f3a:	f043 0301 	orr.w	r3, r3, #1
 8003f3e:	6043      	str	r3, [r0, #4]
 8003f40:	e79c      	b.n	8003e7c <_malloc_r+0x64>
 8003f42:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003f46:	d244      	bcs.n	8003fd2 <_malloc_r+0x1ba>
 8003f48:	08c0      	lsrs	r0, r0, #3
 8003f4a:	1087      	asrs	r7, r0, #2
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	fa02 f707 	lsl.w	r7, r2, r7
 8003f52:	686a      	ldr	r2, [r5, #4]
 8003f54:	3001      	adds	r0, #1
 8003f56:	433a      	orrs	r2, r7
 8003f58:	606a      	str	r2, [r5, #4]
 8003f5a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8003f5e:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8003f62:	60b7      	str	r7, [r6, #8]
 8003f64:	3a08      	subs	r2, #8
 8003f66:	60f2      	str	r2, [r6, #12]
 8003f68:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8003f6c:	60fe      	str	r6, [r7, #12]
 8003f6e:	2001      	movs	r0, #1
 8003f70:	109a      	asrs	r2, r3, #2
 8003f72:	fa00 f202 	lsl.w	r2, r0, r2
 8003f76:	6868      	ldr	r0, [r5, #4]
 8003f78:	4282      	cmp	r2, r0
 8003f7a:	f200 80a1 	bhi.w	80040c0 <_malloc_r+0x2a8>
 8003f7e:	4202      	tst	r2, r0
 8003f80:	d106      	bne.n	8003f90 <_malloc_r+0x178>
 8003f82:	f023 0303 	bic.w	r3, r3, #3
 8003f86:	0052      	lsls	r2, r2, #1
 8003f88:	4202      	tst	r2, r0
 8003f8a:	f103 0304 	add.w	r3, r3, #4
 8003f8e:	d0fa      	beq.n	8003f86 <_malloc_r+0x16e>
 8003f90:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8003f94:	46e0      	mov	r8, ip
 8003f96:	469e      	mov	lr, r3
 8003f98:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8003f9c:	4546      	cmp	r6, r8
 8003f9e:	d153      	bne.n	8004048 <_malloc_r+0x230>
 8003fa0:	f10e 0e01 	add.w	lr, lr, #1
 8003fa4:	f01e 0f03 	tst.w	lr, #3
 8003fa8:	f108 0808 	add.w	r8, r8, #8
 8003fac:	d1f4      	bne.n	8003f98 <_malloc_r+0x180>
 8003fae:	0798      	lsls	r0, r3, #30
 8003fb0:	d179      	bne.n	80040a6 <_malloc_r+0x28e>
 8003fb2:	686b      	ldr	r3, [r5, #4]
 8003fb4:	ea23 0302 	bic.w	r3, r3, r2
 8003fb8:	606b      	str	r3, [r5, #4]
 8003fba:	6868      	ldr	r0, [r5, #4]
 8003fbc:	0052      	lsls	r2, r2, #1
 8003fbe:	4282      	cmp	r2, r0
 8003fc0:	d87e      	bhi.n	80040c0 <_malloc_r+0x2a8>
 8003fc2:	2a00      	cmp	r2, #0
 8003fc4:	d07c      	beq.n	80040c0 <_malloc_r+0x2a8>
 8003fc6:	4673      	mov	r3, lr
 8003fc8:	4202      	tst	r2, r0
 8003fca:	d1e1      	bne.n	8003f90 <_malloc_r+0x178>
 8003fcc:	3304      	adds	r3, #4
 8003fce:	0052      	lsls	r2, r2, #1
 8003fd0:	e7fa      	b.n	8003fc8 <_malloc_r+0x1b0>
 8003fd2:	0a42      	lsrs	r2, r0, #9
 8003fd4:	2a04      	cmp	r2, #4
 8003fd6:	d815      	bhi.n	8004004 <_malloc_r+0x1ec>
 8003fd8:	0982      	lsrs	r2, r0, #6
 8003fda:	3238      	adds	r2, #56	; 0x38
 8003fdc:	1c57      	adds	r7, r2, #1
 8003fde:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8003fe2:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8003fe6:	45be      	cmp	lr, r7
 8003fe8:	d126      	bne.n	8004038 <_malloc_r+0x220>
 8003fea:	2001      	movs	r0, #1
 8003fec:	1092      	asrs	r2, r2, #2
 8003fee:	fa00 f202 	lsl.w	r2, r0, r2
 8003ff2:	6868      	ldr	r0, [r5, #4]
 8003ff4:	4310      	orrs	r0, r2
 8003ff6:	6068      	str	r0, [r5, #4]
 8003ff8:	f8c6 e00c 	str.w	lr, [r6, #12]
 8003ffc:	60b7      	str	r7, [r6, #8]
 8003ffe:	f8ce 6008 	str.w	r6, [lr, #8]
 8004002:	e7b3      	b.n	8003f6c <_malloc_r+0x154>
 8004004:	2a14      	cmp	r2, #20
 8004006:	d801      	bhi.n	800400c <_malloc_r+0x1f4>
 8004008:	325b      	adds	r2, #91	; 0x5b
 800400a:	e7e7      	b.n	8003fdc <_malloc_r+0x1c4>
 800400c:	2a54      	cmp	r2, #84	; 0x54
 800400e:	d802      	bhi.n	8004016 <_malloc_r+0x1fe>
 8004010:	0b02      	lsrs	r2, r0, #12
 8004012:	326e      	adds	r2, #110	; 0x6e
 8004014:	e7e2      	b.n	8003fdc <_malloc_r+0x1c4>
 8004016:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800401a:	d802      	bhi.n	8004022 <_malloc_r+0x20a>
 800401c:	0bc2      	lsrs	r2, r0, #15
 800401e:	3277      	adds	r2, #119	; 0x77
 8004020:	e7dc      	b.n	8003fdc <_malloc_r+0x1c4>
 8004022:	f240 5754 	movw	r7, #1364	; 0x554
 8004026:	42ba      	cmp	r2, r7
 8004028:	bf9a      	itte	ls
 800402a:	0c82      	lsrls	r2, r0, #18
 800402c:	327c      	addls	r2, #124	; 0x7c
 800402e:	227e      	movhi	r2, #126	; 0x7e
 8004030:	e7d4      	b.n	8003fdc <_malloc_r+0x1c4>
 8004032:	68bf      	ldr	r7, [r7, #8]
 8004034:	45be      	cmp	lr, r7
 8004036:	d004      	beq.n	8004042 <_malloc_r+0x22a>
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	f022 0203 	bic.w	r2, r2, #3
 800403e:	4290      	cmp	r0, r2
 8004040:	d3f7      	bcc.n	8004032 <_malloc_r+0x21a>
 8004042:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8004046:	e7d7      	b.n	8003ff8 <_malloc_r+0x1e0>
 8004048:	6870      	ldr	r0, [r6, #4]
 800404a:	68f7      	ldr	r7, [r6, #12]
 800404c:	f020 0003 	bic.w	r0, r0, #3
 8004050:	eba0 0a04 	sub.w	sl, r0, r4
 8004054:	f1ba 0f0f 	cmp.w	sl, #15
 8004058:	dd10      	ble.n	800407c <_malloc_r+0x264>
 800405a:	68b2      	ldr	r2, [r6, #8]
 800405c:	1933      	adds	r3, r6, r4
 800405e:	f044 0401 	orr.w	r4, r4, #1
 8004062:	6074      	str	r4, [r6, #4]
 8004064:	60d7      	str	r7, [r2, #12]
 8004066:	60ba      	str	r2, [r7, #8]
 8004068:	f04a 0201 	orr.w	r2, sl, #1
 800406c:	616b      	str	r3, [r5, #20]
 800406e:	612b      	str	r3, [r5, #16]
 8004070:	60d9      	str	r1, [r3, #12]
 8004072:	6099      	str	r1, [r3, #8]
 8004074:	605a      	str	r2, [r3, #4]
 8004076:	f846 a000 	str.w	sl, [r6, r0]
 800407a:	e6ff      	b.n	8003e7c <_malloc_r+0x64>
 800407c:	f1ba 0f00 	cmp.w	sl, #0
 8004080:	db0f      	blt.n	80040a2 <_malloc_r+0x28a>
 8004082:	4430      	add	r0, r6
 8004084:	6843      	ldr	r3, [r0, #4]
 8004086:	f043 0301 	orr.w	r3, r3, #1
 800408a:	6043      	str	r3, [r0, #4]
 800408c:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8004090:	4648      	mov	r0, r9
 8004092:	60df      	str	r7, [r3, #12]
 8004094:	60bb      	str	r3, [r7, #8]
 8004096:	f000 f8df 	bl	8004258 <__malloc_unlock>
 800409a:	4630      	mov	r0, r6
 800409c:	b003      	add	sp, #12
 800409e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040a2:	463e      	mov	r6, r7
 80040a4:	e77a      	b.n	8003f9c <_malloc_r+0x184>
 80040a6:	f85c 0908 	ldr.w	r0, [ip], #-8
 80040aa:	4584      	cmp	ip, r0
 80040ac:	f103 33ff 	add.w	r3, r3, #4294967295
 80040b0:	f43f af7d 	beq.w	8003fae <_malloc_r+0x196>
 80040b4:	e781      	b.n	8003fba <_malloc_r+0x1a2>
 80040b6:	bf00      	nop
 80040b8:	200000f8 	.word	0x200000f8
 80040bc:	20000100 	.word	0x20000100
 80040c0:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80040c4:	f8db 6004 	ldr.w	r6, [fp, #4]
 80040c8:	f026 0603 	bic.w	r6, r6, #3
 80040cc:	42b4      	cmp	r4, r6
 80040ce:	d803      	bhi.n	80040d8 <_malloc_r+0x2c0>
 80040d0:	1b33      	subs	r3, r6, r4
 80040d2:	2b0f      	cmp	r3, #15
 80040d4:	f300 8096 	bgt.w	8004204 <_malloc_r+0x3ec>
 80040d8:	4a4f      	ldr	r2, [pc, #316]	; (8004218 <_malloc_r+0x400>)
 80040da:	6817      	ldr	r7, [r2, #0]
 80040dc:	4a4f      	ldr	r2, [pc, #316]	; (800421c <_malloc_r+0x404>)
 80040de:	6811      	ldr	r1, [r2, #0]
 80040e0:	3710      	adds	r7, #16
 80040e2:	3101      	adds	r1, #1
 80040e4:	eb0b 0306 	add.w	r3, fp, r6
 80040e8:	4427      	add	r7, r4
 80040ea:	d005      	beq.n	80040f8 <_malloc_r+0x2e0>
 80040ec:	494c      	ldr	r1, [pc, #304]	; (8004220 <_malloc_r+0x408>)
 80040ee:	3901      	subs	r1, #1
 80040f0:	440f      	add	r7, r1
 80040f2:	3101      	adds	r1, #1
 80040f4:	4249      	negs	r1, r1
 80040f6:	400f      	ands	r7, r1
 80040f8:	4639      	mov	r1, r7
 80040fa:	4648      	mov	r0, r9
 80040fc:	9201      	str	r2, [sp, #4]
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	f000 fb80 	bl	8004804 <_sbrk_r>
 8004104:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004108:	4680      	mov	r8, r0
 800410a:	d056      	beq.n	80041ba <_malloc_r+0x3a2>
 800410c:	9b00      	ldr	r3, [sp, #0]
 800410e:	9a01      	ldr	r2, [sp, #4]
 8004110:	4283      	cmp	r3, r0
 8004112:	d901      	bls.n	8004118 <_malloc_r+0x300>
 8004114:	45ab      	cmp	fp, r5
 8004116:	d150      	bne.n	80041ba <_malloc_r+0x3a2>
 8004118:	4842      	ldr	r0, [pc, #264]	; (8004224 <_malloc_r+0x40c>)
 800411a:	6801      	ldr	r1, [r0, #0]
 800411c:	4543      	cmp	r3, r8
 800411e:	eb07 0e01 	add.w	lr, r7, r1
 8004122:	f8c0 e000 	str.w	lr, [r0]
 8004126:	4940      	ldr	r1, [pc, #256]	; (8004228 <_malloc_r+0x410>)
 8004128:	4682      	mov	sl, r0
 800412a:	d113      	bne.n	8004154 <_malloc_r+0x33c>
 800412c:	420b      	tst	r3, r1
 800412e:	d111      	bne.n	8004154 <_malloc_r+0x33c>
 8004130:	68ab      	ldr	r3, [r5, #8]
 8004132:	443e      	add	r6, r7
 8004134:	f046 0601 	orr.w	r6, r6, #1
 8004138:	605e      	str	r6, [r3, #4]
 800413a:	4a3c      	ldr	r2, [pc, #240]	; (800422c <_malloc_r+0x414>)
 800413c:	f8da 3000 	ldr.w	r3, [sl]
 8004140:	6811      	ldr	r1, [r2, #0]
 8004142:	428b      	cmp	r3, r1
 8004144:	bf88      	it	hi
 8004146:	6013      	strhi	r3, [r2, #0]
 8004148:	4a39      	ldr	r2, [pc, #228]	; (8004230 <_malloc_r+0x418>)
 800414a:	6811      	ldr	r1, [r2, #0]
 800414c:	428b      	cmp	r3, r1
 800414e:	bf88      	it	hi
 8004150:	6013      	strhi	r3, [r2, #0]
 8004152:	e032      	b.n	80041ba <_malloc_r+0x3a2>
 8004154:	6810      	ldr	r0, [r2, #0]
 8004156:	3001      	adds	r0, #1
 8004158:	bf1b      	ittet	ne
 800415a:	eba8 0303 	subne.w	r3, r8, r3
 800415e:	4473      	addne	r3, lr
 8004160:	f8c2 8000 	streq.w	r8, [r2]
 8004164:	f8ca 3000 	strne.w	r3, [sl]
 8004168:	f018 0007 	ands.w	r0, r8, #7
 800416c:	bf1c      	itt	ne
 800416e:	f1c0 0008 	rsbne	r0, r0, #8
 8004172:	4480      	addne	r8, r0
 8004174:	4b2a      	ldr	r3, [pc, #168]	; (8004220 <_malloc_r+0x408>)
 8004176:	4447      	add	r7, r8
 8004178:	4418      	add	r0, r3
 800417a:	400f      	ands	r7, r1
 800417c:	1bc7      	subs	r7, r0, r7
 800417e:	4639      	mov	r1, r7
 8004180:	4648      	mov	r0, r9
 8004182:	f000 fb3f 	bl	8004804 <_sbrk_r>
 8004186:	1c43      	adds	r3, r0, #1
 8004188:	bf08      	it	eq
 800418a:	4640      	moveq	r0, r8
 800418c:	f8da 3000 	ldr.w	r3, [sl]
 8004190:	f8c5 8008 	str.w	r8, [r5, #8]
 8004194:	bf08      	it	eq
 8004196:	2700      	moveq	r7, #0
 8004198:	eba0 0008 	sub.w	r0, r0, r8
 800419c:	443b      	add	r3, r7
 800419e:	4407      	add	r7, r0
 80041a0:	f047 0701 	orr.w	r7, r7, #1
 80041a4:	45ab      	cmp	fp, r5
 80041a6:	f8ca 3000 	str.w	r3, [sl]
 80041aa:	f8c8 7004 	str.w	r7, [r8, #4]
 80041ae:	d0c4      	beq.n	800413a <_malloc_r+0x322>
 80041b0:	2e0f      	cmp	r6, #15
 80041b2:	d810      	bhi.n	80041d6 <_malloc_r+0x3be>
 80041b4:	2301      	movs	r3, #1
 80041b6:	f8c8 3004 	str.w	r3, [r8, #4]
 80041ba:	68ab      	ldr	r3, [r5, #8]
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	f022 0203 	bic.w	r2, r2, #3
 80041c2:	4294      	cmp	r4, r2
 80041c4:	eba2 0304 	sub.w	r3, r2, r4
 80041c8:	d801      	bhi.n	80041ce <_malloc_r+0x3b6>
 80041ca:	2b0f      	cmp	r3, #15
 80041cc:	dc1a      	bgt.n	8004204 <_malloc_r+0x3ec>
 80041ce:	4648      	mov	r0, r9
 80041d0:	f000 f842 	bl	8004258 <__malloc_unlock>
 80041d4:	e62d      	b.n	8003e32 <_malloc_r+0x1a>
 80041d6:	f8db 3004 	ldr.w	r3, [fp, #4]
 80041da:	3e0c      	subs	r6, #12
 80041dc:	f026 0607 	bic.w	r6, r6, #7
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	4333      	orrs	r3, r6
 80041e6:	f8cb 3004 	str.w	r3, [fp, #4]
 80041ea:	eb0b 0306 	add.w	r3, fp, r6
 80041ee:	2205      	movs	r2, #5
 80041f0:	2e0f      	cmp	r6, #15
 80041f2:	605a      	str	r2, [r3, #4]
 80041f4:	609a      	str	r2, [r3, #8]
 80041f6:	d9a0      	bls.n	800413a <_malloc_r+0x322>
 80041f8:	f10b 0108 	add.w	r1, fp, #8
 80041fc:	4648      	mov	r0, r9
 80041fe:	f000 fc0f 	bl	8004a20 <_free_r>
 8004202:	e79a      	b.n	800413a <_malloc_r+0x322>
 8004204:	68ae      	ldr	r6, [r5, #8]
 8004206:	f044 0201 	orr.w	r2, r4, #1
 800420a:	4434      	add	r4, r6
 800420c:	f043 0301 	orr.w	r3, r3, #1
 8004210:	6072      	str	r2, [r6, #4]
 8004212:	60ac      	str	r4, [r5, #8]
 8004214:	6063      	str	r3, [r4, #4]
 8004216:	e631      	b.n	8003e7c <_malloc_r+0x64>
 8004218:	200006c0 	.word	0x200006c0
 800421c:	20000500 	.word	0x20000500
 8004220:	00000080 	.word	0x00000080
 8004224:	20000690 	.word	0x20000690
 8004228:	0000007f 	.word	0x0000007f
 800422c:	200006b8 	.word	0x200006b8
 8004230:	200006bc 	.word	0x200006bc

08004234 <memcpy>:
 8004234:	b510      	push	{r4, lr}
 8004236:	1e43      	subs	r3, r0, #1
 8004238:	440a      	add	r2, r1
 800423a:	4291      	cmp	r1, r2
 800423c:	d100      	bne.n	8004240 <memcpy+0xc>
 800423e:	bd10      	pop	{r4, pc}
 8004240:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004244:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004248:	e7f7      	b.n	800423a <memcpy+0x6>
	...

0800424c <__malloc_lock>:
 800424c:	4801      	ldr	r0, [pc, #4]	; (8004254 <__malloc_lock+0x8>)
 800424e:	f000 bca3 	b.w	8004b98 <__retarget_lock_acquire_recursive>
 8004252:	bf00      	nop
 8004254:	20000758 	.word	0x20000758

08004258 <__malloc_unlock>:
 8004258:	4801      	ldr	r0, [pc, #4]	; (8004260 <__malloc_unlock+0x8>)
 800425a:	f000 bc9e 	b.w	8004b9a <__retarget_lock_release_recursive>
 800425e:	bf00      	nop
 8004260:	20000758 	.word	0x20000758

08004264 <_Balloc>:
 8004264:	b570      	push	{r4, r5, r6, lr}
 8004266:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004268:	4604      	mov	r4, r0
 800426a:	460e      	mov	r6, r1
 800426c:	b93d      	cbnz	r5, 800427e <_Balloc+0x1a>
 800426e:	2010      	movs	r0, #16
 8004270:	f7ff fdca 	bl	8003e08 <malloc>
 8004274:	6260      	str	r0, [r4, #36]	; 0x24
 8004276:	6045      	str	r5, [r0, #4]
 8004278:	6085      	str	r5, [r0, #8]
 800427a:	6005      	str	r5, [r0, #0]
 800427c:	60c5      	str	r5, [r0, #12]
 800427e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004280:	68eb      	ldr	r3, [r5, #12]
 8004282:	b183      	cbz	r3, 80042a6 <_Balloc+0x42>
 8004284:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800428c:	b9b8      	cbnz	r0, 80042be <_Balloc+0x5a>
 800428e:	2101      	movs	r1, #1
 8004290:	fa01 f506 	lsl.w	r5, r1, r6
 8004294:	1d6a      	adds	r2, r5, #5
 8004296:	0092      	lsls	r2, r2, #2
 8004298:	4620      	mov	r0, r4
 800429a:	f000 fb3d 	bl	8004918 <_calloc_r>
 800429e:	b160      	cbz	r0, 80042ba <_Balloc+0x56>
 80042a0:	6046      	str	r6, [r0, #4]
 80042a2:	6085      	str	r5, [r0, #8]
 80042a4:	e00e      	b.n	80042c4 <_Balloc+0x60>
 80042a6:	2221      	movs	r2, #33	; 0x21
 80042a8:	2104      	movs	r1, #4
 80042aa:	4620      	mov	r0, r4
 80042ac:	f000 fb34 	bl	8004918 <_calloc_r>
 80042b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042b2:	60e8      	str	r0, [r5, #12]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1e4      	bne.n	8004284 <_Balloc+0x20>
 80042ba:	2000      	movs	r0, #0
 80042bc:	bd70      	pop	{r4, r5, r6, pc}
 80042be:	6802      	ldr	r2, [r0, #0]
 80042c0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80042c4:	2300      	movs	r3, #0
 80042c6:	6103      	str	r3, [r0, #16]
 80042c8:	60c3      	str	r3, [r0, #12]
 80042ca:	bd70      	pop	{r4, r5, r6, pc}

080042cc <_Bfree>:
 80042cc:	b570      	push	{r4, r5, r6, lr}
 80042ce:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80042d0:	4606      	mov	r6, r0
 80042d2:	460d      	mov	r5, r1
 80042d4:	b93c      	cbnz	r4, 80042e6 <_Bfree+0x1a>
 80042d6:	2010      	movs	r0, #16
 80042d8:	f7ff fd96 	bl	8003e08 <malloc>
 80042dc:	6270      	str	r0, [r6, #36]	; 0x24
 80042de:	6044      	str	r4, [r0, #4]
 80042e0:	6084      	str	r4, [r0, #8]
 80042e2:	6004      	str	r4, [r0, #0]
 80042e4:	60c4      	str	r4, [r0, #12]
 80042e6:	b13d      	cbz	r5, 80042f8 <_Bfree+0x2c>
 80042e8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80042ea:	686a      	ldr	r2, [r5, #4]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80042f2:	6029      	str	r1, [r5, #0]
 80042f4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80042f8:	bd70      	pop	{r4, r5, r6, pc}

080042fa <__multadd>:
 80042fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042fe:	690d      	ldr	r5, [r1, #16]
 8004300:	461f      	mov	r7, r3
 8004302:	4606      	mov	r6, r0
 8004304:	460c      	mov	r4, r1
 8004306:	f101 0e14 	add.w	lr, r1, #20
 800430a:	2300      	movs	r3, #0
 800430c:	f8de 0000 	ldr.w	r0, [lr]
 8004310:	b281      	uxth	r1, r0
 8004312:	fb02 7101 	mla	r1, r2, r1, r7
 8004316:	0c0f      	lsrs	r7, r1, #16
 8004318:	0c00      	lsrs	r0, r0, #16
 800431a:	fb02 7000 	mla	r0, r2, r0, r7
 800431e:	b289      	uxth	r1, r1
 8004320:	3301      	adds	r3, #1
 8004322:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004326:	429d      	cmp	r5, r3
 8004328:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800432c:	f84e 1b04 	str.w	r1, [lr], #4
 8004330:	dcec      	bgt.n	800430c <__multadd+0x12>
 8004332:	b1d7      	cbz	r7, 800436a <__multadd+0x70>
 8004334:	68a3      	ldr	r3, [r4, #8]
 8004336:	429d      	cmp	r5, r3
 8004338:	db12      	blt.n	8004360 <__multadd+0x66>
 800433a:	6861      	ldr	r1, [r4, #4]
 800433c:	4630      	mov	r0, r6
 800433e:	3101      	adds	r1, #1
 8004340:	f7ff ff90 	bl	8004264 <_Balloc>
 8004344:	6922      	ldr	r2, [r4, #16]
 8004346:	3202      	adds	r2, #2
 8004348:	f104 010c 	add.w	r1, r4, #12
 800434c:	4680      	mov	r8, r0
 800434e:	0092      	lsls	r2, r2, #2
 8004350:	300c      	adds	r0, #12
 8004352:	f7ff ff6f 	bl	8004234 <memcpy>
 8004356:	4621      	mov	r1, r4
 8004358:	4630      	mov	r0, r6
 800435a:	f7ff ffb7 	bl	80042cc <_Bfree>
 800435e:	4644      	mov	r4, r8
 8004360:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004364:	3501      	adds	r5, #1
 8004366:	615f      	str	r7, [r3, #20]
 8004368:	6125      	str	r5, [r4, #16]
 800436a:	4620      	mov	r0, r4
 800436c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004370 <__hi0bits>:
 8004370:	0c02      	lsrs	r2, r0, #16
 8004372:	0412      	lsls	r2, r2, #16
 8004374:	4603      	mov	r3, r0
 8004376:	b9b2      	cbnz	r2, 80043a6 <__hi0bits+0x36>
 8004378:	0403      	lsls	r3, r0, #16
 800437a:	2010      	movs	r0, #16
 800437c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004380:	bf04      	itt	eq
 8004382:	021b      	lsleq	r3, r3, #8
 8004384:	3008      	addeq	r0, #8
 8004386:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800438a:	bf04      	itt	eq
 800438c:	011b      	lsleq	r3, r3, #4
 800438e:	3004      	addeq	r0, #4
 8004390:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004394:	bf04      	itt	eq
 8004396:	009b      	lsleq	r3, r3, #2
 8004398:	3002      	addeq	r0, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	db06      	blt.n	80043ac <__hi0bits+0x3c>
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	d503      	bpl.n	80043aa <__hi0bits+0x3a>
 80043a2:	3001      	adds	r0, #1
 80043a4:	4770      	bx	lr
 80043a6:	2000      	movs	r0, #0
 80043a8:	e7e8      	b.n	800437c <__hi0bits+0xc>
 80043aa:	2020      	movs	r0, #32
 80043ac:	4770      	bx	lr

080043ae <__lo0bits>:
 80043ae:	6803      	ldr	r3, [r0, #0]
 80043b0:	f013 0207 	ands.w	r2, r3, #7
 80043b4:	4601      	mov	r1, r0
 80043b6:	d00b      	beq.n	80043d0 <__lo0bits+0x22>
 80043b8:	07da      	lsls	r2, r3, #31
 80043ba:	d423      	bmi.n	8004404 <__lo0bits+0x56>
 80043bc:	0798      	lsls	r0, r3, #30
 80043be:	bf49      	itett	mi
 80043c0:	085b      	lsrmi	r3, r3, #1
 80043c2:	089b      	lsrpl	r3, r3, #2
 80043c4:	2001      	movmi	r0, #1
 80043c6:	600b      	strmi	r3, [r1, #0]
 80043c8:	bf5c      	itt	pl
 80043ca:	600b      	strpl	r3, [r1, #0]
 80043cc:	2002      	movpl	r0, #2
 80043ce:	4770      	bx	lr
 80043d0:	b298      	uxth	r0, r3
 80043d2:	b9a8      	cbnz	r0, 8004400 <__lo0bits+0x52>
 80043d4:	0c1b      	lsrs	r3, r3, #16
 80043d6:	2010      	movs	r0, #16
 80043d8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80043dc:	bf04      	itt	eq
 80043de:	0a1b      	lsreq	r3, r3, #8
 80043e0:	3008      	addeq	r0, #8
 80043e2:	071a      	lsls	r2, r3, #28
 80043e4:	bf04      	itt	eq
 80043e6:	091b      	lsreq	r3, r3, #4
 80043e8:	3004      	addeq	r0, #4
 80043ea:	079a      	lsls	r2, r3, #30
 80043ec:	bf04      	itt	eq
 80043ee:	089b      	lsreq	r3, r3, #2
 80043f0:	3002      	addeq	r0, #2
 80043f2:	07da      	lsls	r2, r3, #31
 80043f4:	d402      	bmi.n	80043fc <__lo0bits+0x4e>
 80043f6:	085b      	lsrs	r3, r3, #1
 80043f8:	d006      	beq.n	8004408 <__lo0bits+0x5a>
 80043fa:	3001      	adds	r0, #1
 80043fc:	600b      	str	r3, [r1, #0]
 80043fe:	4770      	bx	lr
 8004400:	4610      	mov	r0, r2
 8004402:	e7e9      	b.n	80043d8 <__lo0bits+0x2a>
 8004404:	2000      	movs	r0, #0
 8004406:	4770      	bx	lr
 8004408:	2020      	movs	r0, #32
 800440a:	4770      	bx	lr

0800440c <__i2b>:
 800440c:	b510      	push	{r4, lr}
 800440e:	460c      	mov	r4, r1
 8004410:	2101      	movs	r1, #1
 8004412:	f7ff ff27 	bl	8004264 <_Balloc>
 8004416:	2201      	movs	r2, #1
 8004418:	6144      	str	r4, [r0, #20]
 800441a:	6102      	str	r2, [r0, #16]
 800441c:	bd10      	pop	{r4, pc}

0800441e <__multiply>:
 800441e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004422:	4614      	mov	r4, r2
 8004424:	690a      	ldr	r2, [r1, #16]
 8004426:	6923      	ldr	r3, [r4, #16]
 8004428:	429a      	cmp	r2, r3
 800442a:	bfb8      	it	lt
 800442c:	460b      	movlt	r3, r1
 800442e:	4689      	mov	r9, r1
 8004430:	bfbc      	itt	lt
 8004432:	46a1      	movlt	r9, r4
 8004434:	461c      	movlt	r4, r3
 8004436:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800443a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800443e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004442:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004446:	eb07 060a 	add.w	r6, r7, sl
 800444a:	429e      	cmp	r6, r3
 800444c:	bfc8      	it	gt
 800444e:	3101      	addgt	r1, #1
 8004450:	f7ff ff08 	bl	8004264 <_Balloc>
 8004454:	f100 0514 	add.w	r5, r0, #20
 8004458:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800445c:	462b      	mov	r3, r5
 800445e:	2200      	movs	r2, #0
 8004460:	4543      	cmp	r3, r8
 8004462:	d316      	bcc.n	8004492 <__multiply+0x74>
 8004464:	f104 0214 	add.w	r2, r4, #20
 8004468:	f109 0114 	add.w	r1, r9, #20
 800446c:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8004470:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004474:	9301      	str	r3, [sp, #4]
 8004476:	9c01      	ldr	r4, [sp, #4]
 8004478:	4294      	cmp	r4, r2
 800447a:	4613      	mov	r3, r2
 800447c:	d80c      	bhi.n	8004498 <__multiply+0x7a>
 800447e:	2e00      	cmp	r6, #0
 8004480:	dd03      	ble.n	800448a <__multiply+0x6c>
 8004482:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004486:	2b00      	cmp	r3, #0
 8004488:	d054      	beq.n	8004534 <__multiply+0x116>
 800448a:	6106      	str	r6, [r0, #16]
 800448c:	b003      	add	sp, #12
 800448e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004492:	f843 2b04 	str.w	r2, [r3], #4
 8004496:	e7e3      	b.n	8004460 <__multiply+0x42>
 8004498:	f8b3 a000 	ldrh.w	sl, [r3]
 800449c:	3204      	adds	r2, #4
 800449e:	f1ba 0f00 	cmp.w	sl, #0
 80044a2:	d020      	beq.n	80044e6 <__multiply+0xc8>
 80044a4:	46ae      	mov	lr, r5
 80044a6:	4689      	mov	r9, r1
 80044a8:	f04f 0c00 	mov.w	ip, #0
 80044ac:	f859 4b04 	ldr.w	r4, [r9], #4
 80044b0:	f8be b000 	ldrh.w	fp, [lr]
 80044b4:	b2a3      	uxth	r3, r4
 80044b6:	fb0a b303 	mla	r3, sl, r3, fp
 80044ba:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 80044be:	f8de 4000 	ldr.w	r4, [lr]
 80044c2:	4463      	add	r3, ip
 80044c4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80044c8:	fb0a c40b 	mla	r4, sl, fp, ip
 80044cc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80044d6:	454f      	cmp	r7, r9
 80044d8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80044dc:	f84e 3b04 	str.w	r3, [lr], #4
 80044e0:	d8e4      	bhi.n	80044ac <__multiply+0x8e>
 80044e2:	f8ce c000 	str.w	ip, [lr]
 80044e6:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 80044ea:	f1b9 0f00 	cmp.w	r9, #0
 80044ee:	d01f      	beq.n	8004530 <__multiply+0x112>
 80044f0:	682b      	ldr	r3, [r5, #0]
 80044f2:	46ae      	mov	lr, r5
 80044f4:	468c      	mov	ip, r1
 80044f6:	f04f 0a00 	mov.w	sl, #0
 80044fa:	f8bc 4000 	ldrh.w	r4, [ip]
 80044fe:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004502:	fb09 b404 	mla	r4, r9, r4, fp
 8004506:	44a2      	add	sl, r4
 8004508:	b29b      	uxth	r3, r3
 800450a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800450e:	f84e 3b04 	str.w	r3, [lr], #4
 8004512:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004516:	f8be 4000 	ldrh.w	r4, [lr]
 800451a:	0c1b      	lsrs	r3, r3, #16
 800451c:	fb09 4303 	mla	r3, r9, r3, r4
 8004520:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8004524:	4567      	cmp	r7, ip
 8004526:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800452a:	d8e6      	bhi.n	80044fa <__multiply+0xdc>
 800452c:	f8ce 3000 	str.w	r3, [lr]
 8004530:	3504      	adds	r5, #4
 8004532:	e7a0      	b.n	8004476 <__multiply+0x58>
 8004534:	3e01      	subs	r6, #1
 8004536:	e7a2      	b.n	800447e <__multiply+0x60>

08004538 <__pow5mult>:
 8004538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800453c:	4615      	mov	r5, r2
 800453e:	f012 0203 	ands.w	r2, r2, #3
 8004542:	4606      	mov	r6, r0
 8004544:	460f      	mov	r7, r1
 8004546:	d007      	beq.n	8004558 <__pow5mult+0x20>
 8004548:	3a01      	subs	r2, #1
 800454a:	4c21      	ldr	r4, [pc, #132]	; (80045d0 <__pow5mult+0x98>)
 800454c:	2300      	movs	r3, #0
 800454e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004552:	f7ff fed2 	bl	80042fa <__multadd>
 8004556:	4607      	mov	r7, r0
 8004558:	10ad      	asrs	r5, r5, #2
 800455a:	d035      	beq.n	80045c8 <__pow5mult+0x90>
 800455c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800455e:	b93c      	cbnz	r4, 8004570 <__pow5mult+0x38>
 8004560:	2010      	movs	r0, #16
 8004562:	f7ff fc51 	bl	8003e08 <malloc>
 8004566:	6270      	str	r0, [r6, #36]	; 0x24
 8004568:	6044      	str	r4, [r0, #4]
 800456a:	6084      	str	r4, [r0, #8]
 800456c:	6004      	str	r4, [r0, #0]
 800456e:	60c4      	str	r4, [r0, #12]
 8004570:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004574:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004578:	b94c      	cbnz	r4, 800458e <__pow5mult+0x56>
 800457a:	f240 2171 	movw	r1, #625	; 0x271
 800457e:	4630      	mov	r0, r6
 8004580:	f7ff ff44 	bl	800440c <__i2b>
 8004584:	2300      	movs	r3, #0
 8004586:	f8c8 0008 	str.w	r0, [r8, #8]
 800458a:	4604      	mov	r4, r0
 800458c:	6003      	str	r3, [r0, #0]
 800458e:	f04f 0800 	mov.w	r8, #0
 8004592:	07eb      	lsls	r3, r5, #31
 8004594:	d50a      	bpl.n	80045ac <__pow5mult+0x74>
 8004596:	4639      	mov	r1, r7
 8004598:	4622      	mov	r2, r4
 800459a:	4630      	mov	r0, r6
 800459c:	f7ff ff3f 	bl	800441e <__multiply>
 80045a0:	4639      	mov	r1, r7
 80045a2:	4681      	mov	r9, r0
 80045a4:	4630      	mov	r0, r6
 80045a6:	f7ff fe91 	bl	80042cc <_Bfree>
 80045aa:	464f      	mov	r7, r9
 80045ac:	106d      	asrs	r5, r5, #1
 80045ae:	d00b      	beq.n	80045c8 <__pow5mult+0x90>
 80045b0:	6820      	ldr	r0, [r4, #0]
 80045b2:	b938      	cbnz	r0, 80045c4 <__pow5mult+0x8c>
 80045b4:	4622      	mov	r2, r4
 80045b6:	4621      	mov	r1, r4
 80045b8:	4630      	mov	r0, r6
 80045ba:	f7ff ff30 	bl	800441e <__multiply>
 80045be:	6020      	str	r0, [r4, #0]
 80045c0:	f8c0 8000 	str.w	r8, [r0]
 80045c4:	4604      	mov	r4, r0
 80045c6:	e7e4      	b.n	8004592 <__pow5mult+0x5a>
 80045c8:	4638      	mov	r0, r7
 80045ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045ce:	bf00      	nop
 80045d0:	080050f0 	.word	0x080050f0

080045d4 <__lshift>:
 80045d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045d8:	460c      	mov	r4, r1
 80045da:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80045de:	6923      	ldr	r3, [r4, #16]
 80045e0:	6849      	ldr	r1, [r1, #4]
 80045e2:	eb0a 0903 	add.w	r9, sl, r3
 80045e6:	68a3      	ldr	r3, [r4, #8]
 80045e8:	4607      	mov	r7, r0
 80045ea:	4616      	mov	r6, r2
 80045ec:	f109 0501 	add.w	r5, r9, #1
 80045f0:	42ab      	cmp	r3, r5
 80045f2:	db31      	blt.n	8004658 <__lshift+0x84>
 80045f4:	4638      	mov	r0, r7
 80045f6:	f7ff fe35 	bl	8004264 <_Balloc>
 80045fa:	2200      	movs	r2, #0
 80045fc:	4680      	mov	r8, r0
 80045fe:	f100 0314 	add.w	r3, r0, #20
 8004602:	4611      	mov	r1, r2
 8004604:	4552      	cmp	r2, sl
 8004606:	db2a      	blt.n	800465e <__lshift+0x8a>
 8004608:	6920      	ldr	r0, [r4, #16]
 800460a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800460e:	f104 0114 	add.w	r1, r4, #20
 8004612:	f016 021f 	ands.w	r2, r6, #31
 8004616:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800461a:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800461e:	d022      	beq.n	8004666 <__lshift+0x92>
 8004620:	f1c2 0c20 	rsb	ip, r2, #32
 8004624:	2000      	movs	r0, #0
 8004626:	680e      	ldr	r6, [r1, #0]
 8004628:	4096      	lsls	r6, r2
 800462a:	4330      	orrs	r0, r6
 800462c:	f843 0b04 	str.w	r0, [r3], #4
 8004630:	f851 0b04 	ldr.w	r0, [r1], #4
 8004634:	458e      	cmp	lr, r1
 8004636:	fa20 f00c 	lsr.w	r0, r0, ip
 800463a:	d8f4      	bhi.n	8004626 <__lshift+0x52>
 800463c:	6018      	str	r0, [r3, #0]
 800463e:	b108      	cbz	r0, 8004644 <__lshift+0x70>
 8004640:	f109 0502 	add.w	r5, r9, #2
 8004644:	3d01      	subs	r5, #1
 8004646:	4638      	mov	r0, r7
 8004648:	f8c8 5010 	str.w	r5, [r8, #16]
 800464c:	4621      	mov	r1, r4
 800464e:	f7ff fe3d 	bl	80042cc <_Bfree>
 8004652:	4640      	mov	r0, r8
 8004654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004658:	3101      	adds	r1, #1
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	e7c8      	b.n	80045f0 <__lshift+0x1c>
 800465e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004662:	3201      	adds	r2, #1
 8004664:	e7ce      	b.n	8004604 <__lshift+0x30>
 8004666:	3b04      	subs	r3, #4
 8004668:	f851 2b04 	ldr.w	r2, [r1], #4
 800466c:	f843 2f04 	str.w	r2, [r3, #4]!
 8004670:	458e      	cmp	lr, r1
 8004672:	d8f9      	bhi.n	8004668 <__lshift+0x94>
 8004674:	e7e6      	b.n	8004644 <__lshift+0x70>

08004676 <__mcmp>:
 8004676:	6903      	ldr	r3, [r0, #16]
 8004678:	690a      	ldr	r2, [r1, #16]
 800467a:	1a9b      	subs	r3, r3, r2
 800467c:	b530      	push	{r4, r5, lr}
 800467e:	d10c      	bne.n	800469a <__mcmp+0x24>
 8004680:	0092      	lsls	r2, r2, #2
 8004682:	3014      	adds	r0, #20
 8004684:	3114      	adds	r1, #20
 8004686:	1884      	adds	r4, r0, r2
 8004688:	4411      	add	r1, r2
 800468a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800468e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004692:	4295      	cmp	r5, r2
 8004694:	d003      	beq.n	800469e <__mcmp+0x28>
 8004696:	d305      	bcc.n	80046a4 <__mcmp+0x2e>
 8004698:	2301      	movs	r3, #1
 800469a:	4618      	mov	r0, r3
 800469c:	bd30      	pop	{r4, r5, pc}
 800469e:	42a0      	cmp	r0, r4
 80046a0:	d3f3      	bcc.n	800468a <__mcmp+0x14>
 80046a2:	e7fa      	b.n	800469a <__mcmp+0x24>
 80046a4:	f04f 33ff 	mov.w	r3, #4294967295
 80046a8:	e7f7      	b.n	800469a <__mcmp+0x24>

080046aa <__mdiff>:
 80046aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046ae:	460d      	mov	r5, r1
 80046b0:	4607      	mov	r7, r0
 80046b2:	4611      	mov	r1, r2
 80046b4:	4628      	mov	r0, r5
 80046b6:	4614      	mov	r4, r2
 80046b8:	f7ff ffdd 	bl	8004676 <__mcmp>
 80046bc:	1e06      	subs	r6, r0, #0
 80046be:	d108      	bne.n	80046d2 <__mdiff+0x28>
 80046c0:	4631      	mov	r1, r6
 80046c2:	4638      	mov	r0, r7
 80046c4:	f7ff fdce 	bl	8004264 <_Balloc>
 80046c8:	2301      	movs	r3, #1
 80046ca:	6103      	str	r3, [r0, #16]
 80046cc:	6146      	str	r6, [r0, #20]
 80046ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046d2:	bfa4      	itt	ge
 80046d4:	4623      	movge	r3, r4
 80046d6:	462c      	movge	r4, r5
 80046d8:	4638      	mov	r0, r7
 80046da:	6861      	ldr	r1, [r4, #4]
 80046dc:	bfa6      	itte	ge
 80046de:	461d      	movge	r5, r3
 80046e0:	2600      	movge	r6, #0
 80046e2:	2601      	movlt	r6, #1
 80046e4:	f7ff fdbe 	bl	8004264 <_Balloc>
 80046e8:	692b      	ldr	r3, [r5, #16]
 80046ea:	60c6      	str	r6, [r0, #12]
 80046ec:	6926      	ldr	r6, [r4, #16]
 80046ee:	f105 0914 	add.w	r9, r5, #20
 80046f2:	f104 0214 	add.w	r2, r4, #20
 80046f6:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80046fa:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80046fe:	f100 0514 	add.w	r5, r0, #20
 8004702:	f04f 0c00 	mov.w	ip, #0
 8004706:	f852 ab04 	ldr.w	sl, [r2], #4
 800470a:	f859 4b04 	ldr.w	r4, [r9], #4
 800470e:	fa1c f18a 	uxtah	r1, ip, sl
 8004712:	b2a3      	uxth	r3, r4
 8004714:	1ac9      	subs	r1, r1, r3
 8004716:	0c23      	lsrs	r3, r4, #16
 8004718:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800471c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004720:	b289      	uxth	r1, r1
 8004722:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004726:	45c8      	cmp	r8, r9
 8004728:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800472c:	4696      	mov	lr, r2
 800472e:	f845 3b04 	str.w	r3, [r5], #4
 8004732:	d8e8      	bhi.n	8004706 <__mdiff+0x5c>
 8004734:	45be      	cmp	lr, r7
 8004736:	d305      	bcc.n	8004744 <__mdiff+0x9a>
 8004738:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800473c:	b18b      	cbz	r3, 8004762 <__mdiff+0xb8>
 800473e:	6106      	str	r6, [r0, #16]
 8004740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004744:	f85e 1b04 	ldr.w	r1, [lr], #4
 8004748:	fa1c f381 	uxtah	r3, ip, r1
 800474c:	141a      	asrs	r2, r3, #16
 800474e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004752:	b29b      	uxth	r3, r3
 8004754:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004758:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800475c:	f845 3b04 	str.w	r3, [r5], #4
 8004760:	e7e8      	b.n	8004734 <__mdiff+0x8a>
 8004762:	3e01      	subs	r6, #1
 8004764:	e7e8      	b.n	8004738 <__mdiff+0x8e>

08004766 <__d2b>:
 8004766:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800476a:	460e      	mov	r6, r1
 800476c:	2101      	movs	r1, #1
 800476e:	ec59 8b10 	vmov	r8, r9, d0
 8004772:	4615      	mov	r5, r2
 8004774:	f7ff fd76 	bl	8004264 <_Balloc>
 8004778:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800477c:	4607      	mov	r7, r0
 800477e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004782:	bb34      	cbnz	r4, 80047d2 <__d2b+0x6c>
 8004784:	9301      	str	r3, [sp, #4]
 8004786:	f1b8 0f00 	cmp.w	r8, #0
 800478a:	d027      	beq.n	80047dc <__d2b+0x76>
 800478c:	a802      	add	r0, sp, #8
 800478e:	f840 8d08 	str.w	r8, [r0, #-8]!
 8004792:	f7ff fe0c 	bl	80043ae <__lo0bits>
 8004796:	9900      	ldr	r1, [sp, #0]
 8004798:	b1f0      	cbz	r0, 80047d8 <__d2b+0x72>
 800479a:	9a01      	ldr	r2, [sp, #4]
 800479c:	f1c0 0320 	rsb	r3, r0, #32
 80047a0:	fa02 f303 	lsl.w	r3, r2, r3
 80047a4:	430b      	orrs	r3, r1
 80047a6:	40c2      	lsrs	r2, r0
 80047a8:	617b      	str	r3, [r7, #20]
 80047aa:	9201      	str	r2, [sp, #4]
 80047ac:	9b01      	ldr	r3, [sp, #4]
 80047ae:	61bb      	str	r3, [r7, #24]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	bf14      	ite	ne
 80047b4:	2102      	movne	r1, #2
 80047b6:	2101      	moveq	r1, #1
 80047b8:	6139      	str	r1, [r7, #16]
 80047ba:	b1c4      	cbz	r4, 80047ee <__d2b+0x88>
 80047bc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80047c0:	4404      	add	r4, r0
 80047c2:	6034      	str	r4, [r6, #0]
 80047c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80047c8:	6028      	str	r0, [r5, #0]
 80047ca:	4638      	mov	r0, r7
 80047cc:	b003      	add	sp, #12
 80047ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80047d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047d6:	e7d5      	b.n	8004784 <__d2b+0x1e>
 80047d8:	6179      	str	r1, [r7, #20]
 80047da:	e7e7      	b.n	80047ac <__d2b+0x46>
 80047dc:	a801      	add	r0, sp, #4
 80047de:	f7ff fde6 	bl	80043ae <__lo0bits>
 80047e2:	9b01      	ldr	r3, [sp, #4]
 80047e4:	617b      	str	r3, [r7, #20]
 80047e6:	2101      	movs	r1, #1
 80047e8:	6139      	str	r1, [r7, #16]
 80047ea:	3020      	adds	r0, #32
 80047ec:	e7e5      	b.n	80047ba <__d2b+0x54>
 80047ee:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80047f2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80047f6:	6030      	str	r0, [r6, #0]
 80047f8:	6918      	ldr	r0, [r3, #16]
 80047fa:	f7ff fdb9 	bl	8004370 <__hi0bits>
 80047fe:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004802:	e7e1      	b.n	80047c8 <__d2b+0x62>

08004804 <_sbrk_r>:
 8004804:	b538      	push	{r3, r4, r5, lr}
 8004806:	4c06      	ldr	r4, [pc, #24]	; (8004820 <_sbrk_r+0x1c>)
 8004808:	2300      	movs	r3, #0
 800480a:	4605      	mov	r5, r0
 800480c:	4608      	mov	r0, r1
 800480e:	6023      	str	r3, [r4, #0]
 8004810:	f000 fb86 	bl	8004f20 <_sbrk>
 8004814:	1c43      	adds	r3, r0, #1
 8004816:	d102      	bne.n	800481e <_sbrk_r+0x1a>
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	b103      	cbz	r3, 800481e <_sbrk_r+0x1a>
 800481c:	602b      	str	r3, [r5, #0]
 800481e:	bd38      	pop	{r3, r4, r5, pc}
 8004820:	20000760 	.word	0x20000760

08004824 <__ssprint_r>:
 8004824:	6893      	ldr	r3, [r2, #8]
 8004826:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800482a:	4681      	mov	r9, r0
 800482c:	460c      	mov	r4, r1
 800482e:	4617      	mov	r7, r2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d060      	beq.n	80048f6 <__ssprint_r+0xd2>
 8004834:	f04f 0b00 	mov.w	fp, #0
 8004838:	f8d2 a000 	ldr.w	sl, [r2]
 800483c:	465e      	mov	r6, fp
 800483e:	b356      	cbz	r6, 8004896 <__ssprint_r+0x72>
 8004840:	68a3      	ldr	r3, [r4, #8]
 8004842:	429e      	cmp	r6, r3
 8004844:	d344      	bcc.n	80048d0 <__ssprint_r+0xac>
 8004846:	89a2      	ldrh	r2, [r4, #12]
 8004848:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800484c:	d03e      	beq.n	80048cc <__ssprint_r+0xa8>
 800484e:	6825      	ldr	r5, [r4, #0]
 8004850:	6921      	ldr	r1, [r4, #16]
 8004852:	eba5 0801 	sub.w	r8, r5, r1
 8004856:	6965      	ldr	r5, [r4, #20]
 8004858:	2302      	movs	r3, #2
 800485a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800485e:	fb95 f5f3 	sdiv	r5, r5, r3
 8004862:	f108 0301 	add.w	r3, r8, #1
 8004866:	4433      	add	r3, r6
 8004868:	429d      	cmp	r5, r3
 800486a:	bf38      	it	cc
 800486c:	461d      	movcc	r5, r3
 800486e:	0553      	lsls	r3, r2, #21
 8004870:	d546      	bpl.n	8004900 <__ssprint_r+0xdc>
 8004872:	4629      	mov	r1, r5
 8004874:	4648      	mov	r0, r9
 8004876:	f7ff facf 	bl	8003e18 <_malloc_r>
 800487a:	b998      	cbnz	r0, 80048a4 <__ssprint_r+0x80>
 800487c:	230c      	movs	r3, #12
 800487e:	f8c9 3000 	str.w	r3, [r9]
 8004882:	89a3      	ldrh	r3, [r4, #12]
 8004884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004888:	81a3      	strh	r3, [r4, #12]
 800488a:	2300      	movs	r3, #0
 800488c:	60bb      	str	r3, [r7, #8]
 800488e:	607b      	str	r3, [r7, #4]
 8004890:	f04f 30ff 	mov.w	r0, #4294967295
 8004894:	e031      	b.n	80048fa <__ssprint_r+0xd6>
 8004896:	f8da b000 	ldr.w	fp, [sl]
 800489a:	f8da 6004 	ldr.w	r6, [sl, #4]
 800489e:	f10a 0a08 	add.w	sl, sl, #8
 80048a2:	e7cc      	b.n	800483e <__ssprint_r+0x1a>
 80048a4:	4642      	mov	r2, r8
 80048a6:	6921      	ldr	r1, [r4, #16]
 80048a8:	9001      	str	r0, [sp, #4]
 80048aa:	f7ff fcc3 	bl	8004234 <memcpy>
 80048ae:	89a2      	ldrh	r2, [r4, #12]
 80048b0:	9b01      	ldr	r3, [sp, #4]
 80048b2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80048b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80048ba:	81a2      	strh	r2, [r4, #12]
 80048bc:	6123      	str	r3, [r4, #16]
 80048be:	6165      	str	r5, [r4, #20]
 80048c0:	4443      	add	r3, r8
 80048c2:	eba5 0508 	sub.w	r5, r5, r8
 80048c6:	6023      	str	r3, [r4, #0]
 80048c8:	60a5      	str	r5, [r4, #8]
 80048ca:	4633      	mov	r3, r6
 80048cc:	429e      	cmp	r6, r3
 80048ce:	d200      	bcs.n	80048d2 <__ssprint_r+0xae>
 80048d0:	4633      	mov	r3, r6
 80048d2:	461a      	mov	r2, r3
 80048d4:	4659      	mov	r1, fp
 80048d6:	6820      	ldr	r0, [r4, #0]
 80048d8:	9301      	str	r3, [sp, #4]
 80048da:	f000 f971 	bl	8004bc0 <memmove>
 80048de:	68a2      	ldr	r2, [r4, #8]
 80048e0:	9b01      	ldr	r3, [sp, #4]
 80048e2:	1ad2      	subs	r2, r2, r3
 80048e4:	60a2      	str	r2, [r4, #8]
 80048e6:	6822      	ldr	r2, [r4, #0]
 80048e8:	4413      	add	r3, r2
 80048ea:	6023      	str	r3, [r4, #0]
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	1b9e      	subs	r6, r3, r6
 80048f0:	60be      	str	r6, [r7, #8]
 80048f2:	2e00      	cmp	r6, #0
 80048f4:	d1cf      	bne.n	8004896 <__ssprint_r+0x72>
 80048f6:	2000      	movs	r0, #0
 80048f8:	6078      	str	r0, [r7, #4]
 80048fa:	b003      	add	sp, #12
 80048fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004900:	462a      	mov	r2, r5
 8004902:	4648      	mov	r0, r9
 8004904:	f000 f97e 	bl	8004c04 <_realloc_r>
 8004908:	4603      	mov	r3, r0
 800490a:	2800      	cmp	r0, #0
 800490c:	d1d6      	bne.n	80048bc <__ssprint_r+0x98>
 800490e:	6921      	ldr	r1, [r4, #16]
 8004910:	4648      	mov	r0, r9
 8004912:	f000 f885 	bl	8004a20 <_free_r>
 8004916:	e7b1      	b.n	800487c <__ssprint_r+0x58>

08004918 <_calloc_r>:
 8004918:	b510      	push	{r4, lr}
 800491a:	4351      	muls	r1, r2
 800491c:	f7ff fa7c 	bl	8003e18 <_malloc_r>
 8004920:	4604      	mov	r4, r0
 8004922:	b198      	cbz	r0, 800494c <_calloc_r+0x34>
 8004924:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8004928:	f022 0203 	bic.w	r2, r2, #3
 800492c:	3a04      	subs	r2, #4
 800492e:	2a24      	cmp	r2, #36	; 0x24
 8004930:	d81b      	bhi.n	800496a <_calloc_r+0x52>
 8004932:	2a13      	cmp	r2, #19
 8004934:	d917      	bls.n	8004966 <_calloc_r+0x4e>
 8004936:	2100      	movs	r1, #0
 8004938:	2a1b      	cmp	r2, #27
 800493a:	6001      	str	r1, [r0, #0]
 800493c:	6041      	str	r1, [r0, #4]
 800493e:	d807      	bhi.n	8004950 <_calloc_r+0x38>
 8004940:	f100 0308 	add.w	r3, r0, #8
 8004944:	2200      	movs	r2, #0
 8004946:	601a      	str	r2, [r3, #0]
 8004948:	605a      	str	r2, [r3, #4]
 800494a:	609a      	str	r2, [r3, #8]
 800494c:	4620      	mov	r0, r4
 800494e:	bd10      	pop	{r4, pc}
 8004950:	2a24      	cmp	r2, #36	; 0x24
 8004952:	6081      	str	r1, [r0, #8]
 8004954:	60c1      	str	r1, [r0, #12]
 8004956:	bf11      	iteee	ne
 8004958:	f100 0310 	addne.w	r3, r0, #16
 800495c:	6101      	streq	r1, [r0, #16]
 800495e:	f100 0318 	addeq.w	r3, r0, #24
 8004962:	6141      	streq	r1, [r0, #20]
 8004964:	e7ee      	b.n	8004944 <_calloc_r+0x2c>
 8004966:	4603      	mov	r3, r0
 8004968:	e7ec      	b.n	8004944 <_calloc_r+0x2c>
 800496a:	2100      	movs	r1, #0
 800496c:	f000 f942 	bl	8004bf4 <memset>
 8004970:	e7ec      	b.n	800494c <_calloc_r+0x34>
	...

08004974 <_malloc_trim_r>:
 8004974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004978:	4f25      	ldr	r7, [pc, #148]	; (8004a10 <_malloc_trim_r+0x9c>)
 800497a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8004a1c <_malloc_trim_r+0xa8>
 800497e:	4689      	mov	r9, r1
 8004980:	4606      	mov	r6, r0
 8004982:	f7ff fc63 	bl	800424c <__malloc_lock>
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	685d      	ldr	r5, [r3, #4]
 800498a:	f1a8 0411 	sub.w	r4, r8, #17
 800498e:	f025 0503 	bic.w	r5, r5, #3
 8004992:	eba4 0409 	sub.w	r4, r4, r9
 8004996:	442c      	add	r4, r5
 8004998:	fbb4 f4f8 	udiv	r4, r4, r8
 800499c:	3c01      	subs	r4, #1
 800499e:	fb08 f404 	mul.w	r4, r8, r4
 80049a2:	4544      	cmp	r4, r8
 80049a4:	da05      	bge.n	80049b2 <_malloc_trim_r+0x3e>
 80049a6:	4630      	mov	r0, r6
 80049a8:	f7ff fc56 	bl	8004258 <__malloc_unlock>
 80049ac:	2000      	movs	r0, #0
 80049ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049b2:	2100      	movs	r1, #0
 80049b4:	4630      	mov	r0, r6
 80049b6:	f7ff ff25 	bl	8004804 <_sbrk_r>
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	442b      	add	r3, r5
 80049be:	4298      	cmp	r0, r3
 80049c0:	d1f1      	bne.n	80049a6 <_malloc_trim_r+0x32>
 80049c2:	4261      	negs	r1, r4
 80049c4:	4630      	mov	r0, r6
 80049c6:	f7ff ff1d 	bl	8004804 <_sbrk_r>
 80049ca:	3001      	adds	r0, #1
 80049cc:	d110      	bne.n	80049f0 <_malloc_trim_r+0x7c>
 80049ce:	2100      	movs	r1, #0
 80049d0:	4630      	mov	r0, r6
 80049d2:	f7ff ff17 	bl	8004804 <_sbrk_r>
 80049d6:	68ba      	ldr	r2, [r7, #8]
 80049d8:	1a83      	subs	r3, r0, r2
 80049da:	2b0f      	cmp	r3, #15
 80049dc:	dde3      	ble.n	80049a6 <_malloc_trim_r+0x32>
 80049de:	490d      	ldr	r1, [pc, #52]	; (8004a14 <_malloc_trim_r+0xa0>)
 80049e0:	6809      	ldr	r1, [r1, #0]
 80049e2:	1a40      	subs	r0, r0, r1
 80049e4:	490c      	ldr	r1, [pc, #48]	; (8004a18 <_malloc_trim_r+0xa4>)
 80049e6:	f043 0301 	orr.w	r3, r3, #1
 80049ea:	6008      	str	r0, [r1, #0]
 80049ec:	6053      	str	r3, [r2, #4]
 80049ee:	e7da      	b.n	80049a6 <_malloc_trim_r+0x32>
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	4a09      	ldr	r2, [pc, #36]	; (8004a18 <_malloc_trim_r+0xa4>)
 80049f4:	1b2d      	subs	r5, r5, r4
 80049f6:	f045 0501 	orr.w	r5, r5, #1
 80049fa:	605d      	str	r5, [r3, #4]
 80049fc:	6813      	ldr	r3, [r2, #0]
 80049fe:	4630      	mov	r0, r6
 8004a00:	1b1c      	subs	r4, r3, r4
 8004a02:	6014      	str	r4, [r2, #0]
 8004a04:	f7ff fc28 	bl	8004258 <__malloc_unlock>
 8004a08:	2001      	movs	r0, #1
 8004a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a0e:	bf00      	nop
 8004a10:	200000f8 	.word	0x200000f8
 8004a14:	20000500 	.word	0x20000500
 8004a18:	20000690 	.word	0x20000690
 8004a1c:	00000080 	.word	0x00000080

08004a20 <_free_r>:
 8004a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a24:	4604      	mov	r4, r0
 8004a26:	4688      	mov	r8, r1
 8004a28:	2900      	cmp	r1, #0
 8004a2a:	f000 80ab 	beq.w	8004b84 <_free_r+0x164>
 8004a2e:	f7ff fc0d 	bl	800424c <__malloc_lock>
 8004a32:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8004a36:	4d54      	ldr	r5, [pc, #336]	; (8004b88 <_free_r+0x168>)
 8004a38:	f022 0001 	bic.w	r0, r2, #1
 8004a3c:	f1a8 0308 	sub.w	r3, r8, #8
 8004a40:	181f      	adds	r7, r3, r0
 8004a42:	68a9      	ldr	r1, [r5, #8]
 8004a44:	687e      	ldr	r6, [r7, #4]
 8004a46:	428f      	cmp	r7, r1
 8004a48:	f026 0603 	bic.w	r6, r6, #3
 8004a4c:	f002 0201 	and.w	r2, r2, #1
 8004a50:	d11b      	bne.n	8004a8a <_free_r+0x6a>
 8004a52:	4430      	add	r0, r6
 8004a54:	b93a      	cbnz	r2, 8004a66 <_free_r+0x46>
 8004a56:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8004a5a:	1a9b      	subs	r3, r3, r2
 8004a5c:	4410      	add	r0, r2
 8004a5e:	6899      	ldr	r1, [r3, #8]
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	60ca      	str	r2, [r1, #12]
 8004a64:	6091      	str	r1, [r2, #8]
 8004a66:	f040 0201 	orr.w	r2, r0, #1
 8004a6a:	605a      	str	r2, [r3, #4]
 8004a6c:	60ab      	str	r3, [r5, #8]
 8004a6e:	4b47      	ldr	r3, [pc, #284]	; (8004b8c <_free_r+0x16c>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4298      	cmp	r0, r3
 8004a74:	d304      	bcc.n	8004a80 <_free_r+0x60>
 8004a76:	4b46      	ldr	r3, [pc, #280]	; (8004b90 <_free_r+0x170>)
 8004a78:	4620      	mov	r0, r4
 8004a7a:	6819      	ldr	r1, [r3, #0]
 8004a7c:	f7ff ff7a 	bl	8004974 <_malloc_trim_r>
 8004a80:	4620      	mov	r0, r4
 8004a82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a86:	f7ff bbe7 	b.w	8004258 <__malloc_unlock>
 8004a8a:	607e      	str	r6, [r7, #4]
 8004a8c:	2a00      	cmp	r2, #0
 8004a8e:	d139      	bne.n	8004b04 <_free_r+0xe4>
 8004a90:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8004a94:	1a5b      	subs	r3, r3, r1
 8004a96:	4408      	add	r0, r1
 8004a98:	6899      	ldr	r1, [r3, #8]
 8004a9a:	f105 0e08 	add.w	lr, r5, #8
 8004a9e:	4571      	cmp	r1, lr
 8004aa0:	d032      	beq.n	8004b08 <_free_r+0xe8>
 8004aa2:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8004aa6:	f8c1 e00c 	str.w	lr, [r1, #12]
 8004aaa:	f8ce 1008 	str.w	r1, [lr, #8]
 8004aae:	19b9      	adds	r1, r7, r6
 8004ab0:	6849      	ldr	r1, [r1, #4]
 8004ab2:	07c9      	lsls	r1, r1, #31
 8004ab4:	d40a      	bmi.n	8004acc <_free_r+0xac>
 8004ab6:	4430      	add	r0, r6
 8004ab8:	68b9      	ldr	r1, [r7, #8]
 8004aba:	bb3a      	cbnz	r2, 8004b0c <_free_r+0xec>
 8004abc:	4e35      	ldr	r6, [pc, #212]	; (8004b94 <_free_r+0x174>)
 8004abe:	42b1      	cmp	r1, r6
 8004ac0:	d124      	bne.n	8004b0c <_free_r+0xec>
 8004ac2:	616b      	str	r3, [r5, #20]
 8004ac4:	612b      	str	r3, [r5, #16]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	60d9      	str	r1, [r3, #12]
 8004aca:	6099      	str	r1, [r3, #8]
 8004acc:	f040 0101 	orr.w	r1, r0, #1
 8004ad0:	6059      	str	r1, [r3, #4]
 8004ad2:	5018      	str	r0, [r3, r0]
 8004ad4:	2a00      	cmp	r2, #0
 8004ad6:	d1d3      	bne.n	8004a80 <_free_r+0x60>
 8004ad8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004adc:	d21a      	bcs.n	8004b14 <_free_r+0xf4>
 8004ade:	08c0      	lsrs	r0, r0, #3
 8004ae0:	1081      	asrs	r1, r0, #2
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	408a      	lsls	r2, r1
 8004ae6:	6869      	ldr	r1, [r5, #4]
 8004ae8:	3001      	adds	r0, #1
 8004aea:	430a      	orrs	r2, r1
 8004aec:	606a      	str	r2, [r5, #4]
 8004aee:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8004af2:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8004af6:	6099      	str	r1, [r3, #8]
 8004af8:	3a08      	subs	r2, #8
 8004afa:	60da      	str	r2, [r3, #12]
 8004afc:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8004b00:	60cb      	str	r3, [r1, #12]
 8004b02:	e7bd      	b.n	8004a80 <_free_r+0x60>
 8004b04:	2200      	movs	r2, #0
 8004b06:	e7d2      	b.n	8004aae <_free_r+0x8e>
 8004b08:	2201      	movs	r2, #1
 8004b0a:	e7d0      	b.n	8004aae <_free_r+0x8e>
 8004b0c:	68fe      	ldr	r6, [r7, #12]
 8004b0e:	60ce      	str	r6, [r1, #12]
 8004b10:	60b1      	str	r1, [r6, #8]
 8004b12:	e7db      	b.n	8004acc <_free_r+0xac>
 8004b14:	0a42      	lsrs	r2, r0, #9
 8004b16:	2a04      	cmp	r2, #4
 8004b18:	d813      	bhi.n	8004b42 <_free_r+0x122>
 8004b1a:	0982      	lsrs	r2, r0, #6
 8004b1c:	3238      	adds	r2, #56	; 0x38
 8004b1e:	1c51      	adds	r1, r2, #1
 8004b20:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8004b24:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8004b28:	428e      	cmp	r6, r1
 8004b2a:	d124      	bne.n	8004b76 <_free_r+0x156>
 8004b2c:	2001      	movs	r0, #1
 8004b2e:	1092      	asrs	r2, r2, #2
 8004b30:	fa00 f202 	lsl.w	r2, r0, r2
 8004b34:	6868      	ldr	r0, [r5, #4]
 8004b36:	4302      	orrs	r2, r0
 8004b38:	606a      	str	r2, [r5, #4]
 8004b3a:	60de      	str	r6, [r3, #12]
 8004b3c:	6099      	str	r1, [r3, #8]
 8004b3e:	60b3      	str	r3, [r6, #8]
 8004b40:	e7de      	b.n	8004b00 <_free_r+0xe0>
 8004b42:	2a14      	cmp	r2, #20
 8004b44:	d801      	bhi.n	8004b4a <_free_r+0x12a>
 8004b46:	325b      	adds	r2, #91	; 0x5b
 8004b48:	e7e9      	b.n	8004b1e <_free_r+0xfe>
 8004b4a:	2a54      	cmp	r2, #84	; 0x54
 8004b4c:	d802      	bhi.n	8004b54 <_free_r+0x134>
 8004b4e:	0b02      	lsrs	r2, r0, #12
 8004b50:	326e      	adds	r2, #110	; 0x6e
 8004b52:	e7e4      	b.n	8004b1e <_free_r+0xfe>
 8004b54:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8004b58:	d802      	bhi.n	8004b60 <_free_r+0x140>
 8004b5a:	0bc2      	lsrs	r2, r0, #15
 8004b5c:	3277      	adds	r2, #119	; 0x77
 8004b5e:	e7de      	b.n	8004b1e <_free_r+0xfe>
 8004b60:	f240 5154 	movw	r1, #1364	; 0x554
 8004b64:	428a      	cmp	r2, r1
 8004b66:	bf9a      	itte	ls
 8004b68:	0c82      	lsrls	r2, r0, #18
 8004b6a:	327c      	addls	r2, #124	; 0x7c
 8004b6c:	227e      	movhi	r2, #126	; 0x7e
 8004b6e:	e7d6      	b.n	8004b1e <_free_r+0xfe>
 8004b70:	6889      	ldr	r1, [r1, #8]
 8004b72:	428e      	cmp	r6, r1
 8004b74:	d004      	beq.n	8004b80 <_free_r+0x160>
 8004b76:	684a      	ldr	r2, [r1, #4]
 8004b78:	f022 0203 	bic.w	r2, r2, #3
 8004b7c:	4290      	cmp	r0, r2
 8004b7e:	d3f7      	bcc.n	8004b70 <_free_r+0x150>
 8004b80:	68ce      	ldr	r6, [r1, #12]
 8004b82:	e7da      	b.n	8004b3a <_free_r+0x11a>
 8004b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b88:	200000f8 	.word	0x200000f8
 8004b8c:	20000504 	.word	0x20000504
 8004b90:	200006c0 	.word	0x200006c0
 8004b94:	20000100 	.word	0x20000100

08004b98 <__retarget_lock_acquire_recursive>:
 8004b98:	4770      	bx	lr

08004b9a <__retarget_lock_release_recursive>:
 8004b9a:	4770      	bx	lr

08004b9c <__ascii_mbtowc>:
 8004b9c:	b082      	sub	sp, #8
 8004b9e:	b901      	cbnz	r1, 8004ba2 <__ascii_mbtowc+0x6>
 8004ba0:	a901      	add	r1, sp, #4
 8004ba2:	b142      	cbz	r2, 8004bb6 <__ascii_mbtowc+0x1a>
 8004ba4:	b14b      	cbz	r3, 8004bba <__ascii_mbtowc+0x1e>
 8004ba6:	7813      	ldrb	r3, [r2, #0]
 8004ba8:	600b      	str	r3, [r1, #0]
 8004baa:	7812      	ldrb	r2, [r2, #0]
 8004bac:	1c10      	adds	r0, r2, #0
 8004bae:	bf18      	it	ne
 8004bb0:	2001      	movne	r0, #1
 8004bb2:	b002      	add	sp, #8
 8004bb4:	4770      	bx	lr
 8004bb6:	4610      	mov	r0, r2
 8004bb8:	e7fb      	b.n	8004bb2 <__ascii_mbtowc+0x16>
 8004bba:	f06f 0001 	mvn.w	r0, #1
 8004bbe:	e7f8      	b.n	8004bb2 <__ascii_mbtowc+0x16>

08004bc0 <memmove>:
 8004bc0:	4288      	cmp	r0, r1
 8004bc2:	b510      	push	{r4, lr}
 8004bc4:	eb01 0302 	add.w	r3, r1, r2
 8004bc8:	d803      	bhi.n	8004bd2 <memmove+0x12>
 8004bca:	1e42      	subs	r2, r0, #1
 8004bcc:	4299      	cmp	r1, r3
 8004bce:	d10c      	bne.n	8004bea <memmove+0x2a>
 8004bd0:	bd10      	pop	{r4, pc}
 8004bd2:	4298      	cmp	r0, r3
 8004bd4:	d2f9      	bcs.n	8004bca <memmove+0xa>
 8004bd6:	1881      	adds	r1, r0, r2
 8004bd8:	1ad2      	subs	r2, r2, r3
 8004bda:	42d3      	cmn	r3, r2
 8004bdc:	d100      	bne.n	8004be0 <memmove+0x20>
 8004bde:	bd10      	pop	{r4, pc}
 8004be0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004be4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004be8:	e7f7      	b.n	8004bda <memmove+0x1a>
 8004bea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bee:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004bf2:	e7eb      	b.n	8004bcc <memmove+0xc>

08004bf4 <memset>:
 8004bf4:	4402      	add	r2, r0
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d100      	bne.n	8004bfe <memset+0xa>
 8004bfc:	4770      	bx	lr
 8004bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8004c02:	e7f9      	b.n	8004bf8 <memset+0x4>

08004c04 <_realloc_r>:
 8004c04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c08:	4682      	mov	sl, r0
 8004c0a:	460c      	mov	r4, r1
 8004c0c:	b929      	cbnz	r1, 8004c1a <_realloc_r+0x16>
 8004c0e:	4611      	mov	r1, r2
 8004c10:	b003      	add	sp, #12
 8004c12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c16:	f7ff b8ff 	b.w	8003e18 <_malloc_r>
 8004c1a:	9201      	str	r2, [sp, #4]
 8004c1c:	f7ff fb16 	bl	800424c <__malloc_lock>
 8004c20:	9a01      	ldr	r2, [sp, #4]
 8004c22:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8004c26:	f102 080b 	add.w	r8, r2, #11
 8004c2a:	f1b8 0f16 	cmp.w	r8, #22
 8004c2e:	f1a4 0908 	sub.w	r9, r4, #8
 8004c32:	f025 0603 	bic.w	r6, r5, #3
 8004c36:	d90a      	bls.n	8004c4e <_realloc_r+0x4a>
 8004c38:	f038 0807 	bics.w	r8, r8, #7
 8004c3c:	d509      	bpl.n	8004c52 <_realloc_r+0x4e>
 8004c3e:	230c      	movs	r3, #12
 8004c40:	f8ca 3000 	str.w	r3, [sl]
 8004c44:	2700      	movs	r7, #0
 8004c46:	4638      	mov	r0, r7
 8004c48:	b003      	add	sp, #12
 8004c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c4e:	f04f 0810 	mov.w	r8, #16
 8004c52:	4590      	cmp	r8, r2
 8004c54:	d3f3      	bcc.n	8004c3e <_realloc_r+0x3a>
 8004c56:	45b0      	cmp	r8, r6
 8004c58:	f340 8145 	ble.w	8004ee6 <_realloc_r+0x2e2>
 8004c5c:	4ba8      	ldr	r3, [pc, #672]	; (8004f00 <_realloc_r+0x2fc>)
 8004c5e:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8004c62:	eb09 0106 	add.w	r1, r9, r6
 8004c66:	4571      	cmp	r1, lr
 8004c68:	469b      	mov	fp, r3
 8004c6a:	684b      	ldr	r3, [r1, #4]
 8004c6c:	d005      	beq.n	8004c7a <_realloc_r+0x76>
 8004c6e:	f023 0001 	bic.w	r0, r3, #1
 8004c72:	4408      	add	r0, r1
 8004c74:	6840      	ldr	r0, [r0, #4]
 8004c76:	07c7      	lsls	r7, r0, #31
 8004c78:	d447      	bmi.n	8004d0a <_realloc_r+0x106>
 8004c7a:	f023 0303 	bic.w	r3, r3, #3
 8004c7e:	4571      	cmp	r1, lr
 8004c80:	eb06 0703 	add.w	r7, r6, r3
 8004c84:	d119      	bne.n	8004cba <_realloc_r+0xb6>
 8004c86:	f108 0010 	add.w	r0, r8, #16
 8004c8a:	4287      	cmp	r7, r0
 8004c8c:	db3f      	blt.n	8004d0e <_realloc_r+0x10a>
 8004c8e:	eb09 0308 	add.w	r3, r9, r8
 8004c92:	eba7 0708 	sub.w	r7, r7, r8
 8004c96:	f047 0701 	orr.w	r7, r7, #1
 8004c9a:	f8cb 3008 	str.w	r3, [fp, #8]
 8004c9e:	605f      	str	r7, [r3, #4]
 8004ca0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	ea43 0308 	orr.w	r3, r3, r8
 8004cac:	f844 3c04 	str.w	r3, [r4, #-4]
 8004cb0:	4650      	mov	r0, sl
 8004cb2:	f7ff fad1 	bl	8004258 <__malloc_unlock>
 8004cb6:	4627      	mov	r7, r4
 8004cb8:	e7c5      	b.n	8004c46 <_realloc_r+0x42>
 8004cba:	45b8      	cmp	r8, r7
 8004cbc:	dc27      	bgt.n	8004d0e <_realloc_r+0x10a>
 8004cbe:	68cb      	ldr	r3, [r1, #12]
 8004cc0:	688a      	ldr	r2, [r1, #8]
 8004cc2:	60d3      	str	r3, [r2, #12]
 8004cc4:	609a      	str	r2, [r3, #8]
 8004cc6:	eba7 0008 	sub.w	r0, r7, r8
 8004cca:	280f      	cmp	r0, #15
 8004ccc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004cd0:	eb09 0207 	add.w	r2, r9, r7
 8004cd4:	f240 8109 	bls.w	8004eea <_realloc_r+0x2e6>
 8004cd8:	eb09 0108 	add.w	r1, r9, r8
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	ea43 0308 	orr.w	r3, r3, r8
 8004ce4:	f040 0001 	orr.w	r0, r0, #1
 8004ce8:	f8c9 3004 	str.w	r3, [r9, #4]
 8004cec:	6048      	str	r0, [r1, #4]
 8004cee:	6853      	ldr	r3, [r2, #4]
 8004cf0:	f043 0301 	orr.w	r3, r3, #1
 8004cf4:	6053      	str	r3, [r2, #4]
 8004cf6:	3108      	adds	r1, #8
 8004cf8:	4650      	mov	r0, sl
 8004cfa:	f7ff fe91 	bl	8004a20 <_free_r>
 8004cfe:	4650      	mov	r0, sl
 8004d00:	f7ff faaa 	bl	8004258 <__malloc_unlock>
 8004d04:	f109 0708 	add.w	r7, r9, #8
 8004d08:	e79d      	b.n	8004c46 <_realloc_r+0x42>
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	07e8      	lsls	r0, r5, #31
 8004d10:	f100 8084 	bmi.w	8004e1c <_realloc_r+0x218>
 8004d14:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8004d18:	eba9 0505 	sub.w	r5, r9, r5
 8004d1c:	6868      	ldr	r0, [r5, #4]
 8004d1e:	f020 0003 	bic.w	r0, r0, #3
 8004d22:	4430      	add	r0, r6
 8004d24:	2900      	cmp	r1, #0
 8004d26:	d076      	beq.n	8004e16 <_realloc_r+0x212>
 8004d28:	4571      	cmp	r1, lr
 8004d2a:	d150      	bne.n	8004dce <_realloc_r+0x1ca>
 8004d2c:	4403      	add	r3, r0
 8004d2e:	f108 0110 	add.w	r1, r8, #16
 8004d32:	428b      	cmp	r3, r1
 8004d34:	db6f      	blt.n	8004e16 <_realloc_r+0x212>
 8004d36:	462f      	mov	r7, r5
 8004d38:	68ea      	ldr	r2, [r5, #12]
 8004d3a:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8004d3e:	60ca      	str	r2, [r1, #12]
 8004d40:	6091      	str	r1, [r2, #8]
 8004d42:	1f32      	subs	r2, r6, #4
 8004d44:	2a24      	cmp	r2, #36	; 0x24
 8004d46:	d83b      	bhi.n	8004dc0 <_realloc_r+0x1bc>
 8004d48:	2a13      	cmp	r2, #19
 8004d4a:	d936      	bls.n	8004dba <_realloc_r+0x1b6>
 8004d4c:	6821      	ldr	r1, [r4, #0]
 8004d4e:	60a9      	str	r1, [r5, #8]
 8004d50:	6861      	ldr	r1, [r4, #4]
 8004d52:	60e9      	str	r1, [r5, #12]
 8004d54:	2a1b      	cmp	r2, #27
 8004d56:	d81c      	bhi.n	8004d92 <_realloc_r+0x18e>
 8004d58:	f105 0210 	add.w	r2, r5, #16
 8004d5c:	f104 0108 	add.w	r1, r4, #8
 8004d60:	6808      	ldr	r0, [r1, #0]
 8004d62:	6010      	str	r0, [r2, #0]
 8004d64:	6848      	ldr	r0, [r1, #4]
 8004d66:	6050      	str	r0, [r2, #4]
 8004d68:	6889      	ldr	r1, [r1, #8]
 8004d6a:	6091      	str	r1, [r2, #8]
 8004d6c:	eb05 0208 	add.w	r2, r5, r8
 8004d70:	eba3 0308 	sub.w	r3, r3, r8
 8004d74:	f043 0301 	orr.w	r3, r3, #1
 8004d78:	f8cb 2008 	str.w	r2, [fp, #8]
 8004d7c:	6053      	str	r3, [r2, #4]
 8004d7e:	686b      	ldr	r3, [r5, #4]
 8004d80:	f003 0301 	and.w	r3, r3, #1
 8004d84:	ea43 0308 	orr.w	r3, r3, r8
 8004d88:	606b      	str	r3, [r5, #4]
 8004d8a:	4650      	mov	r0, sl
 8004d8c:	f7ff fa64 	bl	8004258 <__malloc_unlock>
 8004d90:	e759      	b.n	8004c46 <_realloc_r+0x42>
 8004d92:	68a1      	ldr	r1, [r4, #8]
 8004d94:	6129      	str	r1, [r5, #16]
 8004d96:	68e1      	ldr	r1, [r4, #12]
 8004d98:	6169      	str	r1, [r5, #20]
 8004d9a:	2a24      	cmp	r2, #36	; 0x24
 8004d9c:	bf01      	itttt	eq
 8004d9e:	6922      	ldreq	r2, [r4, #16]
 8004da0:	61aa      	streq	r2, [r5, #24]
 8004da2:	6960      	ldreq	r0, [r4, #20]
 8004da4:	61e8      	streq	r0, [r5, #28]
 8004da6:	bf19      	ittee	ne
 8004da8:	f105 0218 	addne.w	r2, r5, #24
 8004dac:	f104 0110 	addne.w	r1, r4, #16
 8004db0:	f105 0220 	addeq.w	r2, r5, #32
 8004db4:	f104 0118 	addeq.w	r1, r4, #24
 8004db8:	e7d2      	b.n	8004d60 <_realloc_r+0x15c>
 8004dba:	463a      	mov	r2, r7
 8004dbc:	4621      	mov	r1, r4
 8004dbe:	e7cf      	b.n	8004d60 <_realloc_r+0x15c>
 8004dc0:	4621      	mov	r1, r4
 8004dc2:	4638      	mov	r0, r7
 8004dc4:	9301      	str	r3, [sp, #4]
 8004dc6:	f7ff fefb 	bl	8004bc0 <memmove>
 8004dca:	9b01      	ldr	r3, [sp, #4]
 8004dcc:	e7ce      	b.n	8004d6c <_realloc_r+0x168>
 8004dce:	18c7      	adds	r7, r0, r3
 8004dd0:	45b8      	cmp	r8, r7
 8004dd2:	dc20      	bgt.n	8004e16 <_realloc_r+0x212>
 8004dd4:	68cb      	ldr	r3, [r1, #12]
 8004dd6:	688a      	ldr	r2, [r1, #8]
 8004dd8:	60d3      	str	r3, [r2, #12]
 8004dda:	609a      	str	r2, [r3, #8]
 8004ddc:	4628      	mov	r0, r5
 8004dde:	68eb      	ldr	r3, [r5, #12]
 8004de0:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8004de4:	60d3      	str	r3, [r2, #12]
 8004de6:	609a      	str	r2, [r3, #8]
 8004de8:	1f32      	subs	r2, r6, #4
 8004dea:	2a24      	cmp	r2, #36	; 0x24
 8004dec:	d842      	bhi.n	8004e74 <_realloc_r+0x270>
 8004dee:	2a13      	cmp	r2, #19
 8004df0:	d93e      	bls.n	8004e70 <_realloc_r+0x26c>
 8004df2:	6823      	ldr	r3, [r4, #0]
 8004df4:	60ab      	str	r3, [r5, #8]
 8004df6:	6863      	ldr	r3, [r4, #4]
 8004df8:	60eb      	str	r3, [r5, #12]
 8004dfa:	2a1b      	cmp	r2, #27
 8004dfc:	d824      	bhi.n	8004e48 <_realloc_r+0x244>
 8004dfe:	f105 0010 	add.w	r0, r5, #16
 8004e02:	f104 0308 	add.w	r3, r4, #8
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	6002      	str	r2, [r0, #0]
 8004e0a:	685a      	ldr	r2, [r3, #4]
 8004e0c:	6042      	str	r2, [r0, #4]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	6083      	str	r3, [r0, #8]
 8004e12:	46a9      	mov	r9, r5
 8004e14:	e757      	b.n	8004cc6 <_realloc_r+0xc2>
 8004e16:	4580      	cmp	r8, r0
 8004e18:	4607      	mov	r7, r0
 8004e1a:	dddf      	ble.n	8004ddc <_realloc_r+0x1d8>
 8004e1c:	4611      	mov	r1, r2
 8004e1e:	4650      	mov	r0, sl
 8004e20:	f7fe fffa 	bl	8003e18 <_malloc_r>
 8004e24:	4607      	mov	r7, r0
 8004e26:	2800      	cmp	r0, #0
 8004e28:	d0af      	beq.n	8004d8a <_realloc_r+0x186>
 8004e2a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8004e2e:	f023 0301 	bic.w	r3, r3, #1
 8004e32:	f1a0 0208 	sub.w	r2, r0, #8
 8004e36:	444b      	add	r3, r9
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d11f      	bne.n	8004e7c <_realloc_r+0x278>
 8004e3c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8004e40:	f027 0703 	bic.w	r7, r7, #3
 8004e44:	4437      	add	r7, r6
 8004e46:	e73e      	b.n	8004cc6 <_realloc_r+0xc2>
 8004e48:	68a3      	ldr	r3, [r4, #8]
 8004e4a:	612b      	str	r3, [r5, #16]
 8004e4c:	68e3      	ldr	r3, [r4, #12]
 8004e4e:	616b      	str	r3, [r5, #20]
 8004e50:	2a24      	cmp	r2, #36	; 0x24
 8004e52:	bf01      	itttt	eq
 8004e54:	6923      	ldreq	r3, [r4, #16]
 8004e56:	61ab      	streq	r3, [r5, #24]
 8004e58:	6962      	ldreq	r2, [r4, #20]
 8004e5a:	61ea      	streq	r2, [r5, #28]
 8004e5c:	bf19      	ittee	ne
 8004e5e:	f105 0018 	addne.w	r0, r5, #24
 8004e62:	f104 0310 	addne.w	r3, r4, #16
 8004e66:	f105 0020 	addeq.w	r0, r5, #32
 8004e6a:	f104 0318 	addeq.w	r3, r4, #24
 8004e6e:	e7ca      	b.n	8004e06 <_realloc_r+0x202>
 8004e70:	4623      	mov	r3, r4
 8004e72:	e7c8      	b.n	8004e06 <_realloc_r+0x202>
 8004e74:	4621      	mov	r1, r4
 8004e76:	f7ff fea3 	bl	8004bc0 <memmove>
 8004e7a:	e7ca      	b.n	8004e12 <_realloc_r+0x20e>
 8004e7c:	1f32      	subs	r2, r6, #4
 8004e7e:	2a24      	cmp	r2, #36	; 0x24
 8004e80:	d82d      	bhi.n	8004ede <_realloc_r+0x2da>
 8004e82:	2a13      	cmp	r2, #19
 8004e84:	d928      	bls.n	8004ed8 <_realloc_r+0x2d4>
 8004e86:	6823      	ldr	r3, [r4, #0]
 8004e88:	6003      	str	r3, [r0, #0]
 8004e8a:	6863      	ldr	r3, [r4, #4]
 8004e8c:	6043      	str	r3, [r0, #4]
 8004e8e:	2a1b      	cmp	r2, #27
 8004e90:	d80e      	bhi.n	8004eb0 <_realloc_r+0x2ac>
 8004e92:	f100 0308 	add.w	r3, r0, #8
 8004e96:	f104 0208 	add.w	r2, r4, #8
 8004e9a:	6811      	ldr	r1, [r2, #0]
 8004e9c:	6019      	str	r1, [r3, #0]
 8004e9e:	6851      	ldr	r1, [r2, #4]
 8004ea0:	6059      	str	r1, [r3, #4]
 8004ea2:	6892      	ldr	r2, [r2, #8]
 8004ea4:	609a      	str	r2, [r3, #8]
 8004ea6:	4621      	mov	r1, r4
 8004ea8:	4650      	mov	r0, sl
 8004eaa:	f7ff fdb9 	bl	8004a20 <_free_r>
 8004eae:	e76c      	b.n	8004d8a <_realloc_r+0x186>
 8004eb0:	68a3      	ldr	r3, [r4, #8]
 8004eb2:	6083      	str	r3, [r0, #8]
 8004eb4:	68e3      	ldr	r3, [r4, #12]
 8004eb6:	60c3      	str	r3, [r0, #12]
 8004eb8:	2a24      	cmp	r2, #36	; 0x24
 8004eba:	bf01      	itttt	eq
 8004ebc:	6923      	ldreq	r3, [r4, #16]
 8004ebe:	6103      	streq	r3, [r0, #16]
 8004ec0:	6961      	ldreq	r1, [r4, #20]
 8004ec2:	6141      	streq	r1, [r0, #20]
 8004ec4:	bf19      	ittee	ne
 8004ec6:	f100 0310 	addne.w	r3, r0, #16
 8004eca:	f104 0210 	addne.w	r2, r4, #16
 8004ece:	f100 0318 	addeq.w	r3, r0, #24
 8004ed2:	f104 0218 	addeq.w	r2, r4, #24
 8004ed6:	e7e0      	b.n	8004e9a <_realloc_r+0x296>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	4622      	mov	r2, r4
 8004edc:	e7dd      	b.n	8004e9a <_realloc_r+0x296>
 8004ede:	4621      	mov	r1, r4
 8004ee0:	f7ff fe6e 	bl	8004bc0 <memmove>
 8004ee4:	e7df      	b.n	8004ea6 <_realloc_r+0x2a2>
 8004ee6:	4637      	mov	r7, r6
 8004ee8:	e6ed      	b.n	8004cc6 <_realloc_r+0xc2>
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	431f      	orrs	r7, r3
 8004ef0:	f8c9 7004 	str.w	r7, [r9, #4]
 8004ef4:	6853      	ldr	r3, [r2, #4]
 8004ef6:	f043 0301 	orr.w	r3, r3, #1
 8004efa:	6053      	str	r3, [r2, #4]
 8004efc:	e6ff      	b.n	8004cfe <_realloc_r+0xfa>
 8004efe:	bf00      	nop
 8004f00:	200000f8 	.word	0x200000f8

08004f04 <__ascii_wctomb>:
 8004f04:	b149      	cbz	r1, 8004f1a <__ascii_wctomb+0x16>
 8004f06:	2aff      	cmp	r2, #255	; 0xff
 8004f08:	bf85      	ittet	hi
 8004f0a:	238a      	movhi	r3, #138	; 0x8a
 8004f0c:	6003      	strhi	r3, [r0, #0]
 8004f0e:	700a      	strbls	r2, [r1, #0]
 8004f10:	f04f 30ff 	movhi.w	r0, #4294967295
 8004f14:	bf98      	it	ls
 8004f16:	2001      	movls	r0, #1
 8004f18:	4770      	bx	lr
 8004f1a:	4608      	mov	r0, r1
 8004f1c:	4770      	bx	lr
	...

08004f20 <_sbrk>:
 8004f20:	4b04      	ldr	r3, [pc, #16]	; (8004f34 <_sbrk+0x14>)
 8004f22:	6819      	ldr	r1, [r3, #0]
 8004f24:	4602      	mov	r2, r0
 8004f26:	b909      	cbnz	r1, 8004f2c <_sbrk+0xc>
 8004f28:	4903      	ldr	r1, [pc, #12]	; (8004f38 <_sbrk+0x18>)
 8004f2a:	6019      	str	r1, [r3, #0]
 8004f2c:	6818      	ldr	r0, [r3, #0]
 8004f2e:	4402      	add	r2, r0
 8004f30:	601a      	str	r2, [r3, #0]
 8004f32:	4770      	bx	lr
 8004f34:	200006c4 	.word	0x200006c4
 8004f38:	20000764 	.word	0x20000764

08004f3c <_init>:
 8004f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f3e:	bf00      	nop
 8004f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f42:	bc08      	pop	{r3}
 8004f44:	469e      	mov	lr, r3
 8004f46:	4770      	bx	lr

08004f48 <_fini>:
 8004f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f4a:	bf00      	nop
 8004f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f4e:	bc08      	pop	{r3}
 8004f50:	469e      	mov	lr, r3
 8004f52:	4770      	bx	lr
