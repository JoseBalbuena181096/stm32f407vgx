
C:\Users\LENOVO\Documents\dimmer\Debug\dimmer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fbc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001144  08001144  00011144  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800116c  0800116c  0001116c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001170  08001170  00011170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          00000060  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000064  20000064  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000c451  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001c92  00000000  00000000  0002c485  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000227d  00000000  00000000  0002e117  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000004e8  00000000  00000000  00030398  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000670  00000000  00000000  00030880  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00003121  00000000  00000000  00030ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000021b2  00000000  00000000  00034011  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000361c3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000bc0  00000000  00000000  00036240  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800112c 	.word	0x0800112c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	0800112c 	.word	0x0800112c

080001c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80001ca:	4b08      	ldr	r3, [pc, #32]	; (80001ec <HAL_InitTick+0x24>)
{
 80001cc:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80001ce:	6818      	ldr	r0, [r3, #0]
 80001d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80001d8:	f000 f878 	bl	80002cc <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001dc:	2200      	movs	r2, #0
 80001de:	4621      	mov	r1, r4
 80001e0:	f04f 30ff 	mov.w	r0, #4294967295
 80001e4:	f000 f83e 	bl	8000264 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80001e8:	2000      	movs	r0, #0
 80001ea:	bd10      	pop	{r4, pc}
 80001ec:	20000000 	.word	0x20000000

080001f0 <HAL_Init>:
{
 80001f0:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80001f2:	4b0b      	ldr	r3, [pc, #44]	; (8000220 <HAL_Init+0x30>)
 80001f4:	681a      	ldr	r2, [r3, #0]
 80001f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80001fa:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80001fc:	681a      	ldr	r2, [r3, #0]
 80001fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000202:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000204:	681a      	ldr	r2, [r3, #0]
 8000206:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800020a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800020c:	2003      	movs	r0, #3
 800020e:	f000 f817 	bl	8000240 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000212:	2000      	movs	r0, #0
 8000214:	f7ff ffd8 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 8000218:	f000 fe8d 	bl	8000f36 <HAL_MspInit>
}
 800021c:	2000      	movs	r0, #0
 800021e:	bd08      	pop	{r3, pc}
 8000220:	40023c00 	.word	0x40023c00

08000224 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000224:	4a02      	ldr	r2, [pc, #8]	; (8000230 <HAL_IncTick+0xc>)
 8000226:	6813      	ldr	r3, [r2, #0]
 8000228:	3301      	adds	r3, #1
 800022a:	6013      	str	r3, [r2, #0]
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	20000020 	.word	0x20000020

08000234 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000234:	4b01      	ldr	r3, [pc, #4]	; (800023c <HAL_GetTick+0x8>)
 8000236:	6818      	ldr	r0, [r3, #0]
}
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	20000020 	.word	0x20000020

08000240 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000240:	4a07      	ldr	r2, [pc, #28]	; (8000260 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000242:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000244:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000248:	041b      	lsls	r3, r3, #16
 800024a:	0c1b      	lsrs	r3, r3, #16
 800024c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000250:	0200      	lsls	r0, r0, #8
 8000252:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000256:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800025a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800025c:	60d3      	str	r3, [r2, #12]
 800025e:	4770      	bx	lr
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000266:	b530      	push	{r4, r5, lr}
 8000268:	68dc      	ldr	r4, [r3, #12]
 800026a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800026e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000272:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000274:	2b04      	cmp	r3, #4
 8000276:	bf28      	it	cs
 8000278:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800027a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800027c:	f04f 0501 	mov.w	r5, #1
 8000280:	fa05 f303 	lsl.w	r3, r5, r3
 8000284:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000288:	bf8c      	ite	hi
 800028a:	3c03      	subhi	r4, #3
 800028c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800028e:	4019      	ands	r1, r3
 8000290:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000292:	fa05 f404 	lsl.w	r4, r5, r4
 8000296:	3c01      	subs	r4, #1
 8000298:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800029a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800029c:	ea42 0201 	orr.w	r2, r2, r1
 80002a0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a4:	bfaf      	iteee	ge
 80002a6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002aa:	f000 000f 	andlt.w	r0, r0, #15
 80002ae:	4b06      	ldrlt	r3, [pc, #24]	; (80002c8 <HAL_NVIC_SetPriority+0x64>)
 80002b0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b2:	bfa5      	ittet	ge
 80002b4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80002b8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ba:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002bc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002c0:	bd30      	pop	{r4, r5, pc}
 80002c2:	bf00      	nop
 80002c4:	e000ed00 	.word	0xe000ed00
 80002c8:	e000ed14 	.word	0xe000ed14

080002cc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002cc:	3801      	subs	r0, #1
 80002ce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002d2:	d20a      	bcs.n	80002ea <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002d4:	4b06      	ldr	r3, [pc, #24]	; (80002f0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d6:	4a07      	ldr	r2, [pc, #28]	; (80002f4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002d8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002da:	21f0      	movs	r1, #240	; 0xf0
 80002dc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002e0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002e2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002e4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002ea:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	e000e010 	.word	0xe000e010
 80002f4:	e000ed00 	.word	0xe000ed00

080002f8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80002f8:	4b04      	ldr	r3, [pc, #16]	; (800030c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002fa:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002fc:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002fe:	bf0c      	ite	eq
 8000300:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000304:	f022 0204 	bicne.w	r2, r2, #4
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	4770      	bx	lr
 800030c:	e000e010 	.word	0xe000e010

08000310 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000310:	4770      	bx	lr

08000312 <HAL_SYSTICK_IRQHandler>:
{
 8000312:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000314:	f7ff fffc 	bl	8000310 <HAL_SYSTICK_Callback>
 8000318:	bd08      	pop	{r3, pc}
	...

0800031c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800031c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000320:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000322:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000324:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80004d4 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000328:	4a68      	ldr	r2, [pc, #416]	; (80004cc <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800032a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80004d8 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800032e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000330:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000332:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000336:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000338:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800033c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000340:	45b6      	cmp	lr, r6
 8000342:	f040 80ae 	bne.w	80004a2 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000346:	684c      	ldr	r4, [r1, #4]
 8000348:	f024 0710 	bic.w	r7, r4, #16
 800034c:	2f02      	cmp	r7, #2
 800034e:	d116      	bne.n	800037e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000350:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000354:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000358:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800035c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000360:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000364:	f04f 0c0f 	mov.w	ip, #15
 8000368:	fa0c fc0b 	lsl.w	ip, ip, fp
 800036c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000370:	690d      	ldr	r5, [r1, #16]
 8000372:	fa05 f50b 	lsl.w	r5, r5, fp
 8000376:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800037a:	f8ca 5020 	str.w	r5, [sl, #32]
 800037e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000382:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000384:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000388:	fa05 f50a 	lsl.w	r5, r5, sl
 800038c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800038e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000392:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000396:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800039a:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800039c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003a0:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80003a2:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003a6:	d811      	bhi.n	80003cc <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80003a8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003aa:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80003ae:	68cf      	ldr	r7, [r1, #12]
 80003b0:	fa07 fc0a 	lsl.w	ip, r7, sl
 80003b4:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80003b8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80003ba:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80003bc:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003c0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80003c4:	409f      	lsls	r7, r3
 80003c6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80003ca:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80003cc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80003ce:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80003d0:	688f      	ldr	r7, [r1, #8]
 80003d2:	fa07 f70a 	lsl.w	r7, r7, sl
 80003d6:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80003d8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003da:	00e5      	lsls	r5, r4, #3
 80003dc:	d561      	bpl.n	80004a2 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003de:	f04f 0b00 	mov.w	fp, #0
 80003e2:	f8cd b00c 	str.w	fp, [sp, #12]
 80003e6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80003ea:	4d39      	ldr	r5, [pc, #228]	; (80004d0 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003ec:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80003f0:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80003f4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80003f8:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80003fc:	9703      	str	r7, [sp, #12]
 80003fe:	9f03      	ldr	r7, [sp, #12]
 8000400:	f023 0703 	bic.w	r7, r3, #3
 8000404:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000408:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800040c:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000410:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000414:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000418:	f04f 0e0f 	mov.w	lr, #15
 800041c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000420:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000422:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000426:	d043      	beq.n	80004b0 <HAL_GPIO_Init+0x194>
 8000428:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800042c:	42a8      	cmp	r0, r5
 800042e:	d041      	beq.n	80004b4 <HAL_GPIO_Init+0x198>
 8000430:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000434:	42a8      	cmp	r0, r5
 8000436:	d03f      	beq.n	80004b8 <HAL_GPIO_Init+0x19c>
 8000438:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800043c:	42a8      	cmp	r0, r5
 800043e:	d03d      	beq.n	80004bc <HAL_GPIO_Init+0x1a0>
 8000440:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000444:	42a8      	cmp	r0, r5
 8000446:	d03b      	beq.n	80004c0 <HAL_GPIO_Init+0x1a4>
 8000448:	4548      	cmp	r0, r9
 800044a:	d03b      	beq.n	80004c4 <HAL_GPIO_Init+0x1a8>
 800044c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000450:	42a8      	cmp	r0, r5
 8000452:	d039      	beq.n	80004c8 <HAL_GPIO_Init+0x1ac>
 8000454:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000458:	42a8      	cmp	r0, r5
 800045a:	bf14      	ite	ne
 800045c:	2508      	movne	r5, #8
 800045e:	2507      	moveq	r5, #7
 8000460:	fa05 f50c 	lsl.w	r5, r5, ip
 8000464:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000468:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800046a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800046c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800046e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000472:	bf0c      	ite	eq
 8000474:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000476:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000478:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800047a:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800047c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000480:	bf0c      	ite	eq
 8000482:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000484:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000486:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000488:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800048a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800048e:	bf0c      	ite	eq
 8000490:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000492:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000494:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000496:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000498:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800049a:	bf54      	ite	pl
 800049c:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800049e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80004a0:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80004a2:	3301      	adds	r3, #1
 80004a4:	2b10      	cmp	r3, #16
 80004a6:	f47f af44 	bne.w	8000332 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80004aa:	b005      	add	sp, #20
 80004ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80004b0:	465d      	mov	r5, fp
 80004b2:	e7d5      	b.n	8000460 <HAL_GPIO_Init+0x144>
 80004b4:	2501      	movs	r5, #1
 80004b6:	e7d3      	b.n	8000460 <HAL_GPIO_Init+0x144>
 80004b8:	2502      	movs	r5, #2
 80004ba:	e7d1      	b.n	8000460 <HAL_GPIO_Init+0x144>
 80004bc:	2503      	movs	r5, #3
 80004be:	e7cf      	b.n	8000460 <HAL_GPIO_Init+0x144>
 80004c0:	2504      	movs	r5, #4
 80004c2:	e7cd      	b.n	8000460 <HAL_GPIO_Init+0x144>
 80004c4:	2505      	movs	r5, #5
 80004c6:	e7cb      	b.n	8000460 <HAL_GPIO_Init+0x144>
 80004c8:	2506      	movs	r5, #6
 80004ca:	e7c9      	b.n	8000460 <HAL_GPIO_Init+0x144>
 80004cc:	40013c00 	.word	0x40013c00
 80004d0:	40020000 	.word	0x40020000
 80004d4:	40023800 	.word	0x40023800
 80004d8:	40021400 	.word	0x40021400

080004dc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80004dc:	b10a      	cbz	r2, 80004e2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80004de:	6181      	str	r1, [r0, #24]
 80004e0:	4770      	bx	lr
 80004e2:	0409      	lsls	r1, r1, #16
 80004e4:	e7fb      	b.n	80004de <HAL_GPIO_WritePin+0x2>
	...

080004e8 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004e8:	6803      	ldr	r3, [r0, #0]
{
 80004ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80004ec:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004ee:	07d8      	lsls	r0, r3, #31
 80004f0:	d43b      	bmi.n	800056a <HAL_RCC_OscConfig+0x82>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004f2:	6823      	ldr	r3, [r4, #0]
 80004f4:	0799      	lsls	r1, r3, #30
 80004f6:	f100 8086 	bmi.w	8000606 <HAL_RCC_OscConfig+0x11e>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004fa:	6823      	ldr	r3, [r4, #0]
 80004fc:	071e      	lsls	r6, r3, #28
 80004fe:	f100 80d1 	bmi.w	80006a4 <HAL_RCC_OscConfig+0x1bc>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000502:	6823      	ldr	r3, [r4, #0]
 8000504:	075d      	lsls	r5, r3, #29
 8000506:	d52a      	bpl.n	800055e <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000508:	2300      	movs	r3, #0
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	4b8e      	ldr	r3, [pc, #568]	; (8000748 <HAL_RCC_OscConfig+0x260>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800050e:	4d8f      	ldr	r5, [pc, #572]	; (800074c <HAL_RCC_OscConfig+0x264>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8000510:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000512:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000516:	641a      	str	r2, [r3, #64]	; 0x40
 8000518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800051a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8000522:	682b      	ldr	r3, [r5, #0]
 8000524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000528:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 800052a:	f7ff fe83 	bl	8000234 <HAL_GetTick>
 800052e:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000530:	682b      	ldr	r3, [r5, #0]
 8000532:	05da      	lsls	r2, r3, #23
 8000534:	f140 80d8 	bpl.w	80006e8 <HAL_RCC_OscConfig+0x200>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000538:	68a3      	ldr	r3, [r4, #8]
 800053a:	4d83      	ldr	r5, [pc, #524]	; (8000748 <HAL_RCC_OscConfig+0x260>)
 800053c:	2b01      	cmp	r3, #1
 800053e:	f040 80da 	bne.w	80006f6 <HAL_RCC_OscConfig+0x20e>
 8000542:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	672b      	str	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800054a:	f7ff fe73 	bl	8000234 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800054e:	4d7e      	ldr	r5, [pc, #504]	; (8000748 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 8000550:	4606      	mov	r6, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000552:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000556:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000558:	079b      	lsls	r3, r3, #30
 800055a:	f140 80ed 	bpl.w	8000738 <HAL_RCC_OscConfig+0x250>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800055e:	69a2      	ldr	r2, [r4, #24]
 8000560:	2a00      	cmp	r2, #0
 8000562:	f040 80f9 	bne.w	8000758 <HAL_RCC_OscConfig+0x270>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000566:	2000      	movs	r0, #0
 8000568:	e015      	b.n	8000596 <HAL_RCC_OscConfig+0xae>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800056a:	4b77      	ldr	r3, [pc, #476]	; (8000748 <HAL_RCC_OscConfig+0x260>)
 800056c:	689a      	ldr	r2, [r3, #8]
 800056e:	f002 020c 	and.w	r2, r2, #12
 8000572:	2a04      	cmp	r2, #4
 8000574:	d007      	beq.n	8000586 <HAL_RCC_OscConfig+0x9e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000576:	689a      	ldr	r2, [r3, #8]
 8000578:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800057c:	2a08      	cmp	r2, #8
 800057e:	d10c      	bne.n	800059a <HAL_RCC_OscConfig+0xb2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000580:	685b      	ldr	r3, [r3, #4]
 8000582:	025a      	lsls	r2, r3, #9
 8000584:	d509      	bpl.n	800059a <HAL_RCC_OscConfig+0xb2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000586:	4b70      	ldr	r3, [pc, #448]	; (8000748 <HAL_RCC_OscConfig+0x260>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	039b      	lsls	r3, r3, #14
 800058c:	d5b1      	bpl.n	80004f2 <HAL_RCC_OscConfig+0xa>
 800058e:	6863      	ldr	r3, [r4, #4]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d1ae      	bne.n	80004f2 <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 8000594:	2001      	movs	r0, #1
}
 8000596:	b003      	add	sp, #12
 8000598:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800059a:	6863      	ldr	r3, [r4, #4]
 800059c:	4d6a      	ldr	r5, [pc, #424]	; (8000748 <HAL_RCC_OscConfig+0x260>)
 800059e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005a2:	d111      	bne.n	80005c8 <HAL_RCC_OscConfig+0xe0>
 80005a4:	682b      	ldr	r3, [r5, #0]
 80005a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005aa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80005ac:	f7ff fe42 	bl	8000234 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005b0:	4d65      	ldr	r5, [pc, #404]	; (8000748 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 80005b2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005b4:	682b      	ldr	r3, [r5, #0]
 80005b6:	039f      	lsls	r7, r3, #14
 80005b8:	d49b      	bmi.n	80004f2 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005ba:	f7ff fe3b 	bl	8000234 <HAL_GetTick>
 80005be:	1b80      	subs	r0, r0, r6
 80005c0:	2864      	cmp	r0, #100	; 0x64
 80005c2:	d9f7      	bls.n	80005b4 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 80005c4:	2003      	movs	r0, #3
 80005c6:	e7e6      	b.n	8000596 <HAL_RCC_OscConfig+0xae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80005cc:	d104      	bne.n	80005d8 <HAL_RCC_OscConfig+0xf0>
 80005ce:	682b      	ldr	r3, [r5, #0]
 80005d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005d4:	602b      	str	r3, [r5, #0]
 80005d6:	e7e5      	b.n	80005a4 <HAL_RCC_OscConfig+0xbc>
 80005d8:	682a      	ldr	r2, [r5, #0]
 80005da:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80005de:	602a      	str	r2, [r5, #0]
 80005e0:	682a      	ldr	r2, [r5, #0]
 80005e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80005e6:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d1df      	bne.n	80005ac <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 80005ec:	f7ff fe22 	bl	8000234 <HAL_GetTick>
 80005f0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005f2:	682b      	ldr	r3, [r5, #0]
 80005f4:	0398      	lsls	r0, r3, #14
 80005f6:	f57f af7c 	bpl.w	80004f2 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005fa:	f7ff fe1b 	bl	8000234 <HAL_GetTick>
 80005fe:	1b80      	subs	r0, r0, r6
 8000600:	2864      	cmp	r0, #100	; 0x64
 8000602:	d9f6      	bls.n	80005f2 <HAL_RCC_OscConfig+0x10a>
 8000604:	e7de      	b.n	80005c4 <HAL_RCC_OscConfig+0xdc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000606:	4b50      	ldr	r3, [pc, #320]	; (8000748 <HAL_RCC_OscConfig+0x260>)
 8000608:	689a      	ldr	r2, [r3, #8]
 800060a:	f012 0f0c 	tst.w	r2, #12
 800060e:	d007      	beq.n	8000620 <HAL_RCC_OscConfig+0x138>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000610:	689a      	ldr	r2, [r3, #8]
 8000612:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000616:	2a08      	cmp	r2, #8
 8000618:	d116      	bne.n	8000648 <HAL_RCC_OscConfig+0x160>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	0259      	lsls	r1, r3, #9
 800061e:	d413      	bmi.n	8000648 <HAL_RCC_OscConfig+0x160>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000620:	4b49      	ldr	r3, [pc, #292]	; (8000748 <HAL_RCC_OscConfig+0x260>)
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	0792      	lsls	r2, r2, #30
 8000626:	d502      	bpl.n	800062e <HAL_RCC_OscConfig+0x146>
 8000628:	68e2      	ldr	r2, [r4, #12]
 800062a:	2a01      	cmp	r2, #1
 800062c:	d1b2      	bne.n	8000594 <HAL_RCC_OscConfig+0xac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800062e:	6818      	ldr	r0, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000630:	22f8      	movs	r2, #248	; 0xf8
 8000632:	fa92 f2a2 	rbit	r2, r2
 8000636:	fab2 f182 	clz	r1, r2
 800063a:	6922      	ldr	r2, [r4, #16]
 800063c:	408a      	lsls	r2, r1
 800063e:	f020 01f8 	bic.w	r1, r0, #248	; 0xf8
 8000642:	430a      	orrs	r2, r1
 8000644:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000646:	e758      	b.n	80004fa <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000648:	68e2      	ldr	r2, [r4, #12]
 800064a:	4b41      	ldr	r3, [pc, #260]	; (8000750 <HAL_RCC_OscConfig+0x268>)
 800064c:	b1da      	cbz	r2, 8000686 <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_HSI_ENABLE();
 800064e:	2201      	movs	r2, #1
 8000650:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000652:	f7ff fdef 	bl	8000234 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000656:	4d3c      	ldr	r5, [pc, #240]	; (8000748 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 8000658:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800065a:	682b      	ldr	r3, [r5, #0]
 800065c:	079b      	lsls	r3, r3, #30
 800065e:	d50c      	bpl.n	800067a <HAL_RCC_OscConfig+0x192>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000660:	6829      	ldr	r1, [r5, #0]
 8000662:	23f8      	movs	r3, #248	; 0xf8
 8000664:	fa93 f3a3 	rbit	r3, r3
 8000668:	fab3 f283 	clz	r2, r3
 800066c:	6923      	ldr	r3, [r4, #16]
 800066e:	4093      	lsls	r3, r2
 8000670:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000674:	4313      	orrs	r3, r2
 8000676:	602b      	str	r3, [r5, #0]
 8000678:	e73f      	b.n	80004fa <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800067a:	f7ff fddb 	bl	8000234 <HAL_GetTick>
 800067e:	1b80      	subs	r0, r0, r6
 8000680:	2802      	cmp	r0, #2
 8000682:	d9ea      	bls.n	800065a <HAL_RCC_OscConfig+0x172>
 8000684:	e79e      	b.n	80005c4 <HAL_RCC_OscConfig+0xdc>
        __HAL_RCC_HSI_DISABLE();
 8000686:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000688:	f7ff fdd4 	bl	8000234 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800068c:	4d2e      	ldr	r5, [pc, #184]	; (8000748 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 800068e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000690:	682b      	ldr	r3, [r5, #0]
 8000692:	079f      	lsls	r7, r3, #30
 8000694:	f57f af31 	bpl.w	80004fa <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000698:	f7ff fdcc 	bl	8000234 <HAL_GetTick>
 800069c:	1b80      	subs	r0, r0, r6
 800069e:	2802      	cmp	r0, #2
 80006a0:	d9f6      	bls.n	8000690 <HAL_RCC_OscConfig+0x1a8>
 80006a2:	e78f      	b.n	80005c4 <HAL_RCC_OscConfig+0xdc>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80006a4:	6962      	ldr	r2, [r4, #20]
 80006a6:	4b2b      	ldr	r3, [pc, #172]	; (8000754 <HAL_RCC_OscConfig+0x26c>)
 80006a8:	b17a      	cbz	r2, 80006ca <HAL_RCC_OscConfig+0x1e2>
      __HAL_RCC_LSI_ENABLE();
 80006aa:	2201      	movs	r2, #1
 80006ac:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80006ae:	f7ff fdc1 	bl	8000234 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006b2:	4d25      	ldr	r5, [pc, #148]	; (8000748 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 80006b4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006b6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80006b8:	0798      	lsls	r0, r3, #30
 80006ba:	f53f af22 	bmi.w	8000502 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006be:	f7ff fdb9 	bl	8000234 <HAL_GetTick>
 80006c2:	1b80      	subs	r0, r0, r6
 80006c4:	2802      	cmp	r0, #2
 80006c6:	d9f6      	bls.n	80006b6 <HAL_RCC_OscConfig+0x1ce>
 80006c8:	e77c      	b.n	80005c4 <HAL_RCC_OscConfig+0xdc>
      __HAL_RCC_LSI_DISABLE();
 80006ca:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80006cc:	f7ff fdb2 	bl	8000234 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006d0:	4d1d      	ldr	r5, [pc, #116]	; (8000748 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 80006d2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006d4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80006d6:	0799      	lsls	r1, r3, #30
 80006d8:	f57f af13 	bpl.w	8000502 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006dc:	f7ff fdaa 	bl	8000234 <HAL_GetTick>
 80006e0:	1b80      	subs	r0, r0, r6
 80006e2:	2802      	cmp	r0, #2
 80006e4:	d9f6      	bls.n	80006d4 <HAL_RCC_OscConfig+0x1ec>
 80006e6:	e76d      	b.n	80005c4 <HAL_RCC_OscConfig+0xdc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80006e8:	f7ff fda4 	bl	8000234 <HAL_GetTick>
 80006ec:	1b80      	subs	r0, r0, r6
 80006ee:	2802      	cmp	r0, #2
 80006f0:	f67f af1e 	bls.w	8000530 <HAL_RCC_OscConfig+0x48>
 80006f4:	e766      	b.n	80005c4 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006f6:	2b05      	cmp	r3, #5
 80006f8:	d104      	bne.n	8000704 <HAL_RCC_OscConfig+0x21c>
 80006fa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80006fc:	f043 0304 	orr.w	r3, r3, #4
 8000700:	672b      	str	r3, [r5, #112]	; 0x70
 8000702:	e71e      	b.n	8000542 <HAL_RCC_OscConfig+0x5a>
 8000704:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000706:	f022 0201 	bic.w	r2, r2, #1
 800070a:	672a      	str	r2, [r5, #112]	; 0x70
 800070c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800070e:	f022 0204 	bic.w	r2, r2, #4
 8000712:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000714:	2b00      	cmp	r3, #0
 8000716:	f47f af18 	bne.w	800054a <HAL_RCC_OscConfig+0x62>
      tickstart = HAL_GetTick();
 800071a:	f7ff fd8b 	bl	8000234 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800071e:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000722:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000724:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000726:	0798      	lsls	r0, r3, #30
 8000728:	f57f af19 	bpl.w	800055e <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800072c:	f7ff fd82 	bl	8000234 <HAL_GetTick>
 8000730:	1b80      	subs	r0, r0, r6
 8000732:	42b8      	cmp	r0, r7
 8000734:	d9f6      	bls.n	8000724 <HAL_RCC_OscConfig+0x23c>
 8000736:	e745      	b.n	80005c4 <HAL_RCC_OscConfig+0xdc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000738:	f7ff fd7c 	bl	8000234 <HAL_GetTick>
 800073c:	1b80      	subs	r0, r0, r6
 800073e:	42b8      	cmp	r0, r7
 8000740:	f67f af09 	bls.w	8000556 <HAL_RCC_OscConfig+0x6e>
 8000744:	e73e      	b.n	80005c4 <HAL_RCC_OscConfig+0xdc>
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000
 8000750:	42470000 	.word	0x42470000
 8000754:	42470e80 	.word	0x42470e80
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000758:	4d2b      	ldr	r5, [pc, #172]	; (8000808 <HAL_RCC_OscConfig+0x320>)
 800075a:	68ab      	ldr	r3, [r5, #8]
 800075c:	f003 030c 	and.w	r3, r3, #12
 8000760:	2b08      	cmp	r3, #8
 8000762:	f43f af17 	beq.w	8000594 <HAL_RCC_OscConfig+0xac>
 8000766:	4e29      	ldr	r6, [pc, #164]	; (800080c <HAL_RCC_OscConfig+0x324>)
 8000768:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800076a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800076c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800076e:	d13e      	bne.n	80007ee <HAL_RCC_OscConfig+0x306>
        tickstart = HAL_GetTick();
 8000770:	f7ff fd60 	bl	8000234 <HAL_GetTick>
 8000774:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000776:	682b      	ldr	r3, [r5, #0]
 8000778:	0199      	lsls	r1, r3, #6
 800077a:	d432      	bmi.n	80007e2 <HAL_RCC_OscConfig+0x2fa>
 800077c:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8000780:	fa97 f7a7 	rbit	r7, r7
 8000784:	f44f 3240 	mov.w	r2, #196608	; 0x30000
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000788:	fab7 f787 	clz	r7, r7
 800078c:	fa92 f2a2 	rbit	r2, r2
 8000790:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8000794:	fab2 f082 	clz	r0, r2
 8000798:	fa91 f1a1 	rbit	r1, r1
 800079c:	6a22      	ldr	r2, [r4, #32]
 800079e:	69e3      	ldr	r3, [r4, #28]
 80007a0:	4313      	orrs	r3, r2
 80007a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80007a4:	fa02 f707 	lsl.w	r7, r2, r7
 80007a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80007aa:	0852      	lsrs	r2, r2, #1
 80007ac:	3a01      	subs	r2, #1
 80007ae:	4082      	lsls	r2, r0
 80007b0:	433b      	orrs	r3, r7
 80007b2:	4313      	orrs	r3, r2
 80007b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80007b6:	4c14      	ldr	r4, [pc, #80]	; (8000808 <HAL_RCC_OscConfig+0x320>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80007b8:	fab1 f181 	clz	r1, r1
 80007bc:	fa02 f101 	lsl.w	r1, r2, r1
 80007c0:	430b      	orrs	r3, r1
 80007c2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80007c4:	2301      	movs	r3, #1
 80007c6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80007c8:	f7ff fd34 	bl	8000234 <HAL_GetTick>
 80007cc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80007ce:	6823      	ldr	r3, [r4, #0]
 80007d0:	019a      	lsls	r2, r3, #6
 80007d2:	f53f aec8 	bmi.w	8000566 <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007d6:	f7ff fd2d 	bl	8000234 <HAL_GetTick>
 80007da:	1b40      	subs	r0, r0, r5
 80007dc:	2802      	cmp	r0, #2
 80007de:	d9f6      	bls.n	80007ce <HAL_RCC_OscConfig+0x2e6>
 80007e0:	e6f0      	b.n	80005c4 <HAL_RCC_OscConfig+0xdc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007e2:	f7ff fd27 	bl	8000234 <HAL_GetTick>
 80007e6:	1bc0      	subs	r0, r0, r7
 80007e8:	2802      	cmp	r0, #2
 80007ea:	d9c4      	bls.n	8000776 <HAL_RCC_OscConfig+0x28e>
 80007ec:	e6ea      	b.n	80005c4 <HAL_RCC_OscConfig+0xdc>
        tickstart = HAL_GetTick();
 80007ee:	f7ff fd21 	bl	8000234 <HAL_GetTick>
 80007f2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80007f4:	682b      	ldr	r3, [r5, #0]
 80007f6:	019b      	lsls	r3, r3, #6
 80007f8:	f57f aeb5 	bpl.w	8000566 <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007fc:	f7ff fd1a 	bl	8000234 <HAL_GetTick>
 8000800:	1b00      	subs	r0, r0, r4
 8000802:	2802      	cmp	r0, #2
 8000804:	d9f6      	bls.n	80007f4 <HAL_RCC_OscConfig+0x30c>
 8000806:	e6dd      	b.n	80005c4 <HAL_RCC_OscConfig+0xdc>
 8000808:	40023800 	.word	0x40023800
 800080c:	42470060 	.word	0x42470060

08000810 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000810:	4a19      	ldr	r2, [pc, #100]	; (8000878 <HAL_RCC_GetSysClockFreq+0x68>)
 8000812:	6893      	ldr	r3, [r2, #8]
 8000814:	f003 030c 	and.w	r3, r3, #12
 8000818:	2b04      	cmp	r3, #4
{
 800081a:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800081c:	d003      	beq.n	8000826 <HAL_RCC_GetSysClockFreq+0x16>
 800081e:	2b08      	cmp	r3, #8
 8000820:	d003      	beq.n	800082a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000822:	4816      	ldr	r0, [pc, #88]	; (800087c <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000824:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8000826:	4816      	ldr	r0, [pc, #88]	; (8000880 <HAL_RCC_GetSysClockFreq+0x70>)
 8000828:	bd10      	pop	{r4, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800082a:	6851      	ldr	r1, [r2, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800082c:	6853      	ldr	r3, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800082e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000832:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000836:	f647 74c0 	movw	r4, #32704	; 0x7fc0
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 800083a:	6853      	ldr	r3, [r2, #4]
 800083c:	fa94 f0a4 	rbit	r0, r4
 8000840:	fab0 f080 	clz	r0, r0
 8000844:	ea03 0304 	and.w	r3, r3, r4
 8000848:	fa23 f300 	lsr.w	r3, r3, r0
 800084c:	bf14      	ite	ne
 800084e:	480c      	ldrne	r0, [pc, #48]	; (8000880 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8000850:	480a      	ldreq	r0, [pc, #40]	; (800087c <HAL_RCC_GetSysClockFreq+0x6c>)
 8000852:	fbb0 f0f1 	udiv	r0, r0, r1
 8000856:	4358      	muls	r0, r3
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8000858:	4b07      	ldr	r3, [pc, #28]	; (8000878 <HAL_RCC_GetSysClockFreq+0x68>)
 800085a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	fa92 f2a2 	rbit	r2, r2
 8000864:	fab2 f282 	clz	r2, r2
 8000868:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800086c:	40d3      	lsrs	r3, r2
 800086e:	3301      	adds	r3, #1
 8000870:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000872:	fbb0 f0f3 	udiv	r0, r0, r3
 8000876:	bd10      	pop	{r4, pc}
 8000878:	40023800 	.word	0x40023800
 800087c:	00f42400 	.word	0x00f42400
 8000880:	017d7840 	.word	0x017d7840

08000884 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000884:	4b56      	ldr	r3, [pc, #344]	; (80009e0 <HAL_RCC_ClockConfig+0x15c>)
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	f002 020f 	and.w	r2, r2, #15
 800088c:	428a      	cmp	r2, r1
{
 800088e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000892:	4605      	mov	r5, r0
 8000894:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000896:	d330      	bcc.n	80008fa <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000898:	682a      	ldr	r2, [r5, #0]
 800089a:	0794      	lsls	r4, r2, #30
 800089c:	d437      	bmi.n	800090e <HAL_RCC_ClockConfig+0x8a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800089e:	07d0      	lsls	r0, r2, #31
 80008a0:	d43d      	bmi.n	800091e <HAL_RCC_ClockConfig+0x9a>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80008a2:	4b4f      	ldr	r3, [pc, #316]	; (80009e0 <HAL_RCC_ClockConfig+0x15c>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	f002 020f 	and.w	r2, r2, #15
 80008aa:	4296      	cmp	r6, r2
 80008ac:	f0c0 8088 	bcc.w	80009c0 <HAL_RCC_ClockConfig+0x13c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80008b0:	682a      	ldr	r2, [r5, #0]
 80008b2:	0751      	lsls	r1, r2, #29
 80008b4:	f100 808c 	bmi.w	80009d0 <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80008b8:	0713      	lsls	r3, r2, #28
 80008ba:	d507      	bpl.n	80008cc <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80008bc:	4a49      	ldr	r2, [pc, #292]	; (80009e4 <HAL_RCC_ClockConfig+0x160>)
 80008be:	6929      	ldr	r1, [r5, #16]
 80008c0:	6893      	ldr	r3, [r2, #8]
 80008c2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80008c6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80008ca:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80008cc:	f7ff ffa0 	bl	8000810 <HAL_RCC_GetSysClockFreq>
 80008d0:	4b44      	ldr	r3, [pc, #272]	; (80009e4 <HAL_RCC_ClockConfig+0x160>)
 80008d2:	22f0      	movs	r2, #240	; 0xf0
 80008d4:	689b      	ldr	r3, [r3, #8]
 80008d6:	fa92 f2a2 	rbit	r2, r2
 80008da:	fab2 f282 	clz	r2, r2
 80008de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80008e2:	40d3      	lsrs	r3, r2
 80008e4:	4a40      	ldr	r2, [pc, #256]	; (80009e8 <HAL_RCC_ClockConfig+0x164>)
 80008e6:	5cd3      	ldrb	r3, [r2, r3]
 80008e8:	40d8      	lsrs	r0, r3
 80008ea:	4b40      	ldr	r3, [pc, #256]	; (80009ec <HAL_RCC_ClockConfig+0x168>)
 80008ec:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80008ee:	2000      	movs	r0, #0
 80008f0:	f7ff fc6a 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 80008f4:	2000      	movs	r0, #0
}
 80008f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80008fa:	b2ca      	uxtb	r2, r1
 80008fc:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f003 030f 	and.w	r3, r3, #15
 8000904:	4299      	cmp	r1, r3
 8000906:	d0c7      	beq.n	8000898 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000908:	2001      	movs	r0, #1
 800090a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800090e:	4935      	ldr	r1, [pc, #212]	; (80009e4 <HAL_RCC_ClockConfig+0x160>)
 8000910:	68a8      	ldr	r0, [r5, #8]
 8000912:	688b      	ldr	r3, [r1, #8]
 8000914:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000918:	4303      	orrs	r3, r0
 800091a:	608b      	str	r3, [r1, #8]
 800091c:	e7bf      	b.n	800089e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800091e:	686a      	ldr	r2, [r5, #4]
 8000920:	4b30      	ldr	r3, [pc, #192]	; (80009e4 <HAL_RCC_ClockConfig+0x160>)
 8000922:	2a01      	cmp	r2, #1
 8000924:	d11e      	bne.n	8000964 <HAL_RCC_ClockConfig+0xe0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800092c:	d0ec      	beq.n	8000908 <HAL_RCC_ClockConfig+0x84>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800092e:	4c2d      	ldr	r4, [pc, #180]	; (80009e4 <HAL_RCC_ClockConfig+0x160>)
 8000930:	68a3      	ldr	r3, [r4, #8]
 8000932:	f023 0303 	bic.w	r3, r3, #3
 8000936:	4313      	orrs	r3, r2
 8000938:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800093a:	f7ff fc7b 	bl	8000234 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800093e:	686b      	ldr	r3, [r5, #4]
 8000940:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8000942:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000944:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000948:	d116      	bne.n	8000978 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800094a:	68a3      	ldr	r3, [r4, #8]
 800094c:	f003 030c 	and.w	r3, r3, #12
 8000950:	2b04      	cmp	r3, #4
 8000952:	d0a6      	beq.n	80008a2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000954:	f7ff fc6e 	bl	8000234 <HAL_GetTick>
 8000958:	1bc0      	subs	r0, r0, r7
 800095a:	4540      	cmp	r0, r8
 800095c:	d9f5      	bls.n	800094a <HAL_RCC_ClockConfig+0xc6>
          return HAL_TIMEOUT;
 800095e:	2003      	movs	r0, #3
 8000960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000964:	1e91      	subs	r1, r2, #2
 8000966:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000968:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 800096a:	d802      	bhi.n	8000972 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800096c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000970:	e7dc      	b.n	800092c <HAL_RCC_ClockConfig+0xa8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000972:	f013 0f02 	tst.w	r3, #2
 8000976:	e7d9      	b.n	800092c <HAL_RCC_ClockConfig+0xa8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000978:	2b02      	cmp	r3, #2
 800097a:	d10a      	bne.n	8000992 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800097c:	68a3      	ldr	r3, [r4, #8]
 800097e:	f003 030c 	and.w	r3, r3, #12
 8000982:	2b08      	cmp	r3, #8
 8000984:	d08d      	beq.n	80008a2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000986:	f7ff fc55 	bl	8000234 <HAL_GetTick>
 800098a:	1bc0      	subs	r0, r0, r7
 800098c:	4540      	cmp	r0, r8
 800098e:	d9f5      	bls.n	800097c <HAL_RCC_ClockConfig+0xf8>
 8000990:	e7e5      	b.n	800095e <HAL_RCC_ClockConfig+0xda>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8000992:	2b03      	cmp	r3, #3
 8000994:	d10f      	bne.n	80009b6 <HAL_RCC_ClockConfig+0x132>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8000996:	68a3      	ldr	r3, [r4, #8]
 8000998:	f003 030c 	and.w	r3, r3, #12
 800099c:	2b0c      	cmp	r3, #12
 800099e:	d080      	beq.n	80008a2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009a0:	f7ff fc48 	bl	8000234 <HAL_GetTick>
 80009a4:	1bc0      	subs	r0, r0, r7
 80009a6:	4540      	cmp	r0, r8
 80009a8:	d9f5      	bls.n	8000996 <HAL_RCC_ClockConfig+0x112>
 80009aa:	e7d8      	b.n	800095e <HAL_RCC_ClockConfig+0xda>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009ac:	f7ff fc42 	bl	8000234 <HAL_GetTick>
 80009b0:	1bc0      	subs	r0, r0, r7
 80009b2:	4540      	cmp	r0, r8
 80009b4:	d8d3      	bhi.n	800095e <HAL_RCC_ClockConfig+0xda>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80009b6:	68a3      	ldr	r3, [r4, #8]
 80009b8:	f013 0f0c 	tst.w	r3, #12
 80009bc:	d1f6      	bne.n	80009ac <HAL_RCC_ClockConfig+0x128>
 80009be:	e770      	b.n	80008a2 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009c0:	b2f2      	uxtb	r2, r6
 80009c2:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f003 030f 	and.w	r3, r3, #15
 80009ca:	429e      	cmp	r6, r3
 80009cc:	d19c      	bne.n	8000908 <HAL_RCC_ClockConfig+0x84>
 80009ce:	e76f      	b.n	80008b0 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80009d0:	4904      	ldr	r1, [pc, #16]	; (80009e4 <HAL_RCC_ClockConfig+0x160>)
 80009d2:	68e8      	ldr	r0, [r5, #12]
 80009d4:	688b      	ldr	r3, [r1, #8]
 80009d6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80009da:	4303      	orrs	r3, r0
 80009dc:	608b      	str	r3, [r1, #8]
 80009de:	e76b      	b.n	80008b8 <HAL_RCC_ClockConfig+0x34>
 80009e0:	40023c00 	.word	0x40023c00
 80009e4:	40023800 	.word	0x40023800
 80009e8:	08001144 	.word	0x08001144
 80009ec:	20000000 	.word	0x20000000

080009f0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80009f0:	4b01      	ldr	r3, [pc, #4]	; (80009f8 <HAL_RCC_GetHCLKFreq+0x8>)
 80009f2:	6818      	ldr	r0, [r3, #0]
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	20000000 	.word	0x20000000

080009fc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 80009fe:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	fa92 f2a2 	rbit	r2, r2
 8000a08:	fab2 f282 	clz	r2, r2
 8000a0c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000a10:	40d3      	lsrs	r3, r2
 8000a12:	4a04      	ldr	r2, [pc, #16]	; (8000a24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000a14:	5cd3      	ldrb	r3, [r2, r3]
 8000a16:	4a04      	ldr	r2, [pc, #16]	; (8000a28 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000a18:	6810      	ldr	r0, [r2, #0]
}
 8000a1a:	40d8      	lsrs	r0, r3
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800
 8000a24:	08001154 	.word	0x08001154
 8000a28:	20000000 	.word	0x20000000

08000a2c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000a2e:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	fa92 f2a2 	rbit	r2, r2
 8000a38:	fab2 f282 	clz	r2, r2
 8000a3c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000a40:	40d3      	lsrs	r3, r2
 8000a42:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000a44:	5cd3      	ldrb	r3, [r2, r3]
 8000a46:	4a04      	ldr	r2, [pc, #16]	; (8000a58 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000a48:	6810      	ldr	r0, [r2, #0]
} 
 8000a4a:	40d8      	lsrs	r0, r3
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800
 8000a54:	08001154 	.word	0x08001154
 8000a58:	20000000 	.word	0x20000000

08000a5c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8000a60:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000a62:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8000a64:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000a66:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000a68:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000a6c:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8000a6e:	6133      	str	r3, [r6, #16]
{
 8000a70:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000a72:	6883      	ldr	r3, [r0, #8]
 8000a74:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8000a76:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000a78:	4303      	orrs	r3, r0
 8000a7a:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8000a7c:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000a80:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8000a82:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000a86:	430b      	orrs	r3, r1
 8000a88:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8000a8a:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8000a8c:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8000a8e:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8000a90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8000a94:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000a96:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8000a9a:	6173      	str	r3, [r6, #20]
 8000a9c:	4b7a      	ldr	r3, [pc, #488]	; (8000c88 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000a9e:	d17c      	bne.n	8000b9a <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8000aa0:	429e      	cmp	r6, r3
 8000aa2:	d003      	beq.n	8000aac <UART_SetConfig+0x50>
 8000aa4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000aa8:	429e      	cmp	r6, r3
 8000aaa:	d144      	bne.n	8000b36 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000aac:	f7ff ffbe 	bl	8000a2c <HAL_RCC_GetPCLK2Freq>
 8000ab0:	2519      	movs	r5, #25
 8000ab2:	fb05 f300 	mul.w	r3, r5, r0
 8000ab6:	6860      	ldr	r0, [r4, #4]
 8000ab8:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000abc:	0040      	lsls	r0, r0, #1
 8000abe:	fbb3 f3f0 	udiv	r3, r3, r0
 8000ac2:	fbb3 f3f9 	udiv	r3, r3, r9
 8000ac6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8000aca:	f7ff ffaf 	bl	8000a2c <HAL_RCC_GetPCLK2Freq>
 8000ace:	6863      	ldr	r3, [r4, #4]
 8000ad0:	4368      	muls	r0, r5
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	fbb0 f7f3 	udiv	r7, r0, r3
 8000ad8:	f7ff ffa8 	bl	8000a2c <HAL_RCC_GetPCLK2Freq>
 8000adc:	6863      	ldr	r3, [r4, #4]
 8000ade:	4368      	muls	r0, r5
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ae6:	fbb3 f3f9 	udiv	r3, r3, r9
 8000aea:	fb09 7313 	mls	r3, r9, r3, r7
 8000aee:	00db      	lsls	r3, r3, #3
 8000af0:	3332      	adds	r3, #50	; 0x32
 8000af2:	fbb3 f3f9 	udiv	r3, r3, r9
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8000afc:	f7ff ff96 	bl	8000a2c <HAL_RCC_GetPCLK2Freq>
 8000b00:	6862      	ldr	r2, [r4, #4]
 8000b02:	4368      	muls	r0, r5
 8000b04:	0052      	lsls	r2, r2, #1
 8000b06:	fbb0 faf2 	udiv	sl, r0, r2
 8000b0a:	f7ff ff8f 	bl	8000a2c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000b0e:	6863      	ldr	r3, [r4, #4]
 8000b10:	4368      	muls	r0, r5
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	fbb0 f3f3 	udiv	r3, r0, r3
 8000b18:	fbb3 f3f9 	udiv	r3, r3, r9
 8000b1c:	fb09 a313 	mls	r3, r9, r3, sl
 8000b20:	00db      	lsls	r3, r3, #3
 8000b22:	3332      	adds	r3, #50	; 0x32
 8000b24:	fbb3 f3f9 	udiv	r3, r3, r9
 8000b28:	f003 0307 	and.w	r3, r3, #7
 8000b2c:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000b2e:	443b      	add	r3, r7
 8000b30:	60b3      	str	r3, [r6, #8]
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000b36:	f7ff ff61 	bl	80009fc <HAL_RCC_GetPCLK1Freq>
 8000b3a:	2519      	movs	r5, #25
 8000b3c:	fb05 f300 	mul.w	r3, r5, r0
 8000b40:	6860      	ldr	r0, [r4, #4]
 8000b42:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000b46:	0040      	lsls	r0, r0, #1
 8000b48:	fbb3 f3f0 	udiv	r3, r3, r0
 8000b4c:	fbb3 f3f9 	udiv	r3, r3, r9
 8000b50:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8000b54:	f7ff ff52 	bl	80009fc <HAL_RCC_GetPCLK1Freq>
 8000b58:	6863      	ldr	r3, [r4, #4]
 8000b5a:	4368      	muls	r0, r5
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	fbb0 f7f3 	udiv	r7, r0, r3
 8000b62:	f7ff ff4b 	bl	80009fc <HAL_RCC_GetPCLK1Freq>
 8000b66:	6863      	ldr	r3, [r4, #4]
 8000b68:	4368      	muls	r0, r5
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000b70:	fbb3 f3f9 	udiv	r3, r3, r9
 8000b74:	fb09 7313 	mls	r3, r9, r3, r7
 8000b78:	00db      	lsls	r3, r3, #3
 8000b7a:	3332      	adds	r3, #50	; 0x32
 8000b7c:	fbb3 f3f9 	udiv	r3, r3, r9
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8000b86:	f7ff ff39 	bl	80009fc <HAL_RCC_GetPCLK1Freq>
 8000b8a:	6862      	ldr	r2, [r4, #4]
 8000b8c:	4368      	muls	r0, r5
 8000b8e:	0052      	lsls	r2, r2, #1
 8000b90:	fbb0 faf2 	udiv	sl, r0, r2
 8000b94:	f7ff ff32 	bl	80009fc <HAL_RCC_GetPCLK1Freq>
 8000b98:	e7b9      	b.n	8000b0e <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8000b9a:	429e      	cmp	r6, r3
 8000b9c:	d002      	beq.n	8000ba4 <UART_SetConfig+0x148>
 8000b9e:	4b3b      	ldr	r3, [pc, #236]	; (8000c8c <UART_SetConfig+0x230>)
 8000ba0:	429e      	cmp	r6, r3
 8000ba2:	d140      	bne.n	8000c26 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000ba4:	f7ff ff42 	bl	8000a2c <HAL_RCC_GetPCLK2Freq>
 8000ba8:	6867      	ldr	r7, [r4, #4]
 8000baa:	2519      	movs	r5, #25
 8000bac:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000bb0:	fb05 f300 	mul.w	r3, r5, r0
 8000bb4:	00bf      	lsls	r7, r7, #2
 8000bb6:	fbb3 f3f7 	udiv	r3, r3, r7
 8000bba:	fbb3 f3f9 	udiv	r3, r3, r9
 8000bbe:	011f      	lsls	r7, r3, #4
 8000bc0:	f7ff ff34 	bl	8000a2c <HAL_RCC_GetPCLK2Freq>
 8000bc4:	6863      	ldr	r3, [r4, #4]
 8000bc6:	4368      	muls	r0, r5
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	fbb0 f8f3 	udiv	r8, r0, r3
 8000bce:	f7ff ff2d 	bl	8000a2c <HAL_RCC_GetPCLK2Freq>
 8000bd2:	6863      	ldr	r3, [r4, #4]
 8000bd4:	4368      	muls	r0, r5
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8000bdc:	fbb3 f3f9 	udiv	r3, r3, r9
 8000be0:	fb09 8313 	mls	r3, r9, r3, r8
 8000be4:	011b      	lsls	r3, r3, #4
 8000be6:	3332      	adds	r3, #50	; 0x32
 8000be8:	fbb3 f3f9 	udiv	r3, r3, r9
 8000bec:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8000bf0:	f7ff ff1c 	bl	8000a2c <HAL_RCC_GetPCLK2Freq>
 8000bf4:	6862      	ldr	r2, [r4, #4]
 8000bf6:	4368      	muls	r0, r5
 8000bf8:	0092      	lsls	r2, r2, #2
 8000bfa:	fbb0 faf2 	udiv	sl, r0, r2
 8000bfe:	f7ff ff15 	bl	8000a2c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000c02:	6863      	ldr	r3, [r4, #4]
 8000c04:	4368      	muls	r0, r5
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c0c:	fbb3 f3f9 	udiv	r3, r3, r9
 8000c10:	fb09 a313 	mls	r3, r9, r3, sl
 8000c14:	011b      	lsls	r3, r3, #4
 8000c16:	3332      	adds	r3, #50	; 0x32
 8000c18:	fbb3 f3f9 	udiv	r3, r3, r9
 8000c1c:	f003 030f 	and.w	r3, r3, #15
 8000c20:	ea43 0308 	orr.w	r3, r3, r8
 8000c24:	e783      	b.n	8000b2e <UART_SetConfig+0xd2>
 8000c26:	f7ff fee9 	bl	80009fc <HAL_RCC_GetPCLK1Freq>
 8000c2a:	6867      	ldr	r7, [r4, #4]
 8000c2c:	2519      	movs	r5, #25
 8000c2e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000c32:	fb05 f300 	mul.w	r3, r5, r0
 8000c36:	00bf      	lsls	r7, r7, #2
 8000c38:	fbb3 f3f7 	udiv	r3, r3, r7
 8000c3c:	fbb3 f3f9 	udiv	r3, r3, r9
 8000c40:	011f      	lsls	r7, r3, #4
 8000c42:	f7ff fedb 	bl	80009fc <HAL_RCC_GetPCLK1Freq>
 8000c46:	6863      	ldr	r3, [r4, #4]
 8000c48:	4368      	muls	r0, r5
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	fbb0 f8f3 	udiv	r8, r0, r3
 8000c50:	f7ff fed4 	bl	80009fc <HAL_RCC_GetPCLK1Freq>
 8000c54:	6863      	ldr	r3, [r4, #4]
 8000c56:	4368      	muls	r0, r5
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c5e:	fbb3 f3f9 	udiv	r3, r3, r9
 8000c62:	fb09 8313 	mls	r3, r9, r3, r8
 8000c66:	011b      	lsls	r3, r3, #4
 8000c68:	3332      	adds	r3, #50	; 0x32
 8000c6a:	fbb3 f3f9 	udiv	r3, r3, r9
 8000c6e:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8000c72:	f7ff fec3 	bl	80009fc <HAL_RCC_GetPCLK1Freq>
 8000c76:	6862      	ldr	r2, [r4, #4]
 8000c78:	4368      	muls	r0, r5
 8000c7a:	0092      	lsls	r2, r2, #2
 8000c7c:	fbb0 faf2 	udiv	sl, r0, r2
 8000c80:	f7ff febc 	bl	80009fc <HAL_RCC_GetPCLK1Freq>
 8000c84:	e7bd      	b.n	8000c02 <UART_SetConfig+0x1a6>
 8000c86:	bf00      	nop
 8000c88:	40011000 	.word	0x40011000
 8000c8c:	40011400 	.word	0x40011400

08000c90 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c92:	4604      	mov	r4, r0
 8000c94:	460e      	mov	r6, r1
 8000c96:	4617      	mov	r7, r2
 8000c98:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8000c9a:	6821      	ldr	r1, [r4, #0]
 8000c9c:	680b      	ldr	r3, [r1, #0]
 8000c9e:	ea36 0303 	bics.w	r3, r6, r3
 8000ca2:	d101      	bne.n	8000ca8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000ca4:	2000      	movs	r0, #0
}
 8000ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000ca8:	1c6b      	adds	r3, r5, #1
 8000caa:	d0f7      	beq.n	8000c9c <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000cac:	b995      	cbnz	r5, 8000cd4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000cae:	6823      	ldr	r3, [r4, #0]
 8000cb0:	68da      	ldr	r2, [r3, #12]
 8000cb2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000cb6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000cb8:	695a      	ldr	r2, [r3, #20]
 8000cba:	f022 0201 	bic.w	r2, r2, #1
 8000cbe:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8000cc0:	2320      	movs	r3, #32
 8000cc2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000cc6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8000cca:	2300      	movs	r3, #0
 8000ccc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000cd0:	2003      	movs	r0, #3
 8000cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000cd4:	f7ff faae 	bl	8000234 <HAL_GetTick>
 8000cd8:	1bc0      	subs	r0, r0, r7
 8000cda:	4285      	cmp	r5, r0
 8000cdc:	d2dd      	bcs.n	8000c9a <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000cde:	e7e6      	b.n	8000cae <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08000ce0 <HAL_UART_Init>:
{
 8000ce0:	b510      	push	{r4, lr}
  if(huart == NULL)
 8000ce2:	4604      	mov	r4, r0
 8000ce4:	b340      	cbz	r0, 8000d38 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8000ce6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000cea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000cee:	b91b      	cbnz	r3, 8000cf8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000cf0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000cf4:	f000 f9a4 	bl	8001040 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8000cf8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000cfa:	2324      	movs	r3, #36	; 0x24
 8000cfc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000d00:	68d3      	ldr	r3, [r2, #12]
 8000d02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000d06:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000d08:	4620      	mov	r0, r4
 8000d0a:	f7ff fea7 	bl	8000a5c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000d0e:	6823      	ldr	r3, [r4, #0]
 8000d10:	691a      	ldr	r2, [r3, #16]
 8000d12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000d16:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000d18:	695a      	ldr	r2, [r3, #20]
 8000d1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000d1e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000d20:	68da      	ldr	r2, [r3, #12]
 8000d22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000d26:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d28:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8000d2a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d2c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8000d2e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8000d32:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000d36:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000d38:	2001      	movs	r0, #1
}
 8000d3a:	bd10      	pop	{r4, pc}

08000d3c <HAL_UART_Receive>:
{ 
 8000d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d40:	461f      	mov	r7, r3
  if(huart->RxState == HAL_UART_STATE_READY) 
 8000d42:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8000d46:	2b20      	cmp	r3, #32
{ 
 8000d48:	4604      	mov	r4, r0
 8000d4a:	460d      	mov	r5, r1
 8000d4c:	4690      	mov	r8, r2
  if(huart->RxState == HAL_UART_STATE_READY) 
 8000d4e:	d152      	bne.n	8000df6 <HAL_UART_Receive+0xba>
    if((pData == NULL ) || (Size == 0)) 
 8000d50:	2900      	cmp	r1, #0
 8000d52:	d04d      	beq.n	8000df0 <HAL_UART_Receive+0xb4>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	d04b      	beq.n	8000df0 <HAL_UART_Receive+0xb4>
    __HAL_LOCK(huart);
 8000d58:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d04a      	beq.n	8000df6 <HAL_UART_Receive+0xba>
 8000d60:	2301      	movs	r3, #1
 8000d62:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d66:	2300      	movs	r3, #0
 8000d68:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000d6a:	2322      	movs	r3, #34	; 0x22
 8000d6c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8000d70:	f7ff fa60 	bl	8000234 <HAL_GetTick>
    huart->RxXferSize = Size; 
 8000d74:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    tickstart = HAL_GetTick();
 8000d78:	4606      	mov	r6, r0
    huart->RxXferCount = Size;
 8000d7a:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    while(huart->RxXferCount > 0U)
 8000d7e:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8000d80:	b280      	uxth	r0, r0
 8000d82:	b930      	cbnz	r0, 8000d92 <HAL_UART_Receive+0x56>
    huart->RxState = HAL_UART_STATE_READY;
 8000d84:	2320      	movs	r3, #32
 8000d86:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 8000d8a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8000d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->RxXferCount--;
 8000d92:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8000d94:	3b01      	subs	r3, #1
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000d9a:	68a3      	ldr	r3, [r4, #8]
 8000d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8000da0:	4632      	mov	r2, r6
 8000da2:	463b      	mov	r3, r7
 8000da4:	f04f 0120 	mov.w	r1, #32
 8000da8:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000daa:	d112      	bne.n	8000dd2 <HAL_UART_Receive+0x96>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8000dac:	f7ff ff70 	bl	8000c90 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000db0:	b110      	cbz	r0, 8000db8 <HAL_UART_Receive+0x7c>
          return HAL_TIMEOUT;
 8000db2:	2003      	movs	r0, #3
 8000db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000db8:	6823      	ldr	r3, [r4, #0]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8000dba:	6922      	ldr	r2, [r4, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8000dbc:	685b      	ldr	r3, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8000dbe:	b922      	cbnz	r2, 8000dca <HAL_UART_Receive+0x8e>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8000dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000dc4:	f825 3b02 	strh.w	r3, [r5], #2
 8000dc8:	e7d9      	b.n	8000d7e <HAL_UART_Receive+0x42>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	f825 3b01 	strh.w	r3, [r5], #1
 8000dd0:	e7d5      	b.n	8000d7e <HAL_UART_Receive+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8000dd2:	f7ff ff5d 	bl	8000c90 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000dd6:	2800      	cmp	r0, #0
 8000dd8:	d1eb      	bne.n	8000db2 <HAL_UART_Receive+0x76>
 8000dda:	6823      	ldr	r3, [r4, #0]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8000ddc:	6921      	ldr	r1, [r4, #16]
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	1c6a      	adds	r2, r5, #1
        if(huart->Init.Parity == UART_PARITY_NONE)
 8000de2:	b911      	cbnz	r1, 8000dea <HAL_UART_Receive+0xae>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8000de4:	702b      	strb	r3, [r5, #0]
 8000de6:	4615      	mov	r5, r2
 8000de8:	e7c9      	b.n	8000d7e <HAL_UART_Receive+0x42>
 8000dea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000dee:	e7f9      	b.n	8000de4 <HAL_UART_Receive+0xa8>
      return  HAL_ERROR;
 8000df0:	2001      	movs	r0, #1
 8000df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;   
 8000df6:	2002      	movs	r0, #2
}
 8000df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000dfc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000dfc:	b530      	push	{r4, r5, lr}
 8000dfe:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <MX_GPIO_Init+0x54>)
  __HAL_RCC_GPIOE_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LedRojo_GPIO_Port, LedRojo_Pin, GPIO_PIN_SET);
 8000e02:	4d14      	ldr	r5, [pc, #80]	; (8000e54 <MX_GPIO_Init+0x58>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e04:	2400      	movs	r4, #0
 8000e06:	9401      	str	r4, [sp, #4]
 8000e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e0a:	f042 0201 	orr.w	r2, r2, #1
 8000e0e:	631a      	str	r2, [r3, #48]	; 0x30
 8000e10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e12:	f002 0201 	and.w	r2, r2, #1
 8000e16:	9201      	str	r2, [sp, #4]
 8000e18:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e1a:	9402      	str	r4, [sp, #8]
 8000e1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e1e:	f042 0210 	orr.w	r2, r2, #16
 8000e22:	631a      	str	r2, [r3, #48]	; 0x30
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(LedRojo_GPIO_Port, LedRojo_Pin, GPIO_PIN_SET);
 8000e26:	2201      	movs	r2, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e28:	f003 0310 	and.w	r3, r3, #16
  HAL_GPIO_WritePin(LedRojo_GPIO_Port, LedRojo_Pin, GPIO_PIN_SET);
 8000e2c:	4611      	mov	r1, r2
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e2e:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(LedRojo_GPIO_Port, LedRojo_Pin, GPIO_PIN_SET);
 8000e30:	4628      	mov	r0, r5
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e32:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(LedRojo_GPIO_Port, LedRojo_Pin, GPIO_PIN_SET);
 8000e34:	f7ff fb52 	bl	80004dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LedRojo_Pin;
 8000e38:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LedRojo_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	a903      	add	r1, sp, #12
 8000e3c:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = LedRojo_Pin;
 8000e3e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e40:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LedRojo_GPIO_Port, &GPIO_InitStruct);
 8000e46:	f7ff fa69 	bl	800031c <HAL_GPIO_Init>

}
 8000e4a:	b009      	add	sp, #36	; 0x24
 8000e4c:	bd30      	pop	{r4, r5, pc}
 8000e4e:	bf00      	nop
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40021000 	.word	0x40021000

08000e58 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000e58:	b510      	push	{r4, lr}
 8000e5a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	4a21      	ldr	r2, [pc, #132]	; (8000ee4 <SystemClock_Config+0x8c>)
 8000e60:	9301      	str	r3, [sp, #4]
 8000e62:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000e64:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000e68:	6411      	str	r1, [r2, #64]	; 0x40
 8000e6a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000e6c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000e70:	9201      	str	r2, [sp, #4]
 8000e72:	9a01      	ldr	r2, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e74:	4a1c      	ldr	r2, [pc, #112]	; (8000ee8 <SystemClock_Config+0x90>)
 8000e76:	9302      	str	r3, [sp, #8]
 8000e78:	6811      	ldr	r1, [r2, #0]
 8000e7a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000e7e:	6011      	str	r1, [r2, #0]
 8000e80:	6812      	ldr	r2, [r2, #0]
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e82:	930e      	str	r3, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e84:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000e88:	9202      	str	r2, [sp, #8]
 8000e8a:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e90:	2201      	movs	r2, #1
 8000e92:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e94:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000e96:	2210      	movs	r2, #16
 8000e98:	920c      	str	r2, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e9a:	f7ff fb25 	bl	80004e8 <HAL_RCC_OscConfig>
 8000e9e:	4601      	mov	r1, r0
 8000ea0:	b100      	cbz	r0, 8000ea4 <SystemClock_Config+0x4c>
 8000ea2:	e7fe      	b.n	8000ea2 <SystemClock_Config+0x4a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea4:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ea6:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea8:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eaa:	9006      	str	r0, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eac:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000eae:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eb0:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000eb2:	f7ff fce7 	bl	8000884 <HAL_RCC_ClockConfig>
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	b100      	cbz	r0, 8000ebc <SystemClock_Config+0x64>
 8000eba:	e7fe      	b.n	8000eba <SystemClock_Config+0x62>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000ebc:	f7ff fd98 	bl	80009f0 <HAL_RCC_GetHCLKFreq>
 8000ec0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ec8:	f7ff fa00 	bl	80002cc <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000ecc:	2004      	movs	r0, #4
 8000ece:	f7ff fa13 	bl	80002f8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000ed2:	4622      	mov	r2, r4
 8000ed4:	4621      	mov	r1, r4
 8000ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8000eda:	f7ff f9c3 	bl	8000264 <HAL_NVIC_SetPriority>
}
 8000ede:	b014      	add	sp, #80	; 0x50
 8000ee0:	bd10      	pop	{r4, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40007000 	.word	0x40007000

08000eec <main>:
{
 8000eec:	b507      	push	{r0, r1, r2, lr}
  HAL_Init();
 8000eee:	f7ff f97f 	bl	80001f0 <HAL_Init>
  SystemClock_Config();
 8000ef2:	f7ff ffb1 	bl	8000e58 <SystemClock_Config>
  MX_GPIO_Init();
 8000ef6:	f7ff ff81 	bl	8000dfc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000efa:	f000 f881 	bl	8001000 <MX_USART2_UART_Init>
	  HAL_UART_Receive(&huart2,Dato_Recibido,(uint16_t)1,(uint32_t)100);
 8000efe:	4d0b      	ldr	r5, [pc, #44]	; (8000f2c <main+0x40>)
	  		  HAL_GPIO_WritePin(LedRojo_GPIO_Port,LedRojo_Pin,GPIO_PIN_SET);
 8000f00:	4c0b      	ldr	r4, [pc, #44]	; (8000f30 <main+0x44>)
	  HAL_UART_Receive(&huart2,Dato_Recibido,(uint16_t)1,(uint32_t)100);
 8000f02:	2364      	movs	r3, #100	; 0x64
 8000f04:	2201      	movs	r2, #1
 8000f06:	a901      	add	r1, sp, #4
 8000f08:	4628      	mov	r0, r5
 8000f0a:	f7ff ff17 	bl	8000d3c <HAL_UART_Receive>
	  if(Dato_Recibido[0]=='1'){
 8000f0e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000f12:	2b31      	cmp	r3, #49	; 0x31
 8000f14:	d105      	bne.n	8000f22 <main+0x36>
	  		  HAL_GPIO_WritePin(LedRojo_GPIO_Port,LedRojo_Pin,GPIO_PIN_RESET);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2101      	movs	r1, #1
 8000f1a:	4620      	mov	r0, r4
 8000f1c:	f7ff fade 	bl	80004dc <HAL_GPIO_WritePin>
 8000f20:	e7ef      	b.n	8000f02 <main+0x16>
	  	  else if(Dato_Recibido[0]=='0'){
 8000f22:	2b30      	cmp	r3, #48	; 0x30
 8000f24:	d1ed      	bne.n	8000f02 <main+0x16>
	  		  HAL_GPIO_WritePin(LedRojo_GPIO_Port,LedRojo_Pin,GPIO_PIN_SET);
 8000f26:	2201      	movs	r2, #1
 8000f28:	e7f6      	b.n	8000f18 <main+0x2c>
 8000f2a:	bf00      	nop
 8000f2c:	20000024 	.word	0x20000024
 8000f30:	40021000 	.word	0x40021000

08000f34 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8000f34:	e7fe      	b.n	8000f34 <_Error_Handler>

08000f36 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f36:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f38:	2003      	movs	r0, #3
 8000f3a:	f7ff f981 	bl	8000240 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	4611      	mov	r1, r2
 8000f42:	f06f 000b 	mvn.w	r0, #11
 8000f46:	f7ff f98d 	bl	8000264 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	4611      	mov	r1, r2
 8000f4e:	f06f 000a 	mvn.w	r0, #10
 8000f52:	f7ff f987 	bl	8000264 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	4611      	mov	r1, r2
 8000f5a:	f06f 0009 	mvn.w	r0, #9
 8000f5e:	f7ff f981 	bl	8000264 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	4611      	mov	r1, r2
 8000f66:	f06f 0004 	mvn.w	r0, #4
 8000f6a:	f7ff f97b 	bl	8000264 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	4611      	mov	r1, r2
 8000f72:	f06f 0003 	mvn.w	r0, #3
 8000f76:	f7ff f975 	bl	8000264 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	4611      	mov	r1, r2
 8000f7e:	f06f 0001 	mvn.w	r0, #1
 8000f82:	f7ff f96f 	bl	8000264 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	4611      	mov	r1, r2
 8000f8a:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000f92:	f7ff b967 	b.w	8000264 <HAL_NVIC_SetPriority>

08000f96 <NMI_Handler>:
 8000f96:	4770      	bx	lr

08000f98 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8000f98:	e7fe      	b.n	8000f98 <HardFault_Handler>

08000f9a <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000f9a:	e7fe      	b.n	8000f9a <MemManage_Handler>

08000f9c <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8000f9c:	e7fe      	b.n	8000f9c <BusFault_Handler>

08000f9e <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8000f9e:	e7fe      	b.n	8000f9e <UsageFault_Handler>

08000fa0 <SVC_Handler>:
 8000fa0:	4770      	bx	lr

08000fa2 <DebugMon_Handler>:
 8000fa2:	4770      	bx	lr

08000fa4 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8000fa4:	4770      	bx	lr

08000fa6 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000fa6:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa8:	f7ff f93c 	bl	8000224 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8000fb0:	f7ff b9af 	b.w	8000312 <HAL_SYSTICK_IRQHandler>

08000fb4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fb4:	490f      	ldr	r1, [pc, #60]	; (8000ff4 <SystemInit+0x40>)
 8000fb6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000fba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000fc2:	4b0d      	ldr	r3, [pc, #52]	; (8000ff8 <SystemInit+0x44>)
 8000fc4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fc6:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8000fc8:	f042 0201 	orr.w	r2, r2, #1
 8000fcc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000fce:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000fd6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000fda:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000fdc:	4a07      	ldr	r2, [pc, #28]	; (8000ffc <SystemInit+0x48>)
 8000fde:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000fe6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000fe8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000fee:	608b      	str	r3, [r1, #8]
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000ed00 	.word	0xe000ed00
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	24003010 	.word	0x24003010

08001000 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001000:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8001002:	480c      	ldr	r0, [pc, #48]	; (8001034 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 9600;
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <MX_USART2_UART_Init+0x38>)
 8001006:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
 800100a:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800100e:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001010:	2300      	movs	r3, #0
 8001012:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001014:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001016:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001018:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800101c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800101e:	f7ff fe5f 	bl	8000ce0 <HAL_UART_Init>
 8001022:	b128      	cbz	r0, 8001030 <MX_USART2_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001024:	2142      	movs	r1, #66	; 0x42
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <MX_USART2_UART_Init+0x3c>)
  }

}
 8001028:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 800102c:	f7ff bf82 	b.w	8000f34 <_Error_Handler>
 8001030:	bd08      	pop	{r3, pc}
 8001032:	bf00      	nop
 8001034:	20000024 	.word	0x20000024
 8001038:	40004400 	.word	0x40004400
 800103c:	0800115c 	.word	0x0800115c

08001040 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001040:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 8001042:	6802      	ldr	r2, [r0, #0]
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <HAL_UART_MspInit+0x44>)
 8001046:	429a      	cmp	r2, r3
 8001048:	d119      	bne.n	800107e <HAL_UART_MspInit+0x3e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <HAL_UART_MspInit+0x48>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001050:	480e      	ldr	r0, [pc, #56]	; (800108c <HAL_UART_MspInit+0x4c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001052:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001054:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001058:	641a      	str	r2, [r3, #64]	; 0x40
 800105a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001064:	230c      	movs	r3, #12
 8001066:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800106c:	2301      	movs	r3, #1
 800106e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001070:	2303      	movs	r3, #3
 8001072:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001074:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001076:	2307      	movs	r3, #7
 8001078:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107a:	f7ff f94f 	bl	800031c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800107e:	b007      	add	sp, #28
 8001080:	f85d fb04 	ldr.w	pc, [sp], #4
 8001084:	40004400 	.word	0x40004400
 8001088:	40023800 	.word	0x40023800
 800108c:	40020000 	.word	0x40020000

08001090 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001090:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001094:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001096:	e003      	b.n	80010a0 <LoopCopyDataInit>

08001098 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800109a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800109c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800109e:	3104      	adds	r1, #4

080010a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80010a0:	480b      	ldr	r0, [pc, #44]	; (80010d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80010a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80010a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010a8:	d3f6      	bcc.n	8001098 <CopyDataInit>
  ldr  r2, =_sbss
 80010aa:	4a0b      	ldr	r2, [pc, #44]	; (80010d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80010ac:	e002      	b.n	80010b4 <LoopFillZerobss>

080010ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80010ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010b0:	f842 3b04 	str.w	r3, [r2], #4

080010b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010b8:	d3f9      	bcc.n	80010ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010ba:	f7ff ff7b 	bl	8000fb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010be:	f000 f811 	bl	80010e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010c2:	f7ff ff13 	bl	8000eec <main>
  bx  lr    
 80010c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010c8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80010cc:	08001174 	.word	0x08001174
  ldr  r0, =_sdata
 80010d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80010d4:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 80010d8:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 80010dc:	20000064 	.word	0x20000064

080010e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010e0:	e7fe      	b.n	80010e0 <ADC_IRQHandler>
	...

080010e4 <__libc_init_array>:
 80010e4:	b570      	push	{r4, r5, r6, lr}
 80010e6:	4e0d      	ldr	r6, [pc, #52]	; (800111c <__libc_init_array+0x38>)
 80010e8:	4c0d      	ldr	r4, [pc, #52]	; (8001120 <__libc_init_array+0x3c>)
 80010ea:	1ba4      	subs	r4, r4, r6
 80010ec:	10a4      	asrs	r4, r4, #2
 80010ee:	2500      	movs	r5, #0
 80010f0:	42a5      	cmp	r5, r4
 80010f2:	d109      	bne.n	8001108 <__libc_init_array+0x24>
 80010f4:	4e0b      	ldr	r6, [pc, #44]	; (8001124 <__libc_init_array+0x40>)
 80010f6:	4c0c      	ldr	r4, [pc, #48]	; (8001128 <__libc_init_array+0x44>)
 80010f8:	f000 f818 	bl	800112c <_init>
 80010fc:	1ba4      	subs	r4, r4, r6
 80010fe:	10a4      	asrs	r4, r4, #2
 8001100:	2500      	movs	r5, #0
 8001102:	42a5      	cmp	r5, r4
 8001104:	d105      	bne.n	8001112 <__libc_init_array+0x2e>
 8001106:	bd70      	pop	{r4, r5, r6, pc}
 8001108:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800110c:	4798      	blx	r3
 800110e:	3501      	adds	r5, #1
 8001110:	e7ee      	b.n	80010f0 <__libc_init_array+0xc>
 8001112:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001116:	4798      	blx	r3
 8001118:	3501      	adds	r5, #1
 800111a:	e7f2      	b.n	8001102 <__libc_init_array+0x1e>
 800111c:	0800116c 	.word	0x0800116c
 8001120:	0800116c 	.word	0x0800116c
 8001124:	0800116c 	.word	0x0800116c
 8001128:	08001170 	.word	0x08001170

0800112c <_init>:
 800112c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800112e:	bf00      	nop
 8001130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001132:	bc08      	pop	{r3}
 8001134:	469e      	mov	lr, r3
 8001136:	4770      	bx	lr

08001138 <_fini>:
 8001138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800113a:	bf00      	nop
 800113c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800113e:	bc08      	pop	{r3}
 8001140:	469e      	mov	lr, r3
 8001142:	4770      	bx	lr
