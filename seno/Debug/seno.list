
C:\Users\LENOVO\Documents\seno\Debug\seno.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000270c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  08002898  08002898  00012898  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002cb0  08002cb0  00012cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002cb4  08002cb4  00012cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08002cb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          0000019c  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001a0  200001a0  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015018  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002cb9  00000000  00000000  0003504c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000058b8  00000000  00000000  00037d05  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000880  00000000  00000000  0003d5c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000ad8  00000000  00000000  0003de40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000523b  00000000  00000000  0003e918  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000036f9  00000000  00000000  00043b53  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004724c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001a80  00000000  00000000  000472c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800287c 	.word	0x0800287c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	0800287c 	.word	0x0800287c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__aeabi_d2uiz>:
 800095c:	004a      	lsls	r2, r1, #1
 800095e:	d211      	bcs.n	8000984 <__aeabi_d2uiz+0x28>
 8000960:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000964:	d211      	bcs.n	800098a <__aeabi_d2uiz+0x2e>
 8000966:	d50d      	bpl.n	8000984 <__aeabi_d2uiz+0x28>
 8000968:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800096c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000970:	d40e      	bmi.n	8000990 <__aeabi_d2uiz+0x34>
 8000972:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000976:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800097a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800097e:	fa23 f002 	lsr.w	r0, r3, r2
 8000982:	4770      	bx	lr
 8000984:	f04f 0000 	mov.w	r0, #0
 8000988:	4770      	bx	lr
 800098a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800098e:	d102      	bne.n	8000996 <__aeabi_d2uiz+0x3a>
 8000990:	f04f 30ff 	mov.w	r0, #4294967295
 8000994:	4770      	bx	lr
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	4770      	bx	lr

0800099c <__aeabi_d2f>:
 800099c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009a4:	bf24      	itt	cs
 80009a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ae:	d90d      	bls.n	80009cc <__aeabi_d2f+0x30>
 80009b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009c4:	bf08      	it	eq
 80009c6:	f020 0001 	biceq.w	r0, r0, #1
 80009ca:	4770      	bx	lr
 80009cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d0:	d121      	bne.n	8000a16 <__aeabi_d2f+0x7a>
 80009d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009d6:	bfbc      	itt	lt
 80009d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009dc:	4770      	bxlt	lr
 80009de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009e6:	f1c2 0218 	rsb	r2, r2, #24
 80009ea:	f1c2 0c20 	rsb	ip, r2, #32
 80009ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80009f2:	fa20 f002 	lsr.w	r0, r0, r2
 80009f6:	bf18      	it	ne
 80009f8:	f040 0001 	orrne.w	r0, r0, #1
 80009fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a08:	ea40 000c 	orr.w	r0, r0, ip
 8000a0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a14:	e7cc      	b.n	80009b0 <__aeabi_d2f+0x14>
 8000a16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a1a:	d107      	bne.n	8000a2c <__aeabi_d2f+0x90>
 8000a1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a20:	bf1e      	ittt	ne
 8000a22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a2a:	4770      	bxne	lr
 8000a2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop

08000a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a3c:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000a3e:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <HAL_InitTick+0x24>)
{
 8000a40:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000a42:	6818      	ldr	r0, [r3, #0]
 8000a44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a48:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a4c:	f000 f884 	bl	8000b58 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a50:	2200      	movs	r2, #0
 8000a52:	4621      	mov	r1, r4
 8000a54:	f04f 30ff 	mov.w	r0, #4294967295
 8000a58:	f000 f83e 	bl	8000ad8 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	bd10      	pop	{r4, pc}
 8000a60:	20000000 	.word	0x20000000

08000a64 <HAL_Init>:
{
 8000a64:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <HAL_Init+0x30>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a6e:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000a76:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a7e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a80:	2003      	movs	r0, #3
 8000a82:	f000 f817 	bl	8000ab4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a86:	2000      	movs	r0, #0
 8000a88:	f7ff ffd8 	bl	8000a3c <HAL_InitTick>
  HAL_MspInit();
 8000a8c:	f001 f84d 	bl	8001b2a <HAL_MspInit>
}
 8000a90:	2000      	movs	r0, #0
 8000a92:	bd08      	pop	{r3, pc}
 8000a94:	40023c00 	.word	0x40023c00

08000a98 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000a98:	4a02      	ldr	r2, [pc, #8]	; (8000aa4 <HAL_IncTick+0xc>)
 8000a9a:	6813      	ldr	r3, [r2, #0]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	6013      	str	r3, [r2, #0]
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	20000020 	.word	0x20000020

08000aa8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000aa8:	4b01      	ldr	r3, [pc, #4]	; (8000ab0 <HAL_GetTick+0x8>)
 8000aaa:	6818      	ldr	r0, [r3, #0]
}
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	20000020 	.word	0x20000020

08000ab4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab4:	4a07      	ldr	r2, [pc, #28]	; (8000ad4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000ab6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ab8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000abc:	041b      	lsls	r3, r3, #16
 8000abe:	0c1b      	lsrs	r3, r3, #16
 8000ac0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000ac4:	0200      	lsls	r0, r0, #8
 8000ac6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aca:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000ace:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000ad0:	60d3      	str	r3, [r2, #12]
 8000ad2:	4770      	bx	lr
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad8:	4b17      	ldr	r3, [pc, #92]	; (8000b38 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ada:	b530      	push	{r4, r5, lr}
 8000adc:	68dc      	ldr	r4, [r3, #12]
 8000ade:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ae6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae8:	2b04      	cmp	r3, #4
 8000aea:	bf28      	it	cs
 8000aec:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aee:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af0:	f04f 0501 	mov.w	r5, #1
 8000af4:	fa05 f303 	lsl.w	r3, r5, r3
 8000af8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000afc:	bf8c      	ite	hi
 8000afe:	3c03      	subhi	r4, #3
 8000b00:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b02:	4019      	ands	r1, r3
 8000b04:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b06:	fa05 f404 	lsl.w	r4, r5, r4
 8000b0a:	3c01      	subs	r4, #1
 8000b0c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000b0e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b10:	ea42 0201 	orr.w	r2, r2, r1
 8000b14:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b18:	bfaf      	iteee	ge
 8000b1a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1e:	f000 000f 	andlt.w	r0, r0, #15
 8000b22:	4b06      	ldrlt	r3, [pc, #24]	; (8000b3c <HAL_NVIC_SetPriority+0x64>)
 8000b24:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b26:	bfa5      	ittet	ge
 8000b28:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000b2c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b30:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000b34:	bd30      	pop	{r4, r5, pc}
 8000b36:	bf00      	nop
 8000b38:	e000ed00 	.word	0xe000ed00
 8000b3c:	e000ed14 	.word	0xe000ed14

08000b40 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000b40:	0942      	lsrs	r2, r0, #5
 8000b42:	2301      	movs	r3, #1
 8000b44:	f000 001f 	and.w	r0, r0, #31
 8000b48:	fa03 f000 	lsl.w	r0, r3, r0
 8000b4c:	4b01      	ldr	r3, [pc, #4]	; (8000b54 <HAL_NVIC_EnableIRQ+0x14>)
 8000b4e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000b52:	4770      	bx	lr
 8000b54:	e000e100 	.word	0xe000e100

08000b58 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b58:	3801      	subs	r0, #1
 8000b5a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b5e:	d20a      	bcs.n	8000b76 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b62:	4a07      	ldr	r2, [pc, #28]	; (8000b80 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b64:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b66:	21f0      	movs	r1, #240	; 0xf0
 8000b68:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b6c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b6e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b70:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b76:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	e000e010 	.word	0xe000e010
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000b84:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000b86:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000b88:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000b8a:	bf0c      	ite	eq
 8000b8c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000b90:	f022 0204 	bicne.w	r2, r2, #4
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	4770      	bx	lr
 8000b98:	e000e010 	.word	0xe000e010

08000b9c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000b9c:	4770      	bx	lr

08000b9e <HAL_SYSTICK_IRQHandler>:
{
 8000b9e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000ba0:	f7ff fffc 	bl	8000b9c <HAL_SYSTICK_Callback>
 8000ba4:	bd08      	pop	{r3, pc}

08000ba6 <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8000ba6:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if(hdac == NULL)
 8000ba8:	4604      	mov	r4, r0
 8000baa:	b168      	cbz	r0, 8000bc8 <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8000bac:	7903      	ldrb	r3, [r0, #4]
 8000bae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000bb2:	b913      	cbnz	r3, 8000bba <HAL_DAC_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000bb4:	7142      	strb	r2, [r0, #5]
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000bb6:	f000 fe8f 	bl	80018d8 <HAL_DAC_MspInit>
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	7123      	strb	r3, [r4, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000bbe:	2000      	movs	r0, #0
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000bc0:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000bc2:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8000bc4:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 8000bc6:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 8000bc8:	2001      	movs	r0, #1
}
 8000bca:	bd10      	pop	{r4, pc}

08000bcc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8000bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bce:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8000bd0:	7940      	ldrb	r0, [r0, #5]
 8000bd2:	2801      	cmp	r0, #1
{
 8000bd4:	460e      	mov	r6, r1
 8000bd6:	f04f 0002 	mov.w	r0, #2
 8000bda:	4611      	mov	r1, r2
 8000bdc:	9a06      	ldr	r2, [sp, #24]
  __HAL_LOCK(hdac);
 8000bde:	d04c      	beq.n	8000c7a <HAL_DAC_Start_DMA+0xae>
 8000be0:	2401      	movs	r4, #1
 8000be2:	716c      	strb	r4, [r5, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000be4:	7128      	strb	r0, [r5, #4]
 8000be6:	682c      	ldr	r4, [r5, #0]

  if(Channel == DAC_CHANNEL_1)
 8000be8:	b9e6      	cbnz	r6, 8000c24 <HAL_DAC_Start_DMA+0x58>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000bea:	68a8      	ldr	r0, [r5, #8]
 8000bec:	4f23      	ldr	r7, [pc, #140]	; (8000c7c <HAL_DAC_Start_DMA+0xb0>)
 8000bee:	63c7      	str	r7, [r0, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000bf0:	4f23      	ldr	r7, [pc, #140]	; (8000c80 <HAL_DAC_Start_DMA+0xb4>)
 8000bf2:	6407      	str	r7, [r0, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000bf4:	4f23      	ldr	r7, [pc, #140]	; (8000c84 <HAL_DAC_Start_DMA+0xb8>)
 8000bf6:	64c7      	str	r7, [r0, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8000bf8:	6827      	ldr	r7, [r4, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8000bfa:	2a04      	cmp	r2, #4
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8000bfc:	f447 5780 	orr.w	r7, r7, #4096	; 0x1000
 8000c00:	6027      	str	r7, [r4, #0]
    switch(Alignment)
 8000c02:	d009      	beq.n	8000c18 <HAL_DAC_Start_DMA+0x4c>
 8000c04:	2a08      	cmp	r2, #8
 8000c06:	d00a      	beq.n	8000c1e <HAL_DAC_Start_DMA+0x52>
 8000c08:	2a00      	cmp	r2, #0
 8000c0a:	d134      	bne.n	8000c76 <HAL_DAC_Start_DMA+0xaa>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000c0c:	f104 0208 	add.w	r2, r4, #8
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000c10:	6827      	ldr	r7, [r4, #0]
 8000c12:	f447 5700 	orr.w	r7, r7, #8192	; 0x2000
 8000c16:	e01a      	b.n	8000c4e <HAL_DAC_Start_DMA+0x82>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000c18:	f104 020c 	add.w	r2, r4, #12
        break;
 8000c1c:	e7f8      	b.n	8000c10 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8000c1e:	f104 0210 	add.w	r2, r4, #16
        break;
 8000c22:	e7f5      	b.n	8000c10 <HAL_DAC_Start_DMA+0x44>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000c24:	68e8      	ldr	r0, [r5, #12]
 8000c26:	4f18      	ldr	r7, [pc, #96]	; (8000c88 <HAL_DAC_Start_DMA+0xbc>)
 8000c28:	63c7      	str	r7, [r0, #60]	; 0x3c
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000c2a:	4f18      	ldr	r7, [pc, #96]	; (8000c8c <HAL_DAC_Start_DMA+0xc0>)
 8000c2c:	6407      	str	r7, [r0, #64]	; 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000c2e:	4f18      	ldr	r7, [pc, #96]	; (8000c90 <HAL_DAC_Start_DMA+0xc4>)
 8000c30:	64c7      	str	r7, [r0, #76]	; 0x4c
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8000c32:	6827      	ldr	r7, [r4, #0]
    switch(Alignment)
 8000c34:	2a04      	cmp	r2, #4
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8000c36:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 8000c3a:	6027      	str	r7, [r4, #0]
    switch(Alignment)
 8000c3c:	d013      	beq.n	8000c66 <HAL_DAC_Start_DMA+0x9a>
 8000c3e:	2a08      	cmp	r2, #8
 8000c40:	d014      	beq.n	8000c6c <HAL_DAC_Start_DMA+0xa0>
 8000c42:	b9b2      	cbnz	r2, 8000c72 <HAL_DAC_Start_DMA+0xa6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8000c44:	f104 0214 	add.w	r2, r4, #20
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000c48:	6827      	ldr	r7, [r4, #0]
 8000c4a:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000c4e:	6027      	str	r7, [r4, #0]
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8000c50:	f000 f90c 	bl	8000e6c <HAL_DMA_Start_IT>
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000c54:	682b      	ldr	r3, [r5, #0]
 8000c56:	2101      	movs	r1, #1
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	40b1      	lsls	r1, r6
 8000c5c:	4311      	orrs	r1, r2
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8000c5e:	2000      	movs	r0, #0
  __HAL_DAC_ENABLE(hdac, Channel);
 8000c60:	6019      	str	r1, [r3, #0]
  __HAL_UNLOCK(hdac);
 8000c62:	7168      	strb	r0, [r5, #5]
  
  /* Return function status */
  return HAL_OK;
 8000c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000c66:	f104 0218 	add.w	r2, r4, #24
        break;
 8000c6a:	e7ed      	b.n	8000c48 <HAL_DAC_Start_DMA+0x7c>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8000c6c:	f104 021c 	add.w	r2, r4, #28
        break;
 8000c70:	e7ea      	b.n	8000c48 <HAL_DAC_Start_DMA+0x7c>
  uint32_t tmpreg = 0U;
 8000c72:	2200      	movs	r2, #0
 8000c74:	e7e8      	b.n	8000c48 <HAL_DAC_Start_DMA+0x7c>
 8000c76:	4632      	mov	r2, r6
 8000c78:	e7ca      	b.n	8000c10 <HAL_DAC_Start_DMA+0x44>
}
 8000c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c7c:	08000c97 	.word	0x08000c97
 8000c80:	08000ca9 	.word	0x08000ca9
 8000c84:	08000cb5 	.word	0x08000cb5
 8000c88:	08000d13 	.word	0x08000d13
 8000c8c:	08000d23 	.word	0x08000d23
 8000c90:	08000d2d 	.word	0x08000d2d

08000c94 <HAL_DAC_ConvCpltCallbackCh1>:
 8000c94:	4770      	bx	lr

08000c96 <DAC_DMAConvCpltCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8000c96:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000c98:	6b84      	ldr	r4, [r0, #56]	; 0x38
  
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8000c9a:	4620      	mov	r0, r4
 8000c9c:	f7ff fffa 	bl	8000c94 <HAL_DAC_ConvCpltCallbackCh1>
  
  hdac->State= HAL_DAC_STATE_READY;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	7123      	strb	r3, [r4, #4]
 8000ca4:	bd10      	pop	{r4, pc}

08000ca6 <HAL_DAC_ConvHalfCpltCallbackCh1>:
 8000ca6:	4770      	bx	lr

08000ca8 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8000ca8:	b508      	push	{r3, lr}
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
    /* Conversion complete callback */
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8000caa:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8000cac:	f7ff fffb 	bl	8000ca6 <HAL_DAC_ConvHalfCpltCallbackCh1>
 8000cb0:	bd08      	pop	{r3, pc}

08000cb2 <HAL_DAC_ErrorCallbackCh1>:
 8000cb2:	4770      	bx	lr

08000cb4 <DAC_DMAErrorCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8000cb4:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000cb6:	6b84      	ldr	r4, [r0, #56]	; 0x38
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000cb8:	6923      	ldr	r3, [r4, #16]
 8000cba:	f043 0304 	orr.w	r3, r3, #4
 8000cbe:	6123      	str	r3, [r4, #16]
    
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8000cc0:	4620      	mov	r0, r4
 8000cc2:	f7ff fff6 	bl	8000cb2 <HAL_DAC_ErrorCallbackCh1>
    
  hdac->State= HAL_DAC_STATE_READY;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	7123      	strb	r3, [r4, #4]
 8000cca:	bd10      	pop	{r4, pc}

08000ccc <HAL_DAC_ConfigChannel>:
  __HAL_LOCK(hdac);
 8000ccc:	7943      	ldrb	r3, [r0, #5]
 8000cce:	2b01      	cmp	r3, #1
{
 8000cd0:	b530      	push	{r4, r5, lr}
 8000cd2:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdac);
 8000cd6:	d017      	beq.n	8000d08 <HAL_DAC_ConfigChannel+0x3c>
  tmpreg1 = hdac->Instance->CR;
 8000cd8:	6804      	ldr	r4, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8000cda:	7103      	strb	r3, [r0, #4]
  tmpreg1 = hdac->Instance->CR;
 8000cdc:	6823      	ldr	r3, [r4, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8000cde:	f640 75fe 	movw	r5, #4094	; 0xffe
 8000ce2:	4095      	lsls	r5, r2
 8000ce4:	ea23 0505 	bic.w	r5, r3, r5
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8000ce8:	c90a      	ldmia	r1, {r1, r3}
 8000cea:	430b      	orrs	r3, r1
  tmpreg1 |= tmpreg2 << Channel;
 8000cec:	4093      	lsls	r3, r2
 8000cee:	432b      	orrs	r3, r5
  hdac->Instance->CR = tmpreg1;
 8000cf0:	6023      	str	r3, [r4, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8000cf2:	6823      	ldr	r3, [r4, #0]
 8000cf4:	21c0      	movs	r1, #192	; 0xc0
 8000cf6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cfa:	ea23 0202 	bic.w	r2, r3, r2
  hdac->State = HAL_DAC_STATE_READY;
 8000cfe:	2301      	movs	r3, #1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8000d00:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8000d02:	7103      	strb	r3, [r0, #4]
  __HAL_UNLOCK(hdac);
 8000d04:	2300      	movs	r3, #0
 8000d06:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 8000d08:	4618      	mov	r0, r3
}
 8000d0a:	bd30      	pop	{r4, r5, pc}

08000d0c <HAL_DACEx_ConvCpltCallbackCh2>:
 8000d0c:	4770      	bx	lr

08000d0e <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 8000d0e:	4770      	bx	lr

08000d10 <HAL_DACEx_ErrorCallbackCh2>:
 8000d10:	4770      	bx	lr

08000d12 <DAC_DMAConvCpltCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8000d12:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000d14:	6b84      	ldr	r4, [r0, #56]	; 0x38
  
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8000d16:	4620      	mov	r0, r4
 8000d18:	f7ff fff8 	bl	8000d0c <HAL_DACEx_ConvCpltCallbackCh2>
  
  hdac->State= HAL_DAC_STATE_READY;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	7123      	strb	r3, [r4, #4]
 8000d20:	bd10      	pop	{r4, pc}

08000d22 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8000d22:	b508      	push	{r3, lr}
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
    /* Conversion complete callback */
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8000d24:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8000d26:	f7ff fff2 	bl	8000d0e <HAL_DACEx_ConvHalfCpltCallbackCh2>
 8000d2a:	bd08      	pop	{r3, pc}

08000d2c <DAC_DMAErrorCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8000d2c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000d2e:	6b84      	ldr	r4, [r0, #56]	; 0x38
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000d30:	6923      	ldr	r3, [r4, #16]
 8000d32:	f043 0304 	orr.w	r3, r3, #4
 8000d36:	6123      	str	r3, [r4, #16]
    
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8000d38:	4620      	mov	r0, r4
 8000d3a:	f7ff ffe9 	bl	8000d10 <HAL_DACEx_ErrorCallbackCh2>
    
  hdac->State= HAL_DAC_STATE_READY;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	7123      	strb	r3, [r4, #4]
 8000d42:	bd10      	pop	{r4, pc}

08000d44 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000d44:	6803      	ldr	r3, [r0, #0]
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000d4c:	f023 0303 	bic.w	r3, r3, #3
 8000d50:	2118      	movs	r1, #24
 8000d52:	3a10      	subs	r2, #16
 8000d54:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000d58:	4904      	ldr	r1, [pc, #16]	; (8000d6c <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000d5a:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000d5c:	bf88      	it	hi
 8000d5e:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000d60:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000d62:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000d64:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 8000d66:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	08002898 	.word	0x08002898

08000d70 <HAL_DMA_Init>:
{
 8000d70:	b570      	push	{r4, r5, r6, lr}
 8000d72:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000d74:	f7ff fe98 	bl	8000aa8 <HAL_GetTick>
 8000d78:	4605      	mov	r5, r0
  if(hdma == NULL)
 8000d7a:	2c00      	cmp	r4, #0
 8000d7c:	d071      	beq.n	8000e62 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8000d7e:	2300      	movs	r3, #0
 8000d80:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8000d84:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d86:	2302      	movs	r3, #2
 8000d88:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000d8c:	6813      	ldr	r3, [r2, #0]
 8000d8e:	f023 0301 	bic.w	r3, r3, #1
 8000d92:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d94:	6821      	ldr	r1, [r4, #0]
 8000d96:	680b      	ldr	r3, [r1, #0]
 8000d98:	07d8      	lsls	r0, r3, #31
 8000d9a:	d43c      	bmi.n	8000e16 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8000d9c:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000d9e:	4d32      	ldr	r5, [pc, #200]	; (8000e68 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000da0:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000da2:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000da4:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000da6:	68a3      	ldr	r3, [r4, #8]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	68e2      	ldr	r2, [r4, #12]
 8000dac:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dae:	6922      	ldr	r2, [r4, #16]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	6962      	ldr	r2, [r4, #20]
 8000db4:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000db6:	69e2      	ldr	r2, [r4, #28]
 8000db8:	4303      	orrs	r3, r0
 8000dba:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dbc:	6a22      	ldr	r2, [r4, #32]
 8000dbe:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000dc0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000dc2:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000dc4:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000dc8:	bf01      	itttt	eq
 8000dca:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8000dcc:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8000dce:	4335      	orreq	r5, r6
 8000dd0:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8000dd2:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8000dd4:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000dd6:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000dd8:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000ddc:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000de0:	d10b      	bne.n	8000dfa <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8000de2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000de4:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8000de6:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000de8:	b13d      	cbz	r5, 8000dfa <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000dea:	b9f8      	cbnz	r0, 8000e2c <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8000dec:	2a01      	cmp	r2, #1
 8000dee:	d02d      	beq.n	8000e4c <HAL_DMA_Init+0xdc>
 8000df0:	d301      	bcc.n	8000df6 <HAL_DMA_Init+0x86>
 8000df2:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000df4:	d101      	bne.n	8000dfa <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000df6:	01ea      	lsls	r2, r5, #7
 8000df8:	d42b      	bmi.n	8000e52 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8000dfa:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000dfc:	4620      	mov	r0, r4
 8000dfe:	f7ff ffa1 	bl	8000d44 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e02:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000e04:	233f      	movs	r3, #63	; 0x3f
 8000e06:	4093      	lsls	r3, r2
 8000e08:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e0a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000e0c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e0e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000e10:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000e14:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e16:	f7ff fe47 	bl	8000aa8 <HAL_GetTick>
 8000e1a:	1b40      	subs	r0, r0, r5
 8000e1c:	2805      	cmp	r0, #5
 8000e1e:	d9b9      	bls.n	8000d94 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e20:	2320      	movs	r3, #32
 8000e22:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e24:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8000e26:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000e2a:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000e2c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000e30:	d113      	bne.n	8000e5a <HAL_DMA_Init+0xea>
    switch (tmp)
 8000e32:	2a03      	cmp	r2, #3
 8000e34:	d8e1      	bhi.n	8000dfa <HAL_DMA_Init+0x8a>
 8000e36:	a001      	add	r0, pc, #4	; (adr r0, 8000e3c <HAL_DMA_Init+0xcc>)
 8000e38:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000e3c:	08000e53 	.word	0x08000e53
 8000e40:	08000df7 	.word	0x08000df7
 8000e44:	08000e53 	.word	0x08000e53
 8000e48:	08000e4d 	.word	0x08000e4d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e4c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8000e50:	d1d3      	bne.n	8000dfa <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000e52:	2340      	movs	r3, #64	; 0x40
 8000e54:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000e56:	2001      	movs	r0, #1
 8000e58:	e7e5      	b.n	8000e26 <HAL_DMA_Init+0xb6>
    switch (tmp)
 8000e5a:	2a02      	cmp	r2, #2
 8000e5c:	d9f9      	bls.n	8000e52 <HAL_DMA_Init+0xe2>
 8000e5e:	2a03      	cmp	r2, #3
 8000e60:	e7c8      	b.n	8000df4 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8000e62:	2001      	movs	r0, #1
 8000e64:	bd70      	pop	{r4, r5, r6, pc}
 8000e66:	bf00      	nop
 8000e68:	f010803f 	.word	0xf010803f

08000e6c <HAL_DMA_Start_IT>:
{
 8000e6c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8000e6e:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8000e72:	2c01      	cmp	r4, #1
 8000e74:	d036      	beq.n	8000ee4 <HAL_DMA_Start_IT+0x78>
 8000e76:	2401      	movs	r4, #1
 8000e78:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e7c:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e80:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e82:	2c01      	cmp	r4, #1
 8000e84:	f04f 0500 	mov.w	r5, #0
 8000e88:	f04f 0402 	mov.w	r4, #2
 8000e8c:	d128      	bne.n	8000ee0 <HAL_DMA_Start_IT+0x74>
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e8e:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000e92:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e94:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000e96:	6825      	ldr	r5, [r4, #0]
 8000e98:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8000e9c:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8000e9e:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000ea0:	6883      	ldr	r3, [r0, #8]
 8000ea2:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8000ea4:	bf0e      	itee	eq
 8000ea6:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8000ea8:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8000eaa:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000eac:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8000eae:	bf08      	it	eq
 8000eb0:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000eb2:	233f      	movs	r3, #63	; 0x3f
 8000eb4:	4093      	lsls	r3, r2
 8000eb6:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000eb8:	6823      	ldr	r3, [r4, #0]
 8000eba:	f043 0316 	orr.w	r3, r3, #22
 8000ebe:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000ec0:	6963      	ldr	r3, [r4, #20]
 8000ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ec6:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8000ec8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000eca:	b11b      	cbz	r3, 8000ed4 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000ecc:	6823      	ldr	r3, [r4, #0]
 8000ece:	f043 0308 	orr.w	r3, r3, #8
 8000ed2:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000ed4:	6823      	ldr	r3, [r4, #0]
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000edc:	2000      	movs	r0, #0
 8000ede:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8000ee0:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8000ee4:	2002      	movs	r0, #2
}
 8000ee6:	bd70      	pop	{r4, r5, r6, pc}

08000ee8 <HAL_DMA_IRQHandler>:
{
 8000ee8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000eee:	4b5a      	ldr	r3, [pc, #360]	; (8001058 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ef0:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8000ef2:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ef4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000ef6:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ef8:	2208      	movs	r2, #8
 8000efa:	409a      	lsls	r2, r3
 8000efc:	4216      	tst	r6, r2
{
 8000efe:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f00:	d00c      	beq.n	8000f1c <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000f02:	6801      	ldr	r1, [r0, #0]
 8000f04:	6808      	ldr	r0, [r1, #0]
 8000f06:	0740      	lsls	r0, r0, #29
 8000f08:	d508      	bpl.n	8000f1c <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000f0a:	6808      	ldr	r0, [r1, #0]
 8000f0c:	f020 0004 	bic.w	r0, r0, #4
 8000f10:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000f12:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000f14:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000f16:	f042 0201 	orr.w	r2, r2, #1
 8000f1a:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f1c:	4a4f      	ldr	r2, [pc, #316]	; (800105c <HAL_DMA_IRQHandler+0x174>)
 8000f1e:	409a      	lsls	r2, r3
 8000f20:	4216      	tst	r6, r2
 8000f22:	d008      	beq.n	8000f36 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000f24:	6821      	ldr	r1, [r4, #0]
 8000f26:	6949      	ldr	r1, [r1, #20]
 8000f28:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000f2a:	bf41      	itttt	mi
 8000f2c:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000f2e:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000f30:	f042 0202 	orrmi.w	r2, r2, #2
 8000f34:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f36:	4a4a      	ldr	r2, [pc, #296]	; (8001060 <HAL_DMA_IRQHandler+0x178>)
 8000f38:	409a      	lsls	r2, r3
 8000f3a:	4216      	tst	r6, r2
 8000f3c:	d008      	beq.n	8000f50 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000f3e:	6821      	ldr	r1, [r4, #0]
 8000f40:	6809      	ldr	r1, [r1, #0]
 8000f42:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000f44:	bf41      	itttt	mi
 8000f46:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000f48:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000f4a:	f042 0204 	orrmi.w	r2, r2, #4
 8000f4e:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000f50:	2210      	movs	r2, #16
 8000f52:	409a      	lsls	r2, r3
 8000f54:	4216      	tst	r6, r2
 8000f56:	d010      	beq.n	8000f7a <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000f58:	6823      	ldr	r3, [r4, #0]
 8000f5a:	6819      	ldr	r1, [r3, #0]
 8000f5c:	0709      	lsls	r1, r1, #28
 8000f5e:	d50c      	bpl.n	8000f7a <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000f60:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	0350      	lsls	r0, r2, #13
 8000f66:	d535      	bpl.n	8000fd4 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	0319      	lsls	r1, r3, #12
 8000f6c:	d401      	bmi.n	8000f72 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8000f6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f70:	e000      	b.n	8000f74 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000f72:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8000f74:	b10b      	cbz	r3, 8000f7a <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8000f76:	4620      	mov	r0, r4
 8000f78:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000f7a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000f7c:	2220      	movs	r2, #32
 8000f7e:	408a      	lsls	r2, r1
 8000f80:	4216      	tst	r6, r2
 8000f82:	d038      	beq.n	8000ff6 <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000f84:	6823      	ldr	r3, [r4, #0]
 8000f86:	6818      	ldr	r0, [r3, #0]
 8000f88:	06c6      	lsls	r6, r0, #27
 8000f8a:	d534      	bpl.n	8000ff6 <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000f8c:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000f8e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000f92:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f94:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000f96:	d125      	bne.n	8000fe4 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f98:	f022 0216 	bic.w	r2, r2, #22
 8000f9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f9e:	695a      	ldr	r2, [r3, #20]
 8000fa0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fa4:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fa6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000fa8:	b90a      	cbnz	r2, 8000fae <HAL_DMA_IRQHandler+0xc6>
 8000faa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000fac:	b11a      	cbz	r2, 8000fb6 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	f022 0208 	bic.w	r2, r2, #8
 8000fb4:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fb6:	233f      	movs	r3, #63	; 0x3f
 8000fb8:	408b      	lsls	r3, r1
 8000fba:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000fc8:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8000fca:	b10b      	cbz	r3, 8000fd0 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8000fcc:	4620      	mov	r0, r4
 8000fce:	4798      	blx	r3
}
 8000fd0:	b003      	add	sp, #12
 8000fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fd8:	bf5e      	ittt	pl
 8000fda:	681a      	ldrpl	r2, [r3, #0]
 8000fdc:	f022 0208 	bicpl.w	r2, r2, #8
 8000fe0:	601a      	strpl	r2, [r3, #0]
 8000fe2:	e7c4      	b.n	8000f6e <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000fe4:	0350      	lsls	r0, r2, #13
 8000fe6:	d528      	bpl.n	800103a <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	0319      	lsls	r1, r3, #12
 8000fec:	d432      	bmi.n	8001054 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8000fee:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8000ff0:	b10b      	cbz	r3, 8000ff6 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8000ff2:	4620      	mov	r0, r4
 8000ff4:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000ff6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d0e9      	beq.n	8000fd0 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000ffc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000ffe:	07da      	lsls	r2, r3, #31
 8001000:	d519      	bpl.n	8001036 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001002:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8001004:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8001006:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800100a:	6813      	ldr	r3, [r2, #0]
 800100c:	f023 0301 	bic.w	r3, r3, #1
 8001010:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001012:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001016:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 800101a:	9b01      	ldr	r3, [sp, #4]
 800101c:	3301      	adds	r3, #1
 800101e:	429f      	cmp	r7, r3
 8001020:	9301      	str	r3, [sp, #4]
 8001022:	d302      	bcc.n	800102a <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001024:	6813      	ldr	r3, [r2, #0]
 8001026:	07db      	lsls	r3, r3, #31
 8001028:	d4f7      	bmi.n	800101a <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 800102a:	2300      	movs	r3, #0
 800102c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001030:	2301      	movs	r3, #1
 8001032:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8001036:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001038:	e7c7      	b.n	8000fca <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8001040:	d108      	bne.n	8001054 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001042:	6819      	ldr	r1, [r3, #0]
 8001044:	f021 0110 	bic.w	r1, r1, #16
 8001048:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800104a:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 800104c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001050:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001054:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001056:	e7cb      	b.n	8000ff0 <HAL_DMA_IRQHandler+0x108>
 8001058:	20000000 	.word	0x20000000
 800105c:	00800001 	.word	0x00800001
 8001060:	00800004 	.word	0x00800004

08001064 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001068:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800106a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800121c <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001070:	4a68      	ldr	r2, [pc, #416]	; (8001214 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001072:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8001220 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001076:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001078:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800107a:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800107e:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001080:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001084:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8001088:	45b6      	cmp	lr, r6
 800108a:	f040 80ae 	bne.w	80011ea <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800108e:	684c      	ldr	r4, [r1, #4]
 8001090:	f024 0710 	bic.w	r7, r4, #16
 8001094:	2f02      	cmp	r7, #2
 8001096:	d116      	bne.n	80010c6 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8001098:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800109c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010a0:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80010a4:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010a8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80010ac:	f04f 0c0f 	mov.w	ip, #15
 80010b0:	fa0c fc0b 	lsl.w	ip, ip, fp
 80010b4:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010b8:	690d      	ldr	r5, [r1, #16]
 80010ba:	fa05 f50b 	lsl.w	r5, r5, fp
 80010be:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80010c2:	f8ca 5020 	str.w	r5, [sl, #32]
 80010c6:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ca:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80010cc:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010d0:	fa05 f50a 	lsl.w	r5, r5, sl
 80010d4:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010d6:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010da:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010de:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010e2:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010e4:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010e8:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80010ea:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010ee:	d811      	bhi.n	8001114 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80010f0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010f2:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010f6:	68cf      	ldr	r7, [r1, #12]
 80010f8:	fa07 fc0a 	lsl.w	ip, r7, sl
 80010fc:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001100:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001102:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001104:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001108:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800110c:	409f      	lsls	r7, r3
 800110e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001112:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001114:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001116:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001118:	688f      	ldr	r7, [r1, #8]
 800111a:	fa07 f70a 	lsl.w	r7, r7, sl
 800111e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001120:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001122:	00e5      	lsls	r5, r4, #3
 8001124:	d561      	bpl.n	80011ea <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001126:	f04f 0b00 	mov.w	fp, #0
 800112a:	f8cd b00c 	str.w	fp, [sp, #12]
 800112e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001132:	4d39      	ldr	r5, [pc, #228]	; (8001218 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001134:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001138:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800113c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001140:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001144:	9703      	str	r7, [sp, #12]
 8001146:	9f03      	ldr	r7, [sp, #12]
 8001148:	f023 0703 	bic.w	r7, r3, #3
 800114c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001150:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001154:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001158:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800115c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001160:	f04f 0e0f 	mov.w	lr, #15
 8001164:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001168:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800116a:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800116e:	d043      	beq.n	80011f8 <HAL_GPIO_Init+0x194>
 8001170:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001174:	42a8      	cmp	r0, r5
 8001176:	d041      	beq.n	80011fc <HAL_GPIO_Init+0x198>
 8001178:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800117c:	42a8      	cmp	r0, r5
 800117e:	d03f      	beq.n	8001200 <HAL_GPIO_Init+0x19c>
 8001180:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001184:	42a8      	cmp	r0, r5
 8001186:	d03d      	beq.n	8001204 <HAL_GPIO_Init+0x1a0>
 8001188:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800118c:	42a8      	cmp	r0, r5
 800118e:	d03b      	beq.n	8001208 <HAL_GPIO_Init+0x1a4>
 8001190:	4548      	cmp	r0, r9
 8001192:	d03b      	beq.n	800120c <HAL_GPIO_Init+0x1a8>
 8001194:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001198:	42a8      	cmp	r0, r5
 800119a:	d039      	beq.n	8001210 <HAL_GPIO_Init+0x1ac>
 800119c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011a0:	42a8      	cmp	r0, r5
 80011a2:	bf14      	ite	ne
 80011a4:	2508      	movne	r5, #8
 80011a6:	2507      	moveq	r5, #7
 80011a8:	fa05 f50c 	lsl.w	r5, r5, ip
 80011ac:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011b0:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80011b2:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80011b4:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011b6:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80011ba:	bf0c      	ite	eq
 80011bc:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80011be:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80011c0:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80011c2:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011c4:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80011c8:	bf0c      	ite	eq
 80011ca:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80011cc:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80011ce:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011d0:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011d2:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80011d6:	bf0c      	ite	eq
 80011d8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80011da:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80011dc:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80011de:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011e0:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80011e2:	bf54      	ite	pl
 80011e4:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80011e6:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80011e8:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ea:	3301      	adds	r3, #1
 80011ec:	2b10      	cmp	r3, #16
 80011ee:	f47f af44 	bne.w	800107a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80011f2:	b005      	add	sp, #20
 80011f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011f8:	465d      	mov	r5, fp
 80011fa:	e7d5      	b.n	80011a8 <HAL_GPIO_Init+0x144>
 80011fc:	2501      	movs	r5, #1
 80011fe:	e7d3      	b.n	80011a8 <HAL_GPIO_Init+0x144>
 8001200:	2502      	movs	r5, #2
 8001202:	e7d1      	b.n	80011a8 <HAL_GPIO_Init+0x144>
 8001204:	2503      	movs	r5, #3
 8001206:	e7cf      	b.n	80011a8 <HAL_GPIO_Init+0x144>
 8001208:	2504      	movs	r5, #4
 800120a:	e7cd      	b.n	80011a8 <HAL_GPIO_Init+0x144>
 800120c:	2505      	movs	r5, #5
 800120e:	e7cb      	b.n	80011a8 <HAL_GPIO_Init+0x144>
 8001210:	2506      	movs	r5, #6
 8001212:	e7c9      	b.n	80011a8 <HAL_GPIO_Init+0x144>
 8001214:	40013c00 	.word	0x40013c00
 8001218:	40020000 	.word	0x40020000
 800121c:	40023800 	.word	0x40023800
 8001220:	40021400 	.word	0x40021400

08001224 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001224:	6803      	ldr	r3, [r0, #0]
{
 8001226:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001228:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800122a:	07d8      	lsls	r0, r3, #31
 800122c:	d43b      	bmi.n	80012a6 <HAL_RCC_OscConfig+0x82>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800122e:	6823      	ldr	r3, [r4, #0]
 8001230:	0799      	lsls	r1, r3, #30
 8001232:	f100 8086 	bmi.w	8001342 <HAL_RCC_OscConfig+0x11e>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001236:	6823      	ldr	r3, [r4, #0]
 8001238:	071e      	lsls	r6, r3, #28
 800123a:	f100 80d1 	bmi.w	80013e0 <HAL_RCC_OscConfig+0x1bc>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800123e:	6823      	ldr	r3, [r4, #0]
 8001240:	075d      	lsls	r5, r3, #29
 8001242:	d52a      	bpl.n	800129a <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001244:	2300      	movs	r3, #0
 8001246:	9301      	str	r3, [sp, #4]
 8001248:	4b8e      	ldr	r3, [pc, #568]	; (8001484 <HAL_RCC_OscConfig+0x260>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800124a:	4d8f      	ldr	r5, [pc, #572]	; (8001488 <HAL_RCC_OscConfig+0x264>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800124c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800124e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001252:	641a      	str	r2, [r3, #64]	; 0x40
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800125e:	682b      	ldr	r3, [r5, #0]
 8001260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001264:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8001266:	f7ff fc1f 	bl	8000aa8 <HAL_GetTick>
 800126a:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800126c:	682b      	ldr	r3, [r5, #0]
 800126e:	05da      	lsls	r2, r3, #23
 8001270:	f140 80d8 	bpl.w	8001424 <HAL_RCC_OscConfig+0x200>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001274:	68a3      	ldr	r3, [r4, #8]
 8001276:	4d83      	ldr	r5, [pc, #524]	; (8001484 <HAL_RCC_OscConfig+0x260>)
 8001278:	2b01      	cmp	r3, #1
 800127a:	f040 80da 	bne.w	8001432 <HAL_RCC_OscConfig+0x20e>
 800127e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	672b      	str	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001286:	f7ff fc0f 	bl	8000aa8 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800128a:	4d7e      	ldr	r5, [pc, #504]	; (8001484 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 800128c:	4606      	mov	r6, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800128e:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001292:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001294:	079b      	lsls	r3, r3, #30
 8001296:	f140 80ed 	bpl.w	8001474 <HAL_RCC_OscConfig+0x250>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800129a:	69a2      	ldr	r2, [r4, #24]
 800129c:	2a00      	cmp	r2, #0
 800129e:	f040 80f9 	bne.w	8001494 <HAL_RCC_OscConfig+0x270>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80012a2:	2000      	movs	r0, #0
 80012a4:	e015      	b.n	80012d2 <HAL_RCC_OscConfig+0xae>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012a6:	4b77      	ldr	r3, [pc, #476]	; (8001484 <HAL_RCC_OscConfig+0x260>)
 80012a8:	689a      	ldr	r2, [r3, #8]
 80012aa:	f002 020c 	and.w	r2, r2, #12
 80012ae:	2a04      	cmp	r2, #4
 80012b0:	d007      	beq.n	80012c2 <HAL_RCC_OscConfig+0x9e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012b8:	2a08      	cmp	r2, #8
 80012ba:	d10c      	bne.n	80012d6 <HAL_RCC_OscConfig+0xb2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	025a      	lsls	r2, r3, #9
 80012c0:	d509      	bpl.n	80012d6 <HAL_RCC_OscConfig+0xb2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c2:	4b70      	ldr	r3, [pc, #448]	; (8001484 <HAL_RCC_OscConfig+0x260>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	039b      	lsls	r3, r3, #14
 80012c8:	d5b1      	bpl.n	800122e <HAL_RCC_OscConfig+0xa>
 80012ca:	6863      	ldr	r3, [r4, #4]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1ae      	bne.n	800122e <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 80012d0:	2001      	movs	r0, #1
}
 80012d2:	b003      	add	sp, #12
 80012d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012d6:	6863      	ldr	r3, [r4, #4]
 80012d8:	4d6a      	ldr	r5, [pc, #424]	; (8001484 <HAL_RCC_OscConfig+0x260>)
 80012da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012de:	d111      	bne.n	8001304 <HAL_RCC_OscConfig+0xe0>
 80012e0:	682b      	ldr	r3, [r5, #0]
 80012e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80012e8:	f7ff fbde 	bl	8000aa8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ec:	4d65      	ldr	r5, [pc, #404]	; (8001484 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 80012ee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f0:	682b      	ldr	r3, [r5, #0]
 80012f2:	039f      	lsls	r7, r3, #14
 80012f4:	d49b      	bmi.n	800122e <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f6:	f7ff fbd7 	bl	8000aa8 <HAL_GetTick>
 80012fa:	1b80      	subs	r0, r0, r6
 80012fc:	2864      	cmp	r0, #100	; 0x64
 80012fe:	d9f7      	bls.n	80012f0 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8001300:	2003      	movs	r0, #3
 8001302:	e7e6      	b.n	80012d2 <HAL_RCC_OscConfig+0xae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001304:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001308:	d104      	bne.n	8001314 <HAL_RCC_OscConfig+0xf0>
 800130a:	682b      	ldr	r3, [r5, #0]
 800130c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001310:	602b      	str	r3, [r5, #0]
 8001312:	e7e5      	b.n	80012e0 <HAL_RCC_OscConfig+0xbc>
 8001314:	682a      	ldr	r2, [r5, #0]
 8001316:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800131a:	602a      	str	r2, [r5, #0]
 800131c:	682a      	ldr	r2, [r5, #0]
 800131e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001322:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1df      	bne.n	80012e8 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8001328:	f7ff fbbe 	bl	8000aa8 <HAL_GetTick>
 800132c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132e:	682b      	ldr	r3, [r5, #0]
 8001330:	0398      	lsls	r0, r3, #14
 8001332:	f57f af7c 	bpl.w	800122e <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001336:	f7ff fbb7 	bl	8000aa8 <HAL_GetTick>
 800133a:	1b80      	subs	r0, r0, r6
 800133c:	2864      	cmp	r0, #100	; 0x64
 800133e:	d9f6      	bls.n	800132e <HAL_RCC_OscConfig+0x10a>
 8001340:	e7de      	b.n	8001300 <HAL_RCC_OscConfig+0xdc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001342:	4b50      	ldr	r3, [pc, #320]	; (8001484 <HAL_RCC_OscConfig+0x260>)
 8001344:	689a      	ldr	r2, [r3, #8]
 8001346:	f012 0f0c 	tst.w	r2, #12
 800134a:	d007      	beq.n	800135c <HAL_RCC_OscConfig+0x138>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001352:	2a08      	cmp	r2, #8
 8001354:	d116      	bne.n	8001384 <HAL_RCC_OscConfig+0x160>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	0259      	lsls	r1, r3, #9
 800135a:	d413      	bmi.n	8001384 <HAL_RCC_OscConfig+0x160>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800135c:	4b49      	ldr	r3, [pc, #292]	; (8001484 <HAL_RCC_OscConfig+0x260>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	0792      	lsls	r2, r2, #30
 8001362:	d502      	bpl.n	800136a <HAL_RCC_OscConfig+0x146>
 8001364:	68e2      	ldr	r2, [r4, #12]
 8001366:	2a01      	cmp	r2, #1
 8001368:	d1b2      	bne.n	80012d0 <HAL_RCC_OscConfig+0xac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800136a:	6818      	ldr	r0, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136c:	22f8      	movs	r2, #248	; 0xf8
 800136e:	fa92 f2a2 	rbit	r2, r2
 8001372:	fab2 f182 	clz	r1, r2
 8001376:	6922      	ldr	r2, [r4, #16]
 8001378:	408a      	lsls	r2, r1
 800137a:	f020 01f8 	bic.w	r1, r0, #248	; 0xf8
 800137e:	430a      	orrs	r2, r1
 8001380:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001382:	e758      	b.n	8001236 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001384:	68e2      	ldr	r2, [r4, #12]
 8001386:	4b41      	ldr	r3, [pc, #260]	; (800148c <HAL_RCC_OscConfig+0x268>)
 8001388:	b1da      	cbz	r2, 80013c2 <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_HSI_ENABLE();
 800138a:	2201      	movs	r2, #1
 800138c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800138e:	f7ff fb8b 	bl	8000aa8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001392:	4d3c      	ldr	r5, [pc, #240]	; (8001484 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 8001394:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001396:	682b      	ldr	r3, [r5, #0]
 8001398:	079b      	lsls	r3, r3, #30
 800139a:	d50c      	bpl.n	80013b6 <HAL_RCC_OscConfig+0x192>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139c:	6829      	ldr	r1, [r5, #0]
 800139e:	23f8      	movs	r3, #248	; 0xf8
 80013a0:	fa93 f3a3 	rbit	r3, r3
 80013a4:	fab3 f283 	clz	r2, r3
 80013a8:	6923      	ldr	r3, [r4, #16]
 80013aa:	4093      	lsls	r3, r2
 80013ac:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 80013b0:	4313      	orrs	r3, r2
 80013b2:	602b      	str	r3, [r5, #0]
 80013b4:	e73f      	b.n	8001236 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013b6:	f7ff fb77 	bl	8000aa8 <HAL_GetTick>
 80013ba:	1b80      	subs	r0, r0, r6
 80013bc:	2802      	cmp	r0, #2
 80013be:	d9ea      	bls.n	8001396 <HAL_RCC_OscConfig+0x172>
 80013c0:	e79e      	b.n	8001300 <HAL_RCC_OscConfig+0xdc>
        __HAL_RCC_HSI_DISABLE();
 80013c2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013c4:	f7ff fb70 	bl	8000aa8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013c8:	4d2e      	ldr	r5, [pc, #184]	; (8001484 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 80013ca:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013cc:	682b      	ldr	r3, [r5, #0]
 80013ce:	079f      	lsls	r7, r3, #30
 80013d0:	f57f af31 	bpl.w	8001236 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013d4:	f7ff fb68 	bl	8000aa8 <HAL_GetTick>
 80013d8:	1b80      	subs	r0, r0, r6
 80013da:	2802      	cmp	r0, #2
 80013dc:	d9f6      	bls.n	80013cc <HAL_RCC_OscConfig+0x1a8>
 80013de:	e78f      	b.n	8001300 <HAL_RCC_OscConfig+0xdc>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013e0:	6962      	ldr	r2, [r4, #20]
 80013e2:	4b2b      	ldr	r3, [pc, #172]	; (8001490 <HAL_RCC_OscConfig+0x26c>)
 80013e4:	b17a      	cbz	r2, 8001406 <HAL_RCC_OscConfig+0x1e2>
      __HAL_RCC_LSI_ENABLE();
 80013e6:	2201      	movs	r2, #1
 80013e8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80013ea:	f7ff fb5d 	bl	8000aa8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ee:	4d25      	ldr	r5, [pc, #148]	; (8001484 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 80013f0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013f2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80013f4:	0798      	lsls	r0, r3, #30
 80013f6:	f53f af22 	bmi.w	800123e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013fa:	f7ff fb55 	bl	8000aa8 <HAL_GetTick>
 80013fe:	1b80      	subs	r0, r0, r6
 8001400:	2802      	cmp	r0, #2
 8001402:	d9f6      	bls.n	80013f2 <HAL_RCC_OscConfig+0x1ce>
 8001404:	e77c      	b.n	8001300 <HAL_RCC_OscConfig+0xdc>
      __HAL_RCC_LSI_DISABLE();
 8001406:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001408:	f7ff fb4e 	bl	8000aa8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800140c:	4d1d      	ldr	r5, [pc, #116]	; (8001484 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 800140e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001410:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001412:	0799      	lsls	r1, r3, #30
 8001414:	f57f af13 	bpl.w	800123e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001418:	f7ff fb46 	bl	8000aa8 <HAL_GetTick>
 800141c:	1b80      	subs	r0, r0, r6
 800141e:	2802      	cmp	r0, #2
 8001420:	d9f6      	bls.n	8001410 <HAL_RCC_OscConfig+0x1ec>
 8001422:	e76d      	b.n	8001300 <HAL_RCC_OscConfig+0xdc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001424:	f7ff fb40 	bl	8000aa8 <HAL_GetTick>
 8001428:	1b80      	subs	r0, r0, r6
 800142a:	2802      	cmp	r0, #2
 800142c:	f67f af1e 	bls.w	800126c <HAL_RCC_OscConfig+0x48>
 8001430:	e766      	b.n	8001300 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001432:	2b05      	cmp	r3, #5
 8001434:	d104      	bne.n	8001440 <HAL_RCC_OscConfig+0x21c>
 8001436:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001438:	f043 0304 	orr.w	r3, r3, #4
 800143c:	672b      	str	r3, [r5, #112]	; 0x70
 800143e:	e71e      	b.n	800127e <HAL_RCC_OscConfig+0x5a>
 8001440:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001442:	f022 0201 	bic.w	r2, r2, #1
 8001446:	672a      	str	r2, [r5, #112]	; 0x70
 8001448:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800144a:	f022 0204 	bic.w	r2, r2, #4
 800144e:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001450:	2b00      	cmp	r3, #0
 8001452:	f47f af18 	bne.w	8001286 <HAL_RCC_OscConfig+0x62>
      tickstart = HAL_GetTick();
 8001456:	f7ff fb27 	bl	8000aa8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800145a:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800145e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001460:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001462:	0798      	lsls	r0, r3, #30
 8001464:	f57f af19 	bpl.w	800129a <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001468:	f7ff fb1e 	bl	8000aa8 <HAL_GetTick>
 800146c:	1b80      	subs	r0, r0, r6
 800146e:	42b8      	cmp	r0, r7
 8001470:	d9f6      	bls.n	8001460 <HAL_RCC_OscConfig+0x23c>
 8001472:	e745      	b.n	8001300 <HAL_RCC_OscConfig+0xdc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001474:	f7ff fb18 	bl	8000aa8 <HAL_GetTick>
 8001478:	1b80      	subs	r0, r0, r6
 800147a:	42b8      	cmp	r0, r7
 800147c:	f67f af09 	bls.w	8001292 <HAL_RCC_OscConfig+0x6e>
 8001480:	e73e      	b.n	8001300 <HAL_RCC_OscConfig+0xdc>
 8001482:	bf00      	nop
 8001484:	40023800 	.word	0x40023800
 8001488:	40007000 	.word	0x40007000
 800148c:	42470000 	.word	0x42470000
 8001490:	42470e80 	.word	0x42470e80
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001494:	4d2b      	ldr	r5, [pc, #172]	; (8001544 <HAL_RCC_OscConfig+0x320>)
 8001496:	68ab      	ldr	r3, [r5, #8]
 8001498:	f003 030c 	and.w	r3, r3, #12
 800149c:	2b08      	cmp	r3, #8
 800149e:	f43f af17 	beq.w	80012d0 <HAL_RCC_OscConfig+0xac>
 80014a2:	4e29      	ldr	r6, [pc, #164]	; (8001548 <HAL_RCC_OscConfig+0x324>)
 80014a4:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014a6:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80014a8:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014aa:	d13e      	bne.n	800152a <HAL_RCC_OscConfig+0x306>
        tickstart = HAL_GetTick();
 80014ac:	f7ff fafc 	bl	8000aa8 <HAL_GetTick>
 80014b0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b2:	682b      	ldr	r3, [r5, #0]
 80014b4:	0199      	lsls	r1, r3, #6
 80014b6:	d432      	bmi.n	800151e <HAL_RCC_OscConfig+0x2fa>
 80014b8:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 80014bc:	fa97 f7a7 	rbit	r7, r7
 80014c0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014c4:	fab7 f787 	clz	r7, r7
 80014c8:	fa92 f2a2 	rbit	r2, r2
 80014cc:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 80014d0:	fab2 f082 	clz	r0, r2
 80014d4:	fa91 f1a1 	rbit	r1, r1
 80014d8:	6a22      	ldr	r2, [r4, #32]
 80014da:	69e3      	ldr	r3, [r4, #28]
 80014dc:	4313      	orrs	r3, r2
 80014de:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80014e0:	fa02 f707 	lsl.w	r7, r2, r7
 80014e4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80014e6:	0852      	lsrs	r2, r2, #1
 80014e8:	3a01      	subs	r2, #1
 80014ea:	4082      	lsls	r2, r0
 80014ec:	433b      	orrs	r3, r7
 80014ee:	4313      	orrs	r3, r2
 80014f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014f2:	4c14      	ldr	r4, [pc, #80]	; (8001544 <HAL_RCC_OscConfig+0x320>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014f4:	fab1 f181 	clz	r1, r1
 80014f8:	fa02 f101 	lsl.w	r1, r2, r1
 80014fc:	430b      	orrs	r3, r1
 80014fe:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001500:	2301      	movs	r3, #1
 8001502:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001504:	f7ff fad0 	bl	8000aa8 <HAL_GetTick>
 8001508:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800150a:	6823      	ldr	r3, [r4, #0]
 800150c:	019a      	lsls	r2, r3, #6
 800150e:	f53f aec8 	bmi.w	80012a2 <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001512:	f7ff fac9 	bl	8000aa8 <HAL_GetTick>
 8001516:	1b40      	subs	r0, r0, r5
 8001518:	2802      	cmp	r0, #2
 800151a:	d9f6      	bls.n	800150a <HAL_RCC_OscConfig+0x2e6>
 800151c:	e6f0      	b.n	8001300 <HAL_RCC_OscConfig+0xdc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800151e:	f7ff fac3 	bl	8000aa8 <HAL_GetTick>
 8001522:	1bc0      	subs	r0, r0, r7
 8001524:	2802      	cmp	r0, #2
 8001526:	d9c4      	bls.n	80014b2 <HAL_RCC_OscConfig+0x28e>
 8001528:	e6ea      	b.n	8001300 <HAL_RCC_OscConfig+0xdc>
        tickstart = HAL_GetTick();
 800152a:	f7ff fabd 	bl	8000aa8 <HAL_GetTick>
 800152e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001530:	682b      	ldr	r3, [r5, #0]
 8001532:	019b      	lsls	r3, r3, #6
 8001534:	f57f aeb5 	bpl.w	80012a2 <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001538:	f7ff fab6 	bl	8000aa8 <HAL_GetTick>
 800153c:	1b00      	subs	r0, r0, r4
 800153e:	2802      	cmp	r0, #2
 8001540:	d9f6      	bls.n	8001530 <HAL_RCC_OscConfig+0x30c>
 8001542:	e6dd      	b.n	8001300 <HAL_RCC_OscConfig+0xdc>
 8001544:	40023800 	.word	0x40023800
 8001548:	42470060 	.word	0x42470060

0800154c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800154c:	4a19      	ldr	r2, [pc, #100]	; (80015b4 <HAL_RCC_GetSysClockFreq+0x68>)
 800154e:	6893      	ldr	r3, [r2, #8]
 8001550:	f003 030c 	and.w	r3, r3, #12
 8001554:	2b04      	cmp	r3, #4
{
 8001556:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001558:	d003      	beq.n	8001562 <HAL_RCC_GetSysClockFreq+0x16>
 800155a:	2b08      	cmp	r3, #8
 800155c:	d003      	beq.n	8001566 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800155e:	4816      	ldr	r0, [pc, #88]	; (80015b8 <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001560:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8001562:	4816      	ldr	r0, [pc, #88]	; (80015bc <HAL_RCC_GetSysClockFreq+0x70>)
 8001564:	bd10      	pop	{r4, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001566:	6851      	ldr	r1, [r2, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001568:	6853      	ldr	r3, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800156a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800156e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001572:	f647 74c0 	movw	r4, #32704	; 0x7fc0
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001576:	6853      	ldr	r3, [r2, #4]
 8001578:	fa94 f0a4 	rbit	r0, r4
 800157c:	fab0 f080 	clz	r0, r0
 8001580:	ea03 0304 	and.w	r3, r3, r4
 8001584:	fa23 f300 	lsr.w	r3, r3, r0
 8001588:	bf14      	ite	ne
 800158a:	480c      	ldrne	r0, [pc, #48]	; (80015bc <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 800158c:	480a      	ldreq	r0, [pc, #40]	; (80015b8 <HAL_RCC_GetSysClockFreq+0x6c>)
 800158e:	fbb0 f0f1 	udiv	r0, r0, r1
 8001592:	4358      	muls	r0, r3
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8001594:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <HAL_RCC_GetSysClockFreq+0x68>)
 8001596:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	fa92 f2a2 	rbit	r2, r2
 80015a0:	fab2 f282 	clz	r2, r2
 80015a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015a8:	40d3      	lsrs	r3, r2
 80015aa:	3301      	adds	r3, #1
 80015ac:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80015ae:	fbb0 f0f3 	udiv	r0, r0, r3
 80015b2:	bd10      	pop	{r4, pc}
 80015b4:	40023800 	.word	0x40023800
 80015b8:	00f42400 	.word	0x00f42400
 80015bc:	017d7840 	.word	0x017d7840

080015c0 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80015c0:	4b56      	ldr	r3, [pc, #344]	; (800171c <HAL_RCC_ClockConfig+0x15c>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	f002 020f 	and.w	r2, r2, #15
 80015c8:	428a      	cmp	r2, r1
{
 80015ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015ce:	4605      	mov	r5, r0
 80015d0:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80015d2:	d330      	bcc.n	8001636 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015d4:	682a      	ldr	r2, [r5, #0]
 80015d6:	0794      	lsls	r4, r2, #30
 80015d8:	d437      	bmi.n	800164a <HAL_RCC_ClockConfig+0x8a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015da:	07d0      	lsls	r0, r2, #31
 80015dc:	d43d      	bmi.n	800165a <HAL_RCC_ClockConfig+0x9a>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80015de:	4b4f      	ldr	r3, [pc, #316]	; (800171c <HAL_RCC_ClockConfig+0x15c>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	f002 020f 	and.w	r2, r2, #15
 80015e6:	4296      	cmp	r6, r2
 80015e8:	f0c0 8088 	bcc.w	80016fc <HAL_RCC_ClockConfig+0x13c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ec:	682a      	ldr	r2, [r5, #0]
 80015ee:	0751      	lsls	r1, r2, #29
 80015f0:	f100 808c 	bmi.w	800170c <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015f4:	0713      	lsls	r3, r2, #28
 80015f6:	d507      	bpl.n	8001608 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015f8:	4a49      	ldr	r2, [pc, #292]	; (8001720 <HAL_RCC_ClockConfig+0x160>)
 80015fa:	6929      	ldr	r1, [r5, #16]
 80015fc:	6893      	ldr	r3, [r2, #8]
 80015fe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001602:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001606:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001608:	f7ff ffa0 	bl	800154c <HAL_RCC_GetSysClockFreq>
 800160c:	4b44      	ldr	r3, [pc, #272]	; (8001720 <HAL_RCC_ClockConfig+0x160>)
 800160e:	22f0      	movs	r2, #240	; 0xf0
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	fa92 f2a2 	rbit	r2, r2
 8001616:	fab2 f282 	clz	r2, r2
 800161a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800161e:	40d3      	lsrs	r3, r2
 8001620:	4a40      	ldr	r2, [pc, #256]	; (8001724 <HAL_RCC_ClockConfig+0x164>)
 8001622:	5cd3      	ldrb	r3, [r2, r3]
 8001624:	40d8      	lsrs	r0, r3
 8001626:	4b40      	ldr	r3, [pc, #256]	; (8001728 <HAL_RCC_ClockConfig+0x168>)
 8001628:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800162a:	2000      	movs	r0, #0
 800162c:	f7ff fa06 	bl	8000a3c <HAL_InitTick>
  return HAL_OK;
 8001630:	2000      	movs	r0, #0
}
 8001632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001636:	b2ca      	uxtb	r2, r1
 8001638:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 030f 	and.w	r3, r3, #15
 8001640:	4299      	cmp	r1, r3
 8001642:	d0c7      	beq.n	80015d4 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001644:	2001      	movs	r0, #1
 8001646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800164a:	4935      	ldr	r1, [pc, #212]	; (8001720 <HAL_RCC_ClockConfig+0x160>)
 800164c:	68a8      	ldr	r0, [r5, #8]
 800164e:	688b      	ldr	r3, [r1, #8]
 8001650:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001654:	4303      	orrs	r3, r0
 8001656:	608b      	str	r3, [r1, #8]
 8001658:	e7bf      	b.n	80015da <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800165a:	686a      	ldr	r2, [r5, #4]
 800165c:	4b30      	ldr	r3, [pc, #192]	; (8001720 <HAL_RCC_ClockConfig+0x160>)
 800165e:	2a01      	cmp	r2, #1
 8001660:	d11e      	bne.n	80016a0 <HAL_RCC_ClockConfig+0xe0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001668:	d0ec      	beq.n	8001644 <HAL_RCC_ClockConfig+0x84>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800166a:	4c2d      	ldr	r4, [pc, #180]	; (8001720 <HAL_RCC_ClockConfig+0x160>)
 800166c:	68a3      	ldr	r3, [r4, #8]
 800166e:	f023 0303 	bic.w	r3, r3, #3
 8001672:	4313      	orrs	r3, r2
 8001674:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8001676:	f7ff fa17 	bl	8000aa8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800167a:	686b      	ldr	r3, [r5, #4]
 800167c:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 800167e:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001680:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001684:	d116      	bne.n	80016b4 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001686:	68a3      	ldr	r3, [r4, #8]
 8001688:	f003 030c 	and.w	r3, r3, #12
 800168c:	2b04      	cmp	r3, #4
 800168e:	d0a6      	beq.n	80015de <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001690:	f7ff fa0a 	bl	8000aa8 <HAL_GetTick>
 8001694:	1bc0      	subs	r0, r0, r7
 8001696:	4540      	cmp	r0, r8
 8001698:	d9f5      	bls.n	8001686 <HAL_RCC_ClockConfig+0xc6>
          return HAL_TIMEOUT;
 800169a:	2003      	movs	r0, #3
 800169c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 80016a0:	1e91      	subs	r1, r2, #2
 80016a2:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016a4:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 80016a6:	d802      	bhi.n	80016ae <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016a8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80016ac:	e7dc      	b.n	8001668 <HAL_RCC_ClockConfig+0xa8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ae:	f013 0f02 	tst.w	r3, #2
 80016b2:	e7d9      	b.n	8001668 <HAL_RCC_ClockConfig+0xa8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d10a      	bne.n	80016ce <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016b8:	68a3      	ldr	r3, [r4, #8]
 80016ba:	f003 030c 	and.w	r3, r3, #12
 80016be:	2b08      	cmp	r3, #8
 80016c0:	d08d      	beq.n	80015de <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016c2:	f7ff f9f1 	bl	8000aa8 <HAL_GetTick>
 80016c6:	1bc0      	subs	r0, r0, r7
 80016c8:	4540      	cmp	r0, r8
 80016ca:	d9f5      	bls.n	80016b8 <HAL_RCC_ClockConfig+0xf8>
 80016cc:	e7e5      	b.n	800169a <HAL_RCC_ClockConfig+0xda>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 80016ce:	2b03      	cmp	r3, #3
 80016d0:	d10f      	bne.n	80016f2 <HAL_RCC_ClockConfig+0x132>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80016d2:	68a3      	ldr	r3, [r4, #8]
 80016d4:	f003 030c 	and.w	r3, r3, #12
 80016d8:	2b0c      	cmp	r3, #12
 80016da:	d080      	beq.n	80015de <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016dc:	f7ff f9e4 	bl	8000aa8 <HAL_GetTick>
 80016e0:	1bc0      	subs	r0, r0, r7
 80016e2:	4540      	cmp	r0, r8
 80016e4:	d9f5      	bls.n	80016d2 <HAL_RCC_ClockConfig+0x112>
 80016e6:	e7d8      	b.n	800169a <HAL_RCC_ClockConfig+0xda>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e8:	f7ff f9de 	bl	8000aa8 <HAL_GetTick>
 80016ec:	1bc0      	subs	r0, r0, r7
 80016ee:	4540      	cmp	r0, r8
 80016f0:	d8d3      	bhi.n	800169a <HAL_RCC_ClockConfig+0xda>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80016f2:	68a3      	ldr	r3, [r4, #8]
 80016f4:	f013 0f0c 	tst.w	r3, #12
 80016f8:	d1f6      	bne.n	80016e8 <HAL_RCC_ClockConfig+0x128>
 80016fa:	e770      	b.n	80015de <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016fc:	b2f2      	uxtb	r2, r6
 80016fe:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 030f 	and.w	r3, r3, #15
 8001706:	429e      	cmp	r6, r3
 8001708:	d19c      	bne.n	8001644 <HAL_RCC_ClockConfig+0x84>
 800170a:	e76f      	b.n	80015ec <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800170c:	4904      	ldr	r1, [pc, #16]	; (8001720 <HAL_RCC_ClockConfig+0x160>)
 800170e:	68e8      	ldr	r0, [r5, #12]
 8001710:	688b      	ldr	r3, [r1, #8]
 8001712:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001716:	4303      	orrs	r3, r0
 8001718:	608b      	str	r3, [r1, #8]
 800171a:	e76b      	b.n	80015f4 <HAL_RCC_ClockConfig+0x34>
 800171c:	40023c00 	.word	0x40023c00
 8001720:	40023800 	.word	0x40023800
 8001724:	080028ad 	.word	0x080028ad
 8001728:	20000000 	.word	0x20000000

0800172c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800172c:	4b01      	ldr	r3, [pc, #4]	; (8001734 <HAL_RCC_GetHCLKFreq+0x8>)
 800172e:	6818      	ldr	r0, [r3, #0]
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	20000000 	.word	0x20000000

08001738 <HAL_TIM_Base_Start>:
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001738:	6802      	ldr	r2, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800173a:	2302      	movs	r3, #2
 800173c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_TIM_ENABLE(htim);
 8001740:	6813      	ldr	r3, [r2, #0]
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	6013      	str	r3, [r2, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001748:	2301      	movs	r3, #1
 800174a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
}
 800174e:	2000      	movs	r0, #0
 8001750:	4770      	bx	lr
	...

08001754 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001754:	4a2e      	ldr	r2, [pc, #184]	; (8001810 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8001756:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001758:	4290      	cmp	r0, r2
 800175a:	d012      	beq.n	8001782 <TIM_Base_SetConfig+0x2e>
 800175c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001760:	d00f      	beq.n	8001782 <TIM_Base_SetConfig+0x2e>
 8001762:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001766:	4290      	cmp	r0, r2
 8001768:	d00b      	beq.n	8001782 <TIM_Base_SetConfig+0x2e>
 800176a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800176e:	4290      	cmp	r0, r2
 8001770:	d007      	beq.n	8001782 <TIM_Base_SetConfig+0x2e>
 8001772:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001776:	4290      	cmp	r0, r2
 8001778:	d003      	beq.n	8001782 <TIM_Base_SetConfig+0x2e>
 800177a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800177e:	4290      	cmp	r0, r2
 8001780:	d11d      	bne.n	80017be <TIM_Base_SetConfig+0x6a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001782:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001788:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800178a:	4a21      	ldr	r2, [pc, #132]	; (8001810 <TIM_Base_SetConfig+0xbc>)
 800178c:	4290      	cmp	r0, r2
 800178e:	d104      	bne.n	800179a <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001790:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001792:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001796:	4313      	orrs	r3, r2
 8001798:	e028      	b.n	80017ec <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800179a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800179e:	d0f7      	beq.n	8001790 <TIM_Base_SetConfig+0x3c>
 80017a0:	4a1c      	ldr	r2, [pc, #112]	; (8001814 <TIM_Base_SetConfig+0xc0>)
 80017a2:	4290      	cmp	r0, r2
 80017a4:	d0f4      	beq.n	8001790 <TIM_Base_SetConfig+0x3c>
 80017a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017aa:	4290      	cmp	r0, r2
 80017ac:	d0f0      	beq.n	8001790 <TIM_Base_SetConfig+0x3c>
 80017ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017b2:	4290      	cmp	r0, r2
 80017b4:	d0ec      	beq.n	8001790 <TIM_Base_SetConfig+0x3c>
 80017b6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80017ba:	4290      	cmp	r0, r2
 80017bc:	d0e8      	beq.n	8001790 <TIM_Base_SetConfig+0x3c>
 80017be:	4a16      	ldr	r2, [pc, #88]	; (8001818 <TIM_Base_SetConfig+0xc4>)
 80017c0:	4290      	cmp	r0, r2
 80017c2:	d0e5      	beq.n	8001790 <TIM_Base_SetConfig+0x3c>
 80017c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017c8:	4290      	cmp	r0, r2
 80017ca:	d0e1      	beq.n	8001790 <TIM_Base_SetConfig+0x3c>
 80017cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017d0:	4290      	cmp	r0, r2
 80017d2:	d0dd      	beq.n	8001790 <TIM_Base_SetConfig+0x3c>
 80017d4:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80017d8:	4290      	cmp	r0, r2
 80017da:	d0d9      	beq.n	8001790 <TIM_Base_SetConfig+0x3c>
 80017dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017e0:	4290      	cmp	r0, r2
 80017e2:	d0d5      	beq.n	8001790 <TIM_Base_SetConfig+0x3c>
 80017e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017e8:	4290      	cmp	r0, r2
 80017ea:	d0d1      	beq.n	8001790 <TIM_Base_SetConfig+0x3c>
  }

  TIMx->CR1 = tmpcr1;
 80017ec:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017ee:	688b      	ldr	r3, [r1, #8]
 80017f0:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80017f2:	680b      	ldr	r3, [r1, #0]
 80017f4:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <TIM_Base_SetConfig+0xbc>)
 80017f8:	4298      	cmp	r0, r3
 80017fa:	d006      	beq.n	800180a <TIM_Base_SetConfig+0xb6>
 80017fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001800:	4298      	cmp	r0, r3
 8001802:	d002      	beq.n	800180a <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001804:	2301      	movs	r3, #1
 8001806:	6143      	str	r3, [r0, #20]
}
 8001808:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800180a:	690b      	ldr	r3, [r1, #16]
 800180c:	6303      	str	r3, [r0, #48]	; 0x30
 800180e:	e7f9      	b.n	8001804 <TIM_Base_SetConfig+0xb0>
 8001810:	40010000 	.word	0x40010000
 8001814:	40000400 	.word	0x40000400
 8001818:	40014000 	.word	0x40014000

0800181c <HAL_TIM_Base_Init>:
{ 
 800181c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800181e:	4604      	mov	r4, r0
 8001820:	b1a0      	cbz	r0, 800184c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001822:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001826:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800182a:	b91b      	cbnz	r3, 8001834 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800182c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8001830:	f000 fa0e 	bl	8001c50 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001834:	2302      	movs	r3, #2
 8001836:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800183a:	6820      	ldr	r0, [r4, #0]
 800183c:	1d21      	adds	r1, r4, #4
 800183e:	f7ff ff89 	bl	8001754 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001842:	2301      	movs	r3, #1
 8001844:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001848:	2000      	movs	r0, #0
 800184a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800184c:	2001      	movs	r0, #1
}
 800184e:	bd10      	pop	{r4, pc}

08001850 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8001850:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001854:	2b01      	cmp	r3, #1
{
 8001856:	b510      	push	{r4, lr}
 8001858:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 800185c:	d018      	beq.n	8001890 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 800185e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001862:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001864:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001866:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001868:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800186a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800186e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	4322      	orrs	r2, r4
 8001874:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800187c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	430a      	orrs	r2, r1
 8001882:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8001884:	2301      	movs	r3, #1
 8001886:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 800188a:	2300      	movs	r3, #0
 800188c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8001890:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8001892:	bd10      	pop	{r4, pc}

08001894 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac1;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001894:	b507      	push	{r0, r1, r2, lr}
  DAC_ChannelConfTypeDef sConfig;

    /**DAC Initialization 
    */
  hdac.Instance = DAC;
 8001896:	480d      	ldr	r0, [pc, #52]	; (80018cc <MX_DAC_Init+0x38>)
 8001898:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <MX_DAC_Init+0x3c>)
 800189a:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800189c:	f7ff f983 	bl	8000ba6 <HAL_DAC_Init>
 80018a0:	b118      	cbz	r0, 80018aa <MX_DAC_Init+0x16>
  {
    _Error_Handler(__FILE__, __LINE__);
 80018a2:	213f      	movs	r1, #63	; 0x3f
 80018a4:	480b      	ldr	r0, [pc, #44]	; (80018d4 <MX_DAC_Init+0x40>)
 80018a6:	f000 f93f 	bl	8001b28 <_Error_Handler>
  }

    /**DAC channel OUT1 config 
    */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80018aa:	2304      	movs	r3, #4
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80018ac:	2200      	movs	r2, #0
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80018ae:	4669      	mov	r1, sp
 80018b0:	4806      	ldr	r0, [pc, #24]	; (80018cc <MX_DAC_Init+0x38>)
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80018b2:	9300      	str	r3, [sp, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80018b4:	9201      	str	r2, [sp, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80018b6:	f7ff fa09 	bl	8000ccc <HAL_DAC_ConfigChannel>
 80018ba:	b118      	cbz	r0, 80018c4 <MX_DAC_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
 80018bc:	2148      	movs	r1, #72	; 0x48
 80018be:	4805      	ldr	r0, [pc, #20]	; (80018d4 <MX_DAC_Init+0x40>)
 80018c0:	f000 f932 	bl	8001b28 <_Error_Handler>
  }

}
 80018c4:	b003      	add	sp, #12
 80018c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80018ca:	bf00      	nop
 80018cc:	20000084 	.word	0x20000084
 80018d0:	40007400 	.word	0x40007400
 80018d4:	080028a0 	.word	0x080028a0

080018d8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80018d8:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(dacHandle->Instance==DAC)
 80018da:	6802      	ldr	r2, [r0, #0]
 80018dc:	4b1e      	ldr	r3, [pc, #120]	; (8001958 <HAL_DAC_MspInit+0x80>)
 80018de:	429a      	cmp	r2, r3
{
 80018e0:	b086      	sub	sp, #24
 80018e2:	4606      	mov	r6, r0
  if(dacHandle->Instance==DAC)
 80018e4:	d135      	bne.n	8001952 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80018e6:	2500      	movs	r5, #0
 80018e8:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 80018ec:	9500      	str	r5, [sp, #0]
 80018ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f0:	481a      	ldr	r0, [pc, #104]	; (800195c <HAL_DAC_MspInit+0x84>)

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80018f2:	4c1b      	ldr	r4, [pc, #108]	; (8001960 <HAL_DAC_MspInit+0x88>)
    __HAL_RCC_DAC_CLK_ENABLE();
 80018f4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80018f8:	641a      	str	r2, [r3, #64]	; 0x40
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	9503      	str	r5, [sp, #12]
    __HAL_RCC_DAC_CLK_ENABLE();
 80018fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001906:	2310      	movs	r3, #16
 8001908:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800190c:	2303      	movs	r3, #3
 800190e:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001910:	f7ff fba8 	bl	8001064 <HAL_GPIO_Init>
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001914:	4913      	ldr	r1, [pc, #76]	; (8001964 <HAL_DAC_MspInit+0x8c>)
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001916:	60e5      	str	r5, [r4, #12]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001918:	2340      	movs	r3, #64	; 0x40
 800191a:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800191e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001926:	6123      	str	r3, [r4, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001928:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800192c:	6163      	str	r3, [r4, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800192e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001932:	61a3      	str	r3, [r4, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001934:	4620      	mov	r0, r4
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001936:	f44f 7380 	mov.w	r3, #256	; 0x100
 800193a:	61e3      	str	r3, [r4, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 800193c:	6225      	str	r5, [r4, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800193e:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001940:	f7ff fa16 	bl	8000d70 <HAL_DMA_Init>
 8001944:	b118      	cbz	r0, 800194e <HAL_DAC_MspInit+0x76>
    {
      _Error_Handler(__FILE__, __LINE__);
 8001946:	216f      	movs	r1, #111	; 0x6f
 8001948:	4807      	ldr	r0, [pc, #28]	; (8001968 <HAL_DAC_MspInit+0x90>)
 800194a:	f000 f8ed 	bl	8001b28 <_Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 800194e:	60b4      	str	r4, [r6, #8]
 8001950:	63a6      	str	r6, [r4, #56]	; 0x38

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001952:	b006      	add	sp, #24
 8001954:	bd70      	pop	{r4, r5, r6, pc}
 8001956:	bf00      	nop
 8001958:	40007400 	.word	0x40007400
 800195c:	40020000 	.word	0x40020000
 8001960:	20000024 	.word	0x20000024
 8001964:	40026088 	.word	0x40026088
 8001968:	080028a0 	.word	0x080028a0

0800196c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800196c:	b507      	push	{r0, r1, r2, lr}
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800196e:	4b0b      	ldr	r3, [pc, #44]	; (800199c <MX_DMA_Init+0x30>)
 8001970:	2200      	movs	r2, #0
 8001972:	9201      	str	r2, [sp, #4]
 8001974:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001976:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 800197a:	6319      	str	r1, [r3, #48]	; 0x30
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001982:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001984:	4611      	mov	r1, r2
 8001986:	2010      	movs	r0, #16
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001988:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800198a:	f7ff f8a5 	bl	8000ad8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800198e:	2010      	movs	r0, #16
 8001990:	f7ff f8d6 	bl	8000b40 <HAL_NVIC_EnableIRQ>

}
 8001994:	b003      	add	sp, #12
 8001996:	f85d fb04 	ldr.w	pc, [sp], #4
 800199a:	bf00      	nop
 800199c:	40023800 	.word	0x40023800

080019a0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80019a0:	b082      	sub	sp, #8

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	9301      	str	r3, [sp, #4]
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <MX_GPIO_Init+0x20>)
 80019a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019aa:	f042 0201 	orr.w	r2, r2, #1
 80019ae:	631a      	str	r2, [r3, #48]	; 0x30
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	9301      	str	r3, [sp, #4]
 80019b8:	9b01      	ldr	r3, [sp, #4]

}
 80019ba:	b002      	add	sp, #8
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40023800 	.word	0x40023800

080019c4 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80019c4:	b510      	push	{r4, lr}
 80019c6:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c8:	2300      	movs	r3, #0
 80019ca:	4a21      	ldr	r2, [pc, #132]	; (8001a50 <SystemClock_Config+0x8c>)
 80019cc:	9301      	str	r3, [sp, #4]
 80019ce:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80019d0:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80019d4:	6411      	str	r1, [r2, #64]	; 0x40
 80019d6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019d8:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80019dc:	9201      	str	r2, [sp, #4]
 80019de:	9a01      	ldr	r2, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019e0:	4a1c      	ldr	r2, [pc, #112]	; (8001a54 <SystemClock_Config+0x90>)
 80019e2:	9302      	str	r3, [sp, #8]
 80019e4:	6811      	ldr	r1, [r2, #0]
 80019e6:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80019ea:	6011      	str	r1, [r2, #0]
 80019ec:	6812      	ldr	r2, [r2, #0]
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019ee:	930e      	str	r3, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019f0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80019f4:	9202      	str	r2, [sp, #8]
 80019f6:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019f8:	2202      	movs	r2, #2
 80019fa:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019fc:	2201      	movs	r2, #1
 80019fe:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a00:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001a02:	2210      	movs	r2, #16
 8001a04:	920c      	str	r2, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a06:	f7ff fc0d 	bl	8001224 <HAL_RCC_OscConfig>
 8001a0a:	4601      	mov	r1, r0
 8001a0c:	b100      	cbz	r0, 8001a10 <SystemClock_Config+0x4c>
 8001a0e:	e7fe      	b.n	8001a0e <SystemClock_Config+0x4a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a10:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001a12:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a14:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a16:	9006      	str	r0, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a18:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a1a:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a1c:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a1e:	f7ff fdcf 	bl	80015c0 <HAL_RCC_ClockConfig>
 8001a22:	4604      	mov	r4, r0
 8001a24:	b100      	cbz	r0, 8001a28 <SystemClock_Config+0x64>
 8001a26:	e7fe      	b.n	8001a26 <SystemClock_Config+0x62>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001a28:	f7ff fe80 	bl	800172c <HAL_RCC_GetHCLKFreq>
 8001a2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a30:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a34:	f7ff f890 	bl	8000b58 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001a38:	2004      	movs	r0, #4
 8001a3a:	f7ff f8a3 	bl	8000b84 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001a3e:	4622      	mov	r2, r4
 8001a40:	4621      	mov	r1, r4
 8001a42:	f04f 30ff 	mov.w	r0, #4294967295
 8001a46:	f7ff f847 	bl	8000ad8 <HAL_NVIC_SetPriority>
}
 8001a4a:	b014      	add	sp, #80	; 0x50
 8001a4c:	bd10      	pop	{r4, pc}
 8001a4e:	bf00      	nop
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40007000 	.word	0x40007000

08001a58 <main>:
{
 8001a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a5c:	ed2d 8b02 	vpush	{d8}
 8001a60:	b082      	sub	sp, #8
  HAL_Init();
 8001a62:	f7fe ffff 	bl	8000a64 <HAL_Init>
	  result=rint((sinf(k*2*pi/muestras)+1)*2048);
 8001a66:	f20f 09b8 	addw	r9, pc, #184	; 0xb8
 8001a6a:	e9d9 8900 	ldrd	r8, r9, [r9]
  SystemClock_Config();
 8001a6e:	f7ff ffa9 	bl	80019c4 <SystemClock_Config>
  MX_GPIO_Init();
 8001a72:	f7ff ff95 	bl	80019a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a76:	f7ff ff79 	bl	800196c <MX_DMA_Init>
  MX_DAC_Init();
 8001a7a:	f7ff ff0b 	bl	8001894 <MX_DAC_Init>
  MX_TIM6_Init();
 8001a7e:	f000 f8bf 	bl	8001c00 <MX_TIM6_Init>
	  result=rint((sinf(k*2*pi/muestras)+1)*2048);
 8001a82:	4f21      	ldr	r7, [pc, #132]	; (8001b08 <main+0xb0>)
 8001a84:	ed9f 8a21 	vldr	s16, [pc, #132]	; 8001b0c <main+0xb4>
	  datos[k]=result<4095?result:4095;
 8001a88:	4d21      	ldr	r5, [pc, #132]	; (8001b10 <main+0xb8>)
  MX_TIM6_Init();
 8001a8a:	2400      	movs	r4, #0
	  result=rint((sinf(k*2*pi/muestras)+1)*2048);
 8001a8c:	2600      	movs	r6, #0
 8001a8e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
	  datos[k]=result<4095?result:4095;
 8001a92:	f640 7aff 	movw	sl, #4095	; 0xfff
	  result=rint((sinf(k*2*pi/muestras)+1)*2048);
 8001a96:	4620      	mov	r0, r4
 8001a98:	f7fe fce8 	bl	800046c <__aeabi_i2d>
 8001a9c:	4642      	mov	r2, r8
 8001a9e:	464b      	mov	r3, r9
 8001aa0:	f7fe fd4a 	bl	8000538 <__aeabi_dmul>
 8001aa4:	463b      	mov	r3, r7
 8001aa6:	4632      	mov	r2, r6
 8001aa8:	f7fe fe70 	bl	800078c <__aeabi_ddiv>
 8001aac:	f7fe ff76 	bl	800099c <__aeabi_d2f>
 8001ab0:	ee00 0a10 	vmov	s0, r0
 8001ab4:	f000 f9ba 	bl	8001e2c <sinf>
 8001ab8:	ee30 0a28 	vadd.f32	s0, s0, s17
 8001abc:	ee60 7a08 	vmul.f32	s15, s0, s16
 8001ac0:	ee17 0a90 	vmov	r0, s15
 8001ac4:	f7fe fce4 	bl	8000490 <__aeabi_f2d>
 8001ac8:	ec41 0b10 	vmov	d0, r0, r1
 8001acc:	f000 f926 	bl	8001d1c <rint>
 8001ad0:	ec51 0b10 	vmov	r0, r1, d0
 8001ad4:	f7fe ff42 	bl	800095c <__aeabi_d2uiz>
 8001ad8:	b280      	uxth	r0, r0
	  datos[k]=result<4095?result:4095;
 8001ada:	4550      	cmp	r0, sl
 8001adc:	4603      	mov	r3, r0
 8001ade:	bf28      	it	cs
 8001ae0:	4653      	movcs	r3, sl
 8001ae2:	5363      	strh	r3, [r4, r5]
 8001ae4:	3402      	adds	r4, #2
  for(int k=0;k<muestras;k++)
 8001ae6:	2cc8      	cmp	r4, #200	; 0xc8
 8001ae8:	d1d5      	bne.n	8001a96 <main+0x3e>
 8001aea:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <main+0xbc>)
 8001aec:	8018      	strh	r0, [r3, #0]
  HAL_TIM_Base_Start(&htim6);
 8001aee:	480a      	ldr	r0, [pc, #40]	; (8001b18 <main+0xc0>)
 8001af0:	f7ff fe22 	bl	8001738 <HAL_TIM_Base_Start>
  HAL_DAC_Start_DMA(&hdac,DAC1_CHANNEL_1,(uint32_t*)datos,muestras,DAC_ALIGN_12B_R);
 8001af4:	2100      	movs	r1, #0
 8001af6:	9100      	str	r1, [sp, #0]
 8001af8:	2364      	movs	r3, #100	; 0x64
 8001afa:	4a05      	ldr	r2, [pc, #20]	; (8001b10 <main+0xb8>)
 8001afc:	4807      	ldr	r0, [pc, #28]	; (8001b1c <main+0xc4>)
 8001afe:	f7ff f865 	bl	8000bcc <HAL_DAC_Start_DMA>
 8001b02:	e7fe      	b.n	8001b02 <main+0xaa>
 8001b04:	f3af 8000 	nop.w
 8001b08:	40590000 	.word	0x40590000
 8001b0c:	45000000 	.word	0x45000000
 8001b10:	20000098 	.word	0x20000098
 8001b14:	20000160 	.word	0x20000160
 8001b18:	20000164 	.word	0x20000164
 8001b1c:	20000084 	.word	0x20000084
 8001b20:	f01b866e 	.word	0xf01b866e
 8001b24:	400921f9 	.word	0x400921f9

08001b28 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8001b28:	e7fe      	b.n	8001b28 <_Error_Handler>

08001b2a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b2a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b2c:	2003      	movs	r0, #3
 8001b2e:	f7fe ffc1 	bl	8000ab4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	4611      	mov	r1, r2
 8001b36:	f06f 000b 	mvn.w	r0, #11
 8001b3a:	f7fe ffcd 	bl	8000ad8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	4611      	mov	r1, r2
 8001b42:	f06f 000a 	mvn.w	r0, #10
 8001b46:	f7fe ffc7 	bl	8000ad8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	4611      	mov	r1, r2
 8001b4e:	f06f 0009 	mvn.w	r0, #9
 8001b52:	f7fe ffc1 	bl	8000ad8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001b56:	2200      	movs	r2, #0
 8001b58:	4611      	mov	r1, r2
 8001b5a:	f06f 0004 	mvn.w	r0, #4
 8001b5e:	f7fe ffbb 	bl	8000ad8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001b62:	2200      	movs	r2, #0
 8001b64:	4611      	mov	r1, r2
 8001b66:	f06f 0003 	mvn.w	r0, #3
 8001b6a:	f7fe ffb5 	bl	8000ad8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	4611      	mov	r1, r2
 8001b72:	f06f 0001 	mvn.w	r0, #1
 8001b76:	f7fe ffaf 	bl	8000ad8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	4611      	mov	r1, r2
 8001b7e:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001b86:	f7fe bfa7 	b.w	8000ad8 <HAL_NVIC_SetPriority>

08001b8a <NMI_Handler>:
 8001b8a:	4770      	bx	lr

08001b8c <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001b8c:	e7fe      	b.n	8001b8c <HardFault_Handler>

08001b8e <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001b8e:	e7fe      	b.n	8001b8e <MemManage_Handler>

08001b90 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001b90:	e7fe      	b.n	8001b90 <BusFault_Handler>

08001b92 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001b92:	e7fe      	b.n	8001b92 <UsageFault_Handler>

08001b94 <SVC_Handler>:
 8001b94:	4770      	bx	lr

08001b96 <DebugMon_Handler>:
 8001b96:	4770      	bx	lr

08001b98 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001b98:	4770      	bx	lr

08001b9a <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001b9a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b9c:	f7fe ff7c 	bl	8000a98 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ba0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001ba4:	f7fe bffb 	b.w	8000b9e <HAL_SYSTICK_IRQHandler>

08001ba8 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001ba8:	4801      	ldr	r0, [pc, #4]	; (8001bb0 <DMA1_Stream5_IRQHandler+0x8>)
 8001baa:	f7ff b99d 	b.w	8000ee8 <HAL_DMA_IRQHandler>
 8001bae:	bf00      	nop
 8001bb0:	20000024 	.word	0x20000024

08001bb4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bb4:	490f      	ldr	r1, [pc, #60]	; (8001bf4 <SystemInit+0x40>)
 8001bb6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001bba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001bc2:	4b0d      	ldr	r3, [pc, #52]	; (8001bf8 <SystemInit+0x44>)
 8001bc4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001bc6:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001bc8:	f042 0201 	orr.w	r2, r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001bce:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001bd6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001bda:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001bdc:	4a07      	ldr	r2, [pc, #28]	; (8001bfc <SystemInit+0x48>)
 8001bde:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001be6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001be8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001bee:	608b      	str	r3, [r1, #8]
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	e000ed00 	.word	0xe000ed00
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	24003010 	.word	0x24003010

08001c00 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001c00:	b507      	push	{r0, r1, r2, lr}
  TIM_MasterConfigTypeDef sMasterConfig;

  htim6.Instance = TIM6;
 8001c02:	4810      	ldr	r0, [pc, #64]	; (8001c44 <MX_TIM6_Init+0x44>)
  htim6.Init.Prescaler = 100;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 16;
 8001c04:	4910      	ldr	r1, [pc, #64]	; (8001c48 <MX_TIM6_Init+0x48>)
 8001c06:	2364      	movs	r3, #100	; 0x64
 8001c08:	f04f 0c00 	mov.w	ip, #0
 8001c0c:	f04f 0e10 	mov.w	lr, #16
 8001c10:	e880 500a 	stmia.w	r0, {r1, r3, ip, lr}
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c14:	f7ff fe02 	bl	800181c <HAL_TIM_Base_Init>
 8001c18:	b118      	cbz	r0, 8001c22 <MX_TIM6_Init+0x22>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001c1a:	213c      	movs	r1, #60	; 0x3c
 8001c1c:	480b      	ldr	r0, [pc, #44]	; (8001c4c <MX_TIM6_Init+0x4c>)
 8001c1e:	f7ff ff83 	bl	8001b28 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c22:	2220      	movs	r2, #32
 8001c24:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c26:	4669      	mov	r1, sp
 8001c28:	4806      	ldr	r0, [pc, #24]	; (8001c44 <MX_TIM6_Init+0x44>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c2a:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c2e:	f7ff fe0f 	bl	8001850 <HAL_TIMEx_MasterConfigSynchronization>
 8001c32:	b118      	cbz	r0, 8001c3c <MX_TIM6_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001c34:	2143      	movs	r1, #67	; 0x43
 8001c36:	4805      	ldr	r0, [pc, #20]	; (8001c4c <MX_TIM6_Init+0x4c>)
 8001c38:	f7ff ff76 	bl	8001b28 <_Error_Handler>
  }

}
 8001c3c:	b003      	add	sp, #12
 8001c3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c42:	bf00      	nop
 8001c44:	20000164 	.word	0x20000164
 8001c48:	40001000 	.word	0x40001000
 8001c4c:	080028bd 	.word	0x080028bd

08001c50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM6)
 8001c50:	6802      	ldr	r2, [r0, #0]
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <HAL_TIM_Base_MspInit+0x28>)
 8001c54:	429a      	cmp	r2, r3
{
 8001c56:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM6)
 8001c58:	d10b      	bne.n	8001c72 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	9301      	str	r3, [sp, #4]
 8001c5e:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <HAL_TIM_Base_MspInit+0x2c>)
 8001c60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c62:	f042 0210 	orr.w	r2, r2, #16
 8001c66:	641a      	str	r2, [r3, #64]	; 0x40
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	f003 0310 	and.w	r3, r3, #16
 8001c6e:	9301      	str	r3, [sp, #4]
 8001c70:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001c72:	b002      	add	sp, #8
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40001000 	.word	0x40001000
 8001c7c:	40023800 	.word	0x40023800

08001c80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cb8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c86:	e003      	b.n	8001c90 <LoopCopyDataInit>

08001c88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c88:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c8e:	3104      	adds	r1, #4

08001c90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c90:	480b      	ldr	r0, [pc, #44]	; (8001cc0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c92:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c98:	d3f6      	bcc.n	8001c88 <CopyDataInit>
  ldr  r2, =_sbss
 8001c9a:	4a0b      	ldr	r2, [pc, #44]	; (8001cc8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c9c:	e002      	b.n	8001ca4 <LoopFillZerobss>

08001c9e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c9e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ca0:	f842 3b04 	str.w	r3, [r2], #4

08001ca4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ca4:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ca6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ca8:	d3f9      	bcc.n	8001c9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001caa:	f7ff ff83 	bl	8001bb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cae:	f000 f811 	bl	8001cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cb2:	f7ff fed1 	bl	8001a58 <main>
  bx  lr    
 8001cb6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001cb8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001cbc:	08002cb8 	.word	0x08002cb8
  ldr  r0, =_sdata
 8001cc0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001cc4:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8001cc8:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8001ccc:	200001a0 	.word	0x200001a0

08001cd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cd0:	e7fe      	b.n	8001cd0 <ADC_IRQHandler>
	...

08001cd4 <__libc_init_array>:
 8001cd4:	b570      	push	{r4, r5, r6, lr}
 8001cd6:	4e0d      	ldr	r6, [pc, #52]	; (8001d0c <__libc_init_array+0x38>)
 8001cd8:	4c0d      	ldr	r4, [pc, #52]	; (8001d10 <__libc_init_array+0x3c>)
 8001cda:	1ba4      	subs	r4, r4, r6
 8001cdc:	10a4      	asrs	r4, r4, #2
 8001cde:	2500      	movs	r5, #0
 8001ce0:	42a5      	cmp	r5, r4
 8001ce2:	d109      	bne.n	8001cf8 <__libc_init_array+0x24>
 8001ce4:	4e0b      	ldr	r6, [pc, #44]	; (8001d14 <__libc_init_array+0x40>)
 8001ce6:	4c0c      	ldr	r4, [pc, #48]	; (8001d18 <__libc_init_array+0x44>)
 8001ce8:	f000 fdc8 	bl	800287c <_init>
 8001cec:	1ba4      	subs	r4, r4, r6
 8001cee:	10a4      	asrs	r4, r4, #2
 8001cf0:	2500      	movs	r5, #0
 8001cf2:	42a5      	cmp	r5, r4
 8001cf4:	d105      	bne.n	8001d02 <__libc_init_array+0x2e>
 8001cf6:	bd70      	pop	{r4, r5, r6, pc}
 8001cf8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001cfc:	4798      	blx	r3
 8001cfe:	3501      	adds	r5, #1
 8001d00:	e7ee      	b.n	8001ce0 <__libc_init_array+0xc>
 8001d02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d06:	4798      	blx	r3
 8001d08:	3501      	adds	r5, #1
 8001d0a:	e7f2      	b.n	8001cf2 <__libc_init_array+0x1e>
 8001d0c:	08002cb0 	.word	0x08002cb0
 8001d10:	08002cb0 	.word	0x08002cb0
 8001d14:	08002cb0 	.word	0x08002cb0
 8001d18:	08002cb4 	.word	0x08002cb4

08001d1c <rint>:
 8001d1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001d1e:	ec51 0b10 	vmov	r0, r1, d0
 8001d22:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8001d26:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 8001d2a:	2e13      	cmp	r6, #19
 8001d2c:	ee10 7a10 	vmov	r7, s0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4602      	mov	r2, r0
 8001d34:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8001d38:	dc58      	bgt.n	8001dec <rint+0xd0>
 8001d3a:	2e00      	cmp	r6, #0
 8001d3c:	da2b      	bge.n	8001d96 <rint+0x7a>
 8001d3e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8001d42:	4302      	orrs	r2, r0
 8001d44:	d023      	beq.n	8001d8e <rint+0x72>
 8001d46:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8001d4a:	4302      	orrs	r2, r0
 8001d4c:	4251      	negs	r1, r2
 8001d4e:	4311      	orrs	r1, r2
 8001d50:	0b09      	lsrs	r1, r1, #12
 8001d52:	0c5b      	lsrs	r3, r3, #17
 8001d54:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 8001d58:	045b      	lsls	r3, r3, #17
 8001d5a:	ea41 0703 	orr.w	r7, r1, r3
 8001d5e:	4b31      	ldr	r3, [pc, #196]	; (8001e24 <rint+0x108>)
 8001d60:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8001d64:	4639      	mov	r1, r7
 8001d66:	e9d3 6700 	ldrd	r6, r7, [r3]
 8001d6a:	ee10 0a10 	vmov	r0, s0
 8001d6e:	4632      	mov	r2, r6
 8001d70:	463b      	mov	r3, r7
 8001d72:	f7fe fa2f 	bl	80001d4 <__adddf3>
 8001d76:	e9cd 0100 	strd	r0, r1, [sp]
 8001d7a:	463b      	mov	r3, r7
 8001d7c:	4632      	mov	r2, r6
 8001d7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001d82:	f7fe fa25 	bl	80001d0 <__aeabi_dsub>
 8001d86:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8001d8a:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 8001d8e:	ec41 0b10 	vmov	d0, r0, r1
 8001d92:	b003      	add	sp, #12
 8001d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d96:	4c24      	ldr	r4, [pc, #144]	; (8001e28 <rint+0x10c>)
 8001d98:	4134      	asrs	r4, r6
 8001d9a:	ea01 0704 	and.w	r7, r1, r4
 8001d9e:	4307      	orrs	r7, r0
 8001da0:	d0f5      	beq.n	8001d8e <rint+0x72>
 8001da2:	0861      	lsrs	r1, r4, #1
 8001da4:	ea03 0001 	and.w	r0, r3, r1
 8001da8:	4302      	orrs	r2, r0
 8001daa:	d00b      	beq.n	8001dc4 <rint+0xa8>
 8001dac:	ea23 0101 	bic.w	r1, r3, r1
 8001db0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001db4:	2e13      	cmp	r6, #19
 8001db6:	fa43 f306 	asr.w	r3, r3, r6
 8001dba:	bf0c      	ite	eq
 8001dbc:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 8001dc0:	2200      	movne	r2, #0
 8001dc2:	430b      	orrs	r3, r1
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <rint+0x108>)
 8001dc8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8001dcc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	462b      	mov	r3, r5
 8001dd4:	4622      	mov	r2, r4
 8001dd6:	f7fe f9fd 	bl	80001d4 <__adddf3>
 8001dda:	e9cd 0100 	strd	r0, r1, [sp]
 8001dde:	4622      	mov	r2, r4
 8001de0:	462b      	mov	r3, r5
 8001de2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001de6:	f7fe f9f3 	bl	80001d0 <__aeabi_dsub>
 8001dea:	e7d0      	b.n	8001d8e <rint+0x72>
 8001dec:	2e33      	cmp	r6, #51	; 0x33
 8001dee:	dd08      	ble.n	8001e02 <rint+0xe6>
 8001df0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8001df4:	d1cb      	bne.n	8001d8e <rint+0x72>
 8001df6:	ee10 2a10 	vmov	r2, s0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	f7fe f9ea 	bl	80001d4 <__adddf3>
 8001e00:	e7c5      	b.n	8001d8e <rint+0x72>
 8001e02:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8001e06:	f04f 34ff 	mov.w	r4, #4294967295
 8001e0a:	40f4      	lsrs	r4, r6
 8001e0c:	4220      	tst	r0, r4
 8001e0e:	d0be      	beq.n	8001d8e <rint+0x72>
 8001e10:	0861      	lsrs	r1, r4, #1
 8001e12:	420f      	tst	r7, r1
 8001e14:	bf1f      	itttt	ne
 8001e16:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 8001e1a:	ea27 0101 	bicne.w	r1, r7, r1
 8001e1e:	4132      	asrne	r2, r6
 8001e20:	430a      	orrne	r2, r1
 8001e22:	e7cf      	b.n	8001dc4 <rint+0xa8>
 8001e24:	080028d0 	.word	0x080028d0
 8001e28:	000fffff 	.word	0x000fffff

08001e2c <sinf>:
 8001e2c:	ee10 3a10 	vmov	r3, s0
 8001e30:	b507      	push	{r0, r1, r2, lr}
 8001e32:	4a1d      	ldr	r2, [pc, #116]	; (8001ea8 <sinf+0x7c>)
 8001e34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	dc05      	bgt.n	8001e48 <sinf+0x1c>
 8001e3c:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8001eac <sinf+0x80>
 8001e40:	2000      	movs	r0, #0
 8001e42:	f000 fc1d 	bl	8002680 <__kernel_sinf>
 8001e46:	e004      	b.n	8001e52 <sinf+0x26>
 8001e48:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8001e4c:	db04      	blt.n	8001e58 <sinf+0x2c>
 8001e4e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8001e52:	b003      	add	sp, #12
 8001e54:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e58:	4668      	mov	r0, sp
 8001e5a:	f000 f829 	bl	8001eb0 <__ieee754_rem_pio2f>
 8001e5e:	f000 0003 	and.w	r0, r0, #3
 8001e62:	2801      	cmp	r0, #1
 8001e64:	d008      	beq.n	8001e78 <sinf+0x4c>
 8001e66:	2802      	cmp	r0, #2
 8001e68:	d00d      	beq.n	8001e86 <sinf+0x5a>
 8001e6a:	b9b0      	cbnz	r0, 8001e9a <sinf+0x6e>
 8001e6c:	2001      	movs	r0, #1
 8001e6e:	eddd 0a01 	vldr	s1, [sp, #4]
 8001e72:	ed9d 0a00 	vldr	s0, [sp]
 8001e76:	e7e4      	b.n	8001e42 <sinf+0x16>
 8001e78:	eddd 0a01 	vldr	s1, [sp, #4]
 8001e7c:	ed9d 0a00 	vldr	s0, [sp]
 8001e80:	f000 f942 	bl	8002108 <__kernel_cosf>
 8001e84:	e7e5      	b.n	8001e52 <sinf+0x26>
 8001e86:	2001      	movs	r0, #1
 8001e88:	eddd 0a01 	vldr	s1, [sp, #4]
 8001e8c:	ed9d 0a00 	vldr	s0, [sp]
 8001e90:	f000 fbf6 	bl	8002680 <__kernel_sinf>
 8001e94:	eeb1 0a40 	vneg.f32	s0, s0
 8001e98:	e7db      	b.n	8001e52 <sinf+0x26>
 8001e9a:	eddd 0a01 	vldr	s1, [sp, #4]
 8001e9e:	ed9d 0a00 	vldr	s0, [sp]
 8001ea2:	f000 f931 	bl	8002108 <__kernel_cosf>
 8001ea6:	e7f5      	b.n	8001e94 <sinf+0x68>
 8001ea8:	3f490fd8 	.word	0x3f490fd8
 8001eac:	00000000 	.word	0x00000000

08001eb0 <__ieee754_rem_pio2f>:
 8001eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eb2:	ee10 6a10 	vmov	r6, s0
 8001eb6:	4b86      	ldr	r3, [pc, #536]	; (80020d0 <__ieee754_rem_pio2f+0x220>)
 8001eb8:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8001ebc:	429c      	cmp	r4, r3
 8001ebe:	b087      	sub	sp, #28
 8001ec0:	4605      	mov	r5, r0
 8001ec2:	dc05      	bgt.n	8001ed0 <__ieee754_rem_pio2f+0x20>
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	ed85 0a00 	vstr	s0, [r5]
 8001eca:	6043      	str	r3, [r0, #4]
 8001ecc:	2000      	movs	r0, #0
 8001ece:	e020      	b.n	8001f12 <__ieee754_rem_pio2f+0x62>
 8001ed0:	4b80      	ldr	r3, [pc, #512]	; (80020d4 <__ieee754_rem_pio2f+0x224>)
 8001ed2:	429c      	cmp	r4, r3
 8001ed4:	dc38      	bgt.n	8001f48 <__ieee754_rem_pio2f+0x98>
 8001ed6:	2e00      	cmp	r6, #0
 8001ed8:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80020d8 <__ieee754_rem_pio2f+0x228>
 8001edc:	4b7f      	ldr	r3, [pc, #508]	; (80020dc <__ieee754_rem_pio2f+0x22c>)
 8001ede:	f024 040f 	bic.w	r4, r4, #15
 8001ee2:	dd18      	ble.n	8001f16 <__ieee754_rem_pio2f+0x66>
 8001ee4:	429c      	cmp	r4, r3
 8001ee6:	ee70 7a47 	vsub.f32	s15, s0, s14
 8001eea:	bf09      	itett	eq
 8001eec:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80020e0 <__ieee754_rem_pio2f+0x230>
 8001ef0:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80020e4 <__ieee754_rem_pio2f+0x234>
 8001ef4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8001ef8:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80020e8 <__ieee754_rem_pio2f+0x238>
 8001efc:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8001f00:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001f04:	edc0 6a00 	vstr	s13, [r0]
 8001f08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f0c:	edc0 7a01 	vstr	s15, [r0, #4]
 8001f10:	2001      	movs	r0, #1
 8001f12:	b007      	add	sp, #28
 8001f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f16:	429c      	cmp	r4, r3
 8001f18:	ee70 7a07 	vadd.f32	s15, s0, s14
 8001f1c:	bf09      	itett	eq
 8001f1e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80020e0 <__ieee754_rem_pio2f+0x230>
 8001f22:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80020e4 <__ieee754_rem_pio2f+0x234>
 8001f26:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8001f2a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80020e8 <__ieee754_rem_pio2f+0x238>
 8001f2e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8001f32:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001f36:	edc0 6a00 	vstr	s13, [r0]
 8001f3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f3e:	edc0 7a01 	vstr	s15, [r0, #4]
 8001f42:	f04f 30ff 	mov.w	r0, #4294967295
 8001f46:	e7e4      	b.n	8001f12 <__ieee754_rem_pio2f+0x62>
 8001f48:	4b68      	ldr	r3, [pc, #416]	; (80020ec <__ieee754_rem_pio2f+0x23c>)
 8001f4a:	429c      	cmp	r4, r3
 8001f4c:	dc71      	bgt.n	8002032 <__ieee754_rem_pio2f+0x182>
 8001f4e:	f000 fbdf 	bl	8002710 <fabsf>
 8001f52:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80020f0 <__ieee754_rem_pio2f+0x240>
 8001f56:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001f5a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8001f5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f62:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001f66:	ee17 0a90 	vmov	r0, s15
 8001f6a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80020d8 <__ieee754_rem_pio2f+0x228>
 8001f6e:	eeb1 7a46 	vneg.f32	s14, s12
 8001f72:	eea7 0a27 	vfma.f32	s0, s14, s15
 8001f76:	281f      	cmp	r0, #31
 8001f78:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80020e4 <__ieee754_rem_pio2f+0x234>
 8001f7c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f80:	ee70 6a67 	vsub.f32	s13, s0, s15
 8001f84:	ee16 3a90 	vmov	r3, s13
 8001f88:	dc1c      	bgt.n	8001fc4 <__ieee754_rem_pio2f+0x114>
 8001f8a:	1e47      	subs	r7, r0, #1
 8001f8c:	4959      	ldr	r1, [pc, #356]	; (80020f4 <__ieee754_rem_pio2f+0x244>)
 8001f8e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8001f92:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8001f96:	428a      	cmp	r2, r1
 8001f98:	d014      	beq.n	8001fc4 <__ieee754_rem_pio2f+0x114>
 8001f9a:	602b      	str	r3, [r5, #0]
 8001f9c:	ed95 7a00 	vldr	s14, [r5]
 8001fa0:	ee30 0a47 	vsub.f32	s0, s0, s14
 8001fa4:	2e00      	cmp	r6, #0
 8001fa6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8001faa:	ed85 0a01 	vstr	s0, [r5, #4]
 8001fae:	dab0      	bge.n	8001f12 <__ieee754_rem_pio2f+0x62>
 8001fb0:	eeb1 7a47 	vneg.f32	s14, s14
 8001fb4:	eeb1 0a40 	vneg.f32	s0, s0
 8001fb8:	ed85 7a00 	vstr	s14, [r5]
 8001fbc:	ed85 0a01 	vstr	s0, [r5, #4]
 8001fc0:	4240      	negs	r0, r0
 8001fc2:	e7a6      	b.n	8001f12 <__ieee754_rem_pio2f+0x62>
 8001fc4:	15e4      	asrs	r4, r4, #23
 8001fc6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8001fca:	1aa2      	subs	r2, r4, r2
 8001fcc:	2a08      	cmp	r2, #8
 8001fce:	dde4      	ble.n	8001f9a <__ieee754_rem_pio2f+0xea>
 8001fd0:	eddf 7a43 	vldr	s15, [pc, #268]	; 80020e0 <__ieee754_rem_pio2f+0x230>
 8001fd4:	eef0 6a40 	vmov.f32	s13, s0
 8001fd8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8001fdc:	ee30 0a66 	vsub.f32	s0, s0, s13
 8001fe0:	eea7 0a27 	vfma.f32	s0, s14, s15
 8001fe4:	eddf 7a40 	vldr	s15, [pc, #256]	; 80020e8 <__ieee754_rem_pio2f+0x238>
 8001fe8:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8001fec:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8001ff0:	eef0 7a40 	vmov.f32	s15, s0
 8001ff4:	ee15 3a90 	vmov	r3, s11
 8001ff8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8001ffc:	1aa4      	subs	r4, r4, r2
 8001ffe:	2c19      	cmp	r4, #25
 8002000:	dc04      	bgt.n	800200c <__ieee754_rem_pio2f+0x15c>
 8002002:	edc5 5a00 	vstr	s11, [r5]
 8002006:	eeb0 0a66 	vmov.f32	s0, s13
 800200a:	e7c7      	b.n	8001f9c <__ieee754_rem_pio2f+0xec>
 800200c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80020f8 <__ieee754_rem_pio2f+0x248>
 8002010:	eeb0 0a66 	vmov.f32	s0, s13
 8002014:	eea7 0a25 	vfma.f32	s0, s14, s11
 8002018:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800201c:	eee7 7a25 	vfma.f32	s15, s14, s11
 8002020:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80020fc <__ieee754_rem_pio2f+0x24c>
 8002024:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8002028:	ee30 7a67 	vsub.f32	s14, s0, s15
 800202c:	ed85 7a00 	vstr	s14, [r5]
 8002030:	e7b4      	b.n	8001f9c <__ieee754_rem_pio2f+0xec>
 8002032:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8002036:	db06      	blt.n	8002046 <__ieee754_rem_pio2f+0x196>
 8002038:	ee70 7a40 	vsub.f32	s15, s0, s0
 800203c:	edc0 7a01 	vstr	s15, [r0, #4]
 8002040:	edc0 7a00 	vstr	s15, [r0]
 8002044:	e742      	b.n	8001ecc <__ieee754_rem_pio2f+0x1c>
 8002046:	15e2      	asrs	r2, r4, #23
 8002048:	3a86      	subs	r2, #134	; 0x86
 800204a:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800204e:	ee07 3a90 	vmov	s15, r3
 8002052:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8002056:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8002100 <__ieee754_rem_pio2f+0x250>
 800205a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800205e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002062:	ed8d 7a03 	vstr	s14, [sp, #12]
 8002066:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800206a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800206e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002072:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002076:	ed8d 7a04 	vstr	s14, [sp, #16]
 800207a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800207e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002086:	edcd 7a05 	vstr	s15, [sp, #20]
 800208a:	d11e      	bne.n	80020ca <__ieee754_rem_pio2f+0x21a>
 800208c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8002090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002094:	bf14      	ite	ne
 8002096:	2302      	movne	r3, #2
 8002098:	2301      	moveq	r3, #1
 800209a:	491a      	ldr	r1, [pc, #104]	; (8002104 <__ieee754_rem_pio2f+0x254>)
 800209c:	9101      	str	r1, [sp, #4]
 800209e:	2102      	movs	r1, #2
 80020a0:	9100      	str	r1, [sp, #0]
 80020a2:	a803      	add	r0, sp, #12
 80020a4:	4629      	mov	r1, r5
 80020a6:	f000 f88d 	bl	80021c4 <__kernel_rem_pio2f>
 80020aa:	2e00      	cmp	r6, #0
 80020ac:	f6bf af31 	bge.w	8001f12 <__ieee754_rem_pio2f+0x62>
 80020b0:	edd5 7a00 	vldr	s15, [r5]
 80020b4:	eef1 7a67 	vneg.f32	s15, s15
 80020b8:	edc5 7a00 	vstr	s15, [r5]
 80020bc:	edd5 7a01 	vldr	s15, [r5, #4]
 80020c0:	eef1 7a67 	vneg.f32	s15, s15
 80020c4:	edc5 7a01 	vstr	s15, [r5, #4]
 80020c8:	e77a      	b.n	8001fc0 <__ieee754_rem_pio2f+0x110>
 80020ca:	2303      	movs	r3, #3
 80020cc:	e7e5      	b.n	800209a <__ieee754_rem_pio2f+0x1ea>
 80020ce:	bf00      	nop
 80020d0:	3f490fd8 	.word	0x3f490fd8
 80020d4:	4016cbe3 	.word	0x4016cbe3
 80020d8:	3fc90f80 	.word	0x3fc90f80
 80020dc:	3fc90fd0 	.word	0x3fc90fd0
 80020e0:	37354400 	.word	0x37354400
 80020e4:	37354443 	.word	0x37354443
 80020e8:	2e85a308 	.word	0x2e85a308
 80020ec:	43490f80 	.word	0x43490f80
 80020f0:	3f22f984 	.word	0x3f22f984
 80020f4:	080028e0 	.word	0x080028e0
 80020f8:	2e85a300 	.word	0x2e85a300
 80020fc:	248d3132 	.word	0x248d3132
 8002100:	43800000 	.word	0x43800000
 8002104:	08002960 	.word	0x08002960

08002108 <__kernel_cosf>:
 8002108:	ee10 3a10 	vmov	r3, s0
 800210c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002110:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8002114:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002118:	da05      	bge.n	8002126 <__kernel_cosf+0x1e>
 800211a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800211e:	ee17 2a90 	vmov	r2, s15
 8002122:	2a00      	cmp	r2, #0
 8002124:	d03b      	beq.n	800219e <__kernel_cosf+0x96>
 8002126:	ee20 7a00 	vmul.f32	s14, s0, s0
 800212a:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 80021a4 <__kernel_cosf+0x9c>
 800212e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80021a8 <__kernel_cosf+0xa0>
 8002132:	eddf 5a1e 	vldr	s11, [pc, #120]	; 80021ac <__kernel_cosf+0xa4>
 8002136:	4a1e      	ldr	r2, [pc, #120]	; (80021b0 <__kernel_cosf+0xa8>)
 8002138:	eea7 6a27 	vfma.f32	s12, s14, s15
 800213c:	4293      	cmp	r3, r2
 800213e:	ee60 0a20 	vmul.f32	s1, s0, s1
 8002142:	eee7 5a06 	vfma.f32	s11, s14, s12
 8002146:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 80021b4 <__kernel_cosf+0xac>
 800214a:	eea7 6a25 	vfma.f32	s12, s14, s11
 800214e:	eddf 5a1a 	vldr	s11, [pc, #104]	; 80021b8 <__kernel_cosf+0xb0>
 8002152:	eee7 5a06 	vfma.f32	s11, s14, s12
 8002156:	ed9f 6a19 	vldr	s12, [pc, #100]	; 80021bc <__kernel_cosf+0xb4>
 800215a:	eea7 6a25 	vfma.f32	s12, s14, s11
 800215e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8002162:	ee26 6a07 	vmul.f32	s12, s12, s14
 8002166:	dc06      	bgt.n	8002176 <__kernel_cosf+0x6e>
 8002168:	eed7 0a06 	vfnms.f32	s1, s14, s12
 800216c:	eed7 0a25 	vfnms.f32	s1, s14, s11
 8002170:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8002174:	4770      	bx	lr
 8002176:	4a12      	ldr	r2, [pc, #72]	; (80021c0 <__kernel_cosf+0xb8>)
 8002178:	4293      	cmp	r3, r2
 800217a:	bfda      	itte	le
 800217c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8002180:	ee07 3a90 	vmovle	s15, r3
 8002184:	eef5 7a02 	vmovgt.f32	s15, #82	; 0x3e900000  0.2812500
 8002188:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800218c:	eed7 0a06 	vfnms.f32	s1, s14, s12
 8002190:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8002194:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8002198:	ee36 0ae7 	vsub.f32	s0, s13, s15
 800219c:	4770      	bx	lr
 800219e:	eeb0 0a66 	vmov.f32	s0, s13
 80021a2:	4770      	bx	lr
 80021a4:	310f74f6 	.word	0x310f74f6
 80021a8:	ad47d74e 	.word	0xad47d74e
 80021ac:	b493f27c 	.word	0xb493f27c
 80021b0:	3e999999 	.word	0x3e999999
 80021b4:	37d00d01 	.word	0x37d00d01
 80021b8:	bab60b61 	.word	0xbab60b61
 80021bc:	3d2aaaab 	.word	0x3d2aaaab
 80021c0:	3f480000 	.word	0x3f480000

080021c4 <__kernel_rem_pio2f>:
 80021c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021c8:	ed2d 8b04 	vpush	{d8-d9}
 80021cc:	b0d7      	sub	sp, #348	; 0x15c
 80021ce:	468b      	mov	fp, r1
 80021d0:	9301      	str	r3, [sp, #4]
 80021d2:	9964      	ldr	r1, [sp, #400]	; 0x190
 80021d4:	4bcb      	ldr	r3, [pc, #812]	; (8002504 <__kernel_rem_pio2f+0x340>)
 80021d6:	9002      	str	r0, [sp, #8]
 80021d8:	f853 a021 	ldr.w	sl, [r3, r1, lsl #2]
 80021dc:	9b01      	ldr	r3, [sp, #4]
 80021de:	9e65      	ldr	r6, [sp, #404]	; 0x194
 80021e0:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8002514 <__kernel_rem_pio2f+0x350>
 80021e4:	3b01      	subs	r3, #1
 80021e6:	1ed0      	subs	r0, r2, #3
 80021e8:	2408      	movs	r4, #8
 80021ea:	fb90 f0f4 	sdiv	r0, r0, r4
 80021ee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80021f2:	1c45      	adds	r5, r0, #1
 80021f4:	1ac7      	subs	r7, r0, r3
 80021f6:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80021fa:	eb0a 0e03 	add.w	lr, sl, r3
 80021fe:	ac1a      	add	r4, sp, #104	; 0x68
 8002200:	eb06 0c87 	add.w	ip, r6, r7, lsl #2
 8002204:	2200      	movs	r2, #0
 8002206:	4572      	cmp	r2, lr
 8002208:	dd0f      	ble.n	800222a <__kernel_rem_pio2f+0x66>
 800220a:	f50d 7e84 	add.w	lr, sp, #264	; 0x108
 800220e:	2400      	movs	r4, #0
 8002210:	4554      	cmp	r4, sl
 8002212:	dc26      	bgt.n	8002262 <__kernel_rem_pio2f+0x9e>
 8002214:	9a01      	ldr	r2, [sp, #4]
 8002216:	9f02      	ldr	r7, [sp, #8]
 8002218:	eddf 7abe 	vldr	s15, [pc, #760]	; 8002514 <__kernel_rem_pio2f+0x350>
 800221c:	4422      	add	r2, r4
 800221e:	a91a      	add	r1, sp, #104	; 0x68
 8002220:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8002224:	f04f 0c00 	mov.w	ip, #0
 8002228:	e015      	b.n	8002256 <__kernel_rem_pio2f+0x92>
 800222a:	42d7      	cmn	r7, r2
 800222c:	bf5d      	ittte	pl
 800222e:	f85c 1022 	ldrpl.w	r1, [ip, r2, lsl #2]
 8002232:	ee07 1a90 	vmovpl	s15, r1
 8002236:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800223a:	eef0 7a47 	vmovmi.f32	s15, s14
 800223e:	ece4 7a01 	vstmia	r4!, {s15}
 8002242:	3201      	adds	r2, #1
 8002244:	e7df      	b.n	8002206 <__kernel_rem_pio2f+0x42>
 8002246:	ecf7 6a01 	vldmia	r7!, {s13}
 800224a:	ed32 7a01 	vldmdb	r2!, {s14}
 800224e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8002252:	f10c 0c01 	add.w	ip, ip, #1
 8002256:	459c      	cmp	ip, r3
 8002258:	ddf5      	ble.n	8002246 <__kernel_rem_pio2f+0x82>
 800225a:	ecee 7a01 	vstmia	lr!, {s15}
 800225e:	3401      	adds	r4, #1
 8002260:	e7d6      	b.n	8002210 <__kernel_rem_pio2f+0x4c>
 8002262:	aa06      	add	r2, sp, #24
 8002264:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8002268:	9204      	str	r2, [sp, #16]
 800226a:	eddf 8aa7 	vldr	s17, [pc, #668]	; 8002508 <__kernel_rem_pio2f+0x344>
 800226e:	ed9f 9aa7 	vldr	s18, [pc, #668]	; 800250c <__kernel_rem_pio2f+0x348>
 8002272:	eb06 0280 	add.w	r2, r6, r0, lsl #2
 8002276:	9203      	str	r2, [sp, #12]
 8002278:	4657      	mov	r7, sl
 800227a:	aa56      	add	r2, sp, #344	; 0x158
 800227c:	f107 4880 	add.w	r8, r7, #1073741824	; 0x40000000
 8002280:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 8002284:	f108 38ff 	add.w	r8, r8, #4294967295
 8002288:	ed12 0a14 	vldr	s0, [r2, #-80]	; 0xffffffb0
 800228c:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8002290:	aa56      	add	r2, sp, #344	; 0x158
 8002292:	eb02 0008 	add.w	r0, r2, r8
 8002296:	384c      	subs	r0, #76	; 0x4c
 8002298:	2200      	movs	r2, #0
 800229a:	1abc      	subs	r4, r7, r2
 800229c:	2c00      	cmp	r4, #0
 800229e:	dc4a      	bgt.n	8002336 <__kernel_rem_pio2f+0x172>
 80022a0:	4628      	mov	r0, r5
 80022a2:	9305      	str	r3, [sp, #20]
 80022a4:	f000 fa7e 	bl	80027a4 <scalbnf>
 80022a8:	eeb0 8a40 	vmov.f32	s16, s0
 80022ac:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80022b0:	ee28 0a00 	vmul.f32	s0, s16, s0
 80022b4:	f000 fa34 	bl	8002720 <floorf>
 80022b8:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80022bc:	eea0 8a67 	vfms.f32	s16, s0, s15
 80022c0:	2d00      	cmp	r5, #0
 80022c2:	9b05      	ldr	r3, [sp, #20]
 80022c4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80022c8:	ee17 9a90 	vmov	r9, s15
 80022cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022d0:	ee38 8a67 	vsub.f32	s16, s16, s15
 80022d4:	dd44      	ble.n	8002360 <__kernel_rem_pio2f+0x19c>
 80022d6:	1e78      	subs	r0, r7, #1
 80022d8:	aa06      	add	r2, sp, #24
 80022da:	f1c5 0408 	rsb	r4, r5, #8
 80022de:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 80022e2:	fa46 f204 	asr.w	r2, r6, r4
 80022e6:	4491      	add	r9, r2
 80022e8:	40a2      	lsls	r2, r4
 80022ea:	1ab6      	subs	r6, r6, r2
 80022ec:	aa06      	add	r2, sp, #24
 80022ee:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 80022f2:	f1c5 0207 	rsb	r2, r5, #7
 80022f6:	4116      	asrs	r6, r2
 80022f8:	2e00      	cmp	r6, #0
 80022fa:	dd40      	ble.n	800237e <__kernel_rem_pio2f+0x1ba>
 80022fc:	2400      	movs	r4, #0
 80022fe:	f109 0901 	add.w	r9, r9, #1
 8002302:	4620      	mov	r0, r4
 8002304:	42a7      	cmp	r7, r4
 8002306:	dc75      	bgt.n	80023f4 <__kernel_rem_pio2f+0x230>
 8002308:	2d00      	cmp	r5, #0
 800230a:	dd05      	ble.n	8002318 <__kernel_rem_pio2f+0x154>
 800230c:	2d01      	cmp	r5, #1
 800230e:	f000 8086 	beq.w	800241e <__kernel_rem_pio2f+0x25a>
 8002312:	2d02      	cmp	r5, #2
 8002314:	f000 808d 	beq.w	8002432 <__kernel_rem_pio2f+0x26e>
 8002318:	2e02      	cmp	r6, #2
 800231a:	d130      	bne.n	800237e <__kernel_rem_pio2f+0x1ba>
 800231c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002320:	ee30 8a48 	vsub.f32	s16, s0, s16
 8002324:	b358      	cbz	r0, 800237e <__kernel_rem_pio2f+0x1ba>
 8002326:	4628      	mov	r0, r5
 8002328:	9305      	str	r3, [sp, #20]
 800232a:	f000 fa3b 	bl	80027a4 <scalbnf>
 800232e:	9b05      	ldr	r3, [sp, #20]
 8002330:	ee38 8a40 	vsub.f32	s16, s16, s0
 8002334:	e023      	b.n	800237e <__kernel_rem_pio2f+0x1ba>
 8002336:	ee60 7a28 	vmul.f32	s15, s0, s17
 800233a:	ac06      	add	r4, sp, #24
 800233c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002340:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002344:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8002348:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800234c:	ee10 1a10 	vmov	r1, s0
 8002350:	ed30 0a01 	vldmdb	r0!, {s0}
 8002354:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8002358:	ee37 0a80 	vadd.f32	s0, s15, s0
 800235c:	3201      	adds	r2, #1
 800235e:	e79c      	b.n	800229a <__kernel_rem_pio2f+0xd6>
 8002360:	d105      	bne.n	800236e <__kernel_rem_pio2f+0x1aa>
 8002362:	1e7a      	subs	r2, r7, #1
 8002364:	a906      	add	r1, sp, #24
 8002366:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800236a:	1236      	asrs	r6, r6, #8
 800236c:	e7c4      	b.n	80022f8 <__kernel_rem_pio2f+0x134>
 800236e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002372:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800237a:	da39      	bge.n	80023f0 <__kernel_rem_pio2f+0x22c>
 800237c:	2600      	movs	r6, #0
 800237e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8002382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002386:	f040 808d 	bne.w	80024a4 <__kernel_rem_pio2f+0x2e0>
 800238a:	1e7c      	subs	r4, r7, #1
 800238c:	4620      	mov	r0, r4
 800238e:	2200      	movs	r2, #0
 8002390:	4550      	cmp	r0, sl
 8002392:	da55      	bge.n	8002440 <__kernel_rem_pio2f+0x27c>
 8002394:	2a00      	cmp	r2, #0
 8002396:	d164      	bne.n	8002462 <__kernel_rem_pio2f+0x29e>
 8002398:	2401      	movs	r4, #1
 800239a:	f06f 0003 	mvn.w	r0, #3
 800239e:	fb00 f204 	mul.w	r2, r0, r4
 80023a2:	9904      	ldr	r1, [sp, #16]
 80023a4:	588a      	ldr	r2, [r1, r2]
 80023a6:	2a00      	cmp	r2, #0
 80023a8:	d050      	beq.n	800244c <__kernel_rem_pio2f+0x288>
 80023aa:	aa56      	add	r2, sp, #344	; 0x158
 80023ac:	4490      	add	r8, r2
 80023ae:	9a01      	ldr	r2, [sp, #4]
 80023b0:	a91a      	add	r1, sp, #104	; 0x68
 80023b2:	443a      	add	r2, r7
 80023b4:	1c78      	adds	r0, r7, #1
 80023b6:	f1a8 0848 	sub.w	r8, r8, #72	; 0x48
 80023ba:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80023be:	4427      	add	r7, r4
 80023c0:	42b8      	cmp	r0, r7
 80023c2:	f73f af5a 	bgt.w	800227a <__kernel_rem_pio2f+0xb6>
 80023c6:	9903      	ldr	r1, [sp, #12]
 80023c8:	9e02      	ldr	r6, [sp, #8]
 80023ca:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80023ce:	9105      	str	r1, [sp, #20]
 80023d0:	ee07 1a90 	vmov	s15, r1
 80023d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023d8:	2400      	movs	r4, #0
 80023da:	ece2 7a01 	vstmia	r2!, {s15}
 80023de:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8002514 <__kernel_rem_pio2f+0x350>
 80023e2:	4696      	mov	lr, r2
 80023e4:	429c      	cmp	r4, r3
 80023e6:	dd33      	ble.n	8002450 <__kernel_rem_pio2f+0x28c>
 80023e8:	ece8 7a01 	vstmia	r8!, {s15}
 80023ec:	3001      	adds	r0, #1
 80023ee:	e7e7      	b.n	80023c0 <__kernel_rem_pio2f+0x1fc>
 80023f0:	2602      	movs	r6, #2
 80023f2:	e783      	b.n	80022fc <__kernel_rem_pio2f+0x138>
 80023f4:	aa06      	add	r2, sp, #24
 80023f6:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80023fa:	b948      	cbnz	r0, 8002410 <__kernel_rem_pio2f+0x24c>
 80023fc:	b12a      	cbz	r2, 800240a <__kernel_rem_pio2f+0x246>
 80023fe:	a906      	add	r1, sp, #24
 8002400:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8002404:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8002408:	2201      	movs	r2, #1
 800240a:	3401      	adds	r4, #1
 800240c:	4610      	mov	r0, r2
 800240e:	e779      	b.n	8002304 <__kernel_rem_pio2f+0x140>
 8002410:	a906      	add	r1, sp, #24
 8002412:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8002416:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 800241a:	4602      	mov	r2, r0
 800241c:	e7f5      	b.n	800240a <__kernel_rem_pio2f+0x246>
 800241e:	1e7c      	subs	r4, r7, #1
 8002420:	aa06      	add	r2, sp, #24
 8002422:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8002426:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800242a:	a906      	add	r1, sp, #24
 800242c:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8002430:	e772      	b.n	8002318 <__kernel_rem_pio2f+0x154>
 8002432:	1e7c      	subs	r4, r7, #1
 8002434:	aa06      	add	r2, sp, #24
 8002436:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800243a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800243e:	e7f4      	b.n	800242a <__kernel_rem_pio2f+0x266>
 8002440:	a906      	add	r1, sp, #24
 8002442:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8002446:	3801      	subs	r0, #1
 8002448:	430a      	orrs	r2, r1
 800244a:	e7a1      	b.n	8002390 <__kernel_rem_pio2f+0x1cc>
 800244c:	3401      	adds	r4, #1
 800244e:	e7a6      	b.n	800239e <__kernel_rem_pio2f+0x1da>
 8002450:	ecf6 6a01 	vldmia	r6!, {s13}
 8002454:	ed3e 7a01 	vldmdb	lr!, {s14}
 8002458:	3401      	adds	r4, #1
 800245a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800245e:	e7c1      	b.n	80023e4 <__kernel_rem_pio2f+0x220>
 8002460:	3c01      	subs	r4, #1
 8002462:	ab06      	add	r3, sp, #24
 8002464:	3d08      	subs	r5, #8
 8002466:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0f8      	beq.n	8002460 <__kernel_rem_pio2f+0x29c>
 800246e:	4628      	mov	r0, r5
 8002470:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002474:	f000 f996 	bl	80027a4 <scalbnf>
 8002478:	00a3      	lsls	r3, r4, #2
 800247a:	aa42      	add	r2, sp, #264	; 0x108
 800247c:	3304      	adds	r3, #4
 800247e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002508 <__kernel_rem_pio2f+0x344>
 8002482:	18d0      	adds	r0, r2, r3
 8002484:	4622      	mov	r2, r4
 8002486:	2a00      	cmp	r2, #0
 8002488:	da46      	bge.n	8002518 <__kernel_rem_pio2f+0x354>
 800248a:	f10d 0eb8 	add.w	lr, sp, #184	; 0xb8
 800248e:	2200      	movs	r2, #0
 8002490:	1aa5      	subs	r5, r4, r2
 8002492:	d460      	bmi.n	8002556 <__kernel_rem_pio2f+0x392>
 8002494:	a942      	add	r1, sp, #264	; 0x108
 8002496:	4f1e      	ldr	r7, [pc, #120]	; (8002510 <__kernel_rem_pio2f+0x34c>)
 8002498:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8002514 <__kernel_rem_pio2f+0x350>
 800249c:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 80024a0:	2000      	movs	r0, #0
 80024a2:	e050      	b.n	8002546 <__kernel_rem_pio2f+0x382>
 80024a4:	4268      	negs	r0, r5
 80024a6:	eeb0 0a48 	vmov.f32	s0, s16
 80024aa:	f000 f97b 	bl	80027a4 <scalbnf>
 80024ae:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800250c <__kernel_rem_pio2f+0x348>
 80024b2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80024b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ba:	db19      	blt.n	80024f0 <__kernel_rem_pio2f+0x32c>
 80024bc:	eddf 7a12 	vldr	s15, [pc, #72]	; 8002508 <__kernel_rem_pio2f+0x344>
 80024c0:	ee60 7a27 	vmul.f32	s15, s0, s15
 80024c4:	aa06      	add	r2, sp, #24
 80024c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024ca:	1c7c      	adds	r4, r7, #1
 80024cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024d0:	3508      	adds	r5, #8
 80024d2:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80024d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024da:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80024de:	ee10 3a10 	vmov	r3, s0
 80024e2:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 80024e6:	ee17 3a90 	vmov	r3, s15
 80024ea:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80024ee:	e7be      	b.n	800246e <__kernel_rem_pio2f+0x2aa>
 80024f0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80024f4:	aa06      	add	r2, sp, #24
 80024f6:	ee10 3a10 	vmov	r3, s0
 80024fa:	463c      	mov	r4, r7
 80024fc:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 8002500:	e7b5      	b.n	800246e <__kernel_rem_pio2f+0x2aa>
 8002502:	bf00      	nop
 8002504:	08002ca4 	.word	0x08002ca4
 8002508:	3b800000 	.word	0x3b800000
 800250c:	43800000 	.word	0x43800000
 8002510:	08002c78 	.word	0x08002c78
 8002514:	00000000 	.word	0x00000000
 8002518:	a906      	add	r1, sp, #24
 800251a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800251e:	9101      	str	r1, [sp, #4]
 8002520:	ee07 1a90 	vmov	s15, r1
 8002524:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002528:	3a01      	subs	r2, #1
 800252a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800252e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8002532:	ed60 7a01 	vstmdb	r0!, {s15}
 8002536:	e7a6      	b.n	8002486 <__kernel_rem_pio2f+0x2c2>
 8002538:	ecf7 6a01 	vldmia	r7!, {s13}
 800253c:	ecb5 7a01 	vldmia	r5!, {s14}
 8002540:	eee6 7a87 	vfma.f32	s15, s13, s14
 8002544:	3001      	adds	r0, #1
 8002546:	4550      	cmp	r0, sl
 8002548:	dc01      	bgt.n	800254e <__kernel_rem_pio2f+0x38a>
 800254a:	4290      	cmp	r0, r2
 800254c:	ddf4      	ble.n	8002538 <__kernel_rem_pio2f+0x374>
 800254e:	ecee 7a01 	vstmia	lr!, {s15}
 8002552:	3201      	adds	r2, #1
 8002554:	e79c      	b.n	8002490 <__kernel_rem_pio2f+0x2cc>
 8002556:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8002558:	2a03      	cmp	r2, #3
 800255a:	d843      	bhi.n	80025e4 <__kernel_rem_pio2f+0x420>
 800255c:	e8df f002 	tbb	[pc, r2]
 8002560:	021d1d37 	.word	0x021d1d37
 8002564:	aa2e      	add	r2, sp, #184	; 0xb8
 8002566:	4413      	add	r3, r2
 8002568:	461a      	mov	r2, r3
 800256a:	4620      	mov	r0, r4
 800256c:	2800      	cmp	r0, #0
 800256e:	dc55      	bgt.n	800261c <__kernel_rem_pio2f+0x458>
 8002570:	461a      	mov	r2, r3
 8002572:	4620      	mov	r0, r4
 8002574:	2801      	cmp	r0, #1
 8002576:	dc61      	bgt.n	800263c <__kernel_rem_pio2f+0x478>
 8002578:	ed5f 7a1a 	vldr	s15, [pc, #-104]	; 8002514 <__kernel_rem_pio2f+0x350>
 800257c:	2c01      	cmp	r4, #1
 800257e:	dc6d      	bgt.n	800265c <__kernel_rem_pio2f+0x498>
 8002580:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8002584:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8002588:	2e00      	cmp	r6, #0
 800258a:	d16d      	bne.n	8002668 <__kernel_rem_pio2f+0x4a4>
 800258c:	edcb 6a00 	vstr	s13, [fp]
 8002590:	ed8b 7a01 	vstr	s14, [fp, #4]
 8002594:	edcb 7a02 	vstr	s15, [fp, #8]
 8002598:	e024      	b.n	80025e4 <__kernel_rem_pio2f+0x420>
 800259a:	aa2e      	add	r2, sp, #184	; 0xb8
 800259c:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 8002514 <__kernel_rem_pio2f+0x350>
 80025a0:	4413      	add	r3, r2
 80025a2:	4622      	mov	r2, r4
 80025a4:	2a00      	cmp	r2, #0
 80025a6:	da2a      	bge.n	80025fe <__kernel_rem_pio2f+0x43a>
 80025a8:	b37e      	cbz	r6, 800260a <__kernel_rem_pio2f+0x446>
 80025aa:	eef1 7a47 	vneg.f32	s15, s14
 80025ae:	edcb 7a00 	vstr	s15, [fp]
 80025b2:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 80025b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80025ba:	aa2f      	add	r2, sp, #188	; 0xbc
 80025bc:	2301      	movs	r3, #1
 80025be:	429c      	cmp	r4, r3
 80025c0:	da26      	bge.n	8002610 <__kernel_rem_pio2f+0x44c>
 80025c2:	b10e      	cbz	r6, 80025c8 <__kernel_rem_pio2f+0x404>
 80025c4:	eef1 7a67 	vneg.f32	s15, s15
 80025c8:	edcb 7a01 	vstr	s15, [fp, #4]
 80025cc:	e00a      	b.n	80025e4 <__kernel_rem_pio2f+0x420>
 80025ce:	aa2e      	add	r2, sp, #184	; 0xb8
 80025d0:	ed5f 7a30 	vldr	s15, [pc, #-192]	; 8002514 <__kernel_rem_pio2f+0x350>
 80025d4:	4413      	add	r3, r2
 80025d6:	2c00      	cmp	r4, #0
 80025d8:	da0b      	bge.n	80025f2 <__kernel_rem_pio2f+0x42e>
 80025da:	b10e      	cbz	r6, 80025e0 <__kernel_rem_pio2f+0x41c>
 80025dc:	eef1 7a67 	vneg.f32	s15, s15
 80025e0:	edcb 7a00 	vstr	s15, [fp]
 80025e4:	f009 0007 	and.w	r0, r9, #7
 80025e8:	b057      	add	sp, #348	; 0x15c
 80025ea:	ecbd 8b04 	vpop	{d8-d9}
 80025ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025f2:	ed33 7a01 	vldmdb	r3!, {s14}
 80025f6:	3c01      	subs	r4, #1
 80025f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025fc:	e7eb      	b.n	80025d6 <__kernel_rem_pio2f+0x412>
 80025fe:	ed73 7a01 	vldmdb	r3!, {s15}
 8002602:	3a01      	subs	r2, #1
 8002604:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002608:	e7cc      	b.n	80025a4 <__kernel_rem_pio2f+0x3e0>
 800260a:	eef0 7a47 	vmov.f32	s15, s14
 800260e:	e7ce      	b.n	80025ae <__kernel_rem_pio2f+0x3ea>
 8002610:	ecb2 7a01 	vldmia	r2!, {s14}
 8002614:	3301      	adds	r3, #1
 8002616:	ee77 7a87 	vadd.f32	s15, s15, s14
 800261a:	e7d0      	b.n	80025be <__kernel_rem_pio2f+0x3fa>
 800261c:	ed52 6a01 	vldr	s13, [r2, #-4]
 8002620:	ed52 7a02 	vldr	s15, [r2, #-8]
 8002624:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8002628:	3801      	subs	r0, #1
 800262a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800262e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002632:	ed62 7a01 	vstmdb	r2!, {s15}
 8002636:	ed02 7a01 	vstr	s14, [r2, #-4]
 800263a:	e797      	b.n	800256c <__kernel_rem_pio2f+0x3a8>
 800263c:	ed52 6a01 	vldr	s13, [r2, #-4]
 8002640:	ed52 7a02 	vldr	s15, [r2, #-8]
 8002644:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8002648:	3801      	subs	r0, #1
 800264a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800264e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002652:	ed62 7a01 	vstmdb	r2!, {s15}
 8002656:	ed02 7a01 	vstr	s14, [r2, #-4]
 800265a:	e78b      	b.n	8002574 <__kernel_rem_pio2f+0x3b0>
 800265c:	ed33 7a01 	vldmdb	r3!, {s14}
 8002660:	3c01      	subs	r4, #1
 8002662:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002666:	e789      	b.n	800257c <__kernel_rem_pio2f+0x3b8>
 8002668:	eef1 6a66 	vneg.f32	s13, s13
 800266c:	eeb1 7a47 	vneg.f32	s14, s14
 8002670:	edcb 6a00 	vstr	s13, [fp]
 8002674:	ed8b 7a01 	vstr	s14, [fp, #4]
 8002678:	eef1 7a67 	vneg.f32	s15, s15
 800267c:	e78a      	b.n	8002594 <__kernel_rem_pio2f+0x3d0>
 800267e:	bf00      	nop

08002680 <__kernel_sinf>:
 8002680:	ee10 3a10 	vmov	r3, s0
 8002684:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002688:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800268c:	da04      	bge.n	8002698 <__kernel_sinf+0x18>
 800268e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002692:	ee17 3a90 	vmov	r3, s15
 8002696:	b35b      	cbz	r3, 80026f0 <__kernel_sinf+0x70>
 8002698:	ee20 7a00 	vmul.f32	s14, s0, s0
 800269c:	eddf 7a15 	vldr	s15, [pc, #84]	; 80026f4 <__kernel_sinf+0x74>
 80026a0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80026f8 <__kernel_sinf+0x78>
 80026a4:	eea7 6a27 	vfma.f32	s12, s14, s15
 80026a8:	eddf 7a14 	vldr	s15, [pc, #80]	; 80026fc <__kernel_sinf+0x7c>
 80026ac:	eee7 7a06 	vfma.f32	s15, s14, s12
 80026b0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8002700 <__kernel_sinf+0x80>
 80026b4:	eea7 6a27 	vfma.f32	s12, s14, s15
 80026b8:	eddf 7a12 	vldr	s15, [pc, #72]	; 8002704 <__kernel_sinf+0x84>
 80026bc:	ee60 6a07 	vmul.f32	s13, s0, s14
 80026c0:	eee7 7a06 	vfma.f32	s15, s14, s12
 80026c4:	b930      	cbnz	r0, 80026d4 <__kernel_sinf+0x54>
 80026c6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8002708 <__kernel_sinf+0x88>
 80026ca:	eea7 6a27 	vfma.f32	s12, s14, s15
 80026ce:	eea6 0a86 	vfma.f32	s0, s13, s12
 80026d2:	4770      	bx	lr
 80026d4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80026d8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80026dc:	eee0 7a86 	vfma.f32	s15, s1, s12
 80026e0:	eed7 0a27 	vfnms.f32	s1, s14, s15
 80026e4:	eddf 7a09 	vldr	s15, [pc, #36]	; 800270c <__kernel_sinf+0x8c>
 80026e8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80026ec:	ee30 0a60 	vsub.f32	s0, s0, s1
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	2f2ec9d3 	.word	0x2f2ec9d3
 80026f8:	b2d72f34 	.word	0xb2d72f34
 80026fc:	3638ef1b 	.word	0x3638ef1b
 8002700:	b9500d01 	.word	0xb9500d01
 8002704:	3c088889 	.word	0x3c088889
 8002708:	be2aaaab 	.word	0xbe2aaaab
 800270c:	3e2aaaab 	.word	0x3e2aaaab

08002710 <fabsf>:
 8002710:	ee10 3a10 	vmov	r3, s0
 8002714:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002718:	ee00 3a10 	vmov	s0, r3
 800271c:	4770      	bx	lr
	...

08002720 <floorf>:
 8002720:	ee10 3a10 	vmov	r3, s0
 8002724:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8002728:	0dca      	lsrs	r2, r1, #23
 800272a:	3a7f      	subs	r2, #127	; 0x7f
 800272c:	2a16      	cmp	r2, #22
 800272e:	dc2a      	bgt.n	8002786 <floorf+0x66>
 8002730:	2a00      	cmp	r2, #0
 8002732:	da11      	bge.n	8002758 <floorf+0x38>
 8002734:	eddf 7a18 	vldr	s15, [pc, #96]	; 8002798 <floorf+0x78>
 8002738:	ee30 0a27 	vadd.f32	s0, s0, s15
 800273c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002744:	dd05      	ble.n	8002752 <floorf+0x32>
 8002746:	2b00      	cmp	r3, #0
 8002748:	da23      	bge.n	8002792 <floorf+0x72>
 800274a:	4a14      	ldr	r2, [pc, #80]	; (800279c <floorf+0x7c>)
 800274c:	2900      	cmp	r1, #0
 800274e:	bf18      	it	ne
 8002750:	4613      	movne	r3, r2
 8002752:	ee00 3a10 	vmov	s0, r3
 8002756:	4770      	bx	lr
 8002758:	4911      	ldr	r1, [pc, #68]	; (80027a0 <floorf+0x80>)
 800275a:	4111      	asrs	r1, r2
 800275c:	420b      	tst	r3, r1
 800275e:	d0fa      	beq.n	8002756 <floorf+0x36>
 8002760:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8002798 <floorf+0x78>
 8002764:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002768:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800276c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002770:	ddef      	ble.n	8002752 <floorf+0x32>
 8002772:	2b00      	cmp	r3, #0
 8002774:	bfbe      	ittt	lt
 8002776:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800277a:	fa40 f202 	asrlt.w	r2, r0, r2
 800277e:	189b      	addlt	r3, r3, r2
 8002780:	ea23 0301 	bic.w	r3, r3, r1
 8002784:	e7e5      	b.n	8002752 <floorf+0x32>
 8002786:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800278a:	d3e4      	bcc.n	8002756 <floorf+0x36>
 800278c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8002790:	4770      	bx	lr
 8002792:	2300      	movs	r3, #0
 8002794:	e7dd      	b.n	8002752 <floorf+0x32>
 8002796:	bf00      	nop
 8002798:	7149f2ca 	.word	0x7149f2ca
 800279c:	bf800000 	.word	0xbf800000
 80027a0:	007fffff 	.word	0x007fffff

080027a4 <scalbnf>:
 80027a4:	b508      	push	{r3, lr}
 80027a6:	ee10 2a10 	vmov	r2, s0
 80027aa:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80027ae:	ed2d 8b02 	vpush	{d8}
 80027b2:	eef0 0a40 	vmov.f32	s1, s0
 80027b6:	d004      	beq.n	80027c2 <scalbnf+0x1e>
 80027b8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80027bc:	d306      	bcc.n	80027cc <scalbnf+0x28>
 80027be:	ee70 0a00 	vadd.f32	s1, s0, s0
 80027c2:	ecbd 8b02 	vpop	{d8}
 80027c6:	eeb0 0a60 	vmov.f32	s0, s1
 80027ca:	bd08      	pop	{r3, pc}
 80027cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027d0:	d21c      	bcs.n	800280c <scalbnf+0x68>
 80027d2:	4b1f      	ldr	r3, [pc, #124]	; (8002850 <scalbnf+0xac>)
 80027d4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8002854 <scalbnf+0xb0>
 80027d8:	4298      	cmp	r0, r3
 80027da:	ee60 0a27 	vmul.f32	s1, s0, s15
 80027de:	db10      	blt.n	8002802 <scalbnf+0x5e>
 80027e0:	ee10 2a90 	vmov	r2, s1
 80027e4:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 80027e8:	3b19      	subs	r3, #25
 80027ea:	4403      	add	r3, r0
 80027ec:	2bfe      	cmp	r3, #254	; 0xfe
 80027ee:	dd0f      	ble.n	8002810 <scalbnf+0x6c>
 80027f0:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8002858 <scalbnf+0xb4>
 80027f4:	eeb0 0a48 	vmov.f32	s0, s16
 80027f8:	f000 f834 	bl	8002864 <copysignf>
 80027fc:	ee60 0a08 	vmul.f32	s1, s0, s16
 8002800:	e7df      	b.n	80027c2 <scalbnf+0x1e>
 8002802:	eddf 7a16 	vldr	s15, [pc, #88]	; 800285c <scalbnf+0xb8>
 8002806:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800280a:	e7da      	b.n	80027c2 <scalbnf+0x1e>
 800280c:	0ddb      	lsrs	r3, r3, #23
 800280e:	e7ec      	b.n	80027ea <scalbnf+0x46>
 8002810:	2b00      	cmp	r3, #0
 8002812:	dd06      	ble.n	8002822 <scalbnf+0x7e>
 8002814:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8002818:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800281c:	ee00 3a90 	vmov	s1, r3
 8002820:	e7cf      	b.n	80027c2 <scalbnf+0x1e>
 8002822:	f113 0f16 	cmn.w	r3, #22
 8002826:	da06      	bge.n	8002836 <scalbnf+0x92>
 8002828:	f24c 3350 	movw	r3, #50000	; 0xc350
 800282c:	4298      	cmp	r0, r3
 800282e:	dcdf      	bgt.n	80027f0 <scalbnf+0x4c>
 8002830:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800285c <scalbnf+0xb8>
 8002834:	e7de      	b.n	80027f4 <scalbnf+0x50>
 8002836:	3319      	adds	r3, #25
 8002838:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800283c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8002840:	eddf 7a07 	vldr	s15, [pc, #28]	; 8002860 <scalbnf+0xbc>
 8002844:	ee07 3a10 	vmov	s14, r3
 8002848:	ee67 0a27 	vmul.f32	s1, s14, s15
 800284c:	e7b9      	b.n	80027c2 <scalbnf+0x1e>
 800284e:	bf00      	nop
 8002850:	ffff3cb0 	.word	0xffff3cb0
 8002854:	4c000000 	.word	0x4c000000
 8002858:	7149f2ca 	.word	0x7149f2ca
 800285c:	0da24260 	.word	0x0da24260
 8002860:	33000000 	.word	0x33000000

08002864 <copysignf>:
 8002864:	ee10 3a10 	vmov	r3, s0
 8002868:	ee10 2a90 	vmov	r2, s1
 800286c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002870:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002874:	4313      	orrs	r3, r2
 8002876:	ee00 3a10 	vmov	s0, r3
 800287a:	4770      	bx	lr

0800287c <_init>:
 800287c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800287e:	bf00      	nop
 8002880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002882:	bc08      	pop	{r3}
 8002884:	469e      	mov	lr, r3
 8002886:	4770      	bx	lr

08002888 <_fini>:
 8002888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800288a:	bf00      	nop
 800288c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800288e:	bc08      	pop	{r3}
 8002890:	469e      	mov	lr, r3
 8002892:	4770      	bx	lr
