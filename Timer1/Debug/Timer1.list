
C:\Users\LENOVO\Documents\Timer1\Debug\Timer1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ff0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001178  08001178  00011178  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001198  08001198  00011198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800119c  0800119c  0001119c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080011a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          0000005c  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000060  20000060  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001018d  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000201c  00000000  00000000  000301c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000484d  00000000  00000000  000321dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000006c0  00000000  00000000  00036a30  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000900  00000000  00000000  000370f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00003de1  00000000  00000000  000379f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002eb8  00000000  00000000  0003b7d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003e689  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000012b8  00000000  00000000  0003e708  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001160 	.word	0x08001160

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08001160 	.word	0x08001160

080001c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80001ca:	4b08      	ldr	r3, [pc, #32]	; (80001ec <HAL_InitTick+0x24>)
{
 80001cc:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80001ce:	6818      	ldr	r0, [r3, #0]
 80001d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80001d8:	f000 f884 	bl	80002e4 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001dc:	2200      	movs	r2, #0
 80001de:	4621      	mov	r1, r4
 80001e0:	f04f 30ff 	mov.w	r0, #4294967295
 80001e4:	f000 f83e 	bl	8000264 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80001e8:	2000      	movs	r0, #0
 80001ea:	bd10      	pop	{r4, pc}
 80001ec:	20000000 	.word	0x20000000

080001f0 <HAL_Init>:
{
 80001f0:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80001f2:	4b0b      	ldr	r3, [pc, #44]	; (8000220 <HAL_Init+0x30>)
 80001f4:	681a      	ldr	r2, [r3, #0]
 80001f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80001fa:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80001fc:	681a      	ldr	r2, [r3, #0]
 80001fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000202:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000204:	681a      	ldr	r2, [r3, #0]
 8000206:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800020a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800020c:	2003      	movs	r0, #3
 800020e:	f000 f817 	bl	8000240 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000212:	2000      	movs	r0, #0
 8000214:	f7ff ffd8 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 8000218:	f000 fe8d 	bl	8000f36 <HAL_MspInit>
}
 800021c:	2000      	movs	r0, #0
 800021e:	bd08      	pop	{r3, pc}
 8000220:	40023c00 	.word	0x40023c00

08000224 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000224:	4a02      	ldr	r2, [pc, #8]	; (8000230 <HAL_IncTick+0xc>)
 8000226:	6813      	ldr	r3, [r2, #0]
 8000228:	3301      	adds	r3, #1
 800022a:	6013      	str	r3, [r2, #0]
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	20000020 	.word	0x20000020

08000234 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000234:	4b01      	ldr	r3, [pc, #4]	; (800023c <HAL_GetTick+0x8>)
 8000236:	6818      	ldr	r0, [r3, #0]
}
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	20000020 	.word	0x20000020

08000240 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000240:	4a07      	ldr	r2, [pc, #28]	; (8000260 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000242:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000244:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000248:	041b      	lsls	r3, r3, #16
 800024a:	0c1b      	lsrs	r3, r3, #16
 800024c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000250:	0200      	lsls	r0, r0, #8
 8000252:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000256:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800025a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800025c:	60d3      	str	r3, [r2, #12]
 800025e:	4770      	bx	lr
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000266:	b530      	push	{r4, r5, lr}
 8000268:	68dc      	ldr	r4, [r3, #12]
 800026a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800026e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000272:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000274:	2b04      	cmp	r3, #4
 8000276:	bf28      	it	cs
 8000278:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800027a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800027c:	f04f 0501 	mov.w	r5, #1
 8000280:	fa05 f303 	lsl.w	r3, r5, r3
 8000284:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000288:	bf8c      	ite	hi
 800028a:	3c03      	subhi	r4, #3
 800028c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800028e:	4019      	ands	r1, r3
 8000290:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000292:	fa05 f404 	lsl.w	r4, r5, r4
 8000296:	3c01      	subs	r4, #1
 8000298:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800029a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800029c:	ea42 0201 	orr.w	r2, r2, r1
 80002a0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a4:	bfaf      	iteee	ge
 80002a6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002aa:	f000 000f 	andlt.w	r0, r0, #15
 80002ae:	4b06      	ldrlt	r3, [pc, #24]	; (80002c8 <HAL_NVIC_SetPriority+0x64>)
 80002b0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b2:	bfa5      	ittet	ge
 80002b4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80002b8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ba:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002bc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002c0:	bd30      	pop	{r4, r5, pc}
 80002c2:	bf00      	nop
 80002c4:	e000ed00 	.word	0xe000ed00
 80002c8:	e000ed14 	.word	0xe000ed14

080002cc <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002cc:	0942      	lsrs	r2, r0, #5
 80002ce:	2301      	movs	r3, #1
 80002d0:	f000 001f 	and.w	r0, r0, #31
 80002d4:	fa03 f000 	lsl.w	r0, r3, r0
 80002d8:	4b01      	ldr	r3, [pc, #4]	; (80002e0 <HAL_NVIC_EnableIRQ+0x14>)
 80002da:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002de:	4770      	bx	lr
 80002e0:	e000e100 	.word	0xe000e100

080002e4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002e4:	3801      	subs	r0, #1
 80002e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002ea:	d20a      	bcs.n	8000302 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002ec:	4b06      	ldr	r3, [pc, #24]	; (8000308 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ee:	4a07      	ldr	r2, [pc, #28]	; (800030c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002f0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f2:	21f0      	movs	r1, #240	; 0xf0
 80002f4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002f8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002fa:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002fc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002fe:	601a      	str	r2, [r3, #0]
 8000300:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000302:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	e000e010 	.word	0xe000e010
 800030c:	e000ed00 	.word	0xe000ed00

08000310 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000310:	4b04      	ldr	r3, [pc, #16]	; (8000324 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000312:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000314:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000316:	bf0c      	ite	eq
 8000318:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800031c:	f022 0204 	bicne.w	r2, r2, #4
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	4770      	bx	lr
 8000324:	e000e010 	.word	0xe000e010

08000328 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000328:	4770      	bx	lr

0800032a <HAL_SYSTICK_IRQHandler>:
{
 800032a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800032c:	f7ff fffc 	bl	8000328 <HAL_SYSTICK_Callback>
 8000330:	bd08      	pop	{r3, pc}
	...

08000334 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000338:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800033a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800033c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80004ec <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000340:	4a68      	ldr	r2, [pc, #416]	; (80004e4 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000342:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80004f0 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000346:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000348:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800034a:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800034e:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000350:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000354:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000358:	45b6      	cmp	lr, r6
 800035a:	f040 80ae 	bne.w	80004ba <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800035e:	684c      	ldr	r4, [r1, #4]
 8000360:	f024 0710 	bic.w	r7, r4, #16
 8000364:	2f02      	cmp	r7, #2
 8000366:	d116      	bne.n	8000396 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000368:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800036c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000370:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000374:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000378:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800037c:	f04f 0c0f 	mov.w	ip, #15
 8000380:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000384:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000388:	690d      	ldr	r5, [r1, #16]
 800038a:	fa05 f50b 	lsl.w	r5, r5, fp
 800038e:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000392:	f8ca 5020 	str.w	r5, [sl, #32]
 8000396:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800039a:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800039c:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003a0:	fa05 f50a 	lsl.w	r5, r5, sl
 80003a4:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003a6:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003aa:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003ae:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003b2:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003b4:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003b8:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80003ba:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003be:	d811      	bhi.n	80003e4 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80003c0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003c2:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80003c6:	68cf      	ldr	r7, [r1, #12]
 80003c8:	fa07 fc0a 	lsl.w	ip, r7, sl
 80003cc:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80003d0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80003d2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80003d4:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003d8:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80003dc:	409f      	lsls	r7, r3
 80003de:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80003e2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80003e4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80003e6:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80003e8:	688f      	ldr	r7, [r1, #8]
 80003ea:	fa07 f70a 	lsl.w	r7, r7, sl
 80003ee:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80003f0:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003f2:	00e5      	lsls	r5, r4, #3
 80003f4:	d561      	bpl.n	80004ba <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f6:	f04f 0b00 	mov.w	fp, #0
 80003fa:	f8cd b00c 	str.w	fp, [sp, #12]
 80003fe:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000402:	4d39      	ldr	r5, [pc, #228]	; (80004e8 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000404:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000408:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800040c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000410:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000414:	9703      	str	r7, [sp, #12]
 8000416:	9f03      	ldr	r7, [sp, #12]
 8000418:	f023 0703 	bic.w	r7, r3, #3
 800041c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000420:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000424:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000428:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800042c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000430:	f04f 0e0f 	mov.w	lr, #15
 8000434:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000438:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800043a:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800043e:	d043      	beq.n	80004c8 <HAL_GPIO_Init+0x194>
 8000440:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000444:	42a8      	cmp	r0, r5
 8000446:	d041      	beq.n	80004cc <HAL_GPIO_Init+0x198>
 8000448:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800044c:	42a8      	cmp	r0, r5
 800044e:	d03f      	beq.n	80004d0 <HAL_GPIO_Init+0x19c>
 8000450:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000454:	42a8      	cmp	r0, r5
 8000456:	d03d      	beq.n	80004d4 <HAL_GPIO_Init+0x1a0>
 8000458:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800045c:	42a8      	cmp	r0, r5
 800045e:	d03b      	beq.n	80004d8 <HAL_GPIO_Init+0x1a4>
 8000460:	4548      	cmp	r0, r9
 8000462:	d03b      	beq.n	80004dc <HAL_GPIO_Init+0x1a8>
 8000464:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000468:	42a8      	cmp	r0, r5
 800046a:	d039      	beq.n	80004e0 <HAL_GPIO_Init+0x1ac>
 800046c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000470:	42a8      	cmp	r0, r5
 8000472:	bf14      	ite	ne
 8000474:	2508      	movne	r5, #8
 8000476:	2507      	moveq	r5, #7
 8000478:	fa05 f50c 	lsl.w	r5, r5, ip
 800047c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000480:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000482:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000484:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000486:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800048a:	bf0c      	ite	eq
 800048c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800048e:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000490:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000492:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000494:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000498:	bf0c      	ite	eq
 800049a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800049c:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800049e:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80004a0:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004a2:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80004a6:	bf0c      	ite	eq
 80004a8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80004aa:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80004ac:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80004ae:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004b0:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80004b2:	bf54      	ite	pl
 80004b4:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80004b6:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80004b8:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80004ba:	3301      	adds	r3, #1
 80004bc:	2b10      	cmp	r3, #16
 80004be:	f47f af44 	bne.w	800034a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80004c2:	b005      	add	sp, #20
 80004c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80004c8:	465d      	mov	r5, fp
 80004ca:	e7d5      	b.n	8000478 <HAL_GPIO_Init+0x144>
 80004cc:	2501      	movs	r5, #1
 80004ce:	e7d3      	b.n	8000478 <HAL_GPIO_Init+0x144>
 80004d0:	2502      	movs	r5, #2
 80004d2:	e7d1      	b.n	8000478 <HAL_GPIO_Init+0x144>
 80004d4:	2503      	movs	r5, #3
 80004d6:	e7cf      	b.n	8000478 <HAL_GPIO_Init+0x144>
 80004d8:	2504      	movs	r5, #4
 80004da:	e7cd      	b.n	8000478 <HAL_GPIO_Init+0x144>
 80004dc:	2505      	movs	r5, #5
 80004de:	e7cb      	b.n	8000478 <HAL_GPIO_Init+0x144>
 80004e0:	2506      	movs	r5, #6
 80004e2:	e7c9      	b.n	8000478 <HAL_GPIO_Init+0x144>
 80004e4:	40013c00 	.word	0x40013c00
 80004e8:	40020000 	.word	0x40020000
 80004ec:	40023800 	.word	0x40023800
 80004f0:	40021400 	.word	0x40021400

080004f4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80004f4:	b10a      	cbz	r2, 80004fa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80004f6:	6181      	str	r1, [r0, #24]
 80004f8:	4770      	bx	lr
 80004fa:	0409      	lsls	r1, r1, #16
 80004fc:	e7fb      	b.n	80004f6 <HAL_GPIO_WritePin+0x2>

080004fe <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80004fe:	6943      	ldr	r3, [r0, #20]
 8000500:	4059      	eors	r1, r3
 8000502:	6141      	str	r1, [r0, #20]
 8000504:	4770      	bx	lr
	...

08000508 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000508:	6803      	ldr	r3, [r0, #0]
{
 800050a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800050c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800050e:	07d8      	lsls	r0, r3, #31
 8000510:	d43b      	bmi.n	800058a <HAL_RCC_OscConfig+0x82>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000512:	6823      	ldr	r3, [r4, #0]
 8000514:	0799      	lsls	r1, r3, #30
 8000516:	f100 8086 	bmi.w	8000626 <HAL_RCC_OscConfig+0x11e>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800051a:	6823      	ldr	r3, [r4, #0]
 800051c:	071e      	lsls	r6, r3, #28
 800051e:	f100 80d1 	bmi.w	80006c4 <HAL_RCC_OscConfig+0x1bc>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000522:	6823      	ldr	r3, [r4, #0]
 8000524:	075d      	lsls	r5, r3, #29
 8000526:	d52a      	bpl.n	800057e <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000528:	2300      	movs	r3, #0
 800052a:	9301      	str	r3, [sp, #4]
 800052c:	4b8e      	ldr	r3, [pc, #568]	; (8000768 <HAL_RCC_OscConfig+0x260>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800052e:	4d8f      	ldr	r5, [pc, #572]	; (800076c <HAL_RCC_OscConfig+0x264>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8000530:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000532:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000536:	641a      	str	r2, [r3, #64]	; 0x40
 8000538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800053a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800053e:	9301      	str	r3, [sp, #4]
 8000540:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8000542:	682b      	ldr	r3, [r5, #0]
 8000544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000548:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 800054a:	f7ff fe73 	bl	8000234 <HAL_GetTick>
 800054e:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000550:	682b      	ldr	r3, [r5, #0]
 8000552:	05da      	lsls	r2, r3, #23
 8000554:	f140 80d8 	bpl.w	8000708 <HAL_RCC_OscConfig+0x200>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000558:	68a3      	ldr	r3, [r4, #8]
 800055a:	4d83      	ldr	r5, [pc, #524]	; (8000768 <HAL_RCC_OscConfig+0x260>)
 800055c:	2b01      	cmp	r3, #1
 800055e:	f040 80da 	bne.w	8000716 <HAL_RCC_OscConfig+0x20e>
 8000562:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	672b      	str	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800056a:	f7ff fe63 	bl	8000234 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800056e:	4d7e      	ldr	r5, [pc, #504]	; (8000768 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 8000570:	4606      	mov	r6, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000572:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000576:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000578:	079b      	lsls	r3, r3, #30
 800057a:	f140 80ed 	bpl.w	8000758 <HAL_RCC_OscConfig+0x250>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800057e:	69a2      	ldr	r2, [r4, #24]
 8000580:	2a00      	cmp	r2, #0
 8000582:	f040 80f9 	bne.w	8000778 <HAL_RCC_OscConfig+0x270>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000586:	2000      	movs	r0, #0
 8000588:	e015      	b.n	80005b6 <HAL_RCC_OscConfig+0xae>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800058a:	4b77      	ldr	r3, [pc, #476]	; (8000768 <HAL_RCC_OscConfig+0x260>)
 800058c:	689a      	ldr	r2, [r3, #8]
 800058e:	f002 020c 	and.w	r2, r2, #12
 8000592:	2a04      	cmp	r2, #4
 8000594:	d007      	beq.n	80005a6 <HAL_RCC_OscConfig+0x9e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000596:	689a      	ldr	r2, [r3, #8]
 8000598:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800059c:	2a08      	cmp	r2, #8
 800059e:	d10c      	bne.n	80005ba <HAL_RCC_OscConfig+0xb2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80005a0:	685b      	ldr	r3, [r3, #4]
 80005a2:	025a      	lsls	r2, r3, #9
 80005a4:	d509      	bpl.n	80005ba <HAL_RCC_OscConfig+0xb2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005a6:	4b70      	ldr	r3, [pc, #448]	; (8000768 <HAL_RCC_OscConfig+0x260>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	039b      	lsls	r3, r3, #14
 80005ac:	d5b1      	bpl.n	8000512 <HAL_RCC_OscConfig+0xa>
 80005ae:	6863      	ldr	r3, [r4, #4]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d1ae      	bne.n	8000512 <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 80005b4:	2001      	movs	r0, #1
}
 80005b6:	b003      	add	sp, #12
 80005b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005ba:	6863      	ldr	r3, [r4, #4]
 80005bc:	4d6a      	ldr	r5, [pc, #424]	; (8000768 <HAL_RCC_OscConfig+0x260>)
 80005be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005c2:	d111      	bne.n	80005e8 <HAL_RCC_OscConfig+0xe0>
 80005c4:	682b      	ldr	r3, [r5, #0]
 80005c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005ca:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80005cc:	f7ff fe32 	bl	8000234 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005d0:	4d65      	ldr	r5, [pc, #404]	; (8000768 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 80005d2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005d4:	682b      	ldr	r3, [r5, #0]
 80005d6:	039f      	lsls	r7, r3, #14
 80005d8:	d49b      	bmi.n	8000512 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005da:	f7ff fe2b 	bl	8000234 <HAL_GetTick>
 80005de:	1b80      	subs	r0, r0, r6
 80005e0:	2864      	cmp	r0, #100	; 0x64
 80005e2:	d9f7      	bls.n	80005d4 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 80005e4:	2003      	movs	r0, #3
 80005e6:	e7e6      	b.n	80005b6 <HAL_RCC_OscConfig+0xae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80005ec:	d104      	bne.n	80005f8 <HAL_RCC_OscConfig+0xf0>
 80005ee:	682b      	ldr	r3, [r5, #0]
 80005f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005f4:	602b      	str	r3, [r5, #0]
 80005f6:	e7e5      	b.n	80005c4 <HAL_RCC_OscConfig+0xbc>
 80005f8:	682a      	ldr	r2, [r5, #0]
 80005fa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80005fe:	602a      	str	r2, [r5, #0]
 8000600:	682a      	ldr	r2, [r5, #0]
 8000602:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000606:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000608:	2b00      	cmp	r3, #0
 800060a:	d1df      	bne.n	80005cc <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 800060c:	f7ff fe12 	bl	8000234 <HAL_GetTick>
 8000610:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000612:	682b      	ldr	r3, [r5, #0]
 8000614:	0398      	lsls	r0, r3, #14
 8000616:	f57f af7c 	bpl.w	8000512 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800061a:	f7ff fe0b 	bl	8000234 <HAL_GetTick>
 800061e:	1b80      	subs	r0, r0, r6
 8000620:	2864      	cmp	r0, #100	; 0x64
 8000622:	d9f6      	bls.n	8000612 <HAL_RCC_OscConfig+0x10a>
 8000624:	e7de      	b.n	80005e4 <HAL_RCC_OscConfig+0xdc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000626:	4b50      	ldr	r3, [pc, #320]	; (8000768 <HAL_RCC_OscConfig+0x260>)
 8000628:	689a      	ldr	r2, [r3, #8]
 800062a:	f012 0f0c 	tst.w	r2, #12
 800062e:	d007      	beq.n	8000640 <HAL_RCC_OscConfig+0x138>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000630:	689a      	ldr	r2, [r3, #8]
 8000632:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000636:	2a08      	cmp	r2, #8
 8000638:	d116      	bne.n	8000668 <HAL_RCC_OscConfig+0x160>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	0259      	lsls	r1, r3, #9
 800063e:	d413      	bmi.n	8000668 <HAL_RCC_OscConfig+0x160>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000640:	4b49      	ldr	r3, [pc, #292]	; (8000768 <HAL_RCC_OscConfig+0x260>)
 8000642:	681a      	ldr	r2, [r3, #0]
 8000644:	0792      	lsls	r2, r2, #30
 8000646:	d502      	bpl.n	800064e <HAL_RCC_OscConfig+0x146>
 8000648:	68e2      	ldr	r2, [r4, #12]
 800064a:	2a01      	cmp	r2, #1
 800064c:	d1b2      	bne.n	80005b4 <HAL_RCC_OscConfig+0xac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800064e:	6818      	ldr	r0, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000650:	22f8      	movs	r2, #248	; 0xf8
 8000652:	fa92 f2a2 	rbit	r2, r2
 8000656:	fab2 f182 	clz	r1, r2
 800065a:	6922      	ldr	r2, [r4, #16]
 800065c:	408a      	lsls	r2, r1
 800065e:	f020 01f8 	bic.w	r1, r0, #248	; 0xf8
 8000662:	430a      	orrs	r2, r1
 8000664:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000666:	e758      	b.n	800051a <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000668:	68e2      	ldr	r2, [r4, #12]
 800066a:	4b41      	ldr	r3, [pc, #260]	; (8000770 <HAL_RCC_OscConfig+0x268>)
 800066c:	b1da      	cbz	r2, 80006a6 <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_HSI_ENABLE();
 800066e:	2201      	movs	r2, #1
 8000670:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000672:	f7ff fddf 	bl	8000234 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000676:	4d3c      	ldr	r5, [pc, #240]	; (8000768 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 8000678:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800067a:	682b      	ldr	r3, [r5, #0]
 800067c:	079b      	lsls	r3, r3, #30
 800067e:	d50c      	bpl.n	800069a <HAL_RCC_OscConfig+0x192>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000680:	6829      	ldr	r1, [r5, #0]
 8000682:	23f8      	movs	r3, #248	; 0xf8
 8000684:	fa93 f3a3 	rbit	r3, r3
 8000688:	fab3 f283 	clz	r2, r3
 800068c:	6923      	ldr	r3, [r4, #16]
 800068e:	4093      	lsls	r3, r2
 8000690:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000694:	4313      	orrs	r3, r2
 8000696:	602b      	str	r3, [r5, #0]
 8000698:	e73f      	b.n	800051a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800069a:	f7ff fdcb 	bl	8000234 <HAL_GetTick>
 800069e:	1b80      	subs	r0, r0, r6
 80006a0:	2802      	cmp	r0, #2
 80006a2:	d9ea      	bls.n	800067a <HAL_RCC_OscConfig+0x172>
 80006a4:	e79e      	b.n	80005e4 <HAL_RCC_OscConfig+0xdc>
        __HAL_RCC_HSI_DISABLE();
 80006a6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80006a8:	f7ff fdc4 	bl	8000234 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006ac:	4d2e      	ldr	r5, [pc, #184]	; (8000768 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 80006ae:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006b0:	682b      	ldr	r3, [r5, #0]
 80006b2:	079f      	lsls	r7, r3, #30
 80006b4:	f57f af31 	bpl.w	800051a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006b8:	f7ff fdbc 	bl	8000234 <HAL_GetTick>
 80006bc:	1b80      	subs	r0, r0, r6
 80006be:	2802      	cmp	r0, #2
 80006c0:	d9f6      	bls.n	80006b0 <HAL_RCC_OscConfig+0x1a8>
 80006c2:	e78f      	b.n	80005e4 <HAL_RCC_OscConfig+0xdc>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80006c4:	6962      	ldr	r2, [r4, #20]
 80006c6:	4b2b      	ldr	r3, [pc, #172]	; (8000774 <HAL_RCC_OscConfig+0x26c>)
 80006c8:	b17a      	cbz	r2, 80006ea <HAL_RCC_OscConfig+0x1e2>
      __HAL_RCC_LSI_ENABLE();
 80006ca:	2201      	movs	r2, #1
 80006cc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80006ce:	f7ff fdb1 	bl	8000234 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006d2:	4d25      	ldr	r5, [pc, #148]	; (8000768 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 80006d4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006d6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80006d8:	0798      	lsls	r0, r3, #30
 80006da:	f53f af22 	bmi.w	8000522 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006de:	f7ff fda9 	bl	8000234 <HAL_GetTick>
 80006e2:	1b80      	subs	r0, r0, r6
 80006e4:	2802      	cmp	r0, #2
 80006e6:	d9f6      	bls.n	80006d6 <HAL_RCC_OscConfig+0x1ce>
 80006e8:	e77c      	b.n	80005e4 <HAL_RCC_OscConfig+0xdc>
      __HAL_RCC_LSI_DISABLE();
 80006ea:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80006ec:	f7ff fda2 	bl	8000234 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006f0:	4d1d      	ldr	r5, [pc, #116]	; (8000768 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 80006f2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006f4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80006f6:	0799      	lsls	r1, r3, #30
 80006f8:	f57f af13 	bpl.w	8000522 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006fc:	f7ff fd9a 	bl	8000234 <HAL_GetTick>
 8000700:	1b80      	subs	r0, r0, r6
 8000702:	2802      	cmp	r0, #2
 8000704:	d9f6      	bls.n	80006f4 <HAL_RCC_OscConfig+0x1ec>
 8000706:	e76d      	b.n	80005e4 <HAL_RCC_OscConfig+0xdc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000708:	f7ff fd94 	bl	8000234 <HAL_GetTick>
 800070c:	1b80      	subs	r0, r0, r6
 800070e:	2802      	cmp	r0, #2
 8000710:	f67f af1e 	bls.w	8000550 <HAL_RCC_OscConfig+0x48>
 8000714:	e766      	b.n	80005e4 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000716:	2b05      	cmp	r3, #5
 8000718:	d104      	bne.n	8000724 <HAL_RCC_OscConfig+0x21c>
 800071a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	672b      	str	r3, [r5, #112]	; 0x70
 8000722:	e71e      	b.n	8000562 <HAL_RCC_OscConfig+0x5a>
 8000724:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000726:	f022 0201 	bic.w	r2, r2, #1
 800072a:	672a      	str	r2, [r5, #112]	; 0x70
 800072c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800072e:	f022 0204 	bic.w	r2, r2, #4
 8000732:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000734:	2b00      	cmp	r3, #0
 8000736:	f47f af18 	bne.w	800056a <HAL_RCC_OscConfig+0x62>
      tickstart = HAL_GetTick();
 800073a:	f7ff fd7b 	bl	8000234 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800073e:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000742:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000744:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000746:	0798      	lsls	r0, r3, #30
 8000748:	f57f af19 	bpl.w	800057e <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800074c:	f7ff fd72 	bl	8000234 <HAL_GetTick>
 8000750:	1b80      	subs	r0, r0, r6
 8000752:	42b8      	cmp	r0, r7
 8000754:	d9f6      	bls.n	8000744 <HAL_RCC_OscConfig+0x23c>
 8000756:	e745      	b.n	80005e4 <HAL_RCC_OscConfig+0xdc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000758:	f7ff fd6c 	bl	8000234 <HAL_GetTick>
 800075c:	1b80      	subs	r0, r0, r6
 800075e:	42b8      	cmp	r0, r7
 8000760:	f67f af09 	bls.w	8000576 <HAL_RCC_OscConfig+0x6e>
 8000764:	e73e      	b.n	80005e4 <HAL_RCC_OscConfig+0xdc>
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800
 800076c:	40007000 	.word	0x40007000
 8000770:	42470000 	.word	0x42470000
 8000774:	42470e80 	.word	0x42470e80
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000778:	4d2b      	ldr	r5, [pc, #172]	; (8000828 <HAL_RCC_OscConfig+0x320>)
 800077a:	68ab      	ldr	r3, [r5, #8]
 800077c:	f003 030c 	and.w	r3, r3, #12
 8000780:	2b08      	cmp	r3, #8
 8000782:	f43f af17 	beq.w	80005b4 <HAL_RCC_OscConfig+0xac>
 8000786:	4e29      	ldr	r6, [pc, #164]	; (800082c <HAL_RCC_OscConfig+0x324>)
 8000788:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800078a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800078c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800078e:	d13e      	bne.n	800080e <HAL_RCC_OscConfig+0x306>
        tickstart = HAL_GetTick();
 8000790:	f7ff fd50 	bl	8000234 <HAL_GetTick>
 8000794:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000796:	682b      	ldr	r3, [r5, #0]
 8000798:	0199      	lsls	r1, r3, #6
 800079a:	d432      	bmi.n	8000802 <HAL_RCC_OscConfig+0x2fa>
 800079c:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 80007a0:	fa97 f7a7 	rbit	r7, r7
 80007a4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80007a8:	fab7 f787 	clz	r7, r7
 80007ac:	fa92 f2a2 	rbit	r2, r2
 80007b0:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 80007b4:	fab2 f082 	clz	r0, r2
 80007b8:	fa91 f1a1 	rbit	r1, r1
 80007bc:	6a22      	ldr	r2, [r4, #32]
 80007be:	69e3      	ldr	r3, [r4, #28]
 80007c0:	4313      	orrs	r3, r2
 80007c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80007c4:	fa02 f707 	lsl.w	r7, r2, r7
 80007c8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80007ca:	0852      	lsrs	r2, r2, #1
 80007cc:	3a01      	subs	r2, #1
 80007ce:	4082      	lsls	r2, r0
 80007d0:	433b      	orrs	r3, r7
 80007d2:	4313      	orrs	r3, r2
 80007d4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80007d6:	4c14      	ldr	r4, [pc, #80]	; (8000828 <HAL_RCC_OscConfig+0x320>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80007d8:	fab1 f181 	clz	r1, r1
 80007dc:	fa02 f101 	lsl.w	r1, r2, r1
 80007e0:	430b      	orrs	r3, r1
 80007e2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80007e4:	2301      	movs	r3, #1
 80007e6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80007e8:	f7ff fd24 	bl	8000234 <HAL_GetTick>
 80007ec:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80007ee:	6823      	ldr	r3, [r4, #0]
 80007f0:	019a      	lsls	r2, r3, #6
 80007f2:	f53f aec8 	bmi.w	8000586 <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007f6:	f7ff fd1d 	bl	8000234 <HAL_GetTick>
 80007fa:	1b40      	subs	r0, r0, r5
 80007fc:	2802      	cmp	r0, #2
 80007fe:	d9f6      	bls.n	80007ee <HAL_RCC_OscConfig+0x2e6>
 8000800:	e6f0      	b.n	80005e4 <HAL_RCC_OscConfig+0xdc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000802:	f7ff fd17 	bl	8000234 <HAL_GetTick>
 8000806:	1bc0      	subs	r0, r0, r7
 8000808:	2802      	cmp	r0, #2
 800080a:	d9c4      	bls.n	8000796 <HAL_RCC_OscConfig+0x28e>
 800080c:	e6ea      	b.n	80005e4 <HAL_RCC_OscConfig+0xdc>
        tickstart = HAL_GetTick();
 800080e:	f7ff fd11 	bl	8000234 <HAL_GetTick>
 8000812:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000814:	682b      	ldr	r3, [r5, #0]
 8000816:	019b      	lsls	r3, r3, #6
 8000818:	f57f aeb5 	bpl.w	8000586 <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800081c:	f7ff fd0a 	bl	8000234 <HAL_GetTick>
 8000820:	1b00      	subs	r0, r0, r4
 8000822:	2802      	cmp	r0, #2
 8000824:	d9f6      	bls.n	8000814 <HAL_RCC_OscConfig+0x30c>
 8000826:	e6dd      	b.n	80005e4 <HAL_RCC_OscConfig+0xdc>
 8000828:	40023800 	.word	0x40023800
 800082c:	42470060 	.word	0x42470060

08000830 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000830:	4a19      	ldr	r2, [pc, #100]	; (8000898 <HAL_RCC_GetSysClockFreq+0x68>)
 8000832:	6893      	ldr	r3, [r2, #8]
 8000834:	f003 030c 	and.w	r3, r3, #12
 8000838:	2b04      	cmp	r3, #4
{
 800083a:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800083c:	d003      	beq.n	8000846 <HAL_RCC_GetSysClockFreq+0x16>
 800083e:	2b08      	cmp	r3, #8
 8000840:	d003      	beq.n	800084a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000842:	4816      	ldr	r0, [pc, #88]	; (800089c <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000844:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8000846:	4816      	ldr	r0, [pc, #88]	; (80008a0 <HAL_RCC_GetSysClockFreq+0x70>)
 8000848:	bd10      	pop	{r4, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800084a:	6851      	ldr	r1, [r2, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800084c:	6853      	ldr	r3, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800084e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000852:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000856:	f647 74c0 	movw	r4, #32704	; 0x7fc0
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 800085a:	6853      	ldr	r3, [r2, #4]
 800085c:	fa94 f0a4 	rbit	r0, r4
 8000860:	fab0 f080 	clz	r0, r0
 8000864:	ea03 0304 	and.w	r3, r3, r4
 8000868:	fa23 f300 	lsr.w	r3, r3, r0
 800086c:	bf14      	ite	ne
 800086e:	480c      	ldrne	r0, [pc, #48]	; (80008a0 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8000870:	480a      	ldreq	r0, [pc, #40]	; (800089c <HAL_RCC_GetSysClockFreq+0x6c>)
 8000872:	fbb0 f0f1 	udiv	r0, r0, r1
 8000876:	4358      	muls	r0, r3
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8000878:	4b07      	ldr	r3, [pc, #28]	; (8000898 <HAL_RCC_GetSysClockFreq+0x68>)
 800087a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	fa92 f2a2 	rbit	r2, r2
 8000884:	fab2 f282 	clz	r2, r2
 8000888:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800088c:	40d3      	lsrs	r3, r2
 800088e:	3301      	adds	r3, #1
 8000890:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000892:	fbb0 f0f3 	udiv	r0, r0, r3
 8000896:	bd10      	pop	{r4, pc}
 8000898:	40023800 	.word	0x40023800
 800089c:	00f42400 	.word	0x00f42400
 80008a0:	017d7840 	.word	0x017d7840

080008a4 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008a4:	4b56      	ldr	r3, [pc, #344]	; (8000a00 <HAL_RCC_ClockConfig+0x15c>)
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	f002 020f 	and.w	r2, r2, #15
 80008ac:	428a      	cmp	r2, r1
{
 80008ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008b2:	4605      	mov	r5, r0
 80008b4:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008b6:	d330      	bcc.n	800091a <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80008b8:	682a      	ldr	r2, [r5, #0]
 80008ba:	0794      	lsls	r4, r2, #30
 80008bc:	d437      	bmi.n	800092e <HAL_RCC_ClockConfig+0x8a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80008be:	07d0      	lsls	r0, r2, #31
 80008c0:	d43d      	bmi.n	800093e <HAL_RCC_ClockConfig+0x9a>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80008c2:	4b4f      	ldr	r3, [pc, #316]	; (8000a00 <HAL_RCC_ClockConfig+0x15c>)
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	f002 020f 	and.w	r2, r2, #15
 80008ca:	4296      	cmp	r6, r2
 80008cc:	f0c0 8088 	bcc.w	80009e0 <HAL_RCC_ClockConfig+0x13c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80008d0:	682a      	ldr	r2, [r5, #0]
 80008d2:	0751      	lsls	r1, r2, #29
 80008d4:	f100 808c 	bmi.w	80009f0 <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80008d8:	0713      	lsls	r3, r2, #28
 80008da:	d507      	bpl.n	80008ec <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80008dc:	4a49      	ldr	r2, [pc, #292]	; (8000a04 <HAL_RCC_ClockConfig+0x160>)
 80008de:	6929      	ldr	r1, [r5, #16]
 80008e0:	6893      	ldr	r3, [r2, #8]
 80008e2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80008e6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80008ea:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80008ec:	f7ff ffa0 	bl	8000830 <HAL_RCC_GetSysClockFreq>
 80008f0:	4b44      	ldr	r3, [pc, #272]	; (8000a04 <HAL_RCC_ClockConfig+0x160>)
 80008f2:	22f0      	movs	r2, #240	; 0xf0
 80008f4:	689b      	ldr	r3, [r3, #8]
 80008f6:	fa92 f2a2 	rbit	r2, r2
 80008fa:	fab2 f282 	clz	r2, r2
 80008fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000902:	40d3      	lsrs	r3, r2
 8000904:	4a40      	ldr	r2, [pc, #256]	; (8000a08 <HAL_RCC_ClockConfig+0x164>)
 8000906:	5cd3      	ldrb	r3, [r2, r3]
 8000908:	40d8      	lsrs	r0, r3
 800090a:	4b40      	ldr	r3, [pc, #256]	; (8000a0c <HAL_RCC_ClockConfig+0x168>)
 800090c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800090e:	2000      	movs	r0, #0
 8000910:	f7ff fc5a 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 8000914:	2000      	movs	r0, #0
}
 8000916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800091a:	b2ca      	uxtb	r2, r1
 800091c:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f003 030f 	and.w	r3, r3, #15
 8000924:	4299      	cmp	r1, r3
 8000926:	d0c7      	beq.n	80008b8 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000928:	2001      	movs	r0, #1
 800092a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800092e:	4935      	ldr	r1, [pc, #212]	; (8000a04 <HAL_RCC_ClockConfig+0x160>)
 8000930:	68a8      	ldr	r0, [r5, #8]
 8000932:	688b      	ldr	r3, [r1, #8]
 8000934:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000938:	4303      	orrs	r3, r0
 800093a:	608b      	str	r3, [r1, #8]
 800093c:	e7bf      	b.n	80008be <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800093e:	686a      	ldr	r2, [r5, #4]
 8000940:	4b30      	ldr	r3, [pc, #192]	; (8000a04 <HAL_RCC_ClockConfig+0x160>)
 8000942:	2a01      	cmp	r2, #1
 8000944:	d11e      	bne.n	8000984 <HAL_RCC_ClockConfig+0xe0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800094c:	d0ec      	beq.n	8000928 <HAL_RCC_ClockConfig+0x84>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800094e:	4c2d      	ldr	r4, [pc, #180]	; (8000a04 <HAL_RCC_ClockConfig+0x160>)
 8000950:	68a3      	ldr	r3, [r4, #8]
 8000952:	f023 0303 	bic.w	r3, r3, #3
 8000956:	4313      	orrs	r3, r2
 8000958:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800095a:	f7ff fc6b 	bl	8000234 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800095e:	686b      	ldr	r3, [r5, #4]
 8000960:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8000962:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000964:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000968:	d116      	bne.n	8000998 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800096a:	68a3      	ldr	r3, [r4, #8]
 800096c:	f003 030c 	and.w	r3, r3, #12
 8000970:	2b04      	cmp	r3, #4
 8000972:	d0a6      	beq.n	80008c2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000974:	f7ff fc5e 	bl	8000234 <HAL_GetTick>
 8000978:	1bc0      	subs	r0, r0, r7
 800097a:	4540      	cmp	r0, r8
 800097c:	d9f5      	bls.n	800096a <HAL_RCC_ClockConfig+0xc6>
          return HAL_TIMEOUT;
 800097e:	2003      	movs	r0, #3
 8000980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000984:	1e91      	subs	r1, r2, #2
 8000986:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000988:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 800098a:	d802      	bhi.n	8000992 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800098c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000990:	e7dc      	b.n	800094c <HAL_RCC_ClockConfig+0xa8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000992:	f013 0f02 	tst.w	r3, #2
 8000996:	e7d9      	b.n	800094c <HAL_RCC_ClockConfig+0xa8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000998:	2b02      	cmp	r3, #2
 800099a:	d10a      	bne.n	80009b2 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800099c:	68a3      	ldr	r3, [r4, #8]
 800099e:	f003 030c 	and.w	r3, r3, #12
 80009a2:	2b08      	cmp	r3, #8
 80009a4:	d08d      	beq.n	80008c2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009a6:	f7ff fc45 	bl	8000234 <HAL_GetTick>
 80009aa:	1bc0      	subs	r0, r0, r7
 80009ac:	4540      	cmp	r0, r8
 80009ae:	d9f5      	bls.n	800099c <HAL_RCC_ClockConfig+0xf8>
 80009b0:	e7e5      	b.n	800097e <HAL_RCC_ClockConfig+0xda>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 80009b2:	2b03      	cmp	r3, #3
 80009b4:	d10f      	bne.n	80009d6 <HAL_RCC_ClockConfig+0x132>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80009b6:	68a3      	ldr	r3, [r4, #8]
 80009b8:	f003 030c 	and.w	r3, r3, #12
 80009bc:	2b0c      	cmp	r3, #12
 80009be:	d080      	beq.n	80008c2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009c0:	f7ff fc38 	bl	8000234 <HAL_GetTick>
 80009c4:	1bc0      	subs	r0, r0, r7
 80009c6:	4540      	cmp	r0, r8
 80009c8:	d9f5      	bls.n	80009b6 <HAL_RCC_ClockConfig+0x112>
 80009ca:	e7d8      	b.n	800097e <HAL_RCC_ClockConfig+0xda>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009cc:	f7ff fc32 	bl	8000234 <HAL_GetTick>
 80009d0:	1bc0      	subs	r0, r0, r7
 80009d2:	4540      	cmp	r0, r8
 80009d4:	d8d3      	bhi.n	800097e <HAL_RCC_ClockConfig+0xda>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80009d6:	68a3      	ldr	r3, [r4, #8]
 80009d8:	f013 0f0c 	tst.w	r3, #12
 80009dc:	d1f6      	bne.n	80009cc <HAL_RCC_ClockConfig+0x128>
 80009de:	e770      	b.n	80008c2 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009e0:	b2f2      	uxtb	r2, r6
 80009e2:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f003 030f 	and.w	r3, r3, #15
 80009ea:	429e      	cmp	r6, r3
 80009ec:	d19c      	bne.n	8000928 <HAL_RCC_ClockConfig+0x84>
 80009ee:	e76f      	b.n	80008d0 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80009f0:	4904      	ldr	r1, [pc, #16]	; (8000a04 <HAL_RCC_ClockConfig+0x160>)
 80009f2:	68e8      	ldr	r0, [r5, #12]
 80009f4:	688b      	ldr	r3, [r1, #8]
 80009f6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80009fa:	4303      	orrs	r3, r0
 80009fc:	608b      	str	r3, [r1, #8]
 80009fe:	e76b      	b.n	80008d8 <HAL_RCC_ClockConfig+0x34>
 8000a00:	40023c00 	.word	0x40023c00
 8000a04:	40023800 	.word	0x40023800
 8000a08:	08001178 	.word	0x08001178
 8000a0c:	20000000 	.word	0x20000000

08000a10 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000a10:	4b01      	ldr	r3, [pc, #4]	; (8000a18 <HAL_RCC_GetHCLKFreq+0x8>)
 8000a12:	6818      	ldr	r0, [r3, #0]
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	20000000 	.word	0x20000000

08000a1c <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000a1c:	6803      	ldr	r3, [r0, #0]
 8000a1e:	68da      	ldr	r2, [r3, #12]
 8000a20:	f042 0201 	orr.w	r2, r2, #1
 8000a24:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	f042 0201 	orr.w	r2, r2, #1
 8000a2c:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8000a2e:	2000      	movs	r0, #0
 8000a30:	4770      	bx	lr

08000a32 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0U;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8000a32:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000a36:	2b01      	cmp	r3, #1
{
 8000a38:	b570      	push	{r4, r5, r6, lr}
 8000a3a:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8000a3e:	d01c      	beq.n	8000a7a <HAL_TIM_ConfigClockSource+0x48>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8000a40:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8000a44:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8000a46:	2201      	movs	r2, #1
 8000a48:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 8000a4c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000a4e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000a52:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000a56:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8000a58:	680a      	ldr	r2, [r1, #0]
 8000a5a:	2a40      	cmp	r2, #64	; 0x40
 8000a5c:	d079      	beq.n	8000b52 <HAL_TIM_ConfigClockSource+0x120>
 8000a5e:	d819      	bhi.n	8000a94 <HAL_TIM_ConfigClockSource+0x62>
 8000a60:	2a10      	cmp	r2, #16
 8000a62:	f000 8093 	beq.w	8000b8c <HAL_TIM_ConfigClockSource+0x15a>
 8000a66:	d80a      	bhi.n	8000a7e <HAL_TIM_ConfigClockSource+0x4c>
 8000a68:	2a00      	cmp	r2, #0
 8000a6a:	f000 8089 	beq.w	8000b80 <HAL_TIM_ConfigClockSource+0x14e>
    break;
    
    default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8000a74:	2300      	movs	r3, #0
 8000a76:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8000a7a:	4618      	mov	r0, r3
  
  return HAL_OK;
}
 8000a7c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8000a7e:	2a20      	cmp	r2, #32
 8000a80:	f000 808a 	beq.w	8000b98 <HAL_TIM_ConfigClockSource+0x166>
 8000a84:	2a30      	cmp	r2, #48	; 0x30
 8000a86:	d1f2      	bne.n	8000a6e <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000a88:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000a8a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000a8e:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8000a92:	e036      	b.n	8000b02 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000a94:	2a70      	cmp	r2, #112	; 0x70
 8000a96:	d036      	beq.n	8000b06 <HAL_TIM_ConfigClockSource+0xd4>
 8000a98:	d81b      	bhi.n	8000ad2 <HAL_TIM_ConfigClockSource+0xa0>
 8000a9a:	2a50      	cmp	r2, #80	; 0x50
 8000a9c:	d042      	beq.n	8000b24 <HAL_TIM_ConfigClockSource+0xf2>
 8000a9e:	2a60      	cmp	r2, #96	; 0x60
 8000aa0:	d1e5      	bne.n	8000a6e <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000aa2:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8000aa4:	684d      	ldr	r5, [r1, #4]
 8000aa6:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000aa8:	f024 0410 	bic.w	r4, r4, #16
 8000aac:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000aae:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8000ab0:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000ab2:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000ab6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000aba:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000abe:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8000ac2:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000ac4:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000ac6:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000ac8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000acc:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8000ad0:	e017      	b.n	8000b02 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000ad2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000ad6:	d011      	beq.n	8000afc <HAL_TIM_ConfigClockSource+0xca>
 8000ad8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000adc:	d1c7      	bne.n	8000a6e <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000ade:	688a      	ldr	r2, [r1, #8]
 8000ae0:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000ae2:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000ae4:	68c9      	ldr	r1, [r1, #12]
 8000ae6:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000ae8:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000aec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000af0:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000af2:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000af4:	689a      	ldr	r2, [r3, #8]
 8000af6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000afa:	e002      	b.n	8000b02 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000afc:	689a      	ldr	r2, [r3, #8]
 8000afe:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	e7b3      	b.n	8000a6e <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000b06:	688a      	ldr	r2, [r1, #8]
 8000b08:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000b0a:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000b0c:	68c9      	ldr	r1, [r1, #12]
 8000b0e:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000b10:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000b14:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000b18:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8000b1a:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8000b1c:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000b1e:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8000b22:	e7ee      	b.n	8000b02 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8000b24:	684c      	ldr	r4, [r1, #4]
 8000b26:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000b28:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000b2a:	6a1d      	ldr	r5, [r3, #32]
 8000b2c:	f025 0501 	bic.w	r5, r5, #1
 8000b30:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8000b32:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000b34:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000b38:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000b3c:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8000b40:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8000b42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000b44:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000b46:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000b48:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000b4c:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8000b50:	e7d7      	b.n	8000b02 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8000b52:	684c      	ldr	r4, [r1, #4]
 8000b54:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000b56:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000b58:	6a1d      	ldr	r5, [r3, #32]
 8000b5a:	f025 0501 	bic.w	r5, r5, #1
 8000b5e:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8000b60:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000b62:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000b66:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000b6a:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8000b6e:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8000b70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000b72:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000b74:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000b76:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000b7a:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8000b7e:	e7c0      	b.n	8000b02 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000b80:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000b82:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000b86:	f042 0207 	orr.w	r2, r2, #7
 8000b8a:	e7ba      	b.n	8000b02 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000b8c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000b8e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000b92:	f042 0217 	orr.w	r2, r2, #23
 8000b96:	e7b4      	b.n	8000b02 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000b98:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000b9a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000b9e:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8000ba2:	e7ae      	b.n	8000b02 <HAL_TIM_ConfigClockSource+0xd0>

08000ba4 <HAL_TIM_PeriodElapsedCallback>:
 8000ba4:	4770      	bx	lr

08000ba6 <HAL_TIM_OC_DelayElapsedCallback>:
 8000ba6:	4770      	bx	lr

08000ba8 <HAL_TIM_IC_CaptureCallback>:
 8000ba8:	4770      	bx	lr

08000baa <HAL_TIM_PWM_PulseFinishedCallback>:
 8000baa:	4770      	bx	lr

08000bac <HAL_TIM_TriggerCallback>:
 8000bac:	4770      	bx	lr

08000bae <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000bae:	6803      	ldr	r3, [r0, #0]
 8000bb0:	691a      	ldr	r2, [r3, #16]
 8000bb2:	0791      	lsls	r1, r2, #30
{
 8000bb4:	b510      	push	{r4, lr}
 8000bb6:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000bb8:	d50e      	bpl.n	8000bd8 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000bba:	68da      	ldr	r2, [r3, #12]
 8000bbc:	0792      	lsls	r2, r2, #30
 8000bbe:	d50b      	bpl.n	8000bd8 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000bc0:	f06f 0202 	mvn.w	r2, #2
 8000bc4:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000bc6:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000bc8:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000bca:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000bcc:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000bce:	d077      	beq.n	8000cc0 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8000bd0:	f7ff ffea 	bl	8000ba8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000bd8:	6823      	ldr	r3, [r4, #0]
 8000bda:	691a      	ldr	r2, [r3, #16]
 8000bdc:	0750      	lsls	r0, r2, #29
 8000bde:	d510      	bpl.n	8000c02 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000be0:	68da      	ldr	r2, [r3, #12]
 8000be2:	0751      	lsls	r1, r2, #29
 8000be4:	d50d      	bpl.n	8000c02 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000be6:	f06f 0204 	mvn.w	r2, #4
 8000bea:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000bec:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000bee:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000bf0:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000bf4:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8000bf6:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000bf8:	d068      	beq.n	8000ccc <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000bfa:	f7ff ffd5 	bl	8000ba8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000c02:	6823      	ldr	r3, [r4, #0]
 8000c04:	691a      	ldr	r2, [r3, #16]
 8000c06:	0712      	lsls	r2, r2, #28
 8000c08:	d50f      	bpl.n	8000c2a <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000c0a:	68da      	ldr	r2, [r3, #12]
 8000c0c:	0710      	lsls	r0, r2, #28
 8000c0e:	d50c      	bpl.n	8000c2a <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000c10:	f06f 0208 	mvn.w	r2, #8
 8000c14:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000c16:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000c18:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000c1a:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000c1c:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8000c1e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000c20:	d05a      	beq.n	8000cd8 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000c22:	f7ff ffc1 	bl	8000ba8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000c26:	2300      	movs	r3, #0
 8000c28:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000c2a:	6823      	ldr	r3, [r4, #0]
 8000c2c:	691a      	ldr	r2, [r3, #16]
 8000c2e:	06d2      	lsls	r2, r2, #27
 8000c30:	d510      	bpl.n	8000c54 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000c32:	68da      	ldr	r2, [r3, #12]
 8000c34:	06d0      	lsls	r0, r2, #27
 8000c36:	d50d      	bpl.n	8000c54 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000c38:	f06f 0210 	mvn.w	r2, #16
 8000c3c:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000c3e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000c40:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000c42:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000c46:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8000c48:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000c4a:	d04b      	beq.n	8000ce4 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000c4c:	f7ff ffac 	bl	8000ba8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000c50:	2300      	movs	r3, #0
 8000c52:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000c54:	6823      	ldr	r3, [r4, #0]
 8000c56:	691a      	ldr	r2, [r3, #16]
 8000c58:	07d1      	lsls	r1, r2, #31
 8000c5a:	d508      	bpl.n	8000c6e <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000c5c:	68da      	ldr	r2, [r3, #12]
 8000c5e:	07d2      	lsls	r2, r2, #31
 8000c60:	d505      	bpl.n	8000c6e <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000c62:	f06f 0201 	mvn.w	r2, #1
 8000c66:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000c68:	4620      	mov	r0, r4
 8000c6a:	f7ff ff9b 	bl	8000ba4 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000c6e:	6823      	ldr	r3, [r4, #0]
 8000c70:	691a      	ldr	r2, [r3, #16]
 8000c72:	0610      	lsls	r0, r2, #24
 8000c74:	d508      	bpl.n	8000c88 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000c76:	68da      	ldr	r2, [r3, #12]
 8000c78:	0611      	lsls	r1, r2, #24
 8000c7a:	d505      	bpl.n	8000c88 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000c7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000c80:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000c82:	4620      	mov	r0, r4
 8000c84:	f000 f8d7 	bl	8000e36 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000c88:	6823      	ldr	r3, [r4, #0]
 8000c8a:	691a      	ldr	r2, [r3, #16]
 8000c8c:	0652      	lsls	r2, r2, #25
 8000c8e:	d508      	bpl.n	8000ca2 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000c90:	68da      	ldr	r2, [r3, #12]
 8000c92:	0650      	lsls	r0, r2, #25
 8000c94:	d505      	bpl.n	8000ca2 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000c96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000c9a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000c9c:	4620      	mov	r0, r4
 8000c9e:	f7ff ff85 	bl	8000bac <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000ca2:	6823      	ldr	r3, [r4, #0]
 8000ca4:	691a      	ldr	r2, [r3, #16]
 8000ca6:	0691      	lsls	r1, r2, #26
 8000ca8:	d522      	bpl.n	8000cf0 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000caa:	68da      	ldr	r2, [r3, #12]
 8000cac:	0692      	lsls	r2, r2, #26
 8000cae:	d51f      	bpl.n	8000cf0 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000cb0:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000cb4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000cb6:	611a      	str	r2, [r3, #16]
}
 8000cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8000cbc:	f000 b8ba 	b.w	8000e34 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000cc0:	f7ff ff71 	bl	8000ba6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f7ff ff70 	bl	8000baa <HAL_TIM_PWM_PulseFinishedCallback>
 8000cca:	e783      	b.n	8000bd4 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000ccc:	f7ff ff6b 	bl	8000ba6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	f7ff ff6a 	bl	8000baa <HAL_TIM_PWM_PulseFinishedCallback>
 8000cd6:	e792      	b.n	8000bfe <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000cd8:	f7ff ff65 	bl	8000ba6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8000cdc:	4620      	mov	r0, r4
 8000cde:	f7ff ff64 	bl	8000baa <HAL_TIM_PWM_PulseFinishedCallback>
 8000ce2:	e7a0      	b.n	8000c26 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000ce4:	f7ff ff5f 	bl	8000ba6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000ce8:	4620      	mov	r0, r4
 8000cea:	f7ff ff5e 	bl	8000baa <HAL_TIM_PWM_PulseFinishedCallback>
 8000cee:	e7af      	b.n	8000c50 <HAL_TIM_IRQHandler+0xa2>
 8000cf0:	bd10      	pop	{r4, pc}
	...

08000cf4 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000cf4:	4a2e      	ldr	r2, [pc, #184]	; (8000db0 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8000cf6:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000cf8:	4290      	cmp	r0, r2
 8000cfa:	d012      	beq.n	8000d22 <TIM_Base_SetConfig+0x2e>
 8000cfc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000d00:	d00f      	beq.n	8000d22 <TIM_Base_SetConfig+0x2e>
 8000d02:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000d06:	4290      	cmp	r0, r2
 8000d08:	d00b      	beq.n	8000d22 <TIM_Base_SetConfig+0x2e>
 8000d0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d0e:	4290      	cmp	r0, r2
 8000d10:	d007      	beq.n	8000d22 <TIM_Base_SetConfig+0x2e>
 8000d12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d16:	4290      	cmp	r0, r2
 8000d18:	d003      	beq.n	8000d22 <TIM_Base_SetConfig+0x2e>
 8000d1a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000d1e:	4290      	cmp	r0, r2
 8000d20:	d11d      	bne.n	8000d5e <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8000d22:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000d28:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000d2a:	4a21      	ldr	r2, [pc, #132]	; (8000db0 <TIM_Base_SetConfig+0xbc>)
 8000d2c:	4290      	cmp	r0, r2
 8000d2e:	d104      	bne.n	8000d3a <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000d30:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000d36:	4313      	orrs	r3, r2
 8000d38:	e028      	b.n	8000d8c <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000d3a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000d3e:	d0f7      	beq.n	8000d30 <TIM_Base_SetConfig+0x3c>
 8000d40:	4a1c      	ldr	r2, [pc, #112]	; (8000db4 <TIM_Base_SetConfig+0xc0>)
 8000d42:	4290      	cmp	r0, r2
 8000d44:	d0f4      	beq.n	8000d30 <TIM_Base_SetConfig+0x3c>
 8000d46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d4a:	4290      	cmp	r0, r2
 8000d4c:	d0f0      	beq.n	8000d30 <TIM_Base_SetConfig+0x3c>
 8000d4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d52:	4290      	cmp	r0, r2
 8000d54:	d0ec      	beq.n	8000d30 <TIM_Base_SetConfig+0x3c>
 8000d56:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000d5a:	4290      	cmp	r0, r2
 8000d5c:	d0e8      	beq.n	8000d30 <TIM_Base_SetConfig+0x3c>
 8000d5e:	4a16      	ldr	r2, [pc, #88]	; (8000db8 <TIM_Base_SetConfig+0xc4>)
 8000d60:	4290      	cmp	r0, r2
 8000d62:	d0e5      	beq.n	8000d30 <TIM_Base_SetConfig+0x3c>
 8000d64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d68:	4290      	cmp	r0, r2
 8000d6a:	d0e1      	beq.n	8000d30 <TIM_Base_SetConfig+0x3c>
 8000d6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d70:	4290      	cmp	r0, r2
 8000d72:	d0dd      	beq.n	8000d30 <TIM_Base_SetConfig+0x3c>
 8000d74:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8000d78:	4290      	cmp	r0, r2
 8000d7a:	d0d9      	beq.n	8000d30 <TIM_Base_SetConfig+0x3c>
 8000d7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d80:	4290      	cmp	r0, r2
 8000d82:	d0d5      	beq.n	8000d30 <TIM_Base_SetConfig+0x3c>
 8000d84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d88:	4290      	cmp	r0, r2
 8000d8a:	d0d1      	beq.n	8000d30 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 8000d8c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000d8e:	688b      	ldr	r3, [r1, #8]
 8000d90:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000d92:	680b      	ldr	r3, [r1, #0]
 8000d94:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <TIM_Base_SetConfig+0xbc>)
 8000d98:	4298      	cmp	r0, r3
 8000d9a:	d006      	beq.n	8000daa <TIM_Base_SetConfig+0xb6>
 8000d9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000da0:	4298      	cmp	r0, r3
 8000da2:	d002      	beq.n	8000daa <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8000da4:	2301      	movs	r3, #1
 8000da6:	6143      	str	r3, [r0, #20]
}
 8000da8:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8000daa:	690b      	ldr	r3, [r1, #16]
 8000dac:	6303      	str	r3, [r0, #48]	; 0x30
 8000dae:	e7f9      	b.n	8000da4 <TIM_Base_SetConfig+0xb0>
 8000db0:	40010000 	.word	0x40010000
 8000db4:	40000400 	.word	0x40000400
 8000db8:	40014000 	.word	0x40014000

08000dbc <HAL_TIM_Base_Init>:
{ 
 8000dbc:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000dbe:	4604      	mov	r4, r0
 8000dc0:	b1a0      	cbz	r0, 8000dec <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000dc2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000dc6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000dca:	b91b      	cbnz	r3, 8000dd4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000dcc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8000dd0:	f000 f95a 	bl	8001088 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8000dda:	6820      	ldr	r0, [r4, #0]
 8000ddc:	1d21      	adds	r1, r4, #4
 8000dde:	f7ff ff89 	bl	8000cf4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000de2:	2301      	movs	r3, #1
 8000de4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8000de8:	2000      	movs	r0, #0
 8000dea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000dec:	2001      	movs	r0, #1
}
 8000dee:	bd10      	pop	{r4, pc}

08000df0 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8000df0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000df4:	2b01      	cmp	r3, #1
{
 8000df6:	b510      	push	{r4, lr}
 8000df8:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8000dfc:	d018      	beq.n	8000e30 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8000dfe:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000e02:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8000e04:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000e06:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000e08:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000e0a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000e0e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8000e10:	685a      	ldr	r2, [r3, #4]
 8000e12:	4322      	orrs	r2, r4
 8000e14:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8000e16:	689a      	ldr	r2, [r3, #8]
 8000e18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e1c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000e1e:	689a      	ldr	r2, [r3, #8]
 8000e20:	430a      	orrs	r2, r1
 8000e22:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8000e24:	2301      	movs	r3, #1
 8000e26:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8000e30:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8000e32:	bd10      	pop	{r4, pc}

08000e34 <HAL_TIMEx_CommutationCallback>:
 8000e34:	4770      	bx	lr

08000e36 <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000e36:	4770      	bx	lr

08000e38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e38:	b530      	push	{r4, r5, lr}
 8000e3a:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e3c:	2400      	movs	r4, #0
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <MX_GPIO_Init+0x40>)
 8000e40:	9400      	str	r4, [sp, #0]
 8000e42:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_Rojo_GPIO_Port, Led_Rojo_Pin, GPIO_PIN_SET);
 8000e44:	4d0d      	ldr	r5, [pc, #52]	; (8000e7c <MX_GPIO_Init+0x44>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e46:	f042 0210 	orr.w	r2, r2, #16
 8000e4a:	631a      	str	r2, [r3, #48]	; 0x30
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(Led_Rojo_GPIO_Port, Led_Rojo_Pin, GPIO_PIN_SET);
 8000e4e:	2201      	movs	r2, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e50:	f003 0310 	and.w	r3, r3, #16
  HAL_GPIO_WritePin(Led_Rojo_GPIO_Port, Led_Rojo_Pin, GPIO_PIN_SET);
 8000e54:	4611      	mov	r1, r2
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e56:	9300      	str	r3, [sp, #0]
  HAL_GPIO_WritePin(Led_Rojo_GPIO_Port, Led_Rojo_Pin, GPIO_PIN_SET);
 8000e58:	4628      	mov	r0, r5
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e5a:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_WritePin(Led_Rojo_GPIO_Port, Led_Rojo_Pin, GPIO_PIN_SET);
 8000e5c:	f7ff fb4a 	bl	80004f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Led_Rojo_Pin;
 8000e60:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(Led_Rojo_GPIO_Port, &GPIO_InitStruct);
 8000e62:	a901      	add	r1, sp, #4
 8000e64:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = Led_Rojo_Pin;
 8000e66:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e68:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(Led_Rojo_GPIO_Port, &GPIO_InitStruct);
 8000e6e:	f7ff fa61 	bl	8000334 <HAL_GPIO_Init>

}
 8000e72:	b007      	add	sp, #28
 8000e74:	bd30      	pop	{r4, r5, pc}
 8000e76:	bf00      	nop
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40021000 	.word	0x40021000

08000e80 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000e80:	b510      	push	{r4, lr}
 8000e82:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e84:	2300      	movs	r3, #0
 8000e86:	4a21      	ldr	r2, [pc, #132]	; (8000f0c <SystemClock_Config+0x8c>)
 8000e88:	9301      	str	r3, [sp, #4]
 8000e8a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000e8c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000e90:	6411      	str	r1, [r2, #64]	; 0x40
 8000e92:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000e94:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000e98:	9201      	str	r2, [sp, #4]
 8000e9a:	9a01      	ldr	r2, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e9c:	4a1c      	ldr	r2, [pc, #112]	; (8000f10 <SystemClock_Config+0x90>)
 8000e9e:	9302      	str	r3, [sp, #8]
 8000ea0:	6811      	ldr	r1, [r2, #0]
 8000ea2:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000ea6:	6011      	str	r1, [r2, #0]
 8000ea8:	6812      	ldr	r2, [r2, #0]
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000eaa:	930e      	str	r3, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eac:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000eb0:	9202      	str	r2, [sp, #8]
 8000eb2:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eb4:	2202      	movs	r2, #2
 8000eb6:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eb8:	2201      	movs	r2, #1
 8000eba:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ebc:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000ebe:	2210      	movs	r2, #16
 8000ec0:	920c      	str	r2, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec2:	f7ff fb21 	bl	8000508 <HAL_RCC_OscConfig>
 8000ec6:	4601      	mov	r1, r0
 8000ec8:	b100      	cbz	r0, 8000ecc <SystemClock_Config+0x4c>
 8000eca:	e7fe      	b.n	8000eca <SystemClock_Config+0x4a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ecc:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ece:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed0:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ed2:	9006      	str	r0, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ed4:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ed6:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed8:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000eda:	f7ff fce3 	bl	80008a4 <HAL_RCC_ClockConfig>
 8000ede:	4604      	mov	r4, r0
 8000ee0:	b100      	cbz	r0, 8000ee4 <SystemClock_Config+0x64>
 8000ee2:	e7fe      	b.n	8000ee2 <SystemClock_Config+0x62>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000ee4:	f7ff fd94 	bl	8000a10 <HAL_RCC_GetHCLKFreq>
 8000ee8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eec:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ef0:	f7ff f9f8 	bl	80002e4 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000ef4:	2004      	movs	r0, #4
 8000ef6:	f7ff fa0b 	bl	8000310 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000efa:	4622      	mov	r2, r4
 8000efc:	4621      	mov	r1, r4
 8000efe:	f04f 30ff 	mov.w	r0, #4294967295
 8000f02:	f7ff f9af 	bl	8000264 <HAL_NVIC_SetPriority>
}
 8000f06:	b014      	add	sp, #80	; 0x50
 8000f08:	bd10      	pop	{r4, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40023800 	.word	0x40023800
 8000f10:	40007000 	.word	0x40007000

08000f14 <main>:
{
 8000f14:	b508      	push	{r3, lr}
  HAL_Init();
 8000f16:	f7ff f96b 	bl	80001f0 <HAL_Init>
  SystemClock_Config();
 8000f1a:	f7ff ffb1 	bl	8000e80 <SystemClock_Config>
  MX_GPIO_Init();
 8000f1e:	f7ff ff8b 	bl	8000e38 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000f22:	f000 f87b 	bl	800101c <MX_TIM3_Init>
  	  HAL_TIM_Base_Start_IT(&htim3);//inicializa el taimer
 8000f26:	4802      	ldr	r0, [pc, #8]	; (8000f30 <main+0x1c>)
 8000f28:	f7ff fd78 	bl	8000a1c <HAL_TIM_Base_Start_IT>
 8000f2c:	e7fe      	b.n	8000f2c <main+0x18>
 8000f2e:	bf00      	nop
 8000f30:	20000024 	.word	0x20000024

08000f34 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8000f34:	e7fe      	b.n	8000f34 <_Error_Handler>

08000f36 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f36:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f38:	2003      	movs	r0, #3
 8000f3a:	f7ff f981 	bl	8000240 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	4611      	mov	r1, r2
 8000f42:	f06f 000b 	mvn.w	r0, #11
 8000f46:	f7ff f98d 	bl	8000264 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	4611      	mov	r1, r2
 8000f4e:	f06f 000a 	mvn.w	r0, #10
 8000f52:	f7ff f987 	bl	8000264 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	4611      	mov	r1, r2
 8000f5a:	f06f 0009 	mvn.w	r0, #9
 8000f5e:	f7ff f981 	bl	8000264 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	4611      	mov	r1, r2
 8000f66:	f06f 0004 	mvn.w	r0, #4
 8000f6a:	f7ff f97b 	bl	8000264 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	4611      	mov	r1, r2
 8000f72:	f06f 0003 	mvn.w	r0, #3
 8000f76:	f7ff f975 	bl	8000264 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	4611      	mov	r1, r2
 8000f7e:	f06f 0001 	mvn.w	r0, #1
 8000f82:	f7ff f96f 	bl	8000264 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	4611      	mov	r1, r2
 8000f8a:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000f92:	f7ff b967 	b.w	8000264 <HAL_NVIC_SetPriority>

08000f96 <NMI_Handler>:
 8000f96:	4770      	bx	lr

08000f98 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8000f98:	e7fe      	b.n	8000f98 <HardFault_Handler>

08000f9a <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000f9a:	e7fe      	b.n	8000f9a <MemManage_Handler>

08000f9c <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8000f9c:	e7fe      	b.n	8000f9c <BusFault_Handler>

08000f9e <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8000f9e:	e7fe      	b.n	8000f9e <UsageFault_Handler>

08000fa0 <SVC_Handler>:
 8000fa0:	4770      	bx	lr

08000fa2 <DebugMon_Handler>:
 8000fa2:	4770      	bx	lr

08000fa4 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8000fa4:	4770      	bx	lr

08000fa6 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000fa6:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa8:	f7ff f93c 	bl	8000224 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8000fb0:	f7ff b9bb 	b.w	800032a <HAL_SYSTICK_IRQHandler>

08000fb4 <TIM3_IRQHandler>:

/**
* @brief This function handles TIM3 global interrupt.
*/
void TIM3_IRQHandler(void)
{
 8000fb4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000fb6:	4804      	ldr	r0, [pc, #16]	; (8000fc8 <TIM3_IRQHandler+0x14>)
 8000fb8:	f7ff fdf9 	bl	8000bae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOE,Led_Rojo_Pin);//
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	4803      	ldr	r0, [pc, #12]	; (8000fcc <TIM3_IRQHandler+0x18>)

  /* USER CODE END TIM3_IRQn 1 */
}
 8000fc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_TogglePin(GPIOE,Led_Rojo_Pin);//
 8000fc4:	f7ff ba9b 	b.w	80004fe <HAL_GPIO_TogglePin>
 8000fc8:	20000024 	.word	0x20000024
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fd0:	490f      	ldr	r1, [pc, #60]	; (8001010 <SystemInit+0x40>)
 8000fd2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000fd6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000fde:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <SystemInit+0x44>)
 8000fe0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fe2:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8000fe4:	f042 0201 	orr.w	r2, r2, #1
 8000fe8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000fea:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000ff2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ff6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000ff8:	4a07      	ldr	r2, [pc, #28]	; (8001018 <SystemInit+0x48>)
 8000ffa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001002:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001004:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001006:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800100a:	608b      	str	r3, [r1, #8]
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000ed00 	.word	0xe000ed00
 8001014:	40023800 	.word	0x40023800
 8001018:	24003010 	.word	0x24003010

0800101c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800101c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
 800101e:	4817      	ldr	r0, [pc, #92]	; (800107c <MX_TIM3_Init+0x60>)
  htim3.Init.Prescaler = 500;
 8001020:	4917      	ldr	r1, [pc, #92]	; (8001080 <MX_TIM3_Init+0x64>)
 8001022:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001026:	e880 000a 	stmia.w	r0, {r1, r3}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 32000;
 800102a:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800102e:	2300      	movs	r3, #0
 8001030:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 32000;
 8001032:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001034:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001036:	f7ff fec1 	bl	8000dbc <HAL_TIM_Base_Init>
 800103a:	b118      	cbz	r0, 8001044 <MX_TIM3_Init+0x28>
  {
    _Error_Handler(__FILE__, __LINE__);
 800103c:	213e      	movs	r1, #62	; 0x3e
 800103e:	4811      	ldr	r0, [pc, #68]	; (8001084 <MX_TIM3_Init+0x68>)
 8001040:	f7ff ff78 	bl	8000f34 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001044:	a906      	add	r1, sp, #24
 8001046:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800104a:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800104e:	480b      	ldr	r0, [pc, #44]	; (800107c <MX_TIM3_Init+0x60>)
 8001050:	f7ff fcef 	bl	8000a32 <HAL_TIM_ConfigClockSource>
 8001054:	b118      	cbz	r0, 800105e <MX_TIM3_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001056:	2144      	movs	r1, #68	; 0x44
 8001058:	480a      	ldr	r0, [pc, #40]	; (8001084 <MX_TIM3_Init+0x68>)
 800105a:	f7ff ff6b 	bl	8000f34 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800105e:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001060:	4669      	mov	r1, sp
 8001062:	4806      	ldr	r0, [pc, #24]	; (800107c <MX_TIM3_Init+0x60>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001064:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001066:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001068:	f7ff fec2 	bl	8000df0 <HAL_TIMEx_MasterConfigSynchronization>
 800106c:	b118      	cbz	r0, 8001076 <MX_TIM3_Init+0x5a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800106e:	214b      	movs	r1, #75	; 0x4b
 8001070:	4804      	ldr	r0, [pc, #16]	; (8001084 <MX_TIM3_Init+0x68>)
 8001072:	f7ff ff5f 	bl	8000f34 <_Error_Handler>
  }

}
 8001076:	b007      	add	sp, #28
 8001078:	f85d fb04 	ldr.w	pc, [sp], #4
 800107c:	20000024 	.word	0x20000024
 8001080:	40000400 	.word	0x40000400
 8001084:	08001188 	.word	0x08001188

08001088 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001088:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM3)
 800108a:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <HAL_TIM_Base_MspInit+0x38>)
 800108c:	6802      	ldr	r2, [r0, #0]
 800108e:	429a      	cmp	r2, r3
 8001090:	d113      	bne.n	80010ba <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001092:	2200      	movs	r2, #0
 8001094:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
 8001098:	9201      	str	r2, [sp, #4]
 800109a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800109c:	f041 0102 	orr.w	r1, r1, #2
 80010a0:	6419      	str	r1, [r3, #64]	; 0x40
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	9301      	str	r3, [sp, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80010aa:	201d      	movs	r0, #29
 80010ac:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010ae:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80010b0:	f7ff f8d8 	bl	8000264 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010b4:	201d      	movs	r0, #29
 80010b6:	f7ff f909 	bl	80002cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80010ba:	b003      	add	sp, #12
 80010bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80010c0:	40000400 	.word	0x40000400

080010c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80010c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80010ca:	e003      	b.n	80010d4 <LoopCopyDataInit>

080010cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80010ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80010d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80010d2:	3104      	adds	r1, #4

080010d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80010d4:	480b      	ldr	r0, [pc, #44]	; (8001104 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80010d6:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80010d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80010da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010dc:	d3f6      	bcc.n	80010cc <CopyDataInit>
  ldr  r2, =_sbss
 80010de:	4a0b      	ldr	r2, [pc, #44]	; (800110c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80010e0:	e002      	b.n	80010e8 <LoopFillZerobss>

080010e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80010e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010e4:	f842 3b04 	str.w	r3, [r2], #4

080010e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010e8:	4b09      	ldr	r3, [pc, #36]	; (8001110 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010ec:	d3f9      	bcc.n	80010e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010ee:	f7ff ff6f 	bl	8000fd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010f2:	f000 f811 	bl	8001118 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010f6:	f7ff ff0d 	bl	8000f14 <main>
  bx  lr    
 80010fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010fc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001100:	080011a0 	.word	0x080011a0
  ldr  r0, =_sdata
 8001104:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001108:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 800110c:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8001110:	20000060 	.word	0x20000060

08001114 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001114:	e7fe      	b.n	8001114 <ADC_IRQHandler>
	...

08001118 <__libc_init_array>:
 8001118:	b570      	push	{r4, r5, r6, lr}
 800111a:	4e0d      	ldr	r6, [pc, #52]	; (8001150 <__libc_init_array+0x38>)
 800111c:	4c0d      	ldr	r4, [pc, #52]	; (8001154 <__libc_init_array+0x3c>)
 800111e:	1ba4      	subs	r4, r4, r6
 8001120:	10a4      	asrs	r4, r4, #2
 8001122:	2500      	movs	r5, #0
 8001124:	42a5      	cmp	r5, r4
 8001126:	d109      	bne.n	800113c <__libc_init_array+0x24>
 8001128:	4e0b      	ldr	r6, [pc, #44]	; (8001158 <__libc_init_array+0x40>)
 800112a:	4c0c      	ldr	r4, [pc, #48]	; (800115c <__libc_init_array+0x44>)
 800112c:	f000 f818 	bl	8001160 <_init>
 8001130:	1ba4      	subs	r4, r4, r6
 8001132:	10a4      	asrs	r4, r4, #2
 8001134:	2500      	movs	r5, #0
 8001136:	42a5      	cmp	r5, r4
 8001138:	d105      	bne.n	8001146 <__libc_init_array+0x2e>
 800113a:	bd70      	pop	{r4, r5, r6, pc}
 800113c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001140:	4798      	blx	r3
 8001142:	3501      	adds	r5, #1
 8001144:	e7ee      	b.n	8001124 <__libc_init_array+0xc>
 8001146:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800114a:	4798      	blx	r3
 800114c:	3501      	adds	r5, #1
 800114e:	e7f2      	b.n	8001136 <__libc_init_array+0x1e>
 8001150:	08001198 	.word	0x08001198
 8001154:	08001198 	.word	0x08001198
 8001158:	08001198 	.word	0x08001198
 800115c:	0800119c 	.word	0x0800119c

08001160 <_init>:
 8001160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001162:	bf00      	nop
 8001164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001166:	bc08      	pop	{r3}
 8001168:	469e      	mov	lr, r3
 800116a:	4770      	bx	lr

0800116c <_fini>:
 800116c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800116e:	bf00      	nop
 8001170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001172:	bc08      	pop	{r3}
 8001174:	469e      	mov	lr, r3
 8001176:	4770      	bx	lr
