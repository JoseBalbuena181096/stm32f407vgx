
C:\Users\LENOVO\Documents\DACSencillo\Debug\DACSencillo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c54  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000ddc  08000ddc  00010ddc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000dfc  08000dfc  00010dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000e00  08000e00  00010e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000e04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          00000034  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000038  20000038  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000b460  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001baf  00000000  00000000  0002b494  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000163a  00000000  00000000  0002d043  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000410  00000000  00000000  0002e680  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000548  00000000  00000000  0002ea90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000029f2  00000000  00000000  0002efd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00001e02  00000000  00000000  000319ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000337cc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000008f0  00000000  00000000  00033848  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000dc4 	.word	0x08000dc4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000dc4 	.word	0x08000dc4

080001c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80001ca:	4b08      	ldr	r3, [pc, #32]	; (80001ec <HAL_InitTick+0x24>)
{
 80001cc:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80001ce:	6818      	ldr	r0, [r3, #0]
 80001d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80001d8:	f000 f878 	bl	80002cc <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001dc:	2200      	movs	r2, #0
 80001de:	4621      	mov	r1, r4
 80001e0:	f04f 30ff 	mov.w	r0, #4294967295
 80001e4:	f000 f83e 	bl	8000264 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80001e8:	2000      	movs	r0, #0
 80001ea:	bd10      	pop	{r4, pc}
 80001ec:	20000000 	.word	0x20000000

080001f0 <HAL_Init>:
{
 80001f0:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80001f2:	4b0b      	ldr	r3, [pc, #44]	; (8000220 <HAL_Init+0x30>)
 80001f4:	681a      	ldr	r2, [r3, #0]
 80001f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80001fa:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80001fc:	681a      	ldr	r2, [r3, #0]
 80001fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000202:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000204:	681a      	ldr	r2, [r3, #0]
 8000206:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800020a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800020c:	2003      	movs	r0, #3
 800020e:	f000 f817 	bl	8000240 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000212:	2000      	movs	r0, #0
 8000214:	f7ff ffd8 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 8000218:	f000 fd21 	bl	8000c5e <HAL_MspInit>
}
 800021c:	2000      	movs	r0, #0
 800021e:	bd08      	pop	{r3, pc}
 8000220:	40023c00 	.word	0x40023c00

08000224 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000224:	4a02      	ldr	r2, [pc, #8]	; (8000230 <HAL_IncTick+0xc>)
 8000226:	6813      	ldr	r3, [r2, #0]
 8000228:	3301      	adds	r3, #1
 800022a:	6013      	str	r3, [r2, #0]
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	20000020 	.word	0x20000020

08000234 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000234:	4b01      	ldr	r3, [pc, #4]	; (800023c <HAL_GetTick+0x8>)
 8000236:	6818      	ldr	r0, [r3, #0]
}
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	20000020 	.word	0x20000020

08000240 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000240:	4a07      	ldr	r2, [pc, #28]	; (8000260 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000242:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000244:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000248:	041b      	lsls	r3, r3, #16
 800024a:	0c1b      	lsrs	r3, r3, #16
 800024c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000250:	0200      	lsls	r0, r0, #8
 8000252:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000256:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800025a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800025c:	60d3      	str	r3, [r2, #12]
 800025e:	4770      	bx	lr
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000266:	b530      	push	{r4, r5, lr}
 8000268:	68dc      	ldr	r4, [r3, #12]
 800026a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800026e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000272:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000274:	2b04      	cmp	r3, #4
 8000276:	bf28      	it	cs
 8000278:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800027a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800027c:	f04f 0501 	mov.w	r5, #1
 8000280:	fa05 f303 	lsl.w	r3, r5, r3
 8000284:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000288:	bf8c      	ite	hi
 800028a:	3c03      	subhi	r4, #3
 800028c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800028e:	4019      	ands	r1, r3
 8000290:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000292:	fa05 f404 	lsl.w	r4, r5, r4
 8000296:	3c01      	subs	r4, #1
 8000298:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800029a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800029c:	ea42 0201 	orr.w	r2, r2, r1
 80002a0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a4:	bfaf      	iteee	ge
 80002a6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002aa:	f000 000f 	andlt.w	r0, r0, #15
 80002ae:	4b06      	ldrlt	r3, [pc, #24]	; (80002c8 <HAL_NVIC_SetPriority+0x64>)
 80002b0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b2:	bfa5      	ittet	ge
 80002b4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80002b8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ba:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002bc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002c0:	bd30      	pop	{r4, r5, pc}
 80002c2:	bf00      	nop
 80002c4:	e000ed00 	.word	0xe000ed00
 80002c8:	e000ed14 	.word	0xe000ed14

080002cc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002cc:	3801      	subs	r0, #1
 80002ce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002d2:	d20a      	bcs.n	80002ea <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002d4:	4b06      	ldr	r3, [pc, #24]	; (80002f0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d6:	4a07      	ldr	r2, [pc, #28]	; (80002f4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002d8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002da:	21f0      	movs	r1, #240	; 0xf0
 80002dc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002e0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002e2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002e4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002ea:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	e000e010 	.word	0xe000e010
 80002f4:	e000ed00 	.word	0xe000ed00

080002f8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80002f8:	4b04      	ldr	r3, [pc, #16]	; (800030c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002fa:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002fc:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002fe:	bf0c      	ite	eq
 8000300:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000304:	f022 0204 	bicne.w	r2, r2, #4
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	4770      	bx	lr
 800030c:	e000e010 	.word	0xe000e010

08000310 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000310:	4770      	bx	lr

08000312 <HAL_SYSTICK_IRQHandler>:
{
 8000312:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000314:	f7ff fffc 	bl	8000310 <HAL_SYSTICK_Callback>
 8000318:	bd08      	pop	{r3, pc}

0800031a <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800031a:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if(hdac == NULL)
 800031c:	4604      	mov	r4, r0
 800031e:	b168      	cbz	r0, 800033c <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8000320:	7903      	ldrb	r3, [r0, #4]
 8000322:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000326:	b913      	cbnz	r3, 800032e <HAL_DAC_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000328:	7142      	strb	r2, [r0, #5]
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800032a:	f000 fbf3 	bl	8000b14 <HAL_DAC_MspInit>
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800032e:	2302      	movs	r3, #2
 8000330:	7123      	strb	r3, [r4, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000332:	2000      	movs	r0, #0
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000334:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000336:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8000338:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 800033a:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 800033c:	2001      	movs	r0, #1
}
 800033e:	bd10      	pop	{r4, pc}

08000340 <HAL_DAC_Start>:
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8000340:	7943      	ldrb	r3, [r0, #5]
 8000342:	2b01      	cmp	r3, #1
{
 8000344:	b510      	push	{r4, lr}
 8000346:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdac);
 800034a:	d018      	beq.n	800037e <HAL_DAC_Start+0x3e>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800034c:	7103      	strb	r3, [r0, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800034e:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdac);
 8000350:	2201      	movs	r2, #1
  __HAL_DAC_ENABLE(hdac, Channel);
 8000352:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hdac);
 8000354:	7142      	strb	r2, [r0, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 8000356:	408a      	lsls	r2, r1
 8000358:	4322      	orrs	r2, r4
 800035a:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 800035c:	b989      	cbnz	r1, 8000382 <HAL_DAC_Start+0x42>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 800035e:	6819      	ldr	r1, [r3, #0]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8000360:	681a      	ldr	r2, [r3, #0]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8000362:	074c      	lsls	r4, r1, #29
 8000364:	d507      	bpl.n	8000376 <HAL_DAC_Start+0x36>
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8000366:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 800036a:	2a38      	cmp	r2, #56	; 0x38
 800036c:	d103      	bne.n	8000376 <HAL_DAC_Start+0x36>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 800036e:	685a      	ldr	r2, [r3, #4]
 8000370:	f042 0201 	orr.w	r2, r2, #1
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8000374:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000376:	2301      	movs	r3, #1
 8000378:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800037a:	2300      	movs	r3, #0
 800037c:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 800037e:	4618      	mov	r0, r3
    
  /* Return function status */
  return HAL_OK;
}
 8000380:	bd10      	pop	{r4, pc}
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8000382:	6819      	ldr	r1, [r3, #0]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8000384:	681a      	ldr	r2, [r3, #0]
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8000386:	0349      	lsls	r1, r1, #13
 8000388:	d5f5      	bpl.n	8000376 <HAL_DAC_Start+0x36>
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 800038a:	f402 1260 	and.w	r2, r2, #3670016	; 0x380000
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 800038e:	f5b2 1f60 	cmp.w	r2, #3670016	; 0x380000
 8000392:	d1f0      	bne.n	8000376 <HAL_DAC_Start+0x36>
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8000394:	685a      	ldr	r2, [r3, #4]
 8000396:	f042 0202 	orr.w	r2, r2, #2
 800039a:	e7eb      	b.n	8000374 <HAL_DAC_Start+0x34>

0800039c <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800039c:	7943      	ldrb	r3, [r0, #5]
 800039e:	2b01      	cmp	r3, #1
{
 80003a0:	b530      	push	{r4, r5, lr}
 80003a2:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdac);
 80003a6:	d017      	beq.n	80003d8 <HAL_DAC_ConfigChannel+0x3c>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80003a8:	6804      	ldr	r4, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 80003aa:	7103      	strb	r3, [r0, #4]
  tmpreg1 = hdac->Instance->CR;
 80003ac:	6823      	ldr	r3, [r4, #0]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80003ae:	f640 75fe 	movw	r5, #4094	; 0xffe
 80003b2:	4095      	lsls	r5, r2
 80003b4:	ea23 0505 	bic.w	r5, r3, r5
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80003b8:	c90a      	ldmia	r1, {r1, r3}
 80003ba:	430b      	orrs	r3, r1
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80003bc:	4093      	lsls	r3, r2
 80003be:	432b      	orrs	r3, r5
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80003c0:	6023      	str	r3, [r4, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80003c2:	6823      	ldr	r3, [r4, #0]
 80003c4:	21c0      	movs	r1, #192	; 0xc0
 80003c6:	fa01 f202 	lsl.w	r2, r1, r2
 80003ca:	ea23 0202 	bic.w	r2, r3, r2
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80003ce:	2301      	movs	r3, #1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80003d0:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 80003d2:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80003d4:	2300      	movs	r3, #0
 80003d6:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 80003d8:	4618      	mov	r0, r3
  
  /* Return function status */
  return HAL_OK;
}
 80003da:	bd30      	pop	{r4, r5, pc}

080003dc <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 80003dc:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t tmp = 0U;
 80003de:	2400      	movs	r4, #0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 80003e0:	6800      	ldr	r0, [r0, #0]
  __IO uint32_t tmp = 0U;
 80003e2:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance; 
 80003e4:	9001      	str	r0, [sp, #4]
  if(Channel == DAC_CHANNEL_1)
 80003e6:	b941      	cbnz	r1, 80003fa <HAL_DAC_SetValue+0x1e>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80003e8:	9901      	ldr	r1, [sp, #4]
 80003ea:	3108      	adds	r1, #8
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80003ec:	440a      	add	r2, r1
 80003ee:	9201      	str	r2, [sp, #4]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80003f0:	9a01      	ldr	r2, [sp, #4]
  
  /* Return function status */
  return HAL_OK;
}
 80003f2:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 80003f4:	6013      	str	r3, [r2, #0]
}
 80003f6:	b002      	add	sp, #8
 80003f8:	bd10      	pop	{r4, pc}
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80003fa:	9901      	ldr	r1, [sp, #4]
 80003fc:	3114      	adds	r1, #20
 80003fe:	e7f5      	b.n	80003ec <HAL_DAC_SetValue+0x10>

08000400 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000404:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000406:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000408:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80005b8 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800040c:	4a68      	ldr	r2, [pc, #416]	; (80005b0 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800040e:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80005bc <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000412:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000414:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000416:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800041a:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 800041c:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000420:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000424:	45b6      	cmp	lr, r6
 8000426:	f040 80ae 	bne.w	8000586 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800042a:	684c      	ldr	r4, [r1, #4]
 800042c:	f024 0710 	bic.w	r7, r4, #16
 8000430:	2f02      	cmp	r7, #2
 8000432:	d116      	bne.n	8000462 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000434:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000438:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800043c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000440:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000444:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000448:	f04f 0c0f 	mov.w	ip, #15
 800044c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000450:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000454:	690d      	ldr	r5, [r1, #16]
 8000456:	fa05 f50b 	lsl.w	r5, r5, fp
 800045a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800045e:	f8ca 5020 	str.w	r5, [sl, #32]
 8000462:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000466:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000468:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800046c:	fa05 f50a 	lsl.w	r5, r5, sl
 8000470:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000472:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000476:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800047a:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800047e:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000480:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000484:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000486:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800048a:	d811      	bhi.n	80004b0 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 800048c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800048e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000492:	68cf      	ldr	r7, [r1, #12]
 8000494:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000498:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 800049c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800049e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80004a0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80004a4:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80004a8:	409f      	lsls	r7, r3
 80004aa:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80004ae:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80004b0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80004b2:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80004b4:	688f      	ldr	r7, [r1, #8]
 80004b6:	fa07 f70a 	lsl.w	r7, r7, sl
 80004ba:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80004bc:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80004be:	00e5      	lsls	r5, r4, #3
 80004c0:	d561      	bpl.n	8000586 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004c2:	f04f 0b00 	mov.w	fp, #0
 80004c6:	f8cd b00c 	str.w	fp, [sp, #12]
 80004ca:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80004ce:	4d39      	ldr	r5, [pc, #228]	; (80005b4 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004d0:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80004d4:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80004d8:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80004dc:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80004e0:	9703      	str	r7, [sp, #12]
 80004e2:	9f03      	ldr	r7, [sp, #12]
 80004e4:	f023 0703 	bic.w	r7, r3, #3
 80004e8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80004ec:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80004f0:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80004f4:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80004f8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80004fc:	f04f 0e0f 	mov.w	lr, #15
 8000500:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000504:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000506:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800050a:	d043      	beq.n	8000594 <HAL_GPIO_Init+0x194>
 800050c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000510:	42a8      	cmp	r0, r5
 8000512:	d041      	beq.n	8000598 <HAL_GPIO_Init+0x198>
 8000514:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000518:	42a8      	cmp	r0, r5
 800051a:	d03f      	beq.n	800059c <HAL_GPIO_Init+0x19c>
 800051c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000520:	42a8      	cmp	r0, r5
 8000522:	d03d      	beq.n	80005a0 <HAL_GPIO_Init+0x1a0>
 8000524:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000528:	42a8      	cmp	r0, r5
 800052a:	d03b      	beq.n	80005a4 <HAL_GPIO_Init+0x1a4>
 800052c:	4548      	cmp	r0, r9
 800052e:	d03b      	beq.n	80005a8 <HAL_GPIO_Init+0x1a8>
 8000530:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000534:	42a8      	cmp	r0, r5
 8000536:	d039      	beq.n	80005ac <HAL_GPIO_Init+0x1ac>
 8000538:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800053c:	42a8      	cmp	r0, r5
 800053e:	bf14      	ite	ne
 8000540:	2508      	movne	r5, #8
 8000542:	2507      	moveq	r5, #7
 8000544:	fa05 f50c 	lsl.w	r5, r5, ip
 8000548:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800054c:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800054e:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000550:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000552:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000556:	bf0c      	ite	eq
 8000558:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800055a:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 800055c:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800055e:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000560:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000564:	bf0c      	ite	eq
 8000566:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000568:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800056a:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800056c:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800056e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000572:	bf0c      	ite	eq
 8000574:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000576:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000578:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800057a:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800057c:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800057e:	bf54      	ite	pl
 8000580:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000582:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000584:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000586:	3301      	adds	r3, #1
 8000588:	2b10      	cmp	r3, #16
 800058a:	f47f af44 	bne.w	8000416 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800058e:	b005      	add	sp, #20
 8000590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000594:	465d      	mov	r5, fp
 8000596:	e7d5      	b.n	8000544 <HAL_GPIO_Init+0x144>
 8000598:	2501      	movs	r5, #1
 800059a:	e7d3      	b.n	8000544 <HAL_GPIO_Init+0x144>
 800059c:	2502      	movs	r5, #2
 800059e:	e7d1      	b.n	8000544 <HAL_GPIO_Init+0x144>
 80005a0:	2503      	movs	r5, #3
 80005a2:	e7cf      	b.n	8000544 <HAL_GPIO_Init+0x144>
 80005a4:	2504      	movs	r5, #4
 80005a6:	e7cd      	b.n	8000544 <HAL_GPIO_Init+0x144>
 80005a8:	2505      	movs	r5, #5
 80005aa:	e7cb      	b.n	8000544 <HAL_GPIO_Init+0x144>
 80005ac:	2506      	movs	r5, #6
 80005ae:	e7c9      	b.n	8000544 <HAL_GPIO_Init+0x144>
 80005b0:	40013c00 	.word	0x40013c00
 80005b4:	40020000 	.word	0x40020000
 80005b8:	40023800 	.word	0x40023800
 80005bc:	40021400 	.word	0x40021400

080005c0 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005c0:	6803      	ldr	r3, [r0, #0]
{
 80005c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80005c4:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005c6:	07d8      	lsls	r0, r3, #31
 80005c8:	d43b      	bmi.n	8000642 <HAL_RCC_OscConfig+0x82>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80005ca:	6823      	ldr	r3, [r4, #0]
 80005cc:	0799      	lsls	r1, r3, #30
 80005ce:	f100 8086 	bmi.w	80006de <HAL_RCC_OscConfig+0x11e>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80005d2:	6823      	ldr	r3, [r4, #0]
 80005d4:	071e      	lsls	r6, r3, #28
 80005d6:	f100 80d1 	bmi.w	800077c <HAL_RCC_OscConfig+0x1bc>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80005da:	6823      	ldr	r3, [r4, #0]
 80005dc:	075d      	lsls	r5, r3, #29
 80005de:	d52a      	bpl.n	8000636 <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	9301      	str	r3, [sp, #4]
 80005e4:	4b8e      	ldr	r3, [pc, #568]	; (8000820 <HAL_RCC_OscConfig+0x260>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80005e6:	4d8f      	ldr	r5, [pc, #572]	; (8000824 <HAL_RCC_OscConfig+0x264>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80005e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80005ee:	641a      	str	r2, [r3, #64]	; 0x40
 80005f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80005fa:	682b      	ldr	r3, [r5, #0]
 80005fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000600:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8000602:	f7ff fe17 	bl	8000234 <HAL_GetTick>
 8000606:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000608:	682b      	ldr	r3, [r5, #0]
 800060a:	05da      	lsls	r2, r3, #23
 800060c:	f140 80d8 	bpl.w	80007c0 <HAL_RCC_OscConfig+0x200>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000610:	68a3      	ldr	r3, [r4, #8]
 8000612:	4d83      	ldr	r5, [pc, #524]	; (8000820 <HAL_RCC_OscConfig+0x260>)
 8000614:	2b01      	cmp	r3, #1
 8000616:	f040 80da 	bne.w	80007ce <HAL_RCC_OscConfig+0x20e>
 800061a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	672b      	str	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000622:	f7ff fe07 	bl	8000234 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000626:	4d7e      	ldr	r5, [pc, #504]	; (8000820 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 8000628:	4606      	mov	r6, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800062a:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800062e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000630:	079b      	lsls	r3, r3, #30
 8000632:	f140 80ed 	bpl.w	8000810 <HAL_RCC_OscConfig+0x250>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000636:	69a2      	ldr	r2, [r4, #24]
 8000638:	2a00      	cmp	r2, #0
 800063a:	f040 80f9 	bne.w	8000830 <HAL_RCC_OscConfig+0x270>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800063e:	2000      	movs	r0, #0
 8000640:	e015      	b.n	800066e <HAL_RCC_OscConfig+0xae>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000642:	4b77      	ldr	r3, [pc, #476]	; (8000820 <HAL_RCC_OscConfig+0x260>)
 8000644:	689a      	ldr	r2, [r3, #8]
 8000646:	f002 020c 	and.w	r2, r2, #12
 800064a:	2a04      	cmp	r2, #4
 800064c:	d007      	beq.n	800065e <HAL_RCC_OscConfig+0x9e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800064e:	689a      	ldr	r2, [r3, #8]
 8000650:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000654:	2a08      	cmp	r2, #8
 8000656:	d10c      	bne.n	8000672 <HAL_RCC_OscConfig+0xb2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000658:	685b      	ldr	r3, [r3, #4]
 800065a:	025a      	lsls	r2, r3, #9
 800065c:	d509      	bpl.n	8000672 <HAL_RCC_OscConfig+0xb2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800065e:	4b70      	ldr	r3, [pc, #448]	; (8000820 <HAL_RCC_OscConfig+0x260>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	039b      	lsls	r3, r3, #14
 8000664:	d5b1      	bpl.n	80005ca <HAL_RCC_OscConfig+0xa>
 8000666:	6863      	ldr	r3, [r4, #4]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d1ae      	bne.n	80005ca <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 800066c:	2001      	movs	r0, #1
}
 800066e:	b003      	add	sp, #12
 8000670:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000672:	6863      	ldr	r3, [r4, #4]
 8000674:	4d6a      	ldr	r5, [pc, #424]	; (8000820 <HAL_RCC_OscConfig+0x260>)
 8000676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800067a:	d111      	bne.n	80006a0 <HAL_RCC_OscConfig+0xe0>
 800067c:	682b      	ldr	r3, [r5, #0]
 800067e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000682:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000684:	f7ff fdd6 	bl	8000234 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000688:	4d65      	ldr	r5, [pc, #404]	; (8000820 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 800068a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800068c:	682b      	ldr	r3, [r5, #0]
 800068e:	039f      	lsls	r7, r3, #14
 8000690:	d49b      	bmi.n	80005ca <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000692:	f7ff fdcf 	bl	8000234 <HAL_GetTick>
 8000696:	1b80      	subs	r0, r0, r6
 8000698:	2864      	cmp	r0, #100	; 0x64
 800069a:	d9f7      	bls.n	800068c <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 800069c:	2003      	movs	r0, #3
 800069e:	e7e6      	b.n	800066e <HAL_RCC_OscConfig+0xae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80006a4:	d104      	bne.n	80006b0 <HAL_RCC_OscConfig+0xf0>
 80006a6:	682b      	ldr	r3, [r5, #0]
 80006a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006ac:	602b      	str	r3, [r5, #0]
 80006ae:	e7e5      	b.n	800067c <HAL_RCC_OscConfig+0xbc>
 80006b0:	682a      	ldr	r2, [r5, #0]
 80006b2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80006b6:	602a      	str	r2, [r5, #0]
 80006b8:	682a      	ldr	r2, [r5, #0]
 80006ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80006be:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d1df      	bne.n	8000684 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 80006c4:	f7ff fdb6 	bl	8000234 <HAL_GetTick>
 80006c8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80006ca:	682b      	ldr	r3, [r5, #0]
 80006cc:	0398      	lsls	r0, r3, #14
 80006ce:	f57f af7c 	bpl.w	80005ca <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006d2:	f7ff fdaf 	bl	8000234 <HAL_GetTick>
 80006d6:	1b80      	subs	r0, r0, r6
 80006d8:	2864      	cmp	r0, #100	; 0x64
 80006da:	d9f6      	bls.n	80006ca <HAL_RCC_OscConfig+0x10a>
 80006dc:	e7de      	b.n	800069c <HAL_RCC_OscConfig+0xdc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80006de:	4b50      	ldr	r3, [pc, #320]	; (8000820 <HAL_RCC_OscConfig+0x260>)
 80006e0:	689a      	ldr	r2, [r3, #8]
 80006e2:	f012 0f0c 	tst.w	r2, #12
 80006e6:	d007      	beq.n	80006f8 <HAL_RCC_OscConfig+0x138>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80006e8:	689a      	ldr	r2, [r3, #8]
 80006ea:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80006ee:	2a08      	cmp	r2, #8
 80006f0:	d116      	bne.n	8000720 <HAL_RCC_OscConfig+0x160>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80006f2:	685b      	ldr	r3, [r3, #4]
 80006f4:	0259      	lsls	r1, r3, #9
 80006f6:	d413      	bmi.n	8000720 <HAL_RCC_OscConfig+0x160>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80006f8:	4b49      	ldr	r3, [pc, #292]	; (8000820 <HAL_RCC_OscConfig+0x260>)
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	0792      	lsls	r2, r2, #30
 80006fe:	d502      	bpl.n	8000706 <HAL_RCC_OscConfig+0x146>
 8000700:	68e2      	ldr	r2, [r4, #12]
 8000702:	2a01      	cmp	r2, #1
 8000704:	d1b2      	bne.n	800066c <HAL_RCC_OscConfig+0xac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000706:	6818      	ldr	r0, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000708:	22f8      	movs	r2, #248	; 0xf8
 800070a:	fa92 f2a2 	rbit	r2, r2
 800070e:	fab2 f182 	clz	r1, r2
 8000712:	6922      	ldr	r2, [r4, #16]
 8000714:	408a      	lsls	r2, r1
 8000716:	f020 01f8 	bic.w	r1, r0, #248	; 0xf8
 800071a:	430a      	orrs	r2, r1
 800071c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800071e:	e758      	b.n	80005d2 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000720:	68e2      	ldr	r2, [r4, #12]
 8000722:	4b41      	ldr	r3, [pc, #260]	; (8000828 <HAL_RCC_OscConfig+0x268>)
 8000724:	b1da      	cbz	r2, 800075e <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_HSI_ENABLE();
 8000726:	2201      	movs	r2, #1
 8000728:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800072a:	f7ff fd83 	bl	8000234 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800072e:	4d3c      	ldr	r5, [pc, #240]	; (8000820 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 8000730:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000732:	682b      	ldr	r3, [r5, #0]
 8000734:	079b      	lsls	r3, r3, #30
 8000736:	d50c      	bpl.n	8000752 <HAL_RCC_OscConfig+0x192>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000738:	6829      	ldr	r1, [r5, #0]
 800073a:	23f8      	movs	r3, #248	; 0xf8
 800073c:	fa93 f3a3 	rbit	r3, r3
 8000740:	fab3 f283 	clz	r2, r3
 8000744:	6923      	ldr	r3, [r4, #16]
 8000746:	4093      	lsls	r3, r2
 8000748:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 800074c:	4313      	orrs	r3, r2
 800074e:	602b      	str	r3, [r5, #0]
 8000750:	e73f      	b.n	80005d2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000752:	f7ff fd6f 	bl	8000234 <HAL_GetTick>
 8000756:	1b80      	subs	r0, r0, r6
 8000758:	2802      	cmp	r0, #2
 800075a:	d9ea      	bls.n	8000732 <HAL_RCC_OscConfig+0x172>
 800075c:	e79e      	b.n	800069c <HAL_RCC_OscConfig+0xdc>
        __HAL_RCC_HSI_DISABLE();
 800075e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000760:	f7ff fd68 	bl	8000234 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000764:	4d2e      	ldr	r5, [pc, #184]	; (8000820 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 8000766:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000768:	682b      	ldr	r3, [r5, #0]
 800076a:	079f      	lsls	r7, r3, #30
 800076c:	f57f af31 	bpl.w	80005d2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000770:	f7ff fd60 	bl	8000234 <HAL_GetTick>
 8000774:	1b80      	subs	r0, r0, r6
 8000776:	2802      	cmp	r0, #2
 8000778:	d9f6      	bls.n	8000768 <HAL_RCC_OscConfig+0x1a8>
 800077a:	e78f      	b.n	800069c <HAL_RCC_OscConfig+0xdc>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800077c:	6962      	ldr	r2, [r4, #20]
 800077e:	4b2b      	ldr	r3, [pc, #172]	; (800082c <HAL_RCC_OscConfig+0x26c>)
 8000780:	b17a      	cbz	r2, 80007a2 <HAL_RCC_OscConfig+0x1e2>
      __HAL_RCC_LSI_ENABLE();
 8000782:	2201      	movs	r2, #1
 8000784:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000786:	f7ff fd55 	bl	8000234 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800078a:	4d25      	ldr	r5, [pc, #148]	; (8000820 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 800078c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800078e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000790:	0798      	lsls	r0, r3, #30
 8000792:	f53f af22 	bmi.w	80005da <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000796:	f7ff fd4d 	bl	8000234 <HAL_GetTick>
 800079a:	1b80      	subs	r0, r0, r6
 800079c:	2802      	cmp	r0, #2
 800079e:	d9f6      	bls.n	800078e <HAL_RCC_OscConfig+0x1ce>
 80007a0:	e77c      	b.n	800069c <HAL_RCC_OscConfig+0xdc>
      __HAL_RCC_LSI_DISABLE();
 80007a2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80007a4:	f7ff fd46 	bl	8000234 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007a8:	4d1d      	ldr	r5, [pc, #116]	; (8000820 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 80007aa:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007ac:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80007ae:	0799      	lsls	r1, r3, #30
 80007b0:	f57f af13 	bpl.w	80005da <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007b4:	f7ff fd3e 	bl	8000234 <HAL_GetTick>
 80007b8:	1b80      	subs	r0, r0, r6
 80007ba:	2802      	cmp	r0, #2
 80007bc:	d9f6      	bls.n	80007ac <HAL_RCC_OscConfig+0x1ec>
 80007be:	e76d      	b.n	800069c <HAL_RCC_OscConfig+0xdc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80007c0:	f7ff fd38 	bl	8000234 <HAL_GetTick>
 80007c4:	1b80      	subs	r0, r0, r6
 80007c6:	2802      	cmp	r0, #2
 80007c8:	f67f af1e 	bls.w	8000608 <HAL_RCC_OscConfig+0x48>
 80007cc:	e766      	b.n	800069c <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007ce:	2b05      	cmp	r3, #5
 80007d0:	d104      	bne.n	80007dc <HAL_RCC_OscConfig+0x21c>
 80007d2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	672b      	str	r3, [r5, #112]	; 0x70
 80007da:	e71e      	b.n	800061a <HAL_RCC_OscConfig+0x5a>
 80007dc:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80007de:	f022 0201 	bic.w	r2, r2, #1
 80007e2:	672a      	str	r2, [r5, #112]	; 0x70
 80007e4:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80007e6:	f022 0204 	bic.w	r2, r2, #4
 80007ea:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	f47f af18 	bne.w	8000622 <HAL_RCC_OscConfig+0x62>
      tickstart = HAL_GetTick();
 80007f2:	f7ff fd1f 	bl	8000234 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007f6:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80007fa:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80007fc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80007fe:	0798      	lsls	r0, r3, #30
 8000800:	f57f af19 	bpl.w	8000636 <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000804:	f7ff fd16 	bl	8000234 <HAL_GetTick>
 8000808:	1b80      	subs	r0, r0, r6
 800080a:	42b8      	cmp	r0, r7
 800080c:	d9f6      	bls.n	80007fc <HAL_RCC_OscConfig+0x23c>
 800080e:	e745      	b.n	800069c <HAL_RCC_OscConfig+0xdc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000810:	f7ff fd10 	bl	8000234 <HAL_GetTick>
 8000814:	1b80      	subs	r0, r0, r6
 8000816:	42b8      	cmp	r0, r7
 8000818:	f67f af09 	bls.w	800062e <HAL_RCC_OscConfig+0x6e>
 800081c:	e73e      	b.n	800069c <HAL_RCC_OscConfig+0xdc>
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800
 8000824:	40007000 	.word	0x40007000
 8000828:	42470000 	.word	0x42470000
 800082c:	42470e80 	.word	0x42470e80
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000830:	4d2b      	ldr	r5, [pc, #172]	; (80008e0 <HAL_RCC_OscConfig+0x320>)
 8000832:	68ab      	ldr	r3, [r5, #8]
 8000834:	f003 030c 	and.w	r3, r3, #12
 8000838:	2b08      	cmp	r3, #8
 800083a:	f43f af17 	beq.w	800066c <HAL_RCC_OscConfig+0xac>
 800083e:	4e29      	ldr	r6, [pc, #164]	; (80008e4 <HAL_RCC_OscConfig+0x324>)
 8000840:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000842:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000844:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000846:	d13e      	bne.n	80008c6 <HAL_RCC_OscConfig+0x306>
        tickstart = HAL_GetTick();
 8000848:	f7ff fcf4 	bl	8000234 <HAL_GetTick>
 800084c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800084e:	682b      	ldr	r3, [r5, #0]
 8000850:	0199      	lsls	r1, r3, #6
 8000852:	d432      	bmi.n	80008ba <HAL_RCC_OscConfig+0x2fa>
 8000854:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8000858:	fa97 f7a7 	rbit	r7, r7
 800085c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000860:	fab7 f787 	clz	r7, r7
 8000864:	fa92 f2a2 	rbit	r2, r2
 8000868:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 800086c:	fab2 f082 	clz	r0, r2
 8000870:	fa91 f1a1 	rbit	r1, r1
 8000874:	6a22      	ldr	r2, [r4, #32]
 8000876:	69e3      	ldr	r3, [r4, #28]
 8000878:	4313      	orrs	r3, r2
 800087a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800087c:	fa02 f707 	lsl.w	r7, r2, r7
 8000880:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000882:	0852      	lsrs	r2, r2, #1
 8000884:	3a01      	subs	r2, #1
 8000886:	4082      	lsls	r2, r0
 8000888:	433b      	orrs	r3, r7
 800088a:	4313      	orrs	r3, r2
 800088c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800088e:	4c14      	ldr	r4, [pc, #80]	; (80008e0 <HAL_RCC_OscConfig+0x320>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000890:	fab1 f181 	clz	r1, r1
 8000894:	fa02 f101 	lsl.w	r1, r2, r1
 8000898:	430b      	orrs	r3, r1
 800089a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800089c:	2301      	movs	r3, #1
 800089e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80008a0:	f7ff fcc8 	bl	8000234 <HAL_GetTick>
 80008a4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80008a6:	6823      	ldr	r3, [r4, #0]
 80008a8:	019a      	lsls	r2, r3, #6
 80008aa:	f53f aec8 	bmi.w	800063e <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008ae:	f7ff fcc1 	bl	8000234 <HAL_GetTick>
 80008b2:	1b40      	subs	r0, r0, r5
 80008b4:	2802      	cmp	r0, #2
 80008b6:	d9f6      	bls.n	80008a6 <HAL_RCC_OscConfig+0x2e6>
 80008b8:	e6f0      	b.n	800069c <HAL_RCC_OscConfig+0xdc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008ba:	f7ff fcbb 	bl	8000234 <HAL_GetTick>
 80008be:	1bc0      	subs	r0, r0, r7
 80008c0:	2802      	cmp	r0, #2
 80008c2:	d9c4      	bls.n	800084e <HAL_RCC_OscConfig+0x28e>
 80008c4:	e6ea      	b.n	800069c <HAL_RCC_OscConfig+0xdc>
        tickstart = HAL_GetTick();
 80008c6:	f7ff fcb5 	bl	8000234 <HAL_GetTick>
 80008ca:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80008cc:	682b      	ldr	r3, [r5, #0]
 80008ce:	019b      	lsls	r3, r3, #6
 80008d0:	f57f aeb5 	bpl.w	800063e <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008d4:	f7ff fcae 	bl	8000234 <HAL_GetTick>
 80008d8:	1b00      	subs	r0, r0, r4
 80008da:	2802      	cmp	r0, #2
 80008dc:	d9f6      	bls.n	80008cc <HAL_RCC_OscConfig+0x30c>
 80008de:	e6dd      	b.n	800069c <HAL_RCC_OscConfig+0xdc>
 80008e0:	40023800 	.word	0x40023800
 80008e4:	42470060 	.word	0x42470060

080008e8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80008e8:	4a19      	ldr	r2, [pc, #100]	; (8000950 <HAL_RCC_GetSysClockFreq+0x68>)
 80008ea:	6893      	ldr	r3, [r2, #8]
 80008ec:	f003 030c 	and.w	r3, r3, #12
 80008f0:	2b04      	cmp	r3, #4
{
 80008f2:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80008f4:	d003      	beq.n	80008fe <HAL_RCC_GetSysClockFreq+0x16>
 80008f6:	2b08      	cmp	r3, #8
 80008f8:	d003      	beq.n	8000902 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80008fa:	4816      	ldr	r0, [pc, #88]	; (8000954 <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80008fc:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 80008fe:	4816      	ldr	r0, [pc, #88]	; (8000958 <HAL_RCC_GetSysClockFreq+0x70>)
 8000900:	bd10      	pop	{r4, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000902:	6851      	ldr	r1, [r2, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000904:	6853      	ldr	r3, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000906:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800090a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800090e:	f647 74c0 	movw	r4, #32704	; 0x7fc0
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000912:	6853      	ldr	r3, [r2, #4]
 8000914:	fa94 f0a4 	rbit	r0, r4
 8000918:	fab0 f080 	clz	r0, r0
 800091c:	ea03 0304 	and.w	r3, r3, r4
 8000920:	fa23 f300 	lsr.w	r3, r3, r0
 8000924:	bf14      	ite	ne
 8000926:	480c      	ldrne	r0, [pc, #48]	; (8000958 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8000928:	480a      	ldreq	r0, [pc, #40]	; (8000954 <HAL_RCC_GetSysClockFreq+0x6c>)
 800092a:	fbb0 f0f1 	udiv	r0, r0, r1
 800092e:	4358      	muls	r0, r3
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8000930:	4b07      	ldr	r3, [pc, #28]	; (8000950 <HAL_RCC_GetSysClockFreq+0x68>)
 8000932:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	fa92 f2a2 	rbit	r2, r2
 800093c:	fab2 f282 	clz	r2, r2
 8000940:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000944:	40d3      	lsrs	r3, r2
 8000946:	3301      	adds	r3, #1
 8000948:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800094a:	fbb0 f0f3 	udiv	r0, r0, r3
 800094e:	bd10      	pop	{r4, pc}
 8000950:	40023800 	.word	0x40023800
 8000954:	00f42400 	.word	0x00f42400
 8000958:	017d7840 	.word	0x017d7840

0800095c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800095c:	4b56      	ldr	r3, [pc, #344]	; (8000ab8 <HAL_RCC_ClockConfig+0x15c>)
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	f002 020f 	and.w	r2, r2, #15
 8000964:	428a      	cmp	r2, r1
{
 8000966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800096a:	4605      	mov	r5, r0
 800096c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800096e:	d330      	bcc.n	80009d2 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000970:	682a      	ldr	r2, [r5, #0]
 8000972:	0794      	lsls	r4, r2, #30
 8000974:	d437      	bmi.n	80009e6 <HAL_RCC_ClockConfig+0x8a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000976:	07d0      	lsls	r0, r2, #31
 8000978:	d43d      	bmi.n	80009f6 <HAL_RCC_ClockConfig+0x9a>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800097a:	4b4f      	ldr	r3, [pc, #316]	; (8000ab8 <HAL_RCC_ClockConfig+0x15c>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	f002 020f 	and.w	r2, r2, #15
 8000982:	4296      	cmp	r6, r2
 8000984:	f0c0 8088 	bcc.w	8000a98 <HAL_RCC_ClockConfig+0x13c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000988:	682a      	ldr	r2, [r5, #0]
 800098a:	0751      	lsls	r1, r2, #29
 800098c:	f100 808c 	bmi.w	8000aa8 <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000990:	0713      	lsls	r3, r2, #28
 8000992:	d507      	bpl.n	80009a4 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000994:	4a49      	ldr	r2, [pc, #292]	; (8000abc <HAL_RCC_ClockConfig+0x160>)
 8000996:	6929      	ldr	r1, [r5, #16]
 8000998:	6893      	ldr	r3, [r2, #8]
 800099a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800099e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80009a2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80009a4:	f7ff ffa0 	bl	80008e8 <HAL_RCC_GetSysClockFreq>
 80009a8:	4b44      	ldr	r3, [pc, #272]	; (8000abc <HAL_RCC_ClockConfig+0x160>)
 80009aa:	22f0      	movs	r2, #240	; 0xf0
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	fa92 f2a2 	rbit	r2, r2
 80009b2:	fab2 f282 	clz	r2, r2
 80009b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80009ba:	40d3      	lsrs	r3, r2
 80009bc:	4a40      	ldr	r2, [pc, #256]	; (8000ac0 <HAL_RCC_ClockConfig+0x164>)
 80009be:	5cd3      	ldrb	r3, [r2, r3]
 80009c0:	40d8      	lsrs	r0, r3
 80009c2:	4b40      	ldr	r3, [pc, #256]	; (8000ac4 <HAL_RCC_ClockConfig+0x168>)
 80009c4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80009c6:	2000      	movs	r0, #0
 80009c8:	f7ff fbfe 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 80009cc:	2000      	movs	r0, #0
}
 80009ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009d2:	b2ca      	uxtb	r2, r1
 80009d4:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f003 030f 	and.w	r3, r3, #15
 80009dc:	4299      	cmp	r1, r3
 80009de:	d0c7      	beq.n	8000970 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80009e0:	2001      	movs	r0, #1
 80009e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80009e6:	4935      	ldr	r1, [pc, #212]	; (8000abc <HAL_RCC_ClockConfig+0x160>)
 80009e8:	68a8      	ldr	r0, [r5, #8]
 80009ea:	688b      	ldr	r3, [r1, #8]
 80009ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80009f0:	4303      	orrs	r3, r0
 80009f2:	608b      	str	r3, [r1, #8]
 80009f4:	e7bf      	b.n	8000976 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009f6:	686a      	ldr	r2, [r5, #4]
 80009f8:	4b30      	ldr	r3, [pc, #192]	; (8000abc <HAL_RCC_ClockConfig+0x160>)
 80009fa:	2a01      	cmp	r2, #1
 80009fc:	d11e      	bne.n	8000a3c <HAL_RCC_ClockConfig+0xe0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a04:	d0ec      	beq.n	80009e0 <HAL_RCC_ClockConfig+0x84>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a06:	4c2d      	ldr	r4, [pc, #180]	; (8000abc <HAL_RCC_ClockConfig+0x160>)
 8000a08:	68a3      	ldr	r3, [r4, #8]
 8000a0a:	f023 0303 	bic.w	r3, r3, #3
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8000a12:	f7ff fc0f 	bl	8000234 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a16:	686b      	ldr	r3, [r5, #4]
 8000a18:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8000a1a:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a1c:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a20:	d116      	bne.n	8000a50 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a22:	68a3      	ldr	r3, [r4, #8]
 8000a24:	f003 030c 	and.w	r3, r3, #12
 8000a28:	2b04      	cmp	r3, #4
 8000a2a:	d0a6      	beq.n	800097a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a2c:	f7ff fc02 	bl	8000234 <HAL_GetTick>
 8000a30:	1bc0      	subs	r0, r0, r7
 8000a32:	4540      	cmp	r0, r8
 8000a34:	d9f5      	bls.n	8000a22 <HAL_RCC_ClockConfig+0xc6>
          return HAL_TIMEOUT;
 8000a36:	2003      	movs	r0, #3
 8000a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000a3c:	1e91      	subs	r1, r2, #2
 8000a3e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a40:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000a42:	d802      	bhi.n	8000a4a <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a44:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000a48:	e7dc      	b.n	8000a04 <HAL_RCC_ClockConfig+0xa8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a4a:	f013 0f02 	tst.w	r3, #2
 8000a4e:	e7d9      	b.n	8000a04 <HAL_RCC_ClockConfig+0xa8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a50:	2b02      	cmp	r3, #2
 8000a52:	d10a      	bne.n	8000a6a <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a54:	68a3      	ldr	r3, [r4, #8]
 8000a56:	f003 030c 	and.w	r3, r3, #12
 8000a5a:	2b08      	cmp	r3, #8
 8000a5c:	d08d      	beq.n	800097a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a5e:	f7ff fbe9 	bl	8000234 <HAL_GetTick>
 8000a62:	1bc0      	subs	r0, r0, r7
 8000a64:	4540      	cmp	r0, r8
 8000a66:	d9f5      	bls.n	8000a54 <HAL_RCC_ClockConfig+0xf8>
 8000a68:	e7e5      	b.n	8000a36 <HAL_RCC_ClockConfig+0xda>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8000a6a:	2b03      	cmp	r3, #3
 8000a6c:	d10f      	bne.n	8000a8e <HAL_RCC_ClockConfig+0x132>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8000a6e:	68a3      	ldr	r3, [r4, #8]
 8000a70:	f003 030c 	and.w	r3, r3, #12
 8000a74:	2b0c      	cmp	r3, #12
 8000a76:	d080      	beq.n	800097a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a78:	f7ff fbdc 	bl	8000234 <HAL_GetTick>
 8000a7c:	1bc0      	subs	r0, r0, r7
 8000a7e:	4540      	cmp	r0, r8
 8000a80:	d9f5      	bls.n	8000a6e <HAL_RCC_ClockConfig+0x112>
 8000a82:	e7d8      	b.n	8000a36 <HAL_RCC_ClockConfig+0xda>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a84:	f7ff fbd6 	bl	8000234 <HAL_GetTick>
 8000a88:	1bc0      	subs	r0, r0, r7
 8000a8a:	4540      	cmp	r0, r8
 8000a8c:	d8d3      	bhi.n	8000a36 <HAL_RCC_ClockConfig+0xda>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a8e:	68a3      	ldr	r3, [r4, #8]
 8000a90:	f013 0f0c 	tst.w	r3, #12
 8000a94:	d1f6      	bne.n	8000a84 <HAL_RCC_ClockConfig+0x128>
 8000a96:	e770      	b.n	800097a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a98:	b2f2      	uxtb	r2, r6
 8000a9a:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f003 030f 	and.w	r3, r3, #15
 8000aa2:	429e      	cmp	r6, r3
 8000aa4:	d19c      	bne.n	80009e0 <HAL_RCC_ClockConfig+0x84>
 8000aa6:	e76f      	b.n	8000988 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000aa8:	4904      	ldr	r1, [pc, #16]	; (8000abc <HAL_RCC_ClockConfig+0x160>)
 8000aaa:	68e8      	ldr	r0, [r5, #12]
 8000aac:	688b      	ldr	r3, [r1, #8]
 8000aae:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000ab2:	4303      	orrs	r3, r0
 8000ab4:	608b      	str	r3, [r1, #8]
 8000ab6:	e76b      	b.n	8000990 <HAL_RCC_ClockConfig+0x34>
 8000ab8:	40023c00 	.word	0x40023c00
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	08000de9 	.word	0x08000de9
 8000ac4:	20000000 	.word	0x20000000

08000ac8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000ac8:	4b01      	ldr	r3, [pc, #4]	; (8000ad0 <HAL_RCC_GetHCLKFreq+0x8>)
 8000aca:	6818      	ldr	r0, [r3, #0]
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	20000000 	.word	0x20000000

08000ad4 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000ad4:	b507      	push	{r0, r1, r2, lr}
  DAC_ChannelConfTypeDef sConfig;

    /**DAC Initialization 
    */
  hdac.Instance = DAC;
 8000ad6:	480c      	ldr	r0, [pc, #48]	; (8000b08 <MX_DAC_Init+0x34>)
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <MX_DAC_Init+0x38>)
 8000ada:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000adc:	f7ff fc1d 	bl	800031a <HAL_DAC_Init>
 8000ae0:	b118      	cbz	r0, 8000aea <MX_DAC_Init+0x16>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000ae2:	213d      	movs	r1, #61	; 0x3d
 8000ae4:	480a      	ldr	r0, [pc, #40]	; (8000b10 <MX_DAC_Init+0x3c>)
 8000ae6:	f000 f8b9 	bl	8000c5c <_Error_Handler>
  }

    /**DAC channel OUT1 config 
    */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000aea:	2200      	movs	r2, #0
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000aec:	4669      	mov	r1, sp
 8000aee:	4806      	ldr	r0, [pc, #24]	; (8000b08 <MX_DAC_Init+0x34>)
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000af0:	9200      	str	r2, [sp, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000af2:	9201      	str	r2, [sp, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000af4:	f7ff fc52 	bl	800039c <HAL_DAC_ConfigChannel>
 8000af8:	b118      	cbz	r0, 8000b02 <MX_DAC_Init+0x2e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000afa:	2146      	movs	r1, #70	; 0x46
 8000afc:	4804      	ldr	r0, [pc, #16]	; (8000b10 <MX_DAC_Init+0x3c>)
 8000afe:	f000 f8ad 	bl	8000c5c <_Error_Handler>
  }

}
 8000b02:	b003      	add	sp, #12
 8000b04:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b08:	20000024 	.word	0x20000024
 8000b0c:	40007400 	.word	0x40007400
 8000b10:	08000ddc 	.word	0x08000ddc

08000b14 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000b14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(dacHandle->Instance==DAC)
 8000b16:	6802      	ldr	r2, [r0, #0]
 8000b18:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <HAL_DAC_MspInit+0x3c>)
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d115      	bne.n	8000b4a <HAL_DAC_MspInit+0x36>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000b1e:	2100      	movs	r1, #0
 8000b20:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8000b24:	9100      	str	r1, [sp, #0]
 8000b26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b28:	480a      	ldr	r0, [pc, #40]	; (8000b54 <HAL_DAC_MspInit+0x40>)
    __HAL_RCC_DAC_CLK_ENABLE();
 8000b2a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000b2e:	641a      	str	r2, [r3, #64]	; 0x40
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	9103      	str	r1, [sp, #12]
    __HAL_RCC_DAC_CLK_ENABLE();
 8000b34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b38:	9300      	str	r3, [sp, #0]
 8000b3a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b3c:	2310      	movs	r3, #16
 8000b3e:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b40:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b42:	2303      	movs	r3, #3
 8000b44:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b46:	f7ff fc5b 	bl	8000400 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000b4a:	b007      	add	sp, #28
 8000b4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b50:	40007400 	.word	0x40007400
 8000b54:	40020000 	.word	0x40020000

08000b58 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000b58:	b082      	sub	sp, #8

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	9301      	str	r3, [sp, #4]
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <MX_GPIO_Init+0x20>)
 8000b60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b62:	f042 0201 	orr.w	r2, r2, #1
 8000b66:	631a      	str	r2, [r3, #48]	; 0x30
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	9301      	str	r3, [sp, #4]
 8000b70:	9b01      	ldr	r3, [sp, #4]

}
 8000b72:	b002      	add	sp, #8
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	40023800 	.word	0x40023800

08000b7c <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000b7c:	b510      	push	{r4, lr}
 8000b7e:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b80:	2300      	movs	r3, #0
 8000b82:	4a21      	ldr	r2, [pc, #132]	; (8000c08 <SystemClock_Config+0x8c>)
 8000b84:	9301      	str	r3, [sp, #4]
 8000b86:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000b88:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000b8c:	6411      	str	r1, [r2, #64]	; 0x40
 8000b8e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000b90:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000b94:	9201      	str	r2, [sp, #4]
 8000b96:	9a01      	ldr	r2, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b98:	4a1c      	ldr	r2, [pc, #112]	; (8000c0c <SystemClock_Config+0x90>)
 8000b9a:	9302      	str	r3, [sp, #8]
 8000b9c:	6811      	ldr	r1, [r2, #0]
 8000b9e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000ba2:	6011      	str	r1, [r2, #0]
 8000ba4:	6812      	ldr	r2, [r2, #0]
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ba6:	930e      	str	r3, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ba8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000bac:	9202      	str	r2, [sp, #8]
 8000bae:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bb0:	2202      	movs	r2, #2
 8000bb2:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb8:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000bba:	2210      	movs	r2, #16
 8000bbc:	920c      	str	r2, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bbe:	f7ff fcff 	bl	80005c0 <HAL_RCC_OscConfig>
 8000bc2:	4601      	mov	r1, r0
 8000bc4:	b100      	cbz	r0, 8000bc8 <SystemClock_Config+0x4c>
 8000bc6:	e7fe      	b.n	8000bc6 <SystemClock_Config+0x4a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc8:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bca:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bcc:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bce:	9006      	str	r0, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bd0:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bd2:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd4:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bd6:	f7ff fec1 	bl	800095c <HAL_RCC_ClockConfig>
 8000bda:	4604      	mov	r4, r0
 8000bdc:	b100      	cbz	r0, 8000be0 <SystemClock_Config+0x64>
 8000bde:	e7fe      	b.n	8000bde <SystemClock_Config+0x62>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000be0:	f7ff ff72 	bl	8000ac8 <HAL_RCC_GetHCLKFreq>
 8000be4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be8:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bec:	f7ff fb6e 	bl	80002cc <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000bf0:	2004      	movs	r0, #4
 8000bf2:	f7ff fb81 	bl	80002f8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000bf6:	4622      	mov	r2, r4
 8000bf8:	4621      	mov	r1, r4
 8000bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8000bfe:	f7ff fb31 	bl	8000264 <HAL_NVIC_SetPriority>
}
 8000c02:	b014      	add	sp, #80	; 0x50
 8000c04:	bd10      	pop	{r4, pc}
 8000c06:	bf00      	nop
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40007000 	.word	0x40007000

08000c10 <main>:
{
 8000c10:	b570      	push	{r4, r5, r6, lr}
  HAL_Init();
 8000c12:	f7ff faed 	bl	80001f0 <HAL_Init>
  SystemClock_Config();
 8000c16:	f7ff ffb1 	bl	8000b7c <SystemClock_Config>
  MX_GPIO_Init();
 8000c1a:	f7ff ff9d 	bl	8000b58 <MX_GPIO_Init>
  MX_DAC_Init();
 8000c1e:	f7ff ff59 	bl	8000ad4 <MX_DAC_Init>
   HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
 8000c22:	2100      	movs	r1, #0
 8000c24:	480c      	ldr	r0, [pc, #48]	; (8000c58 <main+0x48>)
  HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R,conta);
 8000c26:	4d0c      	ldr	r5, [pc, #48]	; (8000c58 <main+0x48>)
   HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
 8000c28:	f7ff fb8a 	bl	8000340 <HAL_DAC_Start>
   HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R,0);
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	461a      	mov	r2, r3
 8000c30:	4619      	mov	r1, r3
 8000c32:	4809      	ldr	r0, [pc, #36]	; (8000c58 <main+0x48>)
 8000c34:	f7ff fbd2 	bl	80003dc <HAL_DAC_SetValue>
  uint16_t conta=0;
 8000c38:	2400      	movs	r4, #0
  if(conta==4095){conta=0;}
 8000c3a:	f640 76ff 	movw	r6, #4095	; 0xfff
 8000c3e:	42b4      	cmp	r4, r6
  else{conta++;}
 8000c40:	bf1a      	itte	ne
 8000c42:	3401      	addne	r4, #1
 8000c44:	b2a4      	uxthne	r4, r4
  if(conta==4095){conta=0;}
 8000c46:	2400      	moveq	r4, #0
  HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R,conta);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	4623      	mov	r3, r4
 8000c4c:	4611      	mov	r1, r2
 8000c4e:	4628      	mov	r0, r5
 8000c50:	f7ff fbc4 	bl	80003dc <HAL_DAC_SetValue>
  if(conta==4095){conta=0;}
 8000c54:	e7f3      	b.n	8000c3e <main+0x2e>
 8000c56:	bf00      	nop
 8000c58:	20000024 	.word	0x20000024

08000c5c <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8000c5c:	e7fe      	b.n	8000c5c <_Error_Handler>

08000c5e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c5e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c60:	2003      	movs	r0, #3
 8000c62:	f7ff faed 	bl	8000240 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000c66:	2200      	movs	r2, #0
 8000c68:	4611      	mov	r1, r2
 8000c6a:	f06f 000b 	mvn.w	r0, #11
 8000c6e:	f7ff faf9 	bl	8000264 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	4611      	mov	r1, r2
 8000c76:	f06f 000a 	mvn.w	r0, #10
 8000c7a:	f7ff faf3 	bl	8000264 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	4611      	mov	r1, r2
 8000c82:	f06f 0009 	mvn.w	r0, #9
 8000c86:	f7ff faed 	bl	8000264 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	4611      	mov	r1, r2
 8000c8e:	f06f 0004 	mvn.w	r0, #4
 8000c92:	f7ff fae7 	bl	8000264 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	4611      	mov	r1, r2
 8000c9a:	f06f 0003 	mvn.w	r0, #3
 8000c9e:	f7ff fae1 	bl	8000264 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	4611      	mov	r1, r2
 8000ca6:	f06f 0001 	mvn.w	r0, #1
 8000caa:	f7ff fadb 	bl	8000264 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	4611      	mov	r1, r2
 8000cb2:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000cba:	f7ff bad3 	b.w	8000264 <HAL_NVIC_SetPriority>

08000cbe <NMI_Handler>:
 8000cbe:	4770      	bx	lr

08000cc0 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8000cc0:	e7fe      	b.n	8000cc0 <HardFault_Handler>

08000cc2 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000cc2:	e7fe      	b.n	8000cc2 <MemManage_Handler>

08000cc4 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8000cc4:	e7fe      	b.n	8000cc4 <BusFault_Handler>

08000cc6 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8000cc6:	e7fe      	b.n	8000cc6 <UsageFault_Handler>

08000cc8 <SVC_Handler>:
 8000cc8:	4770      	bx	lr

08000cca <DebugMon_Handler>:
 8000cca:	4770      	bx	lr

08000ccc <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8000ccc:	4770      	bx	lr

08000cce <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000cce:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd0:	f7ff faa8 	bl	8000224 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8000cd8:	f7ff bb1b 	b.w	8000312 <HAL_SYSTICK_IRQHandler>

08000cdc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cdc:	490f      	ldr	r1, [pc, #60]	; (8000d1c <SystemInit+0x40>)
 8000cde:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000ce2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000cea:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <SystemInit+0x44>)
 8000cec:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000cee:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8000cf0:	f042 0201 	orr.w	r2, r2, #1
 8000cf4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000cf6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000cfe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d02:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000d04:	4a07      	ldr	r2, [pc, #28]	; (8000d24 <SystemInit+0x48>)
 8000d06:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d0e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000d10:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d16:	608b      	str	r3, [r1, #8]
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000ed00 	.word	0xe000ed00
 8000d20:	40023800 	.word	0x40023800
 8000d24:	24003010 	.word	0x24003010

08000d28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d60 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d2e:	e003      	b.n	8000d38 <LoopCopyDataInit>

08000d30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d36:	3104      	adds	r1, #4

08000d38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d38:	480b      	ldr	r0, [pc, #44]	; (8000d68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d40:	d3f6      	bcc.n	8000d30 <CopyDataInit>
  ldr  r2, =_sbss
 8000d42:	4a0b      	ldr	r2, [pc, #44]	; (8000d70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d44:	e002      	b.n	8000d4c <LoopFillZerobss>

08000d46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d48:	f842 3b04 	str.w	r3, [r2], #4

08000d4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d4c:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d50:	d3f9      	bcc.n	8000d46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d52:	f7ff ffc3 	bl	8000cdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d56:	f000 f811 	bl	8000d7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d5a:	f7ff ff59 	bl	8000c10 <main>
  bx  lr    
 8000d5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d60:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d64:	08000e04 	.word	0x08000e04
  ldr  r0, =_sdata
 8000d68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d6c:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8000d70:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8000d74:	20000038 	.word	0x20000038

08000d78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d78:	e7fe      	b.n	8000d78 <ADC_IRQHandler>
	...

08000d7c <__libc_init_array>:
 8000d7c:	b570      	push	{r4, r5, r6, lr}
 8000d7e:	4e0d      	ldr	r6, [pc, #52]	; (8000db4 <__libc_init_array+0x38>)
 8000d80:	4c0d      	ldr	r4, [pc, #52]	; (8000db8 <__libc_init_array+0x3c>)
 8000d82:	1ba4      	subs	r4, r4, r6
 8000d84:	10a4      	asrs	r4, r4, #2
 8000d86:	2500      	movs	r5, #0
 8000d88:	42a5      	cmp	r5, r4
 8000d8a:	d109      	bne.n	8000da0 <__libc_init_array+0x24>
 8000d8c:	4e0b      	ldr	r6, [pc, #44]	; (8000dbc <__libc_init_array+0x40>)
 8000d8e:	4c0c      	ldr	r4, [pc, #48]	; (8000dc0 <__libc_init_array+0x44>)
 8000d90:	f000 f818 	bl	8000dc4 <_init>
 8000d94:	1ba4      	subs	r4, r4, r6
 8000d96:	10a4      	asrs	r4, r4, #2
 8000d98:	2500      	movs	r5, #0
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d105      	bne.n	8000daa <__libc_init_array+0x2e>
 8000d9e:	bd70      	pop	{r4, r5, r6, pc}
 8000da0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000da4:	4798      	blx	r3
 8000da6:	3501      	adds	r5, #1
 8000da8:	e7ee      	b.n	8000d88 <__libc_init_array+0xc>
 8000daa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000dae:	4798      	blx	r3
 8000db0:	3501      	adds	r5, #1
 8000db2:	e7f2      	b.n	8000d9a <__libc_init_array+0x1e>
 8000db4:	08000dfc 	.word	0x08000dfc
 8000db8:	08000dfc 	.word	0x08000dfc
 8000dbc:	08000dfc 	.word	0x08000dfc
 8000dc0:	08000e00 	.word	0x08000e00

08000dc4 <_init>:
 8000dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dc6:	bf00      	nop
 8000dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dca:	bc08      	pop	{r3}
 8000dcc:	469e      	mov	lr, r3
 8000dce:	4770      	bx	lr

08000dd0 <_fini>:
 8000dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dd2:	bf00      	nop
 8000dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dd6:	bc08      	pop	{r3}
 8000dd8:	469e      	mov	lr, r3
 8000dda:	4770      	bx	lr
