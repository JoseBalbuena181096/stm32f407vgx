
C:\Users\LENOVO\Documents\USARServo\Debug\USARServo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025d8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08002760  08002760  00012760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080027f8  080027f8  000127f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080027fc  080027fc  000127fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000508  20000000  08002800  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020508  2**0
                  CONTENTS
  7 .bss          000000e4  20000508  20000508  00020508  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200005ec  200005ec  00020508  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020508  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012f0b  00000000  00000000  00020538  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000025ec  00000000  00000000  00033443  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005c6c  00000000  00000000  00035a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000860  00000000  00000000  0003b6a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a98  00000000  00000000  0003bf00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004cec  00000000  00000000  0003c998  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003621  00000000  00000000  00041684  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00044ca5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001fc0  00000000  00000000  00044d24  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         0000009c  00000000  00000000  00046ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      0000014d  00000000  00000000  00046d80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000508 	.word	0x20000508
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002748 	.word	0x08002748

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000050c 	.word	0x2000050c
 80001c4:	08002748 	.word	0x08002748

080001c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80001ca:	4b08      	ldr	r3, [pc, #32]	; (80001ec <HAL_InitTick+0x24>)
{
 80001cc:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80001ce:	6818      	ldr	r0, [r3, #0]
 80001d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80001d8:	f000 f878 	bl	80002cc <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001dc:	2200      	movs	r2, #0
 80001de:	4621      	mov	r1, r4
 80001e0:	f04f 30ff 	mov.w	r0, #4294967295
 80001e4:	f000 f83e 	bl	8000264 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80001e8:	2000      	movs	r0, #0
 80001ea:	bd10      	pop	{r4, pc}
 80001ec:	20000000 	.word	0x20000000

080001f0 <HAL_Init>:
{
 80001f0:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80001f2:	4b0b      	ldr	r3, [pc, #44]	; (8000220 <HAL_Init+0x30>)
 80001f4:	681a      	ldr	r2, [r3, #0]
 80001f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80001fa:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80001fc:	681a      	ldr	r2, [r3, #0]
 80001fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000202:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000204:	681a      	ldr	r2, [r3, #0]
 8000206:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800020a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800020c:	2003      	movs	r0, #3
 800020e:	f000 f817 	bl	8000240 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000212:	2000      	movs	r0, #0
 8000214:	f7ff ffd8 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 8000218:	f001 f889 	bl	800132e <HAL_MspInit>
}
 800021c:	2000      	movs	r0, #0
 800021e:	bd08      	pop	{r3, pc}
 8000220:	40023c00 	.word	0x40023c00

08000224 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000224:	4a02      	ldr	r2, [pc, #8]	; (8000230 <HAL_IncTick+0xc>)
 8000226:	6813      	ldr	r3, [r2, #0]
 8000228:	3301      	adds	r3, #1
 800022a:	6013      	str	r3, [r2, #0]
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	2000055c 	.word	0x2000055c

08000234 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000234:	4b01      	ldr	r3, [pc, #4]	; (800023c <HAL_GetTick+0x8>)
 8000236:	6818      	ldr	r0, [r3, #0]
}
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	2000055c 	.word	0x2000055c

08000240 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000240:	4a07      	ldr	r2, [pc, #28]	; (8000260 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000242:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000244:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000248:	041b      	lsls	r3, r3, #16
 800024a:	0c1b      	lsrs	r3, r3, #16
 800024c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000250:	0200      	lsls	r0, r0, #8
 8000252:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000256:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800025a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800025c:	60d3      	str	r3, [r2, #12]
 800025e:	4770      	bx	lr
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000266:	b530      	push	{r4, r5, lr}
 8000268:	68dc      	ldr	r4, [r3, #12]
 800026a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800026e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000272:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000274:	2b04      	cmp	r3, #4
 8000276:	bf28      	it	cs
 8000278:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800027a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800027c:	f04f 0501 	mov.w	r5, #1
 8000280:	fa05 f303 	lsl.w	r3, r5, r3
 8000284:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000288:	bf8c      	ite	hi
 800028a:	3c03      	subhi	r4, #3
 800028c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800028e:	4019      	ands	r1, r3
 8000290:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000292:	fa05 f404 	lsl.w	r4, r5, r4
 8000296:	3c01      	subs	r4, #1
 8000298:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800029a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800029c:	ea42 0201 	orr.w	r2, r2, r1
 80002a0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a4:	bfaf      	iteee	ge
 80002a6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002aa:	f000 000f 	andlt.w	r0, r0, #15
 80002ae:	4b06      	ldrlt	r3, [pc, #24]	; (80002c8 <HAL_NVIC_SetPriority+0x64>)
 80002b0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b2:	bfa5      	ittet	ge
 80002b4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80002b8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ba:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002bc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002c0:	bd30      	pop	{r4, r5, pc}
 80002c2:	bf00      	nop
 80002c4:	e000ed00 	.word	0xe000ed00
 80002c8:	e000ed14 	.word	0xe000ed14

080002cc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002cc:	3801      	subs	r0, #1
 80002ce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002d2:	d20a      	bcs.n	80002ea <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002d4:	4b06      	ldr	r3, [pc, #24]	; (80002f0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d6:	4a07      	ldr	r2, [pc, #28]	; (80002f4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002d8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002da:	21f0      	movs	r1, #240	; 0xf0
 80002dc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002e0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002e2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002e4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002ea:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	e000e010 	.word	0xe000e010
 80002f4:	e000ed00 	.word	0xe000ed00

080002f8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80002f8:	4b04      	ldr	r3, [pc, #16]	; (800030c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002fa:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002fc:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002fe:	bf0c      	ite	eq
 8000300:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000304:	f022 0204 	bicne.w	r2, r2, #4
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	4770      	bx	lr
 800030c:	e000e010 	.word	0xe000e010

08000310 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000310:	4770      	bx	lr

08000312 <HAL_SYSTICK_IRQHandler>:
{
 8000312:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000314:	f7ff fffc 	bl	8000310 <HAL_SYSTICK_Callback>
 8000318:	bd08      	pop	{r3, pc}
	...

0800031c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800031c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000320:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000322:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000324:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80004d4 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000328:	4a68      	ldr	r2, [pc, #416]	; (80004cc <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800032a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80004d8 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800032e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000330:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000332:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000336:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000338:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800033c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000340:	45b6      	cmp	lr, r6
 8000342:	f040 80ae 	bne.w	80004a2 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000346:	684c      	ldr	r4, [r1, #4]
 8000348:	f024 0710 	bic.w	r7, r4, #16
 800034c:	2f02      	cmp	r7, #2
 800034e:	d116      	bne.n	800037e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000350:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000354:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000358:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800035c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000360:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000364:	f04f 0c0f 	mov.w	ip, #15
 8000368:	fa0c fc0b 	lsl.w	ip, ip, fp
 800036c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000370:	690d      	ldr	r5, [r1, #16]
 8000372:	fa05 f50b 	lsl.w	r5, r5, fp
 8000376:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800037a:	f8ca 5020 	str.w	r5, [sl, #32]
 800037e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000382:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000384:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000388:	fa05 f50a 	lsl.w	r5, r5, sl
 800038c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800038e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000392:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000396:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800039a:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800039c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003a0:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80003a2:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003a6:	d811      	bhi.n	80003cc <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80003a8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003aa:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80003ae:	68cf      	ldr	r7, [r1, #12]
 80003b0:	fa07 fc0a 	lsl.w	ip, r7, sl
 80003b4:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80003b8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80003ba:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80003bc:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003c0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80003c4:	409f      	lsls	r7, r3
 80003c6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80003ca:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80003cc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80003ce:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80003d0:	688f      	ldr	r7, [r1, #8]
 80003d2:	fa07 f70a 	lsl.w	r7, r7, sl
 80003d6:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80003d8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003da:	00e5      	lsls	r5, r4, #3
 80003dc:	d561      	bpl.n	80004a2 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003de:	f04f 0b00 	mov.w	fp, #0
 80003e2:	f8cd b00c 	str.w	fp, [sp, #12]
 80003e6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80003ea:	4d39      	ldr	r5, [pc, #228]	; (80004d0 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003ec:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80003f0:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80003f4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80003f8:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80003fc:	9703      	str	r7, [sp, #12]
 80003fe:	9f03      	ldr	r7, [sp, #12]
 8000400:	f023 0703 	bic.w	r7, r3, #3
 8000404:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000408:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800040c:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000410:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000414:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000418:	f04f 0e0f 	mov.w	lr, #15
 800041c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000420:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000422:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000426:	d043      	beq.n	80004b0 <HAL_GPIO_Init+0x194>
 8000428:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800042c:	42a8      	cmp	r0, r5
 800042e:	d041      	beq.n	80004b4 <HAL_GPIO_Init+0x198>
 8000430:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000434:	42a8      	cmp	r0, r5
 8000436:	d03f      	beq.n	80004b8 <HAL_GPIO_Init+0x19c>
 8000438:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800043c:	42a8      	cmp	r0, r5
 800043e:	d03d      	beq.n	80004bc <HAL_GPIO_Init+0x1a0>
 8000440:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000444:	42a8      	cmp	r0, r5
 8000446:	d03b      	beq.n	80004c0 <HAL_GPIO_Init+0x1a4>
 8000448:	4548      	cmp	r0, r9
 800044a:	d03b      	beq.n	80004c4 <HAL_GPIO_Init+0x1a8>
 800044c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000450:	42a8      	cmp	r0, r5
 8000452:	d039      	beq.n	80004c8 <HAL_GPIO_Init+0x1ac>
 8000454:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000458:	42a8      	cmp	r0, r5
 800045a:	bf14      	ite	ne
 800045c:	2508      	movne	r5, #8
 800045e:	2507      	moveq	r5, #7
 8000460:	fa05 f50c 	lsl.w	r5, r5, ip
 8000464:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000468:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800046a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800046c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800046e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000472:	bf0c      	ite	eq
 8000474:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000476:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000478:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800047a:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800047c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000480:	bf0c      	ite	eq
 8000482:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000484:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000486:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000488:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800048a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800048e:	bf0c      	ite	eq
 8000490:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000492:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000494:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000496:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000498:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800049a:	bf54      	ite	pl
 800049c:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800049e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80004a0:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80004a2:	3301      	adds	r3, #1
 80004a4:	2b10      	cmp	r3, #16
 80004a6:	f47f af44 	bne.w	8000332 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80004aa:	b005      	add	sp, #20
 80004ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80004b0:	465d      	mov	r5, fp
 80004b2:	e7d5      	b.n	8000460 <HAL_GPIO_Init+0x144>
 80004b4:	2501      	movs	r5, #1
 80004b6:	e7d3      	b.n	8000460 <HAL_GPIO_Init+0x144>
 80004b8:	2502      	movs	r5, #2
 80004ba:	e7d1      	b.n	8000460 <HAL_GPIO_Init+0x144>
 80004bc:	2503      	movs	r5, #3
 80004be:	e7cf      	b.n	8000460 <HAL_GPIO_Init+0x144>
 80004c0:	2504      	movs	r5, #4
 80004c2:	e7cd      	b.n	8000460 <HAL_GPIO_Init+0x144>
 80004c4:	2505      	movs	r5, #5
 80004c6:	e7cb      	b.n	8000460 <HAL_GPIO_Init+0x144>
 80004c8:	2506      	movs	r5, #6
 80004ca:	e7c9      	b.n	8000460 <HAL_GPIO_Init+0x144>
 80004cc:	40013c00 	.word	0x40013c00
 80004d0:	40020000 	.word	0x40020000
 80004d4:	40023800 	.word	0x40023800
 80004d8:	40021400 	.word	0x40021400

080004dc <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004dc:	6803      	ldr	r3, [r0, #0]
{
 80004de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80004e0:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004e2:	07d8      	lsls	r0, r3, #31
 80004e4:	d43b      	bmi.n	800055e <HAL_RCC_OscConfig+0x82>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004e6:	6823      	ldr	r3, [r4, #0]
 80004e8:	0799      	lsls	r1, r3, #30
 80004ea:	f100 8086 	bmi.w	80005fa <HAL_RCC_OscConfig+0x11e>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004ee:	6823      	ldr	r3, [r4, #0]
 80004f0:	071e      	lsls	r6, r3, #28
 80004f2:	f100 80d1 	bmi.w	8000698 <HAL_RCC_OscConfig+0x1bc>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004f6:	6823      	ldr	r3, [r4, #0]
 80004f8:	075d      	lsls	r5, r3, #29
 80004fa:	d52a      	bpl.n	8000552 <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80004fc:	2300      	movs	r3, #0
 80004fe:	9301      	str	r3, [sp, #4]
 8000500:	4b8e      	ldr	r3, [pc, #568]	; (800073c <HAL_RCC_OscConfig+0x260>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000502:	4d8f      	ldr	r5, [pc, #572]	; (8000740 <HAL_RCC_OscConfig+0x264>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8000504:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000506:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800050a:	641a      	str	r2, [r3, #64]	; 0x40
 800050c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800050e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000512:	9301      	str	r3, [sp, #4]
 8000514:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8000516:	682b      	ldr	r3, [r5, #0]
 8000518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800051c:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 800051e:	f7ff fe89 	bl	8000234 <HAL_GetTick>
 8000522:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000524:	682b      	ldr	r3, [r5, #0]
 8000526:	05da      	lsls	r2, r3, #23
 8000528:	f140 80d8 	bpl.w	80006dc <HAL_RCC_OscConfig+0x200>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800052c:	68a3      	ldr	r3, [r4, #8]
 800052e:	4d83      	ldr	r5, [pc, #524]	; (800073c <HAL_RCC_OscConfig+0x260>)
 8000530:	2b01      	cmp	r3, #1
 8000532:	f040 80da 	bne.w	80006ea <HAL_RCC_OscConfig+0x20e>
 8000536:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000538:	f043 0301 	orr.w	r3, r3, #1
 800053c:	672b      	str	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800053e:	f7ff fe79 	bl	8000234 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000542:	4d7e      	ldr	r5, [pc, #504]	; (800073c <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 8000544:	4606      	mov	r6, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000546:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800054a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800054c:	079b      	lsls	r3, r3, #30
 800054e:	f140 80ed 	bpl.w	800072c <HAL_RCC_OscConfig+0x250>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000552:	69a2      	ldr	r2, [r4, #24]
 8000554:	2a00      	cmp	r2, #0
 8000556:	f040 80f9 	bne.w	800074c <HAL_RCC_OscConfig+0x270>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800055a:	2000      	movs	r0, #0
 800055c:	e015      	b.n	800058a <HAL_RCC_OscConfig+0xae>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800055e:	4b77      	ldr	r3, [pc, #476]	; (800073c <HAL_RCC_OscConfig+0x260>)
 8000560:	689a      	ldr	r2, [r3, #8]
 8000562:	f002 020c 	and.w	r2, r2, #12
 8000566:	2a04      	cmp	r2, #4
 8000568:	d007      	beq.n	800057a <HAL_RCC_OscConfig+0x9e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800056a:	689a      	ldr	r2, [r3, #8]
 800056c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000570:	2a08      	cmp	r2, #8
 8000572:	d10c      	bne.n	800058e <HAL_RCC_OscConfig+0xb2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	025a      	lsls	r2, r3, #9
 8000578:	d509      	bpl.n	800058e <HAL_RCC_OscConfig+0xb2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800057a:	4b70      	ldr	r3, [pc, #448]	; (800073c <HAL_RCC_OscConfig+0x260>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	039b      	lsls	r3, r3, #14
 8000580:	d5b1      	bpl.n	80004e6 <HAL_RCC_OscConfig+0xa>
 8000582:	6863      	ldr	r3, [r4, #4]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d1ae      	bne.n	80004e6 <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 8000588:	2001      	movs	r0, #1
}
 800058a:	b003      	add	sp, #12
 800058c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800058e:	6863      	ldr	r3, [r4, #4]
 8000590:	4d6a      	ldr	r5, [pc, #424]	; (800073c <HAL_RCC_OscConfig+0x260>)
 8000592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000596:	d111      	bne.n	80005bc <HAL_RCC_OscConfig+0xe0>
 8000598:	682b      	ldr	r3, [r5, #0]
 800059a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800059e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80005a0:	f7ff fe48 	bl	8000234 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005a4:	4d65      	ldr	r5, [pc, #404]	; (800073c <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 80005a6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005a8:	682b      	ldr	r3, [r5, #0]
 80005aa:	039f      	lsls	r7, r3, #14
 80005ac:	d49b      	bmi.n	80004e6 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005ae:	f7ff fe41 	bl	8000234 <HAL_GetTick>
 80005b2:	1b80      	subs	r0, r0, r6
 80005b4:	2864      	cmp	r0, #100	; 0x64
 80005b6:	d9f7      	bls.n	80005a8 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 80005b8:	2003      	movs	r0, #3
 80005ba:	e7e6      	b.n	800058a <HAL_RCC_OscConfig+0xae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80005c0:	d104      	bne.n	80005cc <HAL_RCC_OscConfig+0xf0>
 80005c2:	682b      	ldr	r3, [r5, #0]
 80005c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005c8:	602b      	str	r3, [r5, #0]
 80005ca:	e7e5      	b.n	8000598 <HAL_RCC_OscConfig+0xbc>
 80005cc:	682a      	ldr	r2, [r5, #0]
 80005ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80005d2:	602a      	str	r2, [r5, #0]
 80005d4:	682a      	ldr	r2, [r5, #0]
 80005d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80005da:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d1df      	bne.n	80005a0 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 80005e0:	f7ff fe28 	bl	8000234 <HAL_GetTick>
 80005e4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005e6:	682b      	ldr	r3, [r5, #0]
 80005e8:	0398      	lsls	r0, r3, #14
 80005ea:	f57f af7c 	bpl.w	80004e6 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005ee:	f7ff fe21 	bl	8000234 <HAL_GetTick>
 80005f2:	1b80      	subs	r0, r0, r6
 80005f4:	2864      	cmp	r0, #100	; 0x64
 80005f6:	d9f6      	bls.n	80005e6 <HAL_RCC_OscConfig+0x10a>
 80005f8:	e7de      	b.n	80005b8 <HAL_RCC_OscConfig+0xdc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80005fa:	4b50      	ldr	r3, [pc, #320]	; (800073c <HAL_RCC_OscConfig+0x260>)
 80005fc:	689a      	ldr	r2, [r3, #8]
 80005fe:	f012 0f0c 	tst.w	r2, #12
 8000602:	d007      	beq.n	8000614 <HAL_RCC_OscConfig+0x138>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000604:	689a      	ldr	r2, [r3, #8]
 8000606:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800060a:	2a08      	cmp	r2, #8
 800060c:	d116      	bne.n	800063c <HAL_RCC_OscConfig+0x160>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	0259      	lsls	r1, r3, #9
 8000612:	d413      	bmi.n	800063c <HAL_RCC_OscConfig+0x160>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000614:	4b49      	ldr	r3, [pc, #292]	; (800073c <HAL_RCC_OscConfig+0x260>)
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	0792      	lsls	r2, r2, #30
 800061a:	d502      	bpl.n	8000622 <HAL_RCC_OscConfig+0x146>
 800061c:	68e2      	ldr	r2, [r4, #12]
 800061e:	2a01      	cmp	r2, #1
 8000620:	d1b2      	bne.n	8000588 <HAL_RCC_OscConfig+0xac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000622:	6818      	ldr	r0, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000624:	22f8      	movs	r2, #248	; 0xf8
 8000626:	fa92 f2a2 	rbit	r2, r2
 800062a:	fab2 f182 	clz	r1, r2
 800062e:	6922      	ldr	r2, [r4, #16]
 8000630:	408a      	lsls	r2, r1
 8000632:	f020 01f8 	bic.w	r1, r0, #248	; 0xf8
 8000636:	430a      	orrs	r2, r1
 8000638:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800063a:	e758      	b.n	80004ee <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800063c:	68e2      	ldr	r2, [r4, #12]
 800063e:	4b41      	ldr	r3, [pc, #260]	; (8000744 <HAL_RCC_OscConfig+0x268>)
 8000640:	b1da      	cbz	r2, 800067a <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_HSI_ENABLE();
 8000642:	2201      	movs	r2, #1
 8000644:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000646:	f7ff fdf5 	bl	8000234 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800064a:	4d3c      	ldr	r5, [pc, #240]	; (800073c <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 800064c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800064e:	682b      	ldr	r3, [r5, #0]
 8000650:	079b      	lsls	r3, r3, #30
 8000652:	d50c      	bpl.n	800066e <HAL_RCC_OscConfig+0x192>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000654:	6829      	ldr	r1, [r5, #0]
 8000656:	23f8      	movs	r3, #248	; 0xf8
 8000658:	fa93 f3a3 	rbit	r3, r3
 800065c:	fab3 f283 	clz	r2, r3
 8000660:	6923      	ldr	r3, [r4, #16]
 8000662:	4093      	lsls	r3, r2
 8000664:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000668:	4313      	orrs	r3, r2
 800066a:	602b      	str	r3, [r5, #0]
 800066c:	e73f      	b.n	80004ee <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800066e:	f7ff fde1 	bl	8000234 <HAL_GetTick>
 8000672:	1b80      	subs	r0, r0, r6
 8000674:	2802      	cmp	r0, #2
 8000676:	d9ea      	bls.n	800064e <HAL_RCC_OscConfig+0x172>
 8000678:	e79e      	b.n	80005b8 <HAL_RCC_OscConfig+0xdc>
        __HAL_RCC_HSI_DISABLE();
 800067a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800067c:	f7ff fdda 	bl	8000234 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000680:	4d2e      	ldr	r5, [pc, #184]	; (800073c <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 8000682:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000684:	682b      	ldr	r3, [r5, #0]
 8000686:	079f      	lsls	r7, r3, #30
 8000688:	f57f af31 	bpl.w	80004ee <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800068c:	f7ff fdd2 	bl	8000234 <HAL_GetTick>
 8000690:	1b80      	subs	r0, r0, r6
 8000692:	2802      	cmp	r0, #2
 8000694:	d9f6      	bls.n	8000684 <HAL_RCC_OscConfig+0x1a8>
 8000696:	e78f      	b.n	80005b8 <HAL_RCC_OscConfig+0xdc>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000698:	6962      	ldr	r2, [r4, #20]
 800069a:	4b2b      	ldr	r3, [pc, #172]	; (8000748 <HAL_RCC_OscConfig+0x26c>)
 800069c:	b17a      	cbz	r2, 80006be <HAL_RCC_OscConfig+0x1e2>
      __HAL_RCC_LSI_ENABLE();
 800069e:	2201      	movs	r2, #1
 80006a0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80006a2:	f7ff fdc7 	bl	8000234 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006a6:	4d25      	ldr	r5, [pc, #148]	; (800073c <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 80006a8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006aa:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80006ac:	0798      	lsls	r0, r3, #30
 80006ae:	f53f af22 	bmi.w	80004f6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006b2:	f7ff fdbf 	bl	8000234 <HAL_GetTick>
 80006b6:	1b80      	subs	r0, r0, r6
 80006b8:	2802      	cmp	r0, #2
 80006ba:	d9f6      	bls.n	80006aa <HAL_RCC_OscConfig+0x1ce>
 80006bc:	e77c      	b.n	80005b8 <HAL_RCC_OscConfig+0xdc>
      __HAL_RCC_LSI_DISABLE();
 80006be:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80006c0:	f7ff fdb8 	bl	8000234 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006c4:	4d1d      	ldr	r5, [pc, #116]	; (800073c <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 80006c6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006c8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80006ca:	0799      	lsls	r1, r3, #30
 80006cc:	f57f af13 	bpl.w	80004f6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006d0:	f7ff fdb0 	bl	8000234 <HAL_GetTick>
 80006d4:	1b80      	subs	r0, r0, r6
 80006d6:	2802      	cmp	r0, #2
 80006d8:	d9f6      	bls.n	80006c8 <HAL_RCC_OscConfig+0x1ec>
 80006da:	e76d      	b.n	80005b8 <HAL_RCC_OscConfig+0xdc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80006dc:	f7ff fdaa 	bl	8000234 <HAL_GetTick>
 80006e0:	1b80      	subs	r0, r0, r6
 80006e2:	2802      	cmp	r0, #2
 80006e4:	f67f af1e 	bls.w	8000524 <HAL_RCC_OscConfig+0x48>
 80006e8:	e766      	b.n	80005b8 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006ea:	2b05      	cmp	r3, #5
 80006ec:	d104      	bne.n	80006f8 <HAL_RCC_OscConfig+0x21c>
 80006ee:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	672b      	str	r3, [r5, #112]	; 0x70
 80006f6:	e71e      	b.n	8000536 <HAL_RCC_OscConfig+0x5a>
 80006f8:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80006fa:	f022 0201 	bic.w	r2, r2, #1
 80006fe:	672a      	str	r2, [r5, #112]	; 0x70
 8000700:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000702:	f022 0204 	bic.w	r2, r2, #4
 8000706:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000708:	2b00      	cmp	r3, #0
 800070a:	f47f af18 	bne.w	800053e <HAL_RCC_OscConfig+0x62>
      tickstart = HAL_GetTick();
 800070e:	f7ff fd91 	bl	8000234 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000712:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000716:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000718:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800071a:	0798      	lsls	r0, r3, #30
 800071c:	f57f af19 	bpl.w	8000552 <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000720:	f7ff fd88 	bl	8000234 <HAL_GetTick>
 8000724:	1b80      	subs	r0, r0, r6
 8000726:	42b8      	cmp	r0, r7
 8000728:	d9f6      	bls.n	8000718 <HAL_RCC_OscConfig+0x23c>
 800072a:	e745      	b.n	80005b8 <HAL_RCC_OscConfig+0xdc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800072c:	f7ff fd82 	bl	8000234 <HAL_GetTick>
 8000730:	1b80      	subs	r0, r0, r6
 8000732:	42b8      	cmp	r0, r7
 8000734:	f67f af09 	bls.w	800054a <HAL_RCC_OscConfig+0x6e>
 8000738:	e73e      	b.n	80005b8 <HAL_RCC_OscConfig+0xdc>
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800
 8000740:	40007000 	.word	0x40007000
 8000744:	42470000 	.word	0x42470000
 8000748:	42470e80 	.word	0x42470e80
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800074c:	4d2b      	ldr	r5, [pc, #172]	; (80007fc <HAL_RCC_OscConfig+0x320>)
 800074e:	68ab      	ldr	r3, [r5, #8]
 8000750:	f003 030c 	and.w	r3, r3, #12
 8000754:	2b08      	cmp	r3, #8
 8000756:	f43f af17 	beq.w	8000588 <HAL_RCC_OscConfig+0xac>
 800075a:	4e29      	ldr	r6, [pc, #164]	; (8000800 <HAL_RCC_OscConfig+0x324>)
 800075c:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800075e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000760:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000762:	d13e      	bne.n	80007e2 <HAL_RCC_OscConfig+0x306>
        tickstart = HAL_GetTick();
 8000764:	f7ff fd66 	bl	8000234 <HAL_GetTick>
 8000768:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800076a:	682b      	ldr	r3, [r5, #0]
 800076c:	0199      	lsls	r1, r3, #6
 800076e:	d432      	bmi.n	80007d6 <HAL_RCC_OscConfig+0x2fa>
 8000770:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8000774:	fa97 f7a7 	rbit	r7, r7
 8000778:	f44f 3240 	mov.w	r2, #196608	; 0x30000
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800077c:	fab7 f787 	clz	r7, r7
 8000780:	fa92 f2a2 	rbit	r2, r2
 8000784:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8000788:	fab2 f082 	clz	r0, r2
 800078c:	fa91 f1a1 	rbit	r1, r1
 8000790:	6a22      	ldr	r2, [r4, #32]
 8000792:	69e3      	ldr	r3, [r4, #28]
 8000794:	4313      	orrs	r3, r2
 8000796:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000798:	fa02 f707 	lsl.w	r7, r2, r7
 800079c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800079e:	0852      	lsrs	r2, r2, #1
 80007a0:	3a01      	subs	r2, #1
 80007a2:	4082      	lsls	r2, r0
 80007a4:	433b      	orrs	r3, r7
 80007a6:	4313      	orrs	r3, r2
 80007a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80007aa:	4c14      	ldr	r4, [pc, #80]	; (80007fc <HAL_RCC_OscConfig+0x320>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80007ac:	fab1 f181 	clz	r1, r1
 80007b0:	fa02 f101 	lsl.w	r1, r2, r1
 80007b4:	430b      	orrs	r3, r1
 80007b6:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80007b8:	2301      	movs	r3, #1
 80007ba:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80007bc:	f7ff fd3a 	bl	8000234 <HAL_GetTick>
 80007c0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80007c2:	6823      	ldr	r3, [r4, #0]
 80007c4:	019a      	lsls	r2, r3, #6
 80007c6:	f53f aec8 	bmi.w	800055a <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007ca:	f7ff fd33 	bl	8000234 <HAL_GetTick>
 80007ce:	1b40      	subs	r0, r0, r5
 80007d0:	2802      	cmp	r0, #2
 80007d2:	d9f6      	bls.n	80007c2 <HAL_RCC_OscConfig+0x2e6>
 80007d4:	e6f0      	b.n	80005b8 <HAL_RCC_OscConfig+0xdc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007d6:	f7ff fd2d 	bl	8000234 <HAL_GetTick>
 80007da:	1bc0      	subs	r0, r0, r7
 80007dc:	2802      	cmp	r0, #2
 80007de:	d9c4      	bls.n	800076a <HAL_RCC_OscConfig+0x28e>
 80007e0:	e6ea      	b.n	80005b8 <HAL_RCC_OscConfig+0xdc>
        tickstart = HAL_GetTick();
 80007e2:	f7ff fd27 	bl	8000234 <HAL_GetTick>
 80007e6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80007e8:	682b      	ldr	r3, [r5, #0]
 80007ea:	019b      	lsls	r3, r3, #6
 80007ec:	f57f aeb5 	bpl.w	800055a <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007f0:	f7ff fd20 	bl	8000234 <HAL_GetTick>
 80007f4:	1b00      	subs	r0, r0, r4
 80007f6:	2802      	cmp	r0, #2
 80007f8:	d9f6      	bls.n	80007e8 <HAL_RCC_OscConfig+0x30c>
 80007fa:	e6dd      	b.n	80005b8 <HAL_RCC_OscConfig+0xdc>
 80007fc:	40023800 	.word	0x40023800
 8000800:	42470060 	.word	0x42470060

08000804 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000804:	4a19      	ldr	r2, [pc, #100]	; (800086c <HAL_RCC_GetSysClockFreq+0x68>)
 8000806:	6893      	ldr	r3, [r2, #8]
 8000808:	f003 030c 	and.w	r3, r3, #12
 800080c:	2b04      	cmp	r3, #4
{
 800080e:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000810:	d003      	beq.n	800081a <HAL_RCC_GetSysClockFreq+0x16>
 8000812:	2b08      	cmp	r3, #8
 8000814:	d003      	beq.n	800081e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000816:	4816      	ldr	r0, [pc, #88]	; (8000870 <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000818:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 800081a:	4816      	ldr	r0, [pc, #88]	; (8000874 <HAL_RCC_GetSysClockFreq+0x70>)
 800081c:	bd10      	pop	{r4, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800081e:	6851      	ldr	r1, [r2, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000820:	6853      	ldr	r3, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000822:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000826:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800082a:	f647 74c0 	movw	r4, #32704	; 0x7fc0
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 800082e:	6853      	ldr	r3, [r2, #4]
 8000830:	fa94 f0a4 	rbit	r0, r4
 8000834:	fab0 f080 	clz	r0, r0
 8000838:	ea03 0304 	and.w	r3, r3, r4
 800083c:	fa23 f300 	lsr.w	r3, r3, r0
 8000840:	bf14      	ite	ne
 8000842:	480c      	ldrne	r0, [pc, #48]	; (8000874 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8000844:	480a      	ldreq	r0, [pc, #40]	; (8000870 <HAL_RCC_GetSysClockFreq+0x6c>)
 8000846:	fbb0 f0f1 	udiv	r0, r0, r1
 800084a:	4358      	muls	r0, r3
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 800084c:	4b07      	ldr	r3, [pc, #28]	; (800086c <HAL_RCC_GetSysClockFreq+0x68>)
 800084e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	fa92 f2a2 	rbit	r2, r2
 8000858:	fab2 f282 	clz	r2, r2
 800085c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000860:	40d3      	lsrs	r3, r2
 8000862:	3301      	adds	r3, #1
 8000864:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000866:	fbb0 f0f3 	udiv	r0, r0, r3
 800086a:	bd10      	pop	{r4, pc}
 800086c:	40023800 	.word	0x40023800
 8000870:	00f42400 	.word	0x00f42400
 8000874:	017d7840 	.word	0x017d7840

08000878 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000878:	4b56      	ldr	r3, [pc, #344]	; (80009d4 <HAL_RCC_ClockConfig+0x15c>)
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	f002 020f 	and.w	r2, r2, #15
 8000880:	428a      	cmp	r2, r1
{
 8000882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000886:	4605      	mov	r5, r0
 8000888:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800088a:	d330      	bcc.n	80008ee <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800088c:	682a      	ldr	r2, [r5, #0]
 800088e:	0794      	lsls	r4, r2, #30
 8000890:	d437      	bmi.n	8000902 <HAL_RCC_ClockConfig+0x8a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000892:	07d0      	lsls	r0, r2, #31
 8000894:	d43d      	bmi.n	8000912 <HAL_RCC_ClockConfig+0x9a>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000896:	4b4f      	ldr	r3, [pc, #316]	; (80009d4 <HAL_RCC_ClockConfig+0x15c>)
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	f002 020f 	and.w	r2, r2, #15
 800089e:	4296      	cmp	r6, r2
 80008a0:	f0c0 8088 	bcc.w	80009b4 <HAL_RCC_ClockConfig+0x13c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80008a4:	682a      	ldr	r2, [r5, #0]
 80008a6:	0751      	lsls	r1, r2, #29
 80008a8:	f100 808c 	bmi.w	80009c4 <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80008ac:	0713      	lsls	r3, r2, #28
 80008ae:	d507      	bpl.n	80008c0 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80008b0:	4a49      	ldr	r2, [pc, #292]	; (80009d8 <HAL_RCC_ClockConfig+0x160>)
 80008b2:	6929      	ldr	r1, [r5, #16]
 80008b4:	6893      	ldr	r3, [r2, #8]
 80008b6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80008ba:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80008be:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80008c0:	f7ff ffa0 	bl	8000804 <HAL_RCC_GetSysClockFreq>
 80008c4:	4b44      	ldr	r3, [pc, #272]	; (80009d8 <HAL_RCC_ClockConfig+0x160>)
 80008c6:	22f0      	movs	r2, #240	; 0xf0
 80008c8:	689b      	ldr	r3, [r3, #8]
 80008ca:	fa92 f2a2 	rbit	r2, r2
 80008ce:	fab2 f282 	clz	r2, r2
 80008d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80008d6:	40d3      	lsrs	r3, r2
 80008d8:	4a40      	ldr	r2, [pc, #256]	; (80009dc <HAL_RCC_ClockConfig+0x164>)
 80008da:	5cd3      	ldrb	r3, [r2, r3]
 80008dc:	40d8      	lsrs	r0, r3
 80008de:	4b40      	ldr	r3, [pc, #256]	; (80009e0 <HAL_RCC_ClockConfig+0x168>)
 80008e0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80008e2:	2000      	movs	r0, #0
 80008e4:	f7ff fc70 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 80008e8:	2000      	movs	r0, #0
}
 80008ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80008ee:	b2ca      	uxtb	r2, r1
 80008f0:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f003 030f 	and.w	r3, r3, #15
 80008f8:	4299      	cmp	r1, r3
 80008fa:	d0c7      	beq.n	800088c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80008fc:	2001      	movs	r0, #1
 80008fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000902:	4935      	ldr	r1, [pc, #212]	; (80009d8 <HAL_RCC_ClockConfig+0x160>)
 8000904:	68a8      	ldr	r0, [r5, #8]
 8000906:	688b      	ldr	r3, [r1, #8]
 8000908:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800090c:	4303      	orrs	r3, r0
 800090e:	608b      	str	r3, [r1, #8]
 8000910:	e7bf      	b.n	8000892 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000912:	686a      	ldr	r2, [r5, #4]
 8000914:	4b30      	ldr	r3, [pc, #192]	; (80009d8 <HAL_RCC_ClockConfig+0x160>)
 8000916:	2a01      	cmp	r2, #1
 8000918:	d11e      	bne.n	8000958 <HAL_RCC_ClockConfig+0xe0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000920:	d0ec      	beq.n	80008fc <HAL_RCC_ClockConfig+0x84>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000922:	4c2d      	ldr	r4, [pc, #180]	; (80009d8 <HAL_RCC_ClockConfig+0x160>)
 8000924:	68a3      	ldr	r3, [r4, #8]
 8000926:	f023 0303 	bic.w	r3, r3, #3
 800092a:	4313      	orrs	r3, r2
 800092c:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800092e:	f7ff fc81 	bl	8000234 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000932:	686b      	ldr	r3, [r5, #4]
 8000934:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8000936:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000938:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800093c:	d116      	bne.n	800096c <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800093e:	68a3      	ldr	r3, [r4, #8]
 8000940:	f003 030c 	and.w	r3, r3, #12
 8000944:	2b04      	cmp	r3, #4
 8000946:	d0a6      	beq.n	8000896 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000948:	f7ff fc74 	bl	8000234 <HAL_GetTick>
 800094c:	1bc0      	subs	r0, r0, r7
 800094e:	4540      	cmp	r0, r8
 8000950:	d9f5      	bls.n	800093e <HAL_RCC_ClockConfig+0xc6>
          return HAL_TIMEOUT;
 8000952:	2003      	movs	r0, #3
 8000954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000958:	1e91      	subs	r1, r2, #2
 800095a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800095c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 800095e:	d802      	bhi.n	8000966 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000960:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000964:	e7dc      	b.n	8000920 <HAL_RCC_ClockConfig+0xa8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000966:	f013 0f02 	tst.w	r3, #2
 800096a:	e7d9      	b.n	8000920 <HAL_RCC_ClockConfig+0xa8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800096c:	2b02      	cmp	r3, #2
 800096e:	d10a      	bne.n	8000986 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000970:	68a3      	ldr	r3, [r4, #8]
 8000972:	f003 030c 	and.w	r3, r3, #12
 8000976:	2b08      	cmp	r3, #8
 8000978:	d08d      	beq.n	8000896 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800097a:	f7ff fc5b 	bl	8000234 <HAL_GetTick>
 800097e:	1bc0      	subs	r0, r0, r7
 8000980:	4540      	cmp	r0, r8
 8000982:	d9f5      	bls.n	8000970 <HAL_RCC_ClockConfig+0xf8>
 8000984:	e7e5      	b.n	8000952 <HAL_RCC_ClockConfig+0xda>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8000986:	2b03      	cmp	r3, #3
 8000988:	d10f      	bne.n	80009aa <HAL_RCC_ClockConfig+0x132>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 800098a:	68a3      	ldr	r3, [r4, #8]
 800098c:	f003 030c 	and.w	r3, r3, #12
 8000990:	2b0c      	cmp	r3, #12
 8000992:	d080      	beq.n	8000896 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000994:	f7ff fc4e 	bl	8000234 <HAL_GetTick>
 8000998:	1bc0      	subs	r0, r0, r7
 800099a:	4540      	cmp	r0, r8
 800099c:	d9f5      	bls.n	800098a <HAL_RCC_ClockConfig+0x112>
 800099e:	e7d8      	b.n	8000952 <HAL_RCC_ClockConfig+0xda>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009a0:	f7ff fc48 	bl	8000234 <HAL_GetTick>
 80009a4:	1bc0      	subs	r0, r0, r7
 80009a6:	4540      	cmp	r0, r8
 80009a8:	d8d3      	bhi.n	8000952 <HAL_RCC_ClockConfig+0xda>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80009aa:	68a3      	ldr	r3, [r4, #8]
 80009ac:	f013 0f0c 	tst.w	r3, #12
 80009b0:	d1f6      	bne.n	80009a0 <HAL_RCC_ClockConfig+0x128>
 80009b2:	e770      	b.n	8000896 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009b4:	b2f2      	uxtb	r2, r6
 80009b6:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f003 030f 	and.w	r3, r3, #15
 80009be:	429e      	cmp	r6, r3
 80009c0:	d19c      	bne.n	80008fc <HAL_RCC_ClockConfig+0x84>
 80009c2:	e76f      	b.n	80008a4 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80009c4:	4904      	ldr	r1, [pc, #16]	; (80009d8 <HAL_RCC_ClockConfig+0x160>)
 80009c6:	68e8      	ldr	r0, [r5, #12]
 80009c8:	688b      	ldr	r3, [r1, #8]
 80009ca:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80009ce:	4303      	orrs	r3, r0
 80009d0:	608b      	str	r3, [r1, #8]
 80009d2:	e76b      	b.n	80008ac <HAL_RCC_ClockConfig+0x34>
 80009d4:	40023c00 	.word	0x40023c00
 80009d8:	40023800 	.word	0x40023800
 80009dc:	08002760 	.word	0x08002760
 80009e0:	20000000 	.word	0x20000000

080009e4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80009e4:	4b01      	ldr	r3, [pc, #4]	; (80009ec <HAL_RCC_GetHCLKFreq+0x8>)
 80009e6:	6818      	ldr	r0, [r3, #0]
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	20000000 	.word	0x20000000

080009f0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80009f0:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <HAL_RCC_GetPCLK1Freq+0x24>)
 80009f2:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	fa92 f2a2 	rbit	r2, r2
 80009fc:	fab2 f282 	clz	r2, r2
 8000a00:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000a04:	40d3      	lsrs	r3, r2
 8000a06:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000a08:	5cd3      	ldrb	r3, [r2, r3]
 8000a0a:	4a04      	ldr	r2, [pc, #16]	; (8000a1c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000a0c:	6810      	ldr	r0, [r2, #0]
}
 8000a0e:	40d8      	lsrs	r0, r3
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800
 8000a18:	08002770 	.word	0x08002770
 8000a1c:	20000000 	.word	0x20000000

08000a20 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8000a20:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000a22:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	fa92 f2a2 	rbit	r2, r2
 8000a2c:	fab2 f282 	clz	r2, r2
 8000a30:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000a34:	40d3      	lsrs	r3, r2
 8000a36:	4a04      	ldr	r2, [pc, #16]	; (8000a48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000a38:	5cd3      	ldrb	r3, [r2, r3]
 8000a3a:	4a04      	ldr	r2, [pc, #16]	; (8000a4c <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000a3c:	6810      	ldr	r0, [r2, #0]
} 
 8000a3e:	40d8      	lsrs	r0, r3
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800
 8000a48:	08002770 	.word	0x08002770
 8000a4c:	20000000 	.word	0x20000000

08000a50 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000a50:	6a03      	ldr	r3, [r0, #32]
 8000a52:	f023 0301 	bic.w	r3, r3, #1
 8000a56:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000a58:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000a5a:	6842      	ldr	r2, [r0, #4]
{
 8000a5c:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000a5e:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000a60:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000a62:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000a66:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000a68:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8000a6a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8000a6e:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000a70:	4c0c      	ldr	r4, [pc, #48]	; (8000aa4 <TIM_OC1_SetConfig+0x54>)
 8000a72:	42a0      	cmp	r0, r4
 8000a74:	d009      	beq.n	8000a8a <TIM_OC1_SetConfig+0x3a>
 8000a76:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000a7a:	42a0      	cmp	r0, r4
 8000a7c:	d005      	beq.n	8000a8a <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000a7e:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000a80:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8000a82:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8000a84:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8000a86:	6203      	str	r3, [r0, #32]
} 
 8000a88:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8000a8a:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8000a8c:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8000a8e:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8000a92:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8000a94:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000a96:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8000a9a:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8000a9c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8000aa0:	4322      	orrs	r2, r4
 8000aa2:	e7ec      	b.n	8000a7e <TIM_OC1_SetConfig+0x2e>
 8000aa4:	40010000 	.word	0x40010000

08000aa8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000aa8:	6a03      	ldr	r3, [r0, #32]
 8000aaa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000aae:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000ab0:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000ab2:	6842      	ldr	r2, [r0, #4]
{
 8000ab4:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000ab6:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000ab8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8000aba:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000abe:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000ac0:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8000ac2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000ac6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000aca:	4c0e      	ldr	r4, [pc, #56]	; (8000b04 <TIM_OC3_SetConfig+0x5c>)
 8000acc:	42a0      	cmp	r0, r4
 8000ace:	d009      	beq.n	8000ae4 <TIM_OC3_SetConfig+0x3c>
 8000ad0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000ad4:	42a0      	cmp	r0, r4
 8000ad6:	d005      	beq.n	8000ae4 <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000ad8:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8000ada:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8000adc:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8000ade:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000ae0:	6203      	str	r3, [r0, #32]
}
 8000ae2:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000ae4:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000ae6:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8000ae8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000aec:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8000af0:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000af2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000af6:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8000af8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000afc:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8000b00:	e7ea      	b.n	8000ad8 <TIM_OC3_SetConfig+0x30>
 8000b02:	bf00      	nop
 8000b04:	40010000 	.word	0x40010000

08000b08 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000b08:	6a03      	ldr	r3, [r0, #32]
 8000b0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000b0e:	6203      	str	r3, [r0, #32]
{
 8000b10:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000b12:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000b14:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000b16:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000b18:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000b1a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000b1e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000b22:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8000b24:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000b28:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000b2c:	4d09      	ldr	r5, [pc, #36]	; (8000b54 <TIM_OC4_SetConfig+0x4c>)
 8000b2e:	42a8      	cmp	r0, r5
 8000b30:	d009      	beq.n	8000b46 <TIM_OC4_SetConfig+0x3e>
 8000b32:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b36:	42a8      	cmp	r0, r5
 8000b38:	d005      	beq.n	8000b46 <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000b3a:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8000b3c:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8000b3e:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8000b40:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000b42:	6204      	str	r4, [r0, #32]
}
 8000b44:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000b46:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8000b48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000b4c:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8000b50:	e7f3      	b.n	8000b3a <TIM_OC4_SetConfig+0x32>
 8000b52:	bf00      	nop
 8000b54:	40010000 	.word	0x40010000

08000b58 <HAL_TIM_PWM_MspInit>:
 8000b58:	4770      	bx	lr

08000b5a <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8000b5a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000b5e:	2b01      	cmp	r3, #1
{
 8000b60:	b570      	push	{r4, r5, r6, lr}
 8000b62:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8000b66:	d01c      	beq.n	8000ba2 <HAL_TIM_ConfigClockSource+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8000b68:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 8000b6c:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8000b6e:	2201      	movs	r2, #1
 8000b70:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 8000b74:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000b76:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000b7a:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000b7e:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8000b80:	680a      	ldr	r2, [r1, #0]
 8000b82:	2a40      	cmp	r2, #64	; 0x40
 8000b84:	d079      	beq.n	8000c7a <HAL_TIM_ConfigClockSource+0x120>
 8000b86:	d819      	bhi.n	8000bbc <HAL_TIM_ConfigClockSource+0x62>
 8000b88:	2a10      	cmp	r2, #16
 8000b8a:	f000 8093 	beq.w	8000cb4 <HAL_TIM_ConfigClockSource+0x15a>
 8000b8e:	d80a      	bhi.n	8000ba6 <HAL_TIM_ConfigClockSource+0x4c>
 8000b90:	2a00      	cmp	r2, #0
 8000b92:	f000 8089 	beq.w	8000ca8 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8000b96:	2301      	movs	r3, #1
 8000b98:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8000ba2:	4618      	mov	r0, r3
}
 8000ba4:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8000ba6:	2a20      	cmp	r2, #32
 8000ba8:	f000 808a 	beq.w	8000cc0 <HAL_TIM_ConfigClockSource+0x166>
 8000bac:	2a30      	cmp	r2, #48	; 0x30
 8000bae:	d1f2      	bne.n	8000b96 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000bb0:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000bb2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000bb6:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8000bba:	e036      	b.n	8000c2a <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000bbc:	2a70      	cmp	r2, #112	; 0x70
 8000bbe:	d036      	beq.n	8000c2e <HAL_TIM_ConfigClockSource+0xd4>
 8000bc0:	d81b      	bhi.n	8000bfa <HAL_TIM_ConfigClockSource+0xa0>
 8000bc2:	2a50      	cmp	r2, #80	; 0x50
 8000bc4:	d042      	beq.n	8000c4c <HAL_TIM_ConfigClockSource+0xf2>
 8000bc6:	2a60      	cmp	r2, #96	; 0x60
 8000bc8:	d1e5      	bne.n	8000b96 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000bca:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8000bcc:	684d      	ldr	r5, [r1, #4]
 8000bce:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000bd0:	f024 0410 	bic.w	r4, r4, #16
 8000bd4:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000bd6:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8000bd8:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000bda:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000bde:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000be2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000be6:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8000bea:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000bec:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000bee:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000bf0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000bf4:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8000bf8:	e017      	b.n	8000c2a <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000bfa:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000bfe:	d011      	beq.n	8000c24 <HAL_TIM_ConfigClockSource+0xca>
 8000c00:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000c04:	d1c7      	bne.n	8000b96 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000c06:	688a      	ldr	r2, [r1, #8]
 8000c08:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000c0a:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000c0c:	68c9      	ldr	r1, [r1, #12]
 8000c0e:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000c10:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000c14:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000c18:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000c1a:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000c1c:	689a      	ldr	r2, [r3, #8]
 8000c1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000c22:	e002      	b.n	8000c2a <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000c24:	689a      	ldr	r2, [r3, #8]
 8000c26:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	e7b3      	b.n	8000b96 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000c2e:	688a      	ldr	r2, [r1, #8]
 8000c30:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000c32:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000c34:	68c9      	ldr	r1, [r1, #12]
 8000c36:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000c38:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000c3c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000c40:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8000c42:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8000c44:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000c46:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8000c4a:	e7ee      	b.n	8000c2a <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8000c4c:	684c      	ldr	r4, [r1, #4]
 8000c4e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000c50:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000c52:	6a1d      	ldr	r5, [r3, #32]
 8000c54:	f025 0501 	bic.w	r5, r5, #1
 8000c58:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8000c5a:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000c5c:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000c60:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000c64:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8000c68:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8000c6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000c6c:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000c6e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000c70:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000c74:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8000c78:	e7d7      	b.n	8000c2a <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8000c7a:	684c      	ldr	r4, [r1, #4]
 8000c7c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000c7e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000c80:	6a1d      	ldr	r5, [r3, #32]
 8000c82:	f025 0501 	bic.w	r5, r5, #1
 8000c86:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8000c88:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000c8a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000c8e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000c92:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8000c96:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8000c98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000c9a:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000c9c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000c9e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000ca2:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8000ca6:	e7c0      	b.n	8000c2a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000ca8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000caa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000cae:	f042 0207 	orr.w	r2, r2, #7
 8000cb2:	e7ba      	b.n	8000c2a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000cb4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000cb6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000cba:	f042 0217 	orr.w	r2, r2, #23
 8000cbe:	e7b4      	b.n	8000c2a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000cc0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000cc2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000cc6:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8000cca:	e7ae      	b.n	8000c2a <HAL_TIM_ConfigClockSource+0xd0>

08000ccc <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000ccc:	4a2e      	ldr	r2, [pc, #184]	; (8000d88 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8000cce:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d012      	beq.n	8000cfa <TIM_Base_SetConfig+0x2e>
 8000cd4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000cd8:	d00f      	beq.n	8000cfa <TIM_Base_SetConfig+0x2e>
 8000cda:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	d00b      	beq.n	8000cfa <TIM_Base_SetConfig+0x2e>
 8000ce2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d007      	beq.n	8000cfa <TIM_Base_SetConfig+0x2e>
 8000cea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	d003      	beq.n	8000cfa <TIM_Base_SetConfig+0x2e>
 8000cf2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d11d      	bne.n	8000d36 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8000cfa:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000cfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000d00:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000d02:	4a21      	ldr	r2, [pc, #132]	; (8000d88 <TIM_Base_SetConfig+0xbc>)
 8000d04:	4290      	cmp	r0, r2
 8000d06:	d104      	bne.n	8000d12 <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000d08:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	e028      	b.n	8000d64 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000d12:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000d16:	d0f7      	beq.n	8000d08 <TIM_Base_SetConfig+0x3c>
 8000d18:	4a1c      	ldr	r2, [pc, #112]	; (8000d8c <TIM_Base_SetConfig+0xc0>)
 8000d1a:	4290      	cmp	r0, r2
 8000d1c:	d0f4      	beq.n	8000d08 <TIM_Base_SetConfig+0x3c>
 8000d1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d22:	4290      	cmp	r0, r2
 8000d24:	d0f0      	beq.n	8000d08 <TIM_Base_SetConfig+0x3c>
 8000d26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d2a:	4290      	cmp	r0, r2
 8000d2c:	d0ec      	beq.n	8000d08 <TIM_Base_SetConfig+0x3c>
 8000d2e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000d32:	4290      	cmp	r0, r2
 8000d34:	d0e8      	beq.n	8000d08 <TIM_Base_SetConfig+0x3c>
 8000d36:	4a16      	ldr	r2, [pc, #88]	; (8000d90 <TIM_Base_SetConfig+0xc4>)
 8000d38:	4290      	cmp	r0, r2
 8000d3a:	d0e5      	beq.n	8000d08 <TIM_Base_SetConfig+0x3c>
 8000d3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d40:	4290      	cmp	r0, r2
 8000d42:	d0e1      	beq.n	8000d08 <TIM_Base_SetConfig+0x3c>
 8000d44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d48:	4290      	cmp	r0, r2
 8000d4a:	d0dd      	beq.n	8000d08 <TIM_Base_SetConfig+0x3c>
 8000d4c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8000d50:	4290      	cmp	r0, r2
 8000d52:	d0d9      	beq.n	8000d08 <TIM_Base_SetConfig+0x3c>
 8000d54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d58:	4290      	cmp	r0, r2
 8000d5a:	d0d5      	beq.n	8000d08 <TIM_Base_SetConfig+0x3c>
 8000d5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d60:	4290      	cmp	r0, r2
 8000d62:	d0d1      	beq.n	8000d08 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 8000d64:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000d66:	688b      	ldr	r3, [r1, #8]
 8000d68:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000d6a:	680b      	ldr	r3, [r1, #0]
 8000d6c:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <TIM_Base_SetConfig+0xbc>)
 8000d70:	4298      	cmp	r0, r3
 8000d72:	d006      	beq.n	8000d82 <TIM_Base_SetConfig+0xb6>
 8000d74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d78:	4298      	cmp	r0, r3
 8000d7a:	d002      	beq.n	8000d82 <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	6143      	str	r3, [r0, #20]
}
 8000d80:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8000d82:	690b      	ldr	r3, [r1, #16]
 8000d84:	6303      	str	r3, [r0, #48]	; 0x30
 8000d86:	e7f9      	b.n	8000d7c <TIM_Base_SetConfig+0xb0>
 8000d88:	40010000 	.word	0x40010000
 8000d8c:	40000400 	.word	0x40000400
 8000d90:	40014000 	.word	0x40014000

08000d94 <HAL_TIM_Base_Init>:
{ 
 8000d94:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000d96:	4604      	mov	r4, r0
 8000d98:	b1a0      	cbz	r0, 8000dc4 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000d9a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000d9e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000da2:	b91b      	cbnz	r3, 8000dac <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000da4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8000da8:	f000 fb26 	bl	80013f8 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000dac:	2302      	movs	r3, #2
 8000dae:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8000db2:	6820      	ldr	r0, [r4, #0]
 8000db4:	1d21      	adds	r1, r4, #4
 8000db6:	f7ff ff89 	bl	8000ccc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000dc4:	2001      	movs	r0, #1
}
 8000dc6:	bd10      	pop	{r4, pc}

08000dc8 <HAL_TIM_PWM_Init>:
{
 8000dc8:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000dca:	4604      	mov	r4, r0
 8000dcc:	b1a0      	cbz	r0, 8000df8 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000dce:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000dd2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000dd6:	b91b      	cbnz	r3, 8000de0 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000dd8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8000ddc:	f7ff febc 	bl	8000b58 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 8000de0:	2302      	movs	r3, #2
 8000de2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8000de6:	6820      	ldr	r0, [r4, #0]
 8000de8:	1d21      	adds	r1, r4, #4
 8000dea:	f7ff ff6f 	bl	8000ccc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000dee:	2301      	movs	r3, #1
 8000df0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8000df4:	2000      	movs	r0, #0
 8000df6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000df8:	2001      	movs	r0, #1
}  
 8000dfa:	bd10      	pop	{r4, pc}

08000dfc <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000dfc:	6a03      	ldr	r3, [r0, #32]
 8000dfe:	f023 0310 	bic.w	r3, r3, #16
 8000e02:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8000e04:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8000e06:	6842      	ldr	r2, [r0, #4]
{
 8000e08:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 8000e0a:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000e0c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8000e0e:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000e12:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000e16:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8000e18:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000e1c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000e20:	4c0d      	ldr	r4, [pc, #52]	; (8000e58 <TIM_OC2_SetConfig+0x5c>)
 8000e22:	42a0      	cmp	r0, r4
 8000e24:	d009      	beq.n	8000e3a <TIM_OC2_SetConfig+0x3e>
 8000e26:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000e2a:	42a0      	cmp	r0, r4
 8000e2c:	d005      	beq.n	8000e3a <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 8000e2e:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8000e30:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8000e32:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8000e34:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8000e36:	6203      	str	r3, [r0, #32]
}
 8000e38:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8000e3a:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8000e3c:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8000e3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8000e42:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8000e46:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8000e48:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8000e4c:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8000e4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8000e52:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 8000e56:	e7ea      	b.n	8000e2e <TIM_OC2_SetConfig+0x32>
 8000e58:	40010000 	.word	0x40010000

08000e5c <HAL_TIM_PWM_ConfigChannel>:
{
 8000e5c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8000e5e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000e62:	2b01      	cmp	r3, #1
{
 8000e64:	4604      	mov	r4, r0
 8000e66:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8000e6a:	d025      	beq.n	8000eb8 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8000e72:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 8000e76:	2a0c      	cmp	r2, #12
 8000e78:	d818      	bhi.n	8000eac <HAL_TIM_PWM_ConfigChannel+0x50>
 8000e7a:	e8df f002 	tbb	[pc, r2]
 8000e7e:	1707      	.short	0x1707
 8000e80:	171e1717 	.word	0x171e1717
 8000e84:	172f1717 	.word	0x172f1717
 8000e88:	1717      	.short	0x1717
 8000e8a:	40          	.byte	0x40
 8000e8b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8000e8c:	6820      	ldr	r0, [r4, #0]
 8000e8e:	f7ff fddf 	bl	8000a50 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8000e92:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8000e94:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8000e96:	699a      	ldr	r2, [r3, #24]
 8000e98:	f042 0208 	orr.w	r2, r2, #8
 8000e9c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8000e9e:	699a      	ldr	r2, [r3, #24]
 8000ea0:	f022 0204 	bic.w	r2, r2, #4
 8000ea4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8000ea6:	699a      	ldr	r2, [r3, #24]
 8000ea8:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8000eaa:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8000eac:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8000eae:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000eb0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8000eb4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8000eb8:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8000eba:	6820      	ldr	r0, [r4, #0]
 8000ebc:	f7ff ff9e 	bl	8000dfc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8000ec0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8000ec2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8000ec4:	699a      	ldr	r2, [r3, #24]
 8000ec6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000eca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8000ecc:	699a      	ldr	r2, [r3, #24]
 8000ece:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ed2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8000ed4:	699a      	ldr	r2, [r3, #24]
 8000ed6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000eda:	e7e6      	b.n	8000eaa <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8000edc:	6820      	ldr	r0, [r4, #0]
 8000ede:	f7ff fde3 	bl	8000aa8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8000ee2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8000ee4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8000ee6:	69da      	ldr	r2, [r3, #28]
 8000ee8:	f042 0208 	orr.w	r2, r2, #8
 8000eec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8000eee:	69da      	ldr	r2, [r3, #28]
 8000ef0:	f022 0204 	bic.w	r2, r2, #4
 8000ef4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8000ef6:	69da      	ldr	r2, [r3, #28]
 8000ef8:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8000efa:	61da      	str	r2, [r3, #28]
    break;
 8000efc:	e7d6      	b.n	8000eac <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8000efe:	6820      	ldr	r0, [r4, #0]
 8000f00:	f7ff fe02 	bl	8000b08 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8000f04:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8000f06:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8000f08:	69da      	ldr	r2, [r3, #28]
 8000f0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000f0e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8000f10:	69da      	ldr	r2, [r3, #28]
 8000f12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f16:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8000f18:	69da      	ldr	r2, [r3, #28]
 8000f1a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000f1e:	e7ec      	b.n	8000efa <HAL_TIM_PWM_ConfigChannel+0x9e>

08000f20 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8000f20:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000f24:	2b01      	cmp	r3, #1
{
 8000f26:	b510      	push	{r4, lr}
 8000f28:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8000f2c:	d018      	beq.n	8000f60 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8000f2e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000f32:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8000f34:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000f36:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000f38:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000f3a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000f3e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8000f40:	685a      	ldr	r2, [r3, #4]
 8000f42:	4322      	orrs	r2, r4
 8000f44:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8000f46:	689a      	ldr	r2, [r3, #8]
 8000f48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f4c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000f4e:	689a      	ldr	r2, [r3, #8]
 8000f50:	430a      	orrs	r2, r1
 8000f52:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8000f54:	2301      	movs	r3, #1
 8000f56:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8000f60:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8000f62:	bd10      	pop	{r4, pc}

08000f64 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8000f68:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000f6a:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8000f6c:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f6e:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000f70:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000f74:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8000f76:	6133      	str	r3, [r6, #16]
{
 8000f78:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f7a:	6883      	ldr	r3, [r0, #8]
 8000f7c:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8000f7e:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f80:	4303      	orrs	r3, r0
 8000f82:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8000f84:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f88:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8000f8a:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f8e:	430b      	orrs	r3, r1
 8000f90:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8000f92:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8000f94:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8000f96:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8000f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8000f9c:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f9e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8000fa2:	6173      	str	r3, [r6, #20]
 8000fa4:	4b7a      	ldr	r3, [pc, #488]	; (8001190 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000fa6:	d17c      	bne.n	80010a2 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8000fa8:	429e      	cmp	r6, r3
 8000faa:	d003      	beq.n	8000fb4 <UART_SetConfig+0x50>
 8000fac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000fb0:	429e      	cmp	r6, r3
 8000fb2:	d144      	bne.n	800103e <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000fb4:	f7ff fd34 	bl	8000a20 <HAL_RCC_GetPCLK2Freq>
 8000fb8:	2519      	movs	r5, #25
 8000fba:	fb05 f300 	mul.w	r3, r5, r0
 8000fbe:	6860      	ldr	r0, [r4, #4]
 8000fc0:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000fc4:	0040      	lsls	r0, r0, #1
 8000fc6:	fbb3 f3f0 	udiv	r3, r3, r0
 8000fca:	fbb3 f3f9 	udiv	r3, r3, r9
 8000fce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8000fd2:	f7ff fd25 	bl	8000a20 <HAL_RCC_GetPCLK2Freq>
 8000fd6:	6863      	ldr	r3, [r4, #4]
 8000fd8:	4368      	muls	r0, r5
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	fbb0 f7f3 	udiv	r7, r0, r3
 8000fe0:	f7ff fd1e 	bl	8000a20 <HAL_RCC_GetPCLK2Freq>
 8000fe4:	6863      	ldr	r3, [r4, #4]
 8000fe6:	4368      	muls	r0, r5
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fee:	fbb3 f3f9 	udiv	r3, r3, r9
 8000ff2:	fb09 7313 	mls	r3, r9, r3, r7
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	3332      	adds	r3, #50	; 0x32
 8000ffa:	fbb3 f3f9 	udiv	r3, r3, r9
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001004:	f7ff fd0c 	bl	8000a20 <HAL_RCC_GetPCLK2Freq>
 8001008:	6862      	ldr	r2, [r4, #4]
 800100a:	4368      	muls	r0, r5
 800100c:	0052      	lsls	r2, r2, #1
 800100e:	fbb0 faf2 	udiv	sl, r0, r2
 8001012:	f7ff fd05 	bl	8000a20 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001016:	6863      	ldr	r3, [r4, #4]
 8001018:	4368      	muls	r0, r5
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001020:	fbb3 f3f9 	udiv	r3, r3, r9
 8001024:	fb09 a313 	mls	r3, r9, r3, sl
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	3332      	adds	r3, #50	; 0x32
 800102c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001030:	f003 0307 	and.w	r3, r3, #7
 8001034:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001036:	443b      	add	r3, r7
 8001038:	60b3      	str	r3, [r6, #8]
 800103a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800103e:	f7ff fcd7 	bl	80009f0 <HAL_RCC_GetPCLK1Freq>
 8001042:	2519      	movs	r5, #25
 8001044:	fb05 f300 	mul.w	r3, r5, r0
 8001048:	6860      	ldr	r0, [r4, #4]
 800104a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800104e:	0040      	lsls	r0, r0, #1
 8001050:	fbb3 f3f0 	udiv	r3, r3, r0
 8001054:	fbb3 f3f9 	udiv	r3, r3, r9
 8001058:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800105c:	f7ff fcc8 	bl	80009f0 <HAL_RCC_GetPCLK1Freq>
 8001060:	6863      	ldr	r3, [r4, #4]
 8001062:	4368      	muls	r0, r5
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	fbb0 f7f3 	udiv	r7, r0, r3
 800106a:	f7ff fcc1 	bl	80009f0 <HAL_RCC_GetPCLK1Freq>
 800106e:	6863      	ldr	r3, [r4, #4]
 8001070:	4368      	muls	r0, r5
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	fbb0 f3f3 	udiv	r3, r0, r3
 8001078:	fbb3 f3f9 	udiv	r3, r3, r9
 800107c:	fb09 7313 	mls	r3, r9, r3, r7
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	3332      	adds	r3, #50	; 0x32
 8001084:	fbb3 f3f9 	udiv	r3, r3, r9
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800108e:	f7ff fcaf 	bl	80009f0 <HAL_RCC_GetPCLK1Freq>
 8001092:	6862      	ldr	r2, [r4, #4]
 8001094:	4368      	muls	r0, r5
 8001096:	0052      	lsls	r2, r2, #1
 8001098:	fbb0 faf2 	udiv	sl, r0, r2
 800109c:	f7ff fca8 	bl	80009f0 <HAL_RCC_GetPCLK1Freq>
 80010a0:	e7b9      	b.n	8001016 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80010a2:	429e      	cmp	r6, r3
 80010a4:	d002      	beq.n	80010ac <UART_SetConfig+0x148>
 80010a6:	4b3b      	ldr	r3, [pc, #236]	; (8001194 <UART_SetConfig+0x230>)
 80010a8:	429e      	cmp	r6, r3
 80010aa:	d140      	bne.n	800112e <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80010ac:	f7ff fcb8 	bl	8000a20 <HAL_RCC_GetPCLK2Freq>
 80010b0:	6867      	ldr	r7, [r4, #4]
 80010b2:	2519      	movs	r5, #25
 80010b4:	f04f 0964 	mov.w	r9, #100	; 0x64
 80010b8:	fb05 f300 	mul.w	r3, r5, r0
 80010bc:	00bf      	lsls	r7, r7, #2
 80010be:	fbb3 f3f7 	udiv	r3, r3, r7
 80010c2:	fbb3 f3f9 	udiv	r3, r3, r9
 80010c6:	011f      	lsls	r7, r3, #4
 80010c8:	f7ff fcaa 	bl	8000a20 <HAL_RCC_GetPCLK2Freq>
 80010cc:	6863      	ldr	r3, [r4, #4]
 80010ce:	4368      	muls	r0, r5
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	fbb0 f8f3 	udiv	r8, r0, r3
 80010d6:	f7ff fca3 	bl	8000a20 <HAL_RCC_GetPCLK2Freq>
 80010da:	6863      	ldr	r3, [r4, #4]
 80010dc:	4368      	muls	r0, r5
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80010e4:	fbb3 f3f9 	udiv	r3, r3, r9
 80010e8:	fb09 8313 	mls	r3, r9, r3, r8
 80010ec:	011b      	lsls	r3, r3, #4
 80010ee:	3332      	adds	r3, #50	; 0x32
 80010f0:	fbb3 f3f9 	udiv	r3, r3, r9
 80010f4:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80010f8:	f7ff fc92 	bl	8000a20 <HAL_RCC_GetPCLK2Freq>
 80010fc:	6862      	ldr	r2, [r4, #4]
 80010fe:	4368      	muls	r0, r5
 8001100:	0092      	lsls	r2, r2, #2
 8001102:	fbb0 faf2 	udiv	sl, r0, r2
 8001106:	f7ff fc8b 	bl	8000a20 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800110a:	6863      	ldr	r3, [r4, #4]
 800110c:	4368      	muls	r0, r5
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	fbb0 f3f3 	udiv	r3, r0, r3
 8001114:	fbb3 f3f9 	udiv	r3, r3, r9
 8001118:	fb09 a313 	mls	r3, r9, r3, sl
 800111c:	011b      	lsls	r3, r3, #4
 800111e:	3332      	adds	r3, #50	; 0x32
 8001120:	fbb3 f3f9 	udiv	r3, r3, r9
 8001124:	f003 030f 	and.w	r3, r3, #15
 8001128:	ea43 0308 	orr.w	r3, r3, r8
 800112c:	e783      	b.n	8001036 <UART_SetConfig+0xd2>
 800112e:	f7ff fc5f 	bl	80009f0 <HAL_RCC_GetPCLK1Freq>
 8001132:	6867      	ldr	r7, [r4, #4]
 8001134:	2519      	movs	r5, #25
 8001136:	f04f 0964 	mov.w	r9, #100	; 0x64
 800113a:	fb05 f300 	mul.w	r3, r5, r0
 800113e:	00bf      	lsls	r7, r7, #2
 8001140:	fbb3 f3f7 	udiv	r3, r3, r7
 8001144:	fbb3 f3f9 	udiv	r3, r3, r9
 8001148:	011f      	lsls	r7, r3, #4
 800114a:	f7ff fc51 	bl	80009f0 <HAL_RCC_GetPCLK1Freq>
 800114e:	6863      	ldr	r3, [r4, #4]
 8001150:	4368      	muls	r0, r5
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	fbb0 f8f3 	udiv	r8, r0, r3
 8001158:	f7ff fc4a 	bl	80009f0 <HAL_RCC_GetPCLK1Freq>
 800115c:	6863      	ldr	r3, [r4, #4]
 800115e:	4368      	muls	r0, r5
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	fbb0 f3f3 	udiv	r3, r0, r3
 8001166:	fbb3 f3f9 	udiv	r3, r3, r9
 800116a:	fb09 8313 	mls	r3, r9, r3, r8
 800116e:	011b      	lsls	r3, r3, #4
 8001170:	3332      	adds	r3, #50	; 0x32
 8001172:	fbb3 f3f9 	udiv	r3, r3, r9
 8001176:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800117a:	f7ff fc39 	bl	80009f0 <HAL_RCC_GetPCLK1Freq>
 800117e:	6862      	ldr	r2, [r4, #4]
 8001180:	4368      	muls	r0, r5
 8001182:	0092      	lsls	r2, r2, #2
 8001184:	fbb0 faf2 	udiv	sl, r0, r2
 8001188:	f7ff fc32 	bl	80009f0 <HAL_RCC_GetPCLK1Freq>
 800118c:	e7bd      	b.n	800110a <UART_SetConfig+0x1a6>
 800118e:	bf00      	nop
 8001190:	40011000 	.word	0x40011000
 8001194:	40011400 	.word	0x40011400

08001198 <HAL_UART_Init>:
{
 8001198:	b510      	push	{r4, lr}
  if(huart == NULL)
 800119a:	4604      	mov	r4, r0
 800119c:	b340      	cbz	r0, 80011f0 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 800119e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80011a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80011a6:	b91b      	cbnz	r3, 80011b0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80011a8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80011ac:	f000 f9c0 	bl	8001530 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80011b0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80011b2:	2324      	movs	r3, #36	; 0x24
 80011b4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80011b8:	68d3      	ldr	r3, [r2, #12]
 80011ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80011be:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80011c0:	4620      	mov	r0, r4
 80011c2:	f7ff fecf 	bl	8000f64 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80011c6:	6823      	ldr	r3, [r4, #0]
 80011c8:	691a      	ldr	r2, [r3, #16]
 80011ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80011ce:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80011d0:	695a      	ldr	r2, [r3, #20]
 80011d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80011d6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80011d8:	68da      	ldr	r2, [r3, #12]
 80011da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80011de:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011e0:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80011e2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011e4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80011e6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80011ea:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80011ee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80011f0:	2001      	movs	r0, #1
}
 80011f2:	bd10      	pop	{r4, pc}

080011f4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80011f4:	b082      	sub	sp, #8

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f6:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <MX_GPIO_Init+0x34>)
 80011f8:	2100      	movs	r1, #0
 80011fa:	9100      	str	r1, [sp, #0]
 80011fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011fe:	f042 0201 	orr.w	r2, r2, #1
 8001202:	631a      	str	r2, [r3, #48]	; 0x30
 8001204:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001206:	f002 0201 	and.w	r2, r2, #1
 800120a:	9200      	str	r2, [sp, #0]
 800120c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800120e:	9101      	str	r1, [sp, #4]
 8001210:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001212:	f042 0202 	orr.w	r2, r2, #2
 8001216:	631a      	str	r2, [r3, #48]	; 0x30
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	9301      	str	r3, [sp, #4]
 8001220:	9b01      	ldr	r3, [sp, #4]

}
 8001222:	b002      	add	sp, #8
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800

0800122c <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 800122c:	b510      	push	{r4, lr}
 800122e:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001230:	2300      	movs	r3, #0
 8001232:	4a21      	ldr	r2, [pc, #132]	; (80012b8 <SystemClock_Config+0x8c>)
 8001234:	9301      	str	r3, [sp, #4]
 8001236:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001238:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800123c:	6411      	str	r1, [r2, #64]	; 0x40
 800123e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001240:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001244:	9201      	str	r2, [sp, #4]
 8001246:	9a01      	ldr	r2, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001248:	4a1c      	ldr	r2, [pc, #112]	; (80012bc <SystemClock_Config+0x90>)
 800124a:	9302      	str	r3, [sp, #8]
 800124c:	6811      	ldr	r1, [r2, #0]
 800124e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001252:	6011      	str	r1, [r2, #0]
 8001254:	6812      	ldr	r2, [r2, #0]
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001256:	930e      	str	r3, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001258:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800125c:	9202      	str	r2, [sp, #8]
 800125e:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001260:	2202      	movs	r2, #2
 8001262:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001264:	2201      	movs	r2, #1
 8001266:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001268:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800126a:	2210      	movs	r2, #16
 800126c:	920c      	str	r2, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800126e:	f7ff f935 	bl	80004dc <HAL_RCC_OscConfig>
 8001272:	4601      	mov	r1, r0
 8001274:	b100      	cbz	r0, 8001278 <SystemClock_Config+0x4c>
 8001276:	e7fe      	b.n	8001276 <SystemClock_Config+0x4a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001278:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800127a:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800127c:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800127e:	9006      	str	r0, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001280:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001282:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001284:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001286:	f7ff faf7 	bl	8000878 <HAL_RCC_ClockConfig>
 800128a:	4604      	mov	r4, r0
 800128c:	b100      	cbz	r0, 8001290 <SystemClock_Config+0x64>
 800128e:	e7fe      	b.n	800128e <SystemClock_Config+0x62>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001290:	f7ff fba8 	bl	80009e4 <HAL_RCC_GetHCLKFreq>
 8001294:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001298:	fbb0 f0f3 	udiv	r0, r0, r3
 800129c:	f7ff f816 	bl	80002cc <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80012a0:	2004      	movs	r0, #4
 80012a2:	f7ff f829 	bl	80002f8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80012a6:	4622      	mov	r2, r4
 80012a8:	4621      	mov	r1, r4
 80012aa:	f04f 30ff 	mov.w	r0, #4294967295
 80012ae:	f7fe ffd9 	bl	8000264 <HAL_NVIC_SetPriority>
}
 80012b2:	b014      	add	sp, #80	; 0x50
 80012b4:	bd10      	pop	{r4, pc}
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40007000 	.word	0x40007000

080012c0 <main>:
{
 80012c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_Init();
 80012c2:	f7fe ff95 	bl	80001f0 <HAL_Init>
		  cadena[i]=getchar();
 80012c6:	4d18      	ldr	r5, [pc, #96]	; (8001328 <main+0x68>)
  SystemClock_Config();
 80012c8:	f7ff ffb0 	bl	800122c <SystemClock_Config>
  MX_GPIO_Init();
 80012cc:	f7ff ff92 	bl	80011f4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80012d0:	f000 f8be 	bl	8001450 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80012d4:	f000 f90c 	bl	80014f0 <MX_USART3_UART_Init>
 80012d8:	462e      	mov	r6, r5
{
 80012da:	2403      	movs	r4, #3
		  cadena[i]=getchar();
 80012dc:	6828      	ldr	r0, [r5, #0]
 80012de:	6841      	ldr	r1, [r0, #4]
 80012e0:	684b      	ldr	r3, [r1, #4]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	604b      	str	r3, [r1, #4]
 80012e8:	da15      	bge.n	8001316 <main+0x56>
 80012ea:	f000 f999 	bl	8001620 <__srget_r>
 80012ee:	b2c1      	uxtb	r1, r0
		  putchar(cadena[i]);
 80012f0:	6830      	ldr	r0, [r6, #0]
 80012f2:	6882      	ldr	r2, [r0, #8]
_ELIDABLE_INLINE int __sputc_r(struct _reent *_ptr, int _c, FILE *_p) {
#ifdef __SCLE
	if ((_p->_flags & __SCLE) && _c == '\n')
	  __sputc_r (_ptr, '\r', _p);
#endif
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 80012f4:	6893      	ldr	r3, [r2, #8]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	6093      	str	r3, [r2, #8]
 80012fc:	da04      	bge.n	8001308 <main+0x48>
 80012fe:	6997      	ldr	r7, [r2, #24]
 8001300:	42bb      	cmp	r3, r7
 8001302:	db0d      	blt.n	8001320 <main+0x60>
 8001304:	290a      	cmp	r1, #10
 8001306:	d00b      	beq.n	8001320 <main+0x60>
		return (*_p->_p++ = _c);
 8001308:	6813      	ldr	r3, [r2, #0]
 800130a:	1c58      	adds	r0, r3, #1
 800130c:	6010      	str	r0, [r2, #0]
 800130e:	7019      	strb	r1, [r3, #0]
	  for(int i=0;i<3;i++){
 8001310:	3c01      	subs	r4, #1
 8001312:	d1e3      	bne.n	80012dc <main+0x1c>
 8001314:	e7e1      	b.n	80012da <main+0x1a>
		  cadena[i]=getchar();
 8001316:	680b      	ldr	r3, [r1, #0]
 8001318:	1c5a      	adds	r2, r3, #1
 800131a:	600a      	str	r2, [r1, #0]
 800131c:	7819      	ldrb	r1, [r3, #0]
 800131e:	e7e7      	b.n	80012f0 <main+0x30>
	else
		return (__swbuf_r(_ptr, _c, _p));
 8001320:	f000 f9aa 	bl	8001678 <__swbuf_r>
 8001324:	e7f4      	b.n	8001310 <main+0x50>
 8001326:	bf00      	nop
 8001328:	20000004 	.word	0x20000004

0800132c <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 800132c:	e7fe      	b.n	800132c <_Error_Handler>

0800132e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800132e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001330:	2003      	movs	r0, #3
 8001332:	f7fe ff85 	bl	8000240 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	4611      	mov	r1, r2
 800133a:	f06f 000b 	mvn.w	r0, #11
 800133e:	f7fe ff91 	bl	8000264 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001342:	2200      	movs	r2, #0
 8001344:	4611      	mov	r1, r2
 8001346:	f06f 000a 	mvn.w	r0, #10
 800134a:	f7fe ff8b 	bl	8000264 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	4611      	mov	r1, r2
 8001352:	f06f 0009 	mvn.w	r0, #9
 8001356:	f7fe ff85 	bl	8000264 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	4611      	mov	r1, r2
 800135e:	f06f 0004 	mvn.w	r0, #4
 8001362:	f7fe ff7f 	bl	8000264 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001366:	2200      	movs	r2, #0
 8001368:	4611      	mov	r1, r2
 800136a:	f06f 0003 	mvn.w	r0, #3
 800136e:	f7fe ff79 	bl	8000264 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	4611      	mov	r1, r2
 8001376:	f06f 0001 	mvn.w	r0, #1
 800137a:	f7fe ff73 	bl	8000264 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	4611      	mov	r1, r2
 8001382:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001386:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800138a:	f7fe bf6b 	b.w	8000264 <HAL_NVIC_SetPriority>

0800138e <NMI_Handler>:
 800138e:	4770      	bx	lr

08001390 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001390:	e7fe      	b.n	8001390 <HardFault_Handler>

08001392 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001392:	e7fe      	b.n	8001392 <MemManage_Handler>

08001394 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001394:	e7fe      	b.n	8001394 <BusFault_Handler>

08001396 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001396:	e7fe      	b.n	8001396 <UsageFault_Handler>

08001398 <SVC_Handler>:
 8001398:	4770      	bx	lr

0800139a <DebugMon_Handler>:
 800139a:	4770      	bx	lr

0800139c <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800139c:	4770      	bx	lr

0800139e <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800139e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a0:	f7fe ff40 	bl	8000224 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80013a8:	f7fe bfb3 	b.w	8000312 <HAL_SYSTICK_IRQHandler>

080013ac <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013ac:	490f      	ldr	r1, [pc, #60]	; (80013ec <SystemInit+0x40>)
 80013ae:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80013b2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80013ba:	4b0d      	ldr	r3, [pc, #52]	; (80013f0 <SystemInit+0x44>)
 80013bc:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013be:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80013c0:	f042 0201 	orr.w	r2, r2, #1
 80013c4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80013c6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80013ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80013d2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80013d4:	4a07      	ldr	r2, [pc, #28]	; (80013f4 <SystemInit+0x48>)
 80013d6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80013de:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80013e0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80013e6:	608b      	str	r3, [r1, #8]
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000ed00 	.word	0xe000ed00
 80013f0:	40023800 	.word	0x40023800
 80013f4:	24003010 	.word	0x24003010

080013f8 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 80013f8:	6803      	ldr	r3, [r0, #0]
 80013fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 80013fe:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM2)
 8001400:	d10b      	bne.n	800141a <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	9301      	str	r3, [sp, #4]
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_TIM_Base_MspInit+0x28>)
 8001408:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800140a:	f042 0201 	orr.w	r2, r2, #1
 800140e:	641a      	str	r2, [r3, #64]	; 0x40
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800141a:	b002      	add	sp, #8
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	40023800 	.word	0x40023800

08001424 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001424:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM2)
 8001426:	6803      	ldr	r3, [r0, #0]
 8001428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800142c:	d10b      	bne.n	8001446 <HAL_TIM_MspPostInit+0x22>
  
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	2202      	movs	r2, #2
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001430:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001434:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2200      	movs	r2, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001438:	4804      	ldr	r0, [pc, #16]	; (800144c <HAL_TIM_MspPostInit+0x28>)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800143a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001440:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001442:	f7fe ff6b 	bl	800031c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001446:	b007      	add	sp, #28
 8001448:	f85d fb04 	ldr.w	pc, [sp], #4
 800144c:	40020000 	.word	0x40020000

08001450 <MX_TIM2_Init>:
{
 8001450:	b500      	push	{lr}
  htim2.Instance = TIM2;
 8001452:	4825      	ldr	r0, [pc, #148]	; (80014e8 <MX_TIM2_Init+0x98>)
  htim2.Init.Prescaler = 177;
 8001454:	23b1      	movs	r3, #177	; 0xb1
 8001456:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
{
 800145a:	b08f      	sub	sp, #60	; 0x3c
  htim2.Init.Prescaler = 177;
 800145c:	e880 000a 	stmia.w	r0, {r1, r3}
  htim2.Init.Period = 1800;
 8001460:	f44f 62e1 	mov.w	r2, #1800	; 0x708
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001464:	2300      	movs	r3, #0
 8001466:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 1800;
 8001468:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800146a:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800146c:	f7ff fc92 	bl	8000d94 <HAL_TIM_Base_Init>
 8001470:	b118      	cbz	r0, 800147a <MX_TIM2_Init+0x2a>
    _Error_Handler(__FILE__, __LINE__);
 8001472:	213f      	movs	r1, #63	; 0x3f
 8001474:	481d      	ldr	r0, [pc, #116]	; (80014ec <MX_TIM2_Init+0x9c>)
 8001476:	f7ff ff59 	bl	800132c <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800147a:	a90e      	add	r1, sp, #56	; 0x38
 800147c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001480:	f841 3d2c 	str.w	r3, [r1, #-44]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001484:	4818      	ldr	r0, [pc, #96]	; (80014e8 <MX_TIM2_Init+0x98>)
 8001486:	f7ff fb68 	bl	8000b5a <HAL_TIM_ConfigClockSource>
 800148a:	b118      	cbz	r0, 8001494 <MX_TIM2_Init+0x44>
    _Error_Handler(__FILE__, __LINE__);
 800148c:	2145      	movs	r1, #69	; 0x45
 800148e:	4817      	ldr	r0, [pc, #92]	; (80014ec <MX_TIM2_Init+0x9c>)
 8001490:	f7ff ff4c 	bl	800132c <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001494:	4814      	ldr	r0, [pc, #80]	; (80014e8 <MX_TIM2_Init+0x98>)
 8001496:	f7ff fc97 	bl	8000dc8 <HAL_TIM_PWM_Init>
 800149a:	b118      	cbz	r0, 80014a4 <MX_TIM2_Init+0x54>
    _Error_Handler(__FILE__, __LINE__);
 800149c:	214a      	movs	r1, #74	; 0x4a
 800149e:	4813      	ldr	r0, [pc, #76]	; (80014ec <MX_TIM2_Init+0x9c>)
 80014a0:	f7ff ff44 	bl	800132c <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a4:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014a6:	a901      	add	r1, sp, #4
 80014a8:	480f      	ldr	r0, [pc, #60]	; (80014e8 <MX_TIM2_Init+0x98>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014aa:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ac:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014ae:	f7ff fd37 	bl	8000f20 <HAL_TIMEx_MasterConfigSynchronization>
 80014b2:	b118      	cbz	r0, 80014bc <MX_TIM2_Init+0x6c>
    _Error_Handler(__FILE__, __LINE__);
 80014b4:	2151      	movs	r1, #81	; 0x51
 80014b6:	480d      	ldr	r0, [pc, #52]	; (80014ec <MX_TIM2_Init+0x9c>)
 80014b8:	f7ff ff38 	bl	800132c <_Error_Handler>
  sConfigOC.Pulse = 0;
 80014bc:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014be:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014c0:	a907      	add	r1, sp, #28
 80014c2:	4809      	ldr	r0, [pc, #36]	; (80014e8 <MX_TIM2_Init+0x98>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014c4:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 80014c6:	9208      	str	r2, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014c8:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ca:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014cc:	f7ff fcc6 	bl	8000e5c <HAL_TIM_PWM_ConfigChannel>
 80014d0:	b118      	cbz	r0, 80014da <MX_TIM2_Init+0x8a>
    _Error_Handler(__FILE__, __LINE__);
 80014d2:	215a      	movs	r1, #90	; 0x5a
 80014d4:	4805      	ldr	r0, [pc, #20]	; (80014ec <MX_TIM2_Init+0x9c>)
 80014d6:	f7ff ff29 	bl	800132c <_Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 80014da:	4803      	ldr	r0, [pc, #12]	; (80014e8 <MX_TIM2_Init+0x98>)
 80014dc:	f7ff ffa2 	bl	8001424 <HAL_TIM_MspPostInit>
}
 80014e0:	b00f      	add	sp, #60	; 0x3c
 80014e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80014e6:	bf00      	nop
 80014e8:	20000560 	.word	0x20000560
 80014ec:	08002778 	.word	0x08002778

080014f0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80014f0:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 80014f2:	480c      	ldr	r0, [pc, #48]	; (8001524 <MX_USART3_UART_Init+0x34>)
  huart3.Init.BaudRate = 115200;
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <MX_USART3_UART_Init+0x38>)
 80014f6:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 80014fa:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014fe:	220c      	movs	r2, #12
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001500:	2300      	movs	r3, #0
 8001502:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001504:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001506:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001508:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800150a:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800150c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800150e:	f7ff fe43 	bl	8001198 <HAL_UART_Init>
 8001512:	b128      	cbz	r0, 8001520 <MX_USART3_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001514:	2142      	movs	r1, #66	; 0x42
 8001516:	4805      	ldr	r0, [pc, #20]	; (800152c <MX_USART3_UART_Init+0x3c>)
  }

}
 8001518:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 800151c:	f7ff bf06 	b.w	800132c <_Error_Handler>
 8001520:	bd08      	pop	{r3, pc}
 8001522:	bf00      	nop
 8001524:	2000059c 	.word	0x2000059c
 8001528:	40004800 	.word	0x40004800
 800152c:	08002785 	.word	0x08002785

08001530 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001530:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART3)
 8001532:	6802      	ldr	r2, [r0, #0]
 8001534:	4b10      	ldr	r3, [pc, #64]	; (8001578 <HAL_UART_MspInit+0x48>)
 8001536:	429a      	cmp	r2, r3
 8001538:	d11a      	bne.n	8001570 <HAL_UART_MspInit+0x40>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <HAL_UART_MspInit+0x4c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001540:	480f      	ldr	r0, [pc, #60]	; (8001580 <HAL_UART_MspInit+0x50>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001542:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001544:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001548:	641a      	str	r2, [r3, #64]	; 0x40
 800154a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001554:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001558:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155a:	2302      	movs	r3, #2
 800155c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800155e:	2301      	movs	r3, #1
 8001560:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001562:	2303      	movs	r3, #3
 8001564:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001566:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001568:	2307      	movs	r3, #7
 800156a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156c:	f7fe fed6 	bl	800031c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001570:	b007      	add	sp, #28
 8001572:	f85d fb04 	ldr.w	pc, [sp], #4
 8001576:	bf00      	nop
 8001578:	40004800 	.word	0x40004800
 800157c:	40023800 	.word	0x40023800
 8001580:	40020400 	.word	0x40020400

08001584 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001584:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001588:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800158a:	e003      	b.n	8001594 <LoopCopyDataInit>

0800158c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800158e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001590:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001592:	3104      	adds	r1, #4

08001594 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001594:	480b      	ldr	r0, [pc, #44]	; (80015c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001596:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001598:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800159a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800159c:	d3f6      	bcc.n	800158c <CopyDataInit>
  ldr  r2, =_sbss
 800159e:	4a0b      	ldr	r2, [pc, #44]	; (80015cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80015a0:	e002      	b.n	80015a8 <LoopFillZerobss>

080015a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80015a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80015a4:	f842 3b04 	str.w	r3, [r2], #4

080015a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80015a8:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80015aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80015ac:	d3f9      	bcc.n	80015a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015ae:	f7ff fefd 	bl	80013ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015b2:	f000 f811 	bl	80015d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015b6:	f7ff fe83 	bl	80012c0 <main>
  bx  lr    
 80015ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015bc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80015c0:	08002800 	.word	0x08002800
  ldr  r0, =_sdata
 80015c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80015c8:	20000508 	.word	0x20000508
  ldr  r2, =_sbss
 80015cc:	20000508 	.word	0x20000508
  ldr  r3, = _ebss
 80015d0:	200005ec 	.word	0x200005ec

080015d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015d4:	e7fe      	b.n	80015d4 <ADC_IRQHandler>
	...

080015d8 <__libc_init_array>:
 80015d8:	b570      	push	{r4, r5, r6, lr}
 80015da:	4e0d      	ldr	r6, [pc, #52]	; (8001610 <__libc_init_array+0x38>)
 80015dc:	4c0d      	ldr	r4, [pc, #52]	; (8001614 <__libc_init_array+0x3c>)
 80015de:	1ba4      	subs	r4, r4, r6
 80015e0:	10a4      	asrs	r4, r4, #2
 80015e2:	2500      	movs	r5, #0
 80015e4:	42a5      	cmp	r5, r4
 80015e6:	d109      	bne.n	80015fc <__libc_init_array+0x24>
 80015e8:	4e0b      	ldr	r6, [pc, #44]	; (8001618 <__libc_init_array+0x40>)
 80015ea:	4c0c      	ldr	r4, [pc, #48]	; (800161c <__libc_init_array+0x44>)
 80015ec:	f001 f8ac 	bl	8002748 <_init>
 80015f0:	1ba4      	subs	r4, r4, r6
 80015f2:	10a4      	asrs	r4, r4, #2
 80015f4:	2500      	movs	r5, #0
 80015f6:	42a5      	cmp	r5, r4
 80015f8:	d105      	bne.n	8001606 <__libc_init_array+0x2e>
 80015fa:	bd70      	pop	{r4, r5, r6, pc}
 80015fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001600:	4798      	blx	r3
 8001602:	3501      	adds	r5, #1
 8001604:	e7ee      	b.n	80015e4 <__libc_init_array+0xc>
 8001606:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800160a:	4798      	blx	r3
 800160c:	3501      	adds	r5, #1
 800160e:	e7f2      	b.n	80015f6 <__libc_init_array+0x1e>
 8001610:	080027f8 	.word	0x080027f8
 8001614:	080027f8 	.word	0x080027f8
 8001618:	080027f8 	.word	0x080027f8
 800161c:	080027fc 	.word	0x080027fc

08001620 <__srget_r>:
 8001620:	b538      	push	{r3, r4, r5, lr}
 8001622:	460c      	mov	r4, r1
 8001624:	4605      	mov	r5, r0
 8001626:	b118      	cbz	r0, 8001630 <__srget_r+0x10>
 8001628:	6983      	ldr	r3, [r0, #24]
 800162a:	b90b      	cbnz	r3, 8001630 <__srget_r+0x10>
 800162c:	f000 fa28 	bl	8001a80 <__sinit>
 8001630:	4b0e      	ldr	r3, [pc, #56]	; (800166c <__srget_r+0x4c>)
 8001632:	429c      	cmp	r4, r3
 8001634:	d10d      	bne.n	8001652 <__srget_r+0x32>
 8001636:	686c      	ldr	r4, [r5, #4]
 8001638:	4621      	mov	r1, r4
 800163a:	4628      	mov	r0, r5
 800163c:	f000 fe88 	bl	8002350 <__srefill_r>
 8001640:	b988      	cbnz	r0, 8001666 <__srget_r+0x46>
 8001642:	6863      	ldr	r3, [r4, #4]
 8001644:	3b01      	subs	r3, #1
 8001646:	6063      	str	r3, [r4, #4]
 8001648:	6823      	ldr	r3, [r4, #0]
 800164a:	1c5a      	adds	r2, r3, #1
 800164c:	6022      	str	r2, [r4, #0]
 800164e:	7818      	ldrb	r0, [r3, #0]
 8001650:	bd38      	pop	{r3, r4, r5, pc}
 8001652:	4b07      	ldr	r3, [pc, #28]	; (8001670 <__srget_r+0x50>)
 8001654:	429c      	cmp	r4, r3
 8001656:	d101      	bne.n	800165c <__srget_r+0x3c>
 8001658:	68ac      	ldr	r4, [r5, #8]
 800165a:	e7ed      	b.n	8001638 <__srget_r+0x18>
 800165c:	4b05      	ldr	r3, [pc, #20]	; (8001674 <__srget_r+0x54>)
 800165e:	429c      	cmp	r4, r3
 8001660:	bf08      	it	eq
 8001662:	68ec      	ldreq	r4, [r5, #12]
 8001664:	e7e8      	b.n	8001638 <__srget_r+0x18>
 8001666:	f04f 30ff 	mov.w	r0, #4294967295
 800166a:	bd38      	pop	{r3, r4, r5, pc}
 800166c:	080027b8 	.word	0x080027b8
 8001670:	080027d8 	.word	0x080027d8
 8001674:	08002798 	.word	0x08002798

08001678 <__swbuf_r>:
 8001678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800167a:	460e      	mov	r6, r1
 800167c:	4614      	mov	r4, r2
 800167e:	4605      	mov	r5, r0
 8001680:	b118      	cbz	r0, 800168a <__swbuf_r+0x12>
 8001682:	6983      	ldr	r3, [r0, #24]
 8001684:	b90b      	cbnz	r3, 800168a <__swbuf_r+0x12>
 8001686:	f000 f9fb 	bl	8001a80 <__sinit>
 800168a:	4b27      	ldr	r3, [pc, #156]	; (8001728 <__swbuf_r+0xb0>)
 800168c:	429c      	cmp	r4, r3
 800168e:	d12f      	bne.n	80016f0 <__swbuf_r+0x78>
 8001690:	686c      	ldr	r4, [r5, #4]
 8001692:	69a3      	ldr	r3, [r4, #24]
 8001694:	60a3      	str	r3, [r4, #8]
 8001696:	89a3      	ldrh	r3, [r4, #12]
 8001698:	0719      	lsls	r1, r3, #28
 800169a:	d533      	bpl.n	8001704 <__swbuf_r+0x8c>
 800169c:	6923      	ldr	r3, [r4, #16]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d030      	beq.n	8001704 <__swbuf_r+0x8c>
 80016a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016a6:	b2f6      	uxtb	r6, r6
 80016a8:	049a      	lsls	r2, r3, #18
 80016aa:	4637      	mov	r7, r6
 80016ac:	d534      	bpl.n	8001718 <__swbuf_r+0xa0>
 80016ae:	6923      	ldr	r3, [r4, #16]
 80016b0:	6820      	ldr	r0, [r4, #0]
 80016b2:	1ac0      	subs	r0, r0, r3
 80016b4:	6963      	ldr	r3, [r4, #20]
 80016b6:	4298      	cmp	r0, r3
 80016b8:	db04      	blt.n	80016c4 <__swbuf_r+0x4c>
 80016ba:	4621      	mov	r1, r4
 80016bc:	4628      	mov	r0, r5
 80016be:	f000 f939 	bl	8001934 <_fflush_r>
 80016c2:	bb28      	cbnz	r0, 8001710 <__swbuf_r+0x98>
 80016c4:	68a3      	ldr	r3, [r4, #8]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	60a3      	str	r3, [r4, #8]
 80016ca:	6823      	ldr	r3, [r4, #0]
 80016cc:	1c5a      	adds	r2, r3, #1
 80016ce:	6022      	str	r2, [r4, #0]
 80016d0:	701e      	strb	r6, [r3, #0]
 80016d2:	6963      	ldr	r3, [r4, #20]
 80016d4:	3001      	adds	r0, #1
 80016d6:	4298      	cmp	r0, r3
 80016d8:	d004      	beq.n	80016e4 <__swbuf_r+0x6c>
 80016da:	89a3      	ldrh	r3, [r4, #12]
 80016dc:	07db      	lsls	r3, r3, #31
 80016de:	d519      	bpl.n	8001714 <__swbuf_r+0x9c>
 80016e0:	2e0a      	cmp	r6, #10
 80016e2:	d117      	bne.n	8001714 <__swbuf_r+0x9c>
 80016e4:	4621      	mov	r1, r4
 80016e6:	4628      	mov	r0, r5
 80016e8:	f000 f924 	bl	8001934 <_fflush_r>
 80016ec:	b190      	cbz	r0, 8001714 <__swbuf_r+0x9c>
 80016ee:	e00f      	b.n	8001710 <__swbuf_r+0x98>
 80016f0:	4b0e      	ldr	r3, [pc, #56]	; (800172c <__swbuf_r+0xb4>)
 80016f2:	429c      	cmp	r4, r3
 80016f4:	d101      	bne.n	80016fa <__swbuf_r+0x82>
 80016f6:	68ac      	ldr	r4, [r5, #8]
 80016f8:	e7cb      	b.n	8001692 <__swbuf_r+0x1a>
 80016fa:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <__swbuf_r+0xb8>)
 80016fc:	429c      	cmp	r4, r3
 80016fe:	bf08      	it	eq
 8001700:	68ec      	ldreq	r4, [r5, #12]
 8001702:	e7c6      	b.n	8001692 <__swbuf_r+0x1a>
 8001704:	4621      	mov	r1, r4
 8001706:	4628      	mov	r0, r5
 8001708:	f000 f814 	bl	8001734 <__swsetup_r>
 800170c:	2800      	cmp	r0, #0
 800170e:	d0c8      	beq.n	80016a2 <__swbuf_r+0x2a>
 8001710:	f04f 37ff 	mov.w	r7, #4294967295
 8001714:	4638      	mov	r0, r7
 8001716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001718:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800171c:	81a3      	strh	r3, [r4, #12]
 800171e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001720:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001724:	6663      	str	r3, [r4, #100]	; 0x64
 8001726:	e7c2      	b.n	80016ae <__swbuf_r+0x36>
 8001728:	080027b8 	.word	0x080027b8
 800172c:	080027d8 	.word	0x080027d8
 8001730:	08002798 	.word	0x08002798

08001734 <__swsetup_r>:
 8001734:	4b32      	ldr	r3, [pc, #200]	; (8001800 <__swsetup_r+0xcc>)
 8001736:	b570      	push	{r4, r5, r6, lr}
 8001738:	681d      	ldr	r5, [r3, #0]
 800173a:	4606      	mov	r6, r0
 800173c:	460c      	mov	r4, r1
 800173e:	b125      	cbz	r5, 800174a <__swsetup_r+0x16>
 8001740:	69ab      	ldr	r3, [r5, #24]
 8001742:	b913      	cbnz	r3, 800174a <__swsetup_r+0x16>
 8001744:	4628      	mov	r0, r5
 8001746:	f000 f99b 	bl	8001a80 <__sinit>
 800174a:	4b2e      	ldr	r3, [pc, #184]	; (8001804 <__swsetup_r+0xd0>)
 800174c:	429c      	cmp	r4, r3
 800174e:	d10f      	bne.n	8001770 <__swsetup_r+0x3c>
 8001750:	686c      	ldr	r4, [r5, #4]
 8001752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001756:	b29a      	uxth	r2, r3
 8001758:	0715      	lsls	r5, r2, #28
 800175a:	d42c      	bmi.n	80017b6 <__swsetup_r+0x82>
 800175c:	06d0      	lsls	r0, r2, #27
 800175e:	d411      	bmi.n	8001784 <__swsetup_r+0x50>
 8001760:	2209      	movs	r2, #9
 8001762:	6032      	str	r2, [r6, #0]
 8001764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001768:	81a3      	strh	r3, [r4, #12]
 800176a:	f04f 30ff 	mov.w	r0, #4294967295
 800176e:	bd70      	pop	{r4, r5, r6, pc}
 8001770:	4b25      	ldr	r3, [pc, #148]	; (8001808 <__swsetup_r+0xd4>)
 8001772:	429c      	cmp	r4, r3
 8001774:	d101      	bne.n	800177a <__swsetup_r+0x46>
 8001776:	68ac      	ldr	r4, [r5, #8]
 8001778:	e7eb      	b.n	8001752 <__swsetup_r+0x1e>
 800177a:	4b24      	ldr	r3, [pc, #144]	; (800180c <__swsetup_r+0xd8>)
 800177c:	429c      	cmp	r4, r3
 800177e:	bf08      	it	eq
 8001780:	68ec      	ldreq	r4, [r5, #12]
 8001782:	e7e6      	b.n	8001752 <__swsetup_r+0x1e>
 8001784:	0751      	lsls	r1, r2, #29
 8001786:	d512      	bpl.n	80017ae <__swsetup_r+0x7a>
 8001788:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800178a:	b141      	cbz	r1, 800179e <__swsetup_r+0x6a>
 800178c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001790:	4299      	cmp	r1, r3
 8001792:	d002      	beq.n	800179a <__swsetup_r+0x66>
 8001794:	4630      	mov	r0, r6
 8001796:	f000 fa49 	bl	8001c2c <_free_r>
 800179a:	2300      	movs	r3, #0
 800179c:	6363      	str	r3, [r4, #52]	; 0x34
 800179e:	89a3      	ldrh	r3, [r4, #12]
 80017a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80017a4:	81a3      	strh	r3, [r4, #12]
 80017a6:	2300      	movs	r3, #0
 80017a8:	6063      	str	r3, [r4, #4]
 80017aa:	6923      	ldr	r3, [r4, #16]
 80017ac:	6023      	str	r3, [r4, #0]
 80017ae:	89a3      	ldrh	r3, [r4, #12]
 80017b0:	f043 0308 	orr.w	r3, r3, #8
 80017b4:	81a3      	strh	r3, [r4, #12]
 80017b6:	6923      	ldr	r3, [r4, #16]
 80017b8:	b94b      	cbnz	r3, 80017ce <__swsetup_r+0x9a>
 80017ba:	89a3      	ldrh	r3, [r4, #12]
 80017bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80017c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017c4:	d003      	beq.n	80017ce <__swsetup_r+0x9a>
 80017c6:	4621      	mov	r1, r4
 80017c8:	4630      	mov	r0, r6
 80017ca:	f000 fb55 	bl	8001e78 <__smakebuf_r>
 80017ce:	89a2      	ldrh	r2, [r4, #12]
 80017d0:	f012 0301 	ands.w	r3, r2, #1
 80017d4:	d00c      	beq.n	80017f0 <__swsetup_r+0xbc>
 80017d6:	2300      	movs	r3, #0
 80017d8:	60a3      	str	r3, [r4, #8]
 80017da:	6963      	ldr	r3, [r4, #20]
 80017dc:	425b      	negs	r3, r3
 80017de:	61a3      	str	r3, [r4, #24]
 80017e0:	6923      	ldr	r3, [r4, #16]
 80017e2:	b953      	cbnz	r3, 80017fa <__swsetup_r+0xc6>
 80017e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017e8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80017ec:	d1ba      	bne.n	8001764 <__swsetup_r+0x30>
 80017ee:	bd70      	pop	{r4, r5, r6, pc}
 80017f0:	0792      	lsls	r2, r2, #30
 80017f2:	bf58      	it	pl
 80017f4:	6963      	ldrpl	r3, [r4, #20]
 80017f6:	60a3      	str	r3, [r4, #8]
 80017f8:	e7f2      	b.n	80017e0 <__swsetup_r+0xac>
 80017fa:	2000      	movs	r0, #0
 80017fc:	e7f7      	b.n	80017ee <__swsetup_r+0xba>
 80017fe:	bf00      	nop
 8001800:	20000004 	.word	0x20000004
 8001804:	080027b8 	.word	0x080027b8
 8001808:	080027d8 	.word	0x080027d8
 800180c:	08002798 	.word	0x08002798

08001810 <__sflush_r>:
 8001810:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001814:	b293      	uxth	r3, r2
 8001816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800181a:	4605      	mov	r5, r0
 800181c:	0718      	lsls	r0, r3, #28
 800181e:	460c      	mov	r4, r1
 8001820:	d461      	bmi.n	80018e6 <__sflush_r+0xd6>
 8001822:	684b      	ldr	r3, [r1, #4]
 8001824:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001828:	2b00      	cmp	r3, #0
 800182a:	818a      	strh	r2, [r1, #12]
 800182c:	dc05      	bgt.n	800183a <__sflush_r+0x2a>
 800182e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001830:	2b00      	cmp	r3, #0
 8001832:	dc02      	bgt.n	800183a <__sflush_r+0x2a>
 8001834:	2000      	movs	r0, #0
 8001836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800183a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800183c:	2e00      	cmp	r6, #0
 800183e:	d0f9      	beq.n	8001834 <__sflush_r+0x24>
 8001840:	2300      	movs	r3, #0
 8001842:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001846:	682f      	ldr	r7, [r5, #0]
 8001848:	602b      	str	r3, [r5, #0]
 800184a:	d037      	beq.n	80018bc <__sflush_r+0xac>
 800184c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800184e:	89a3      	ldrh	r3, [r4, #12]
 8001850:	075a      	lsls	r2, r3, #29
 8001852:	d505      	bpl.n	8001860 <__sflush_r+0x50>
 8001854:	6863      	ldr	r3, [r4, #4]
 8001856:	1ac0      	subs	r0, r0, r3
 8001858:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800185a:	b10b      	cbz	r3, 8001860 <__sflush_r+0x50>
 800185c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800185e:	1ac0      	subs	r0, r0, r3
 8001860:	2300      	movs	r3, #0
 8001862:	4602      	mov	r2, r0
 8001864:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001866:	6a21      	ldr	r1, [r4, #32]
 8001868:	4628      	mov	r0, r5
 800186a:	47b0      	blx	r6
 800186c:	1c43      	adds	r3, r0, #1
 800186e:	89a3      	ldrh	r3, [r4, #12]
 8001870:	d106      	bne.n	8001880 <__sflush_r+0x70>
 8001872:	6829      	ldr	r1, [r5, #0]
 8001874:	291d      	cmp	r1, #29
 8001876:	d84f      	bhi.n	8001918 <__sflush_r+0x108>
 8001878:	4a2d      	ldr	r2, [pc, #180]	; (8001930 <__sflush_r+0x120>)
 800187a:	40ca      	lsrs	r2, r1
 800187c:	07d6      	lsls	r6, r2, #31
 800187e:	d54b      	bpl.n	8001918 <__sflush_r+0x108>
 8001880:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001884:	b21b      	sxth	r3, r3
 8001886:	2200      	movs	r2, #0
 8001888:	6062      	str	r2, [r4, #4]
 800188a:	04d9      	lsls	r1, r3, #19
 800188c:	6922      	ldr	r2, [r4, #16]
 800188e:	81a3      	strh	r3, [r4, #12]
 8001890:	6022      	str	r2, [r4, #0]
 8001892:	d504      	bpl.n	800189e <__sflush_r+0x8e>
 8001894:	1c42      	adds	r2, r0, #1
 8001896:	d101      	bne.n	800189c <__sflush_r+0x8c>
 8001898:	682b      	ldr	r3, [r5, #0]
 800189a:	b903      	cbnz	r3, 800189e <__sflush_r+0x8e>
 800189c:	6560      	str	r0, [r4, #84]	; 0x54
 800189e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80018a0:	602f      	str	r7, [r5, #0]
 80018a2:	2900      	cmp	r1, #0
 80018a4:	d0c6      	beq.n	8001834 <__sflush_r+0x24>
 80018a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80018aa:	4299      	cmp	r1, r3
 80018ac:	d002      	beq.n	80018b4 <__sflush_r+0xa4>
 80018ae:	4628      	mov	r0, r5
 80018b0:	f000 f9bc 	bl	8001c2c <_free_r>
 80018b4:	2000      	movs	r0, #0
 80018b6:	6360      	str	r0, [r4, #52]	; 0x34
 80018b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80018bc:	6a21      	ldr	r1, [r4, #32]
 80018be:	2301      	movs	r3, #1
 80018c0:	4628      	mov	r0, r5
 80018c2:	47b0      	blx	r6
 80018c4:	1c41      	adds	r1, r0, #1
 80018c6:	d1c2      	bne.n	800184e <__sflush_r+0x3e>
 80018c8:	682b      	ldr	r3, [r5, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0bf      	beq.n	800184e <__sflush_r+0x3e>
 80018ce:	2b1d      	cmp	r3, #29
 80018d0:	d001      	beq.n	80018d6 <__sflush_r+0xc6>
 80018d2:	2b16      	cmp	r3, #22
 80018d4:	d101      	bne.n	80018da <__sflush_r+0xca>
 80018d6:	602f      	str	r7, [r5, #0]
 80018d8:	e7ac      	b.n	8001834 <__sflush_r+0x24>
 80018da:	89a3      	ldrh	r3, [r4, #12]
 80018dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018e0:	81a3      	strh	r3, [r4, #12]
 80018e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80018e6:	690f      	ldr	r7, [r1, #16]
 80018e8:	2f00      	cmp	r7, #0
 80018ea:	d0a3      	beq.n	8001834 <__sflush_r+0x24>
 80018ec:	079b      	lsls	r3, r3, #30
 80018ee:	680e      	ldr	r6, [r1, #0]
 80018f0:	bf08      	it	eq
 80018f2:	694b      	ldreq	r3, [r1, #20]
 80018f4:	600f      	str	r7, [r1, #0]
 80018f6:	bf18      	it	ne
 80018f8:	2300      	movne	r3, #0
 80018fa:	eba6 0807 	sub.w	r8, r6, r7
 80018fe:	608b      	str	r3, [r1, #8]
 8001900:	f1b8 0f00 	cmp.w	r8, #0
 8001904:	dd96      	ble.n	8001834 <__sflush_r+0x24>
 8001906:	4643      	mov	r3, r8
 8001908:	463a      	mov	r2, r7
 800190a:	6a21      	ldr	r1, [r4, #32]
 800190c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800190e:	4628      	mov	r0, r5
 8001910:	47b0      	blx	r6
 8001912:	2800      	cmp	r0, #0
 8001914:	dc07      	bgt.n	8001926 <__sflush_r+0x116>
 8001916:	89a3      	ldrh	r3, [r4, #12]
 8001918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800191c:	81a3      	strh	r3, [r4, #12]
 800191e:	f04f 30ff 	mov.w	r0, #4294967295
 8001922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001926:	4407      	add	r7, r0
 8001928:	eba8 0800 	sub.w	r8, r8, r0
 800192c:	e7e8      	b.n	8001900 <__sflush_r+0xf0>
 800192e:	bf00      	nop
 8001930:	20400001 	.word	0x20400001

08001934 <_fflush_r>:
 8001934:	b538      	push	{r3, r4, r5, lr}
 8001936:	690b      	ldr	r3, [r1, #16]
 8001938:	4605      	mov	r5, r0
 800193a:	460c      	mov	r4, r1
 800193c:	b913      	cbnz	r3, 8001944 <_fflush_r+0x10>
 800193e:	2500      	movs	r5, #0
 8001940:	4628      	mov	r0, r5
 8001942:	bd38      	pop	{r3, r4, r5, pc}
 8001944:	b118      	cbz	r0, 800194e <_fflush_r+0x1a>
 8001946:	6983      	ldr	r3, [r0, #24]
 8001948:	b90b      	cbnz	r3, 800194e <_fflush_r+0x1a>
 800194a:	f000 f899 	bl	8001a80 <__sinit>
 800194e:	4b14      	ldr	r3, [pc, #80]	; (80019a0 <_fflush_r+0x6c>)
 8001950:	429c      	cmp	r4, r3
 8001952:	d11b      	bne.n	800198c <_fflush_r+0x58>
 8001954:	686c      	ldr	r4, [r5, #4]
 8001956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0ef      	beq.n	800193e <_fflush_r+0xa>
 800195e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001960:	07d0      	lsls	r0, r2, #31
 8001962:	d404      	bmi.n	800196e <_fflush_r+0x3a>
 8001964:	0599      	lsls	r1, r3, #22
 8001966:	d402      	bmi.n	800196e <_fflush_r+0x3a>
 8001968:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800196a:	f000 fa57 	bl	8001e1c <__retarget_lock_acquire_recursive>
 800196e:	4628      	mov	r0, r5
 8001970:	4621      	mov	r1, r4
 8001972:	f7ff ff4d 	bl	8001810 <__sflush_r>
 8001976:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001978:	07da      	lsls	r2, r3, #31
 800197a:	4605      	mov	r5, r0
 800197c:	d4e0      	bmi.n	8001940 <_fflush_r+0xc>
 800197e:	89a3      	ldrh	r3, [r4, #12]
 8001980:	059b      	lsls	r3, r3, #22
 8001982:	d4dd      	bmi.n	8001940 <_fflush_r+0xc>
 8001984:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001986:	f000 fa4a 	bl	8001e1e <__retarget_lock_release_recursive>
 800198a:	e7d9      	b.n	8001940 <_fflush_r+0xc>
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <_fflush_r+0x70>)
 800198e:	429c      	cmp	r4, r3
 8001990:	d101      	bne.n	8001996 <_fflush_r+0x62>
 8001992:	68ac      	ldr	r4, [r5, #8]
 8001994:	e7df      	b.n	8001956 <_fflush_r+0x22>
 8001996:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <_fflush_r+0x74>)
 8001998:	429c      	cmp	r4, r3
 800199a:	bf08      	it	eq
 800199c:	68ec      	ldreq	r4, [r5, #12]
 800199e:	e7da      	b.n	8001956 <_fflush_r+0x22>
 80019a0:	080027b8 	.word	0x080027b8
 80019a4:	080027d8 	.word	0x080027d8
 80019a8:	08002798 	.word	0x08002798

080019ac <fflush>:
 80019ac:	4601      	mov	r1, r0
 80019ae:	b920      	cbnz	r0, 80019ba <fflush+0xe>
 80019b0:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <fflush+0x18>)
 80019b2:	4905      	ldr	r1, [pc, #20]	; (80019c8 <fflush+0x1c>)
 80019b4:	6818      	ldr	r0, [r3, #0]
 80019b6:	f000 ba11 	b.w	8001ddc <_fwalk_reent>
 80019ba:	4b04      	ldr	r3, [pc, #16]	; (80019cc <fflush+0x20>)
 80019bc:	6818      	ldr	r0, [r3, #0]
 80019be:	f7ff bfb9 	b.w	8001934 <_fflush_r>
 80019c2:	bf00      	nop
 80019c4:	08002794 	.word	0x08002794
 80019c8:	08001935 	.word	0x08001935
 80019cc:	20000004 	.word	0x20000004

080019d0 <_cleanup_r>:
 80019d0:	4901      	ldr	r1, [pc, #4]	; (80019d8 <_cleanup_r+0x8>)
 80019d2:	f000 ba03 	b.w	8001ddc <_fwalk_reent>
 80019d6:	bf00      	nop
 80019d8:	08002569 	.word	0x08002569

080019dc <std.isra.0>:
 80019dc:	2300      	movs	r3, #0
 80019de:	b510      	push	{r4, lr}
 80019e0:	4604      	mov	r4, r0
 80019e2:	6003      	str	r3, [r0, #0]
 80019e4:	6043      	str	r3, [r0, #4]
 80019e6:	6083      	str	r3, [r0, #8]
 80019e8:	8181      	strh	r1, [r0, #12]
 80019ea:	6643      	str	r3, [r0, #100]	; 0x64
 80019ec:	81c2      	strh	r2, [r0, #14]
 80019ee:	6103      	str	r3, [r0, #16]
 80019f0:	6143      	str	r3, [r0, #20]
 80019f2:	6183      	str	r3, [r0, #24]
 80019f4:	4619      	mov	r1, r3
 80019f6:	2208      	movs	r2, #8
 80019f8:	305c      	adds	r0, #92	; 0x5c
 80019fa:	f000 fc8b 	bl	8002314 <memset>
 80019fe:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <std.isra.0+0x38>)
 8001a00:	6263      	str	r3, [r4, #36]	; 0x24
 8001a02:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <std.isra.0+0x3c>)
 8001a04:	62a3      	str	r3, [r4, #40]	; 0x28
 8001a06:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <std.isra.0+0x40>)
 8001a08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001a0a:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <std.isra.0+0x44>)
 8001a0c:	6224      	str	r4, [r4, #32]
 8001a0e:	6323      	str	r3, [r4, #48]	; 0x30
 8001a10:	bd10      	pop	{r4, pc}
 8001a12:	bf00      	nop
 8001a14:	0800249d 	.word	0x0800249d
 8001a18:	080024bf 	.word	0x080024bf
 8001a1c:	080024f7 	.word	0x080024f7
 8001a20:	0800251b 	.word	0x0800251b

08001a24 <__sfmoreglue>:
 8001a24:	b570      	push	{r4, r5, r6, lr}
 8001a26:	1e4a      	subs	r2, r1, #1
 8001a28:	2568      	movs	r5, #104	; 0x68
 8001a2a:	4355      	muls	r5, r2
 8001a2c:	460e      	mov	r6, r1
 8001a2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001a32:	f000 fa61 	bl	8001ef8 <_malloc_r>
 8001a36:	4604      	mov	r4, r0
 8001a38:	b140      	cbz	r0, 8001a4c <__sfmoreglue+0x28>
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	e880 0042 	stmia.w	r0, {r1, r6}
 8001a40:	300c      	adds	r0, #12
 8001a42:	60a0      	str	r0, [r4, #8]
 8001a44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001a48:	f000 fc64 	bl	8002314 <memset>
 8001a4c:	4620      	mov	r0, r4
 8001a4e:	bd70      	pop	{r4, r5, r6, pc}

08001a50 <__sfp_lock_acquire>:
 8001a50:	4801      	ldr	r0, [pc, #4]	; (8001a58 <__sfp_lock_acquire+0x8>)
 8001a52:	f000 b9e3 	b.w	8001e1c <__retarget_lock_acquire_recursive>
 8001a56:	bf00      	nop
 8001a58:	200005e4 	.word	0x200005e4

08001a5c <__sfp_lock_release>:
 8001a5c:	4801      	ldr	r0, [pc, #4]	; (8001a64 <__sfp_lock_release+0x8>)
 8001a5e:	f000 b9de 	b.w	8001e1e <__retarget_lock_release_recursive>
 8001a62:	bf00      	nop
 8001a64:	200005e4 	.word	0x200005e4

08001a68 <__sinit_lock_acquire>:
 8001a68:	4801      	ldr	r0, [pc, #4]	; (8001a70 <__sinit_lock_acquire+0x8>)
 8001a6a:	f000 b9d7 	b.w	8001e1c <__retarget_lock_acquire_recursive>
 8001a6e:	bf00      	nop
 8001a70:	200005df 	.word	0x200005df

08001a74 <__sinit_lock_release>:
 8001a74:	4801      	ldr	r0, [pc, #4]	; (8001a7c <__sinit_lock_release+0x8>)
 8001a76:	f000 b9d2 	b.w	8001e1e <__retarget_lock_release_recursive>
 8001a7a:	bf00      	nop
 8001a7c:	200005df 	.word	0x200005df

08001a80 <__sinit>:
 8001a80:	b510      	push	{r4, lr}
 8001a82:	4604      	mov	r4, r0
 8001a84:	f7ff fff0 	bl	8001a68 <__sinit_lock_acquire>
 8001a88:	69a3      	ldr	r3, [r4, #24]
 8001a8a:	b11b      	cbz	r3, 8001a94 <__sinit+0x14>
 8001a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a90:	f7ff bff0 	b.w	8001a74 <__sinit_lock_release>
 8001a94:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8001a98:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
 8001a9c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8001aa0:	4b12      	ldr	r3, [pc, #72]	; (8001aec <__sinit+0x6c>)
 8001aa2:	4a13      	ldr	r2, [pc, #76]	; (8001af0 <__sinit+0x70>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	62a2      	str	r2, [r4, #40]	; 0x28
 8001aa8:	429c      	cmp	r4, r3
 8001aaa:	bf04      	itt	eq
 8001aac:	2301      	moveq	r3, #1
 8001aae:	61a3      	streq	r3, [r4, #24]
 8001ab0:	4620      	mov	r0, r4
 8001ab2:	f000 f81f 	bl	8001af4 <__sfp>
 8001ab6:	6060      	str	r0, [r4, #4]
 8001ab8:	4620      	mov	r0, r4
 8001aba:	f000 f81b 	bl	8001af4 <__sfp>
 8001abe:	60a0      	str	r0, [r4, #8]
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	f000 f817 	bl	8001af4 <__sfp>
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	60e0      	str	r0, [r4, #12]
 8001aca:	2104      	movs	r1, #4
 8001acc:	6860      	ldr	r0, [r4, #4]
 8001ace:	f7ff ff85 	bl	80019dc <std.isra.0>
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	2109      	movs	r1, #9
 8001ad6:	68a0      	ldr	r0, [r4, #8]
 8001ad8:	f7ff ff80 	bl	80019dc <std.isra.0>
 8001adc:	2202      	movs	r2, #2
 8001ade:	2112      	movs	r1, #18
 8001ae0:	68e0      	ldr	r0, [r4, #12]
 8001ae2:	f7ff ff7b 	bl	80019dc <std.isra.0>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	61a3      	str	r3, [r4, #24]
 8001aea:	e7cf      	b.n	8001a8c <__sinit+0xc>
 8001aec:	08002794 	.word	0x08002794
 8001af0:	080019d1 	.word	0x080019d1

08001af4 <__sfp>:
 8001af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001af6:	4607      	mov	r7, r0
 8001af8:	f7ff ffaa 	bl	8001a50 <__sfp_lock_acquire>
 8001afc:	4b1f      	ldr	r3, [pc, #124]	; (8001b7c <__sfp+0x88>)
 8001afe:	681e      	ldr	r6, [r3, #0]
 8001b00:	69b3      	ldr	r3, [r6, #24]
 8001b02:	b913      	cbnz	r3, 8001b0a <__sfp+0x16>
 8001b04:	4630      	mov	r0, r6
 8001b06:	f7ff ffbb 	bl	8001a80 <__sinit>
 8001b0a:	36d8      	adds	r6, #216	; 0xd8
 8001b0c:	68b4      	ldr	r4, [r6, #8]
 8001b0e:	6873      	ldr	r3, [r6, #4]
 8001b10:	3b01      	subs	r3, #1
 8001b12:	d503      	bpl.n	8001b1c <__sfp+0x28>
 8001b14:	6833      	ldr	r3, [r6, #0]
 8001b16:	b133      	cbz	r3, 8001b26 <__sfp+0x32>
 8001b18:	6836      	ldr	r6, [r6, #0]
 8001b1a:	e7f7      	b.n	8001b0c <__sfp+0x18>
 8001b1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001b20:	b17d      	cbz	r5, 8001b42 <__sfp+0x4e>
 8001b22:	3468      	adds	r4, #104	; 0x68
 8001b24:	e7f4      	b.n	8001b10 <__sfp+0x1c>
 8001b26:	2104      	movs	r1, #4
 8001b28:	4638      	mov	r0, r7
 8001b2a:	f7ff ff7b 	bl	8001a24 <__sfmoreglue>
 8001b2e:	4604      	mov	r4, r0
 8001b30:	6030      	str	r0, [r6, #0]
 8001b32:	2800      	cmp	r0, #0
 8001b34:	d1f0      	bne.n	8001b18 <__sfp+0x24>
 8001b36:	f7ff ff91 	bl	8001a5c <__sfp_lock_release>
 8001b3a:	230c      	movs	r3, #12
 8001b3c:	603b      	str	r3, [r7, #0]
 8001b3e:	4620      	mov	r0, r4
 8001b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b46:	81e3      	strh	r3, [r4, #14]
 8001b48:	2301      	movs	r3, #1
 8001b4a:	81a3      	strh	r3, [r4, #12]
 8001b4c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001b50:	6665      	str	r5, [r4, #100]	; 0x64
 8001b52:	f000 f961 	bl	8001e18 <__retarget_lock_init_recursive>
 8001b56:	f7ff ff81 	bl	8001a5c <__sfp_lock_release>
 8001b5a:	6025      	str	r5, [r4, #0]
 8001b5c:	60a5      	str	r5, [r4, #8]
 8001b5e:	6065      	str	r5, [r4, #4]
 8001b60:	6125      	str	r5, [r4, #16]
 8001b62:	6165      	str	r5, [r4, #20]
 8001b64:	61a5      	str	r5, [r4, #24]
 8001b66:	2208      	movs	r2, #8
 8001b68:	4629      	mov	r1, r5
 8001b6a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001b6e:	f000 fbd1 	bl	8002314 <memset>
 8001b72:	6365      	str	r5, [r4, #52]	; 0x34
 8001b74:	63a5      	str	r5, [r4, #56]	; 0x38
 8001b76:	64a5      	str	r5, [r4, #72]	; 0x48
 8001b78:	64e5      	str	r5, [r4, #76]	; 0x4c
 8001b7a:	e7e0      	b.n	8001b3e <__sfp+0x4a>
 8001b7c:	08002794 	.word	0x08002794

08001b80 <_malloc_trim_r>:
 8001b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b84:	4f25      	ldr	r7, [pc, #148]	; (8001c1c <_malloc_trim_r+0x9c>)
 8001b86:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8001c28 <_malloc_trim_r+0xa8>
 8001b8a:	4689      	mov	r9, r1
 8001b8c:	4606      	mov	r6, r0
 8001b8e:	f000 fbc9 	bl	8002324 <__malloc_lock>
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	685d      	ldr	r5, [r3, #4]
 8001b96:	f1a8 0411 	sub.w	r4, r8, #17
 8001b9a:	f025 0503 	bic.w	r5, r5, #3
 8001b9e:	eba4 0409 	sub.w	r4, r4, r9
 8001ba2:	442c      	add	r4, r5
 8001ba4:	fbb4 f4f8 	udiv	r4, r4, r8
 8001ba8:	3c01      	subs	r4, #1
 8001baa:	fb08 f404 	mul.w	r4, r8, r4
 8001bae:	4544      	cmp	r4, r8
 8001bb0:	da05      	bge.n	8001bbe <_malloc_trim_r+0x3e>
 8001bb2:	4630      	mov	r0, r6
 8001bb4:	f000 fbbc 	bl	8002330 <__malloc_unlock>
 8001bb8:	2000      	movs	r0, #0
 8001bba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	4630      	mov	r0, r6
 8001bc2:	f000 fc5b 	bl	800247c <_sbrk_r>
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	442b      	add	r3, r5
 8001bca:	4298      	cmp	r0, r3
 8001bcc:	d1f1      	bne.n	8001bb2 <_malloc_trim_r+0x32>
 8001bce:	4261      	negs	r1, r4
 8001bd0:	4630      	mov	r0, r6
 8001bd2:	f000 fc53 	bl	800247c <_sbrk_r>
 8001bd6:	3001      	adds	r0, #1
 8001bd8:	d110      	bne.n	8001bfc <_malloc_trim_r+0x7c>
 8001bda:	2100      	movs	r1, #0
 8001bdc:	4630      	mov	r0, r6
 8001bde:	f000 fc4d 	bl	800247c <_sbrk_r>
 8001be2:	68ba      	ldr	r2, [r7, #8]
 8001be4:	1a83      	subs	r3, r0, r2
 8001be6:	2b0f      	cmp	r3, #15
 8001be8:	dde3      	ble.n	8001bb2 <_malloc_trim_r+0x32>
 8001bea:	490d      	ldr	r1, [pc, #52]	; (8001c20 <_malloc_trim_r+0xa0>)
 8001bec:	6809      	ldr	r1, [r1, #0]
 8001bee:	1a40      	subs	r0, r0, r1
 8001bf0:	490c      	ldr	r1, [pc, #48]	; (8001c24 <_malloc_trim_r+0xa4>)
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	6008      	str	r0, [r1, #0]
 8001bf8:	6053      	str	r3, [r2, #4]
 8001bfa:	e7da      	b.n	8001bb2 <_malloc_trim_r+0x32>
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	4a09      	ldr	r2, [pc, #36]	; (8001c24 <_malloc_trim_r+0xa4>)
 8001c00:	1b2d      	subs	r5, r5, r4
 8001c02:	f045 0501 	orr.w	r5, r5, #1
 8001c06:	605d      	str	r5, [r3, #4]
 8001c08:	6813      	ldr	r3, [r2, #0]
 8001c0a:	4630      	mov	r0, r6
 8001c0c:	1b1c      	subs	r4, r3, r4
 8001c0e:	6014      	str	r4, [r2, #0]
 8001c10:	f000 fb8e 	bl	8002330 <__malloc_unlock>
 8001c14:	2001      	movs	r0, #1
 8001c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c1a:	bf00      	nop
 8001c1c:	200000f8 	.word	0x200000f8
 8001c20:	20000500 	.word	0x20000500
 8001c24:	20000524 	.word	0x20000524
 8001c28:	00000080 	.word	0x00000080

08001c2c <_free_r>:
 8001c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c30:	4604      	mov	r4, r0
 8001c32:	4688      	mov	r8, r1
 8001c34:	2900      	cmp	r1, #0
 8001c36:	f000 80ab 	beq.w	8001d90 <_free_r+0x164>
 8001c3a:	f000 fb73 	bl	8002324 <__malloc_lock>
 8001c3e:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8001c42:	4d54      	ldr	r5, [pc, #336]	; (8001d94 <_free_r+0x168>)
 8001c44:	f022 0001 	bic.w	r0, r2, #1
 8001c48:	f1a8 0308 	sub.w	r3, r8, #8
 8001c4c:	181f      	adds	r7, r3, r0
 8001c4e:	68a9      	ldr	r1, [r5, #8]
 8001c50:	687e      	ldr	r6, [r7, #4]
 8001c52:	428f      	cmp	r7, r1
 8001c54:	f026 0603 	bic.w	r6, r6, #3
 8001c58:	f002 0201 	and.w	r2, r2, #1
 8001c5c:	d11b      	bne.n	8001c96 <_free_r+0x6a>
 8001c5e:	4430      	add	r0, r6
 8001c60:	b93a      	cbnz	r2, 8001c72 <_free_r+0x46>
 8001c62:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8001c66:	1a9b      	subs	r3, r3, r2
 8001c68:	4410      	add	r0, r2
 8001c6a:	6899      	ldr	r1, [r3, #8]
 8001c6c:	68da      	ldr	r2, [r3, #12]
 8001c6e:	60ca      	str	r2, [r1, #12]
 8001c70:	6091      	str	r1, [r2, #8]
 8001c72:	f040 0201 	orr.w	r2, r0, #1
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	60ab      	str	r3, [r5, #8]
 8001c7a:	4b47      	ldr	r3, [pc, #284]	; (8001d98 <_free_r+0x16c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4298      	cmp	r0, r3
 8001c80:	d304      	bcc.n	8001c8c <_free_r+0x60>
 8001c82:	4b46      	ldr	r3, [pc, #280]	; (8001d9c <_free_r+0x170>)
 8001c84:	4620      	mov	r0, r4
 8001c86:	6819      	ldr	r1, [r3, #0]
 8001c88:	f7ff ff7a 	bl	8001b80 <_malloc_trim_r>
 8001c8c:	4620      	mov	r0, r4
 8001c8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001c92:	f000 bb4d 	b.w	8002330 <__malloc_unlock>
 8001c96:	607e      	str	r6, [r7, #4]
 8001c98:	2a00      	cmp	r2, #0
 8001c9a:	d139      	bne.n	8001d10 <_free_r+0xe4>
 8001c9c:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8001ca0:	1a5b      	subs	r3, r3, r1
 8001ca2:	4408      	add	r0, r1
 8001ca4:	6899      	ldr	r1, [r3, #8]
 8001ca6:	f105 0e08 	add.w	lr, r5, #8
 8001caa:	4571      	cmp	r1, lr
 8001cac:	d032      	beq.n	8001d14 <_free_r+0xe8>
 8001cae:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8001cb2:	f8c1 e00c 	str.w	lr, [r1, #12]
 8001cb6:	f8ce 1008 	str.w	r1, [lr, #8]
 8001cba:	19b9      	adds	r1, r7, r6
 8001cbc:	6849      	ldr	r1, [r1, #4]
 8001cbe:	07c9      	lsls	r1, r1, #31
 8001cc0:	d40a      	bmi.n	8001cd8 <_free_r+0xac>
 8001cc2:	4430      	add	r0, r6
 8001cc4:	68b9      	ldr	r1, [r7, #8]
 8001cc6:	bb3a      	cbnz	r2, 8001d18 <_free_r+0xec>
 8001cc8:	4e35      	ldr	r6, [pc, #212]	; (8001da0 <_free_r+0x174>)
 8001cca:	42b1      	cmp	r1, r6
 8001ccc:	d124      	bne.n	8001d18 <_free_r+0xec>
 8001cce:	616b      	str	r3, [r5, #20]
 8001cd0:	612b      	str	r3, [r5, #16]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	60d9      	str	r1, [r3, #12]
 8001cd6:	6099      	str	r1, [r3, #8]
 8001cd8:	f040 0101 	orr.w	r1, r0, #1
 8001cdc:	6059      	str	r1, [r3, #4]
 8001cde:	5018      	str	r0, [r3, r0]
 8001ce0:	2a00      	cmp	r2, #0
 8001ce2:	d1d3      	bne.n	8001c8c <_free_r+0x60>
 8001ce4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001ce8:	d21a      	bcs.n	8001d20 <_free_r+0xf4>
 8001cea:	08c0      	lsrs	r0, r0, #3
 8001cec:	1081      	asrs	r1, r0, #2
 8001cee:	2201      	movs	r2, #1
 8001cf0:	408a      	lsls	r2, r1
 8001cf2:	6869      	ldr	r1, [r5, #4]
 8001cf4:	3001      	adds	r0, #1
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	606a      	str	r2, [r5, #4]
 8001cfa:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8001cfe:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8001d02:	6099      	str	r1, [r3, #8]
 8001d04:	3a08      	subs	r2, #8
 8001d06:	60da      	str	r2, [r3, #12]
 8001d08:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8001d0c:	60cb      	str	r3, [r1, #12]
 8001d0e:	e7bd      	b.n	8001c8c <_free_r+0x60>
 8001d10:	2200      	movs	r2, #0
 8001d12:	e7d2      	b.n	8001cba <_free_r+0x8e>
 8001d14:	2201      	movs	r2, #1
 8001d16:	e7d0      	b.n	8001cba <_free_r+0x8e>
 8001d18:	68fe      	ldr	r6, [r7, #12]
 8001d1a:	60ce      	str	r6, [r1, #12]
 8001d1c:	60b1      	str	r1, [r6, #8]
 8001d1e:	e7db      	b.n	8001cd8 <_free_r+0xac>
 8001d20:	0a42      	lsrs	r2, r0, #9
 8001d22:	2a04      	cmp	r2, #4
 8001d24:	d813      	bhi.n	8001d4e <_free_r+0x122>
 8001d26:	0982      	lsrs	r2, r0, #6
 8001d28:	3238      	adds	r2, #56	; 0x38
 8001d2a:	1c51      	adds	r1, r2, #1
 8001d2c:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8001d30:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8001d34:	428e      	cmp	r6, r1
 8001d36:	d124      	bne.n	8001d82 <_free_r+0x156>
 8001d38:	2001      	movs	r0, #1
 8001d3a:	1092      	asrs	r2, r2, #2
 8001d3c:	fa00 f202 	lsl.w	r2, r0, r2
 8001d40:	6868      	ldr	r0, [r5, #4]
 8001d42:	4302      	orrs	r2, r0
 8001d44:	606a      	str	r2, [r5, #4]
 8001d46:	60de      	str	r6, [r3, #12]
 8001d48:	6099      	str	r1, [r3, #8]
 8001d4a:	60b3      	str	r3, [r6, #8]
 8001d4c:	e7de      	b.n	8001d0c <_free_r+0xe0>
 8001d4e:	2a14      	cmp	r2, #20
 8001d50:	d801      	bhi.n	8001d56 <_free_r+0x12a>
 8001d52:	325b      	adds	r2, #91	; 0x5b
 8001d54:	e7e9      	b.n	8001d2a <_free_r+0xfe>
 8001d56:	2a54      	cmp	r2, #84	; 0x54
 8001d58:	d802      	bhi.n	8001d60 <_free_r+0x134>
 8001d5a:	0b02      	lsrs	r2, r0, #12
 8001d5c:	326e      	adds	r2, #110	; 0x6e
 8001d5e:	e7e4      	b.n	8001d2a <_free_r+0xfe>
 8001d60:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8001d64:	d802      	bhi.n	8001d6c <_free_r+0x140>
 8001d66:	0bc2      	lsrs	r2, r0, #15
 8001d68:	3277      	adds	r2, #119	; 0x77
 8001d6a:	e7de      	b.n	8001d2a <_free_r+0xfe>
 8001d6c:	f240 5154 	movw	r1, #1364	; 0x554
 8001d70:	428a      	cmp	r2, r1
 8001d72:	bf9a      	itte	ls
 8001d74:	0c82      	lsrls	r2, r0, #18
 8001d76:	327c      	addls	r2, #124	; 0x7c
 8001d78:	227e      	movhi	r2, #126	; 0x7e
 8001d7a:	e7d6      	b.n	8001d2a <_free_r+0xfe>
 8001d7c:	6889      	ldr	r1, [r1, #8]
 8001d7e:	428e      	cmp	r6, r1
 8001d80:	d004      	beq.n	8001d8c <_free_r+0x160>
 8001d82:	684a      	ldr	r2, [r1, #4]
 8001d84:	f022 0203 	bic.w	r2, r2, #3
 8001d88:	4290      	cmp	r0, r2
 8001d8a:	d3f7      	bcc.n	8001d7c <_free_r+0x150>
 8001d8c:	68ce      	ldr	r6, [r1, #12]
 8001d8e:	e7da      	b.n	8001d46 <_free_r+0x11a>
 8001d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d94:	200000f8 	.word	0x200000f8
 8001d98:	20000504 	.word	0x20000504
 8001d9c:	20000554 	.word	0x20000554
 8001da0:	20000100 	.word	0x20000100

08001da4 <_fwalk>:
 8001da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001da8:	4688      	mov	r8, r1
 8001daa:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 8001dae:	2600      	movs	r6, #0
 8001db0:	b914      	cbnz	r4, 8001db8 <_fwalk+0x14>
 8001db2:	4630      	mov	r0, r6
 8001db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001db8:	68a5      	ldr	r5, [r4, #8]
 8001dba:	6867      	ldr	r7, [r4, #4]
 8001dbc:	3f01      	subs	r7, #1
 8001dbe:	d501      	bpl.n	8001dc4 <_fwalk+0x20>
 8001dc0:	6824      	ldr	r4, [r4, #0]
 8001dc2:	e7f5      	b.n	8001db0 <_fwalk+0xc>
 8001dc4:	89ab      	ldrh	r3, [r5, #12]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d906      	bls.n	8001dd8 <_fwalk+0x34>
 8001dca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	d002      	beq.n	8001dd8 <_fwalk+0x34>
 8001dd2:	4628      	mov	r0, r5
 8001dd4:	47c0      	blx	r8
 8001dd6:	4306      	orrs	r6, r0
 8001dd8:	3568      	adds	r5, #104	; 0x68
 8001dda:	e7ef      	b.n	8001dbc <_fwalk+0x18>

08001ddc <_fwalk_reent>:
 8001ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001de0:	4680      	mov	r8, r0
 8001de2:	4689      	mov	r9, r1
 8001de4:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 8001de8:	2600      	movs	r6, #0
 8001dea:	b914      	cbnz	r4, 8001df2 <_fwalk_reent+0x16>
 8001dec:	4630      	mov	r0, r6
 8001dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001df2:	68a5      	ldr	r5, [r4, #8]
 8001df4:	6867      	ldr	r7, [r4, #4]
 8001df6:	3f01      	subs	r7, #1
 8001df8:	d501      	bpl.n	8001dfe <_fwalk_reent+0x22>
 8001dfa:	6824      	ldr	r4, [r4, #0]
 8001dfc:	e7f5      	b.n	8001dea <_fwalk_reent+0xe>
 8001dfe:	89ab      	ldrh	r3, [r5, #12]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d907      	bls.n	8001e14 <_fwalk_reent+0x38>
 8001e04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	d003      	beq.n	8001e14 <_fwalk_reent+0x38>
 8001e0c:	4629      	mov	r1, r5
 8001e0e:	4640      	mov	r0, r8
 8001e10:	47c8      	blx	r9
 8001e12:	4306      	orrs	r6, r0
 8001e14:	3568      	adds	r5, #104	; 0x68
 8001e16:	e7ee      	b.n	8001df6 <_fwalk_reent+0x1a>

08001e18 <__retarget_lock_init_recursive>:
 8001e18:	4770      	bx	lr

08001e1a <__retarget_lock_close_recursive>:
 8001e1a:	4770      	bx	lr

08001e1c <__retarget_lock_acquire_recursive>:
 8001e1c:	4770      	bx	lr

08001e1e <__retarget_lock_release_recursive>:
 8001e1e:	4770      	bx	lr

08001e20 <__swhatbuf_r>:
 8001e20:	b570      	push	{r4, r5, r6, lr}
 8001e22:	460e      	mov	r6, r1
 8001e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e28:	2900      	cmp	r1, #0
 8001e2a:	b090      	sub	sp, #64	; 0x40
 8001e2c:	4614      	mov	r4, r2
 8001e2e:	461d      	mov	r5, r3
 8001e30:	da09      	bge.n	8001e46 <__swhatbuf_r+0x26>
 8001e32:	89b3      	ldrh	r3, [r6, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001e3a:	602a      	str	r2, [r5, #0]
 8001e3c:	d116      	bne.n	8001e6c <__swhatbuf_r+0x4c>
 8001e3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e42:	6023      	str	r3, [r4, #0]
 8001e44:	e015      	b.n	8001e72 <__swhatbuf_r+0x52>
 8001e46:	aa01      	add	r2, sp, #4
 8001e48:	f000 fbfa 	bl	8002640 <_fstat_r>
 8001e4c:	2800      	cmp	r0, #0
 8001e4e:	dbf0      	blt.n	8001e32 <__swhatbuf_r+0x12>
 8001e50:	9a02      	ldr	r2, [sp, #8]
 8001e52:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001e56:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001e5a:	425a      	negs	r2, r3
 8001e5c:	415a      	adcs	r2, r3
 8001e5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e62:	602a      	str	r2, [r5, #0]
 8001e64:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001e68:	6023      	str	r3, [r4, #0]
 8001e6a:	e002      	b.n	8001e72 <__swhatbuf_r+0x52>
 8001e6c:	2340      	movs	r3, #64	; 0x40
 8001e6e:	6023      	str	r3, [r4, #0]
 8001e70:	4610      	mov	r0, r2
 8001e72:	b010      	add	sp, #64	; 0x40
 8001e74:	bd70      	pop	{r4, r5, r6, pc}
	...

08001e78 <__smakebuf_r>:
 8001e78:	898b      	ldrh	r3, [r1, #12]
 8001e7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001e7c:	079d      	lsls	r5, r3, #30
 8001e7e:	4606      	mov	r6, r0
 8001e80:	460c      	mov	r4, r1
 8001e82:	d507      	bpl.n	8001e94 <__smakebuf_r+0x1c>
 8001e84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001e88:	6023      	str	r3, [r4, #0]
 8001e8a:	6123      	str	r3, [r4, #16]
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	6163      	str	r3, [r4, #20]
 8001e90:	b002      	add	sp, #8
 8001e92:	bd70      	pop	{r4, r5, r6, pc}
 8001e94:	ab01      	add	r3, sp, #4
 8001e96:	466a      	mov	r2, sp
 8001e98:	f7ff ffc2 	bl	8001e20 <__swhatbuf_r>
 8001e9c:	9900      	ldr	r1, [sp, #0]
 8001e9e:	4605      	mov	r5, r0
 8001ea0:	4630      	mov	r0, r6
 8001ea2:	f000 f829 	bl	8001ef8 <_malloc_r>
 8001ea6:	b948      	cbnz	r0, 8001ebc <__smakebuf_r+0x44>
 8001ea8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001eac:	059a      	lsls	r2, r3, #22
 8001eae:	d4ef      	bmi.n	8001e90 <__smakebuf_r+0x18>
 8001eb0:	f023 0303 	bic.w	r3, r3, #3
 8001eb4:	f043 0302 	orr.w	r3, r3, #2
 8001eb8:	81a3      	strh	r3, [r4, #12]
 8001eba:	e7e3      	b.n	8001e84 <__smakebuf_r+0xc>
 8001ebc:	4b0d      	ldr	r3, [pc, #52]	; (8001ef4 <__smakebuf_r+0x7c>)
 8001ebe:	62b3      	str	r3, [r6, #40]	; 0x28
 8001ec0:	89a3      	ldrh	r3, [r4, #12]
 8001ec2:	6020      	str	r0, [r4, #0]
 8001ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ec8:	81a3      	strh	r3, [r4, #12]
 8001eca:	9b00      	ldr	r3, [sp, #0]
 8001ecc:	6163      	str	r3, [r4, #20]
 8001ece:	9b01      	ldr	r3, [sp, #4]
 8001ed0:	6120      	str	r0, [r4, #16]
 8001ed2:	b15b      	cbz	r3, 8001eec <__smakebuf_r+0x74>
 8001ed4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ed8:	4630      	mov	r0, r6
 8001eda:	f000 fbc3 	bl	8002664 <_isatty_r>
 8001ede:	b128      	cbz	r0, 8001eec <__smakebuf_r+0x74>
 8001ee0:	89a3      	ldrh	r3, [r4, #12]
 8001ee2:	f023 0303 	bic.w	r3, r3, #3
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	81a3      	strh	r3, [r4, #12]
 8001eec:	89a3      	ldrh	r3, [r4, #12]
 8001eee:	431d      	orrs	r5, r3
 8001ef0:	81a5      	strh	r5, [r4, #12]
 8001ef2:	e7cd      	b.n	8001e90 <__smakebuf_r+0x18>
 8001ef4:	080019d1 	.word	0x080019d1

08001ef8 <_malloc_r>:
 8001ef8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001efc:	f101 040b 	add.w	r4, r1, #11
 8001f00:	2c16      	cmp	r4, #22
 8001f02:	4681      	mov	r9, r0
 8001f04:	d907      	bls.n	8001f16 <_malloc_r+0x1e>
 8001f06:	f034 0407 	bics.w	r4, r4, #7
 8001f0a:	d505      	bpl.n	8001f18 <_malloc_r+0x20>
 8001f0c:	230c      	movs	r3, #12
 8001f0e:	f8c9 3000 	str.w	r3, [r9]
 8001f12:	2600      	movs	r6, #0
 8001f14:	e131      	b.n	800217a <_malloc_r+0x282>
 8001f16:	2410      	movs	r4, #16
 8001f18:	428c      	cmp	r4, r1
 8001f1a:	d3f7      	bcc.n	8001f0c <_malloc_r+0x14>
 8001f1c:	4648      	mov	r0, r9
 8001f1e:	f000 fa01 	bl	8002324 <__malloc_lock>
 8001f22:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8001f26:	4d9c      	ldr	r5, [pc, #624]	; (8002198 <_malloc_r+0x2a0>)
 8001f28:	d236      	bcs.n	8001f98 <_malloc_r+0xa0>
 8001f2a:	f104 0208 	add.w	r2, r4, #8
 8001f2e:	442a      	add	r2, r5
 8001f30:	f1a2 0108 	sub.w	r1, r2, #8
 8001f34:	6856      	ldr	r6, [r2, #4]
 8001f36:	428e      	cmp	r6, r1
 8001f38:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8001f3c:	d102      	bne.n	8001f44 <_malloc_r+0x4c>
 8001f3e:	68d6      	ldr	r6, [r2, #12]
 8001f40:	42b2      	cmp	r2, r6
 8001f42:	d010      	beq.n	8001f66 <_malloc_r+0x6e>
 8001f44:	6873      	ldr	r3, [r6, #4]
 8001f46:	68f2      	ldr	r2, [r6, #12]
 8001f48:	68b1      	ldr	r1, [r6, #8]
 8001f4a:	f023 0303 	bic.w	r3, r3, #3
 8001f4e:	60ca      	str	r2, [r1, #12]
 8001f50:	4433      	add	r3, r6
 8001f52:	6091      	str	r1, [r2, #8]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	f042 0201 	orr.w	r2, r2, #1
 8001f5a:	605a      	str	r2, [r3, #4]
 8001f5c:	4648      	mov	r0, r9
 8001f5e:	f000 f9e7 	bl	8002330 <__malloc_unlock>
 8001f62:	3608      	adds	r6, #8
 8001f64:	e109      	b.n	800217a <_malloc_r+0x282>
 8001f66:	3302      	adds	r3, #2
 8001f68:	4a8c      	ldr	r2, [pc, #560]	; (800219c <_malloc_r+0x2a4>)
 8001f6a:	692e      	ldr	r6, [r5, #16]
 8001f6c:	4296      	cmp	r6, r2
 8001f6e:	4611      	mov	r1, r2
 8001f70:	d06d      	beq.n	800204e <_malloc_r+0x156>
 8001f72:	6870      	ldr	r0, [r6, #4]
 8001f74:	f020 0003 	bic.w	r0, r0, #3
 8001f78:	1b07      	subs	r7, r0, r4
 8001f7a:	2f0f      	cmp	r7, #15
 8001f7c:	dd47      	ble.n	800200e <_malloc_r+0x116>
 8001f7e:	1933      	adds	r3, r6, r4
 8001f80:	f044 0401 	orr.w	r4, r4, #1
 8001f84:	6074      	str	r4, [r6, #4]
 8001f86:	616b      	str	r3, [r5, #20]
 8001f88:	612b      	str	r3, [r5, #16]
 8001f8a:	60da      	str	r2, [r3, #12]
 8001f8c:	609a      	str	r2, [r3, #8]
 8001f8e:	f047 0201 	orr.w	r2, r7, #1
 8001f92:	605a      	str	r2, [r3, #4]
 8001f94:	5037      	str	r7, [r6, r0]
 8001f96:	e7e1      	b.n	8001f5c <_malloc_r+0x64>
 8001f98:	0a63      	lsrs	r3, r4, #9
 8001f9a:	d02a      	beq.n	8001ff2 <_malloc_r+0xfa>
 8001f9c:	2b04      	cmp	r3, #4
 8001f9e:	d812      	bhi.n	8001fc6 <_malloc_r+0xce>
 8001fa0:	09a3      	lsrs	r3, r4, #6
 8001fa2:	3338      	adds	r3, #56	; 0x38
 8001fa4:	1c5a      	adds	r2, r3, #1
 8001fa6:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8001faa:	f1a2 0008 	sub.w	r0, r2, #8
 8001fae:	6856      	ldr	r6, [r2, #4]
 8001fb0:	4286      	cmp	r6, r0
 8001fb2:	d006      	beq.n	8001fc2 <_malloc_r+0xca>
 8001fb4:	6872      	ldr	r2, [r6, #4]
 8001fb6:	f022 0203 	bic.w	r2, r2, #3
 8001fba:	1b11      	subs	r1, r2, r4
 8001fbc:	290f      	cmp	r1, #15
 8001fbe:	dd1c      	ble.n	8001ffa <_malloc_r+0x102>
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	e7d0      	b.n	8001f68 <_malloc_r+0x70>
 8001fc6:	2b14      	cmp	r3, #20
 8001fc8:	d801      	bhi.n	8001fce <_malloc_r+0xd6>
 8001fca:	335b      	adds	r3, #91	; 0x5b
 8001fcc:	e7ea      	b.n	8001fa4 <_malloc_r+0xac>
 8001fce:	2b54      	cmp	r3, #84	; 0x54
 8001fd0:	d802      	bhi.n	8001fd8 <_malloc_r+0xe0>
 8001fd2:	0b23      	lsrs	r3, r4, #12
 8001fd4:	336e      	adds	r3, #110	; 0x6e
 8001fd6:	e7e5      	b.n	8001fa4 <_malloc_r+0xac>
 8001fd8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8001fdc:	d802      	bhi.n	8001fe4 <_malloc_r+0xec>
 8001fde:	0be3      	lsrs	r3, r4, #15
 8001fe0:	3377      	adds	r3, #119	; 0x77
 8001fe2:	e7df      	b.n	8001fa4 <_malloc_r+0xac>
 8001fe4:	f240 5254 	movw	r2, #1364	; 0x554
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d804      	bhi.n	8001ff6 <_malloc_r+0xfe>
 8001fec:	0ca3      	lsrs	r3, r4, #18
 8001fee:	337c      	adds	r3, #124	; 0x7c
 8001ff0:	e7d8      	b.n	8001fa4 <_malloc_r+0xac>
 8001ff2:	233f      	movs	r3, #63	; 0x3f
 8001ff4:	e7d6      	b.n	8001fa4 <_malloc_r+0xac>
 8001ff6:	237e      	movs	r3, #126	; 0x7e
 8001ff8:	e7d4      	b.n	8001fa4 <_malloc_r+0xac>
 8001ffa:	2900      	cmp	r1, #0
 8001ffc:	68f1      	ldr	r1, [r6, #12]
 8001ffe:	db04      	blt.n	800200a <_malloc_r+0x112>
 8002000:	68b3      	ldr	r3, [r6, #8]
 8002002:	60d9      	str	r1, [r3, #12]
 8002004:	608b      	str	r3, [r1, #8]
 8002006:	18b3      	adds	r3, r6, r2
 8002008:	e7a4      	b.n	8001f54 <_malloc_r+0x5c>
 800200a:	460e      	mov	r6, r1
 800200c:	e7d0      	b.n	8001fb0 <_malloc_r+0xb8>
 800200e:	2f00      	cmp	r7, #0
 8002010:	616a      	str	r2, [r5, #20]
 8002012:	612a      	str	r2, [r5, #16]
 8002014:	db05      	blt.n	8002022 <_malloc_r+0x12a>
 8002016:	4430      	add	r0, r6
 8002018:	6843      	ldr	r3, [r0, #4]
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	6043      	str	r3, [r0, #4]
 8002020:	e79c      	b.n	8001f5c <_malloc_r+0x64>
 8002022:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002026:	d244      	bcs.n	80020b2 <_malloc_r+0x1ba>
 8002028:	08c0      	lsrs	r0, r0, #3
 800202a:	1087      	asrs	r7, r0, #2
 800202c:	2201      	movs	r2, #1
 800202e:	fa02 f707 	lsl.w	r7, r2, r7
 8002032:	686a      	ldr	r2, [r5, #4]
 8002034:	3001      	adds	r0, #1
 8002036:	433a      	orrs	r2, r7
 8002038:	606a      	str	r2, [r5, #4]
 800203a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800203e:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8002042:	60b7      	str	r7, [r6, #8]
 8002044:	3a08      	subs	r2, #8
 8002046:	60f2      	str	r2, [r6, #12]
 8002048:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 800204c:	60fe      	str	r6, [r7, #12]
 800204e:	2001      	movs	r0, #1
 8002050:	109a      	asrs	r2, r3, #2
 8002052:	fa00 f202 	lsl.w	r2, r0, r2
 8002056:	6868      	ldr	r0, [r5, #4]
 8002058:	4282      	cmp	r2, r0
 800205a:	f200 80a1 	bhi.w	80021a0 <_malloc_r+0x2a8>
 800205e:	4202      	tst	r2, r0
 8002060:	d106      	bne.n	8002070 <_malloc_r+0x178>
 8002062:	f023 0303 	bic.w	r3, r3, #3
 8002066:	0052      	lsls	r2, r2, #1
 8002068:	4202      	tst	r2, r0
 800206a:	f103 0304 	add.w	r3, r3, #4
 800206e:	d0fa      	beq.n	8002066 <_malloc_r+0x16e>
 8002070:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8002074:	46e0      	mov	r8, ip
 8002076:	469e      	mov	lr, r3
 8002078:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800207c:	4546      	cmp	r6, r8
 800207e:	d153      	bne.n	8002128 <_malloc_r+0x230>
 8002080:	f10e 0e01 	add.w	lr, lr, #1
 8002084:	f01e 0f03 	tst.w	lr, #3
 8002088:	f108 0808 	add.w	r8, r8, #8
 800208c:	d1f4      	bne.n	8002078 <_malloc_r+0x180>
 800208e:	0798      	lsls	r0, r3, #30
 8002090:	d179      	bne.n	8002186 <_malloc_r+0x28e>
 8002092:	686b      	ldr	r3, [r5, #4]
 8002094:	ea23 0302 	bic.w	r3, r3, r2
 8002098:	606b      	str	r3, [r5, #4]
 800209a:	6868      	ldr	r0, [r5, #4]
 800209c:	0052      	lsls	r2, r2, #1
 800209e:	4282      	cmp	r2, r0
 80020a0:	d87e      	bhi.n	80021a0 <_malloc_r+0x2a8>
 80020a2:	2a00      	cmp	r2, #0
 80020a4:	d07c      	beq.n	80021a0 <_malloc_r+0x2a8>
 80020a6:	4673      	mov	r3, lr
 80020a8:	4202      	tst	r2, r0
 80020aa:	d1e1      	bne.n	8002070 <_malloc_r+0x178>
 80020ac:	3304      	adds	r3, #4
 80020ae:	0052      	lsls	r2, r2, #1
 80020b0:	e7fa      	b.n	80020a8 <_malloc_r+0x1b0>
 80020b2:	0a42      	lsrs	r2, r0, #9
 80020b4:	2a04      	cmp	r2, #4
 80020b6:	d815      	bhi.n	80020e4 <_malloc_r+0x1ec>
 80020b8:	0982      	lsrs	r2, r0, #6
 80020ba:	3238      	adds	r2, #56	; 0x38
 80020bc:	1c57      	adds	r7, r2, #1
 80020be:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 80020c2:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 80020c6:	45be      	cmp	lr, r7
 80020c8:	d126      	bne.n	8002118 <_malloc_r+0x220>
 80020ca:	2001      	movs	r0, #1
 80020cc:	1092      	asrs	r2, r2, #2
 80020ce:	fa00 f202 	lsl.w	r2, r0, r2
 80020d2:	6868      	ldr	r0, [r5, #4]
 80020d4:	4310      	orrs	r0, r2
 80020d6:	6068      	str	r0, [r5, #4]
 80020d8:	f8c6 e00c 	str.w	lr, [r6, #12]
 80020dc:	60b7      	str	r7, [r6, #8]
 80020de:	f8ce 6008 	str.w	r6, [lr, #8]
 80020e2:	e7b3      	b.n	800204c <_malloc_r+0x154>
 80020e4:	2a14      	cmp	r2, #20
 80020e6:	d801      	bhi.n	80020ec <_malloc_r+0x1f4>
 80020e8:	325b      	adds	r2, #91	; 0x5b
 80020ea:	e7e7      	b.n	80020bc <_malloc_r+0x1c4>
 80020ec:	2a54      	cmp	r2, #84	; 0x54
 80020ee:	d802      	bhi.n	80020f6 <_malloc_r+0x1fe>
 80020f0:	0b02      	lsrs	r2, r0, #12
 80020f2:	326e      	adds	r2, #110	; 0x6e
 80020f4:	e7e2      	b.n	80020bc <_malloc_r+0x1c4>
 80020f6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80020fa:	d802      	bhi.n	8002102 <_malloc_r+0x20a>
 80020fc:	0bc2      	lsrs	r2, r0, #15
 80020fe:	3277      	adds	r2, #119	; 0x77
 8002100:	e7dc      	b.n	80020bc <_malloc_r+0x1c4>
 8002102:	f240 5754 	movw	r7, #1364	; 0x554
 8002106:	42ba      	cmp	r2, r7
 8002108:	bf9a      	itte	ls
 800210a:	0c82      	lsrls	r2, r0, #18
 800210c:	327c      	addls	r2, #124	; 0x7c
 800210e:	227e      	movhi	r2, #126	; 0x7e
 8002110:	e7d4      	b.n	80020bc <_malloc_r+0x1c4>
 8002112:	68bf      	ldr	r7, [r7, #8]
 8002114:	45be      	cmp	lr, r7
 8002116:	d004      	beq.n	8002122 <_malloc_r+0x22a>
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	f022 0203 	bic.w	r2, r2, #3
 800211e:	4290      	cmp	r0, r2
 8002120:	d3f7      	bcc.n	8002112 <_malloc_r+0x21a>
 8002122:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8002126:	e7d7      	b.n	80020d8 <_malloc_r+0x1e0>
 8002128:	6870      	ldr	r0, [r6, #4]
 800212a:	68f7      	ldr	r7, [r6, #12]
 800212c:	f020 0003 	bic.w	r0, r0, #3
 8002130:	eba0 0a04 	sub.w	sl, r0, r4
 8002134:	f1ba 0f0f 	cmp.w	sl, #15
 8002138:	dd10      	ble.n	800215c <_malloc_r+0x264>
 800213a:	68b2      	ldr	r2, [r6, #8]
 800213c:	1933      	adds	r3, r6, r4
 800213e:	f044 0401 	orr.w	r4, r4, #1
 8002142:	6074      	str	r4, [r6, #4]
 8002144:	60d7      	str	r7, [r2, #12]
 8002146:	60ba      	str	r2, [r7, #8]
 8002148:	f04a 0201 	orr.w	r2, sl, #1
 800214c:	616b      	str	r3, [r5, #20]
 800214e:	612b      	str	r3, [r5, #16]
 8002150:	60d9      	str	r1, [r3, #12]
 8002152:	6099      	str	r1, [r3, #8]
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	f846 a000 	str.w	sl, [r6, r0]
 800215a:	e6ff      	b.n	8001f5c <_malloc_r+0x64>
 800215c:	f1ba 0f00 	cmp.w	sl, #0
 8002160:	db0f      	blt.n	8002182 <_malloc_r+0x28a>
 8002162:	4430      	add	r0, r6
 8002164:	6843      	ldr	r3, [r0, #4]
 8002166:	f043 0301 	orr.w	r3, r3, #1
 800216a:	6043      	str	r3, [r0, #4]
 800216c:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8002170:	4648      	mov	r0, r9
 8002172:	60df      	str	r7, [r3, #12]
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	f000 f8db 	bl	8002330 <__malloc_unlock>
 800217a:	4630      	mov	r0, r6
 800217c:	b003      	add	sp, #12
 800217e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002182:	463e      	mov	r6, r7
 8002184:	e77a      	b.n	800207c <_malloc_r+0x184>
 8002186:	f85c 0908 	ldr.w	r0, [ip], #-8
 800218a:	4584      	cmp	ip, r0
 800218c:	f103 33ff 	add.w	r3, r3, #4294967295
 8002190:	f43f af7d 	beq.w	800208e <_malloc_r+0x196>
 8002194:	e781      	b.n	800209a <_malloc_r+0x1a2>
 8002196:	bf00      	nop
 8002198:	200000f8 	.word	0x200000f8
 800219c:	20000100 	.word	0x20000100
 80021a0:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80021a4:	f8db 6004 	ldr.w	r6, [fp, #4]
 80021a8:	f026 0603 	bic.w	r6, r6, #3
 80021ac:	42b4      	cmp	r4, r6
 80021ae:	d803      	bhi.n	80021b8 <_malloc_r+0x2c0>
 80021b0:	1b33      	subs	r3, r6, r4
 80021b2:	2b0f      	cmp	r3, #15
 80021b4:	f300 8096 	bgt.w	80022e4 <_malloc_r+0x3ec>
 80021b8:	4a4f      	ldr	r2, [pc, #316]	; (80022f8 <_malloc_r+0x400>)
 80021ba:	6817      	ldr	r7, [r2, #0]
 80021bc:	4a4f      	ldr	r2, [pc, #316]	; (80022fc <_malloc_r+0x404>)
 80021be:	6811      	ldr	r1, [r2, #0]
 80021c0:	3710      	adds	r7, #16
 80021c2:	3101      	adds	r1, #1
 80021c4:	eb0b 0306 	add.w	r3, fp, r6
 80021c8:	4427      	add	r7, r4
 80021ca:	d005      	beq.n	80021d8 <_malloc_r+0x2e0>
 80021cc:	494c      	ldr	r1, [pc, #304]	; (8002300 <_malloc_r+0x408>)
 80021ce:	3901      	subs	r1, #1
 80021d0:	440f      	add	r7, r1
 80021d2:	3101      	adds	r1, #1
 80021d4:	4249      	negs	r1, r1
 80021d6:	400f      	ands	r7, r1
 80021d8:	4639      	mov	r1, r7
 80021da:	4648      	mov	r0, r9
 80021dc:	9201      	str	r2, [sp, #4]
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	f000 f94c 	bl	800247c <_sbrk_r>
 80021e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80021e8:	4680      	mov	r8, r0
 80021ea:	d056      	beq.n	800229a <_malloc_r+0x3a2>
 80021ec:	9b00      	ldr	r3, [sp, #0]
 80021ee:	9a01      	ldr	r2, [sp, #4]
 80021f0:	4283      	cmp	r3, r0
 80021f2:	d901      	bls.n	80021f8 <_malloc_r+0x300>
 80021f4:	45ab      	cmp	fp, r5
 80021f6:	d150      	bne.n	800229a <_malloc_r+0x3a2>
 80021f8:	4842      	ldr	r0, [pc, #264]	; (8002304 <_malloc_r+0x40c>)
 80021fa:	6801      	ldr	r1, [r0, #0]
 80021fc:	4543      	cmp	r3, r8
 80021fe:	eb07 0e01 	add.w	lr, r7, r1
 8002202:	f8c0 e000 	str.w	lr, [r0]
 8002206:	4940      	ldr	r1, [pc, #256]	; (8002308 <_malloc_r+0x410>)
 8002208:	4682      	mov	sl, r0
 800220a:	d113      	bne.n	8002234 <_malloc_r+0x33c>
 800220c:	420b      	tst	r3, r1
 800220e:	d111      	bne.n	8002234 <_malloc_r+0x33c>
 8002210:	68ab      	ldr	r3, [r5, #8]
 8002212:	443e      	add	r6, r7
 8002214:	f046 0601 	orr.w	r6, r6, #1
 8002218:	605e      	str	r6, [r3, #4]
 800221a:	4a3c      	ldr	r2, [pc, #240]	; (800230c <_malloc_r+0x414>)
 800221c:	f8da 3000 	ldr.w	r3, [sl]
 8002220:	6811      	ldr	r1, [r2, #0]
 8002222:	428b      	cmp	r3, r1
 8002224:	bf88      	it	hi
 8002226:	6013      	strhi	r3, [r2, #0]
 8002228:	4a39      	ldr	r2, [pc, #228]	; (8002310 <_malloc_r+0x418>)
 800222a:	6811      	ldr	r1, [r2, #0]
 800222c:	428b      	cmp	r3, r1
 800222e:	bf88      	it	hi
 8002230:	6013      	strhi	r3, [r2, #0]
 8002232:	e032      	b.n	800229a <_malloc_r+0x3a2>
 8002234:	6810      	ldr	r0, [r2, #0]
 8002236:	3001      	adds	r0, #1
 8002238:	bf1b      	ittet	ne
 800223a:	eba8 0303 	subne.w	r3, r8, r3
 800223e:	4473      	addne	r3, lr
 8002240:	f8c2 8000 	streq.w	r8, [r2]
 8002244:	f8ca 3000 	strne.w	r3, [sl]
 8002248:	f018 0007 	ands.w	r0, r8, #7
 800224c:	bf1c      	itt	ne
 800224e:	f1c0 0008 	rsbne	r0, r0, #8
 8002252:	4480      	addne	r8, r0
 8002254:	4b2a      	ldr	r3, [pc, #168]	; (8002300 <_malloc_r+0x408>)
 8002256:	4447      	add	r7, r8
 8002258:	4418      	add	r0, r3
 800225a:	400f      	ands	r7, r1
 800225c:	1bc7      	subs	r7, r0, r7
 800225e:	4639      	mov	r1, r7
 8002260:	4648      	mov	r0, r9
 8002262:	f000 f90b 	bl	800247c <_sbrk_r>
 8002266:	1c43      	adds	r3, r0, #1
 8002268:	bf08      	it	eq
 800226a:	4640      	moveq	r0, r8
 800226c:	f8da 3000 	ldr.w	r3, [sl]
 8002270:	f8c5 8008 	str.w	r8, [r5, #8]
 8002274:	bf08      	it	eq
 8002276:	2700      	moveq	r7, #0
 8002278:	eba0 0008 	sub.w	r0, r0, r8
 800227c:	443b      	add	r3, r7
 800227e:	4407      	add	r7, r0
 8002280:	f047 0701 	orr.w	r7, r7, #1
 8002284:	45ab      	cmp	fp, r5
 8002286:	f8ca 3000 	str.w	r3, [sl]
 800228a:	f8c8 7004 	str.w	r7, [r8, #4]
 800228e:	d0c4      	beq.n	800221a <_malloc_r+0x322>
 8002290:	2e0f      	cmp	r6, #15
 8002292:	d810      	bhi.n	80022b6 <_malloc_r+0x3be>
 8002294:	2301      	movs	r3, #1
 8002296:	f8c8 3004 	str.w	r3, [r8, #4]
 800229a:	68ab      	ldr	r3, [r5, #8]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	f022 0203 	bic.w	r2, r2, #3
 80022a2:	4294      	cmp	r4, r2
 80022a4:	eba2 0304 	sub.w	r3, r2, r4
 80022a8:	d801      	bhi.n	80022ae <_malloc_r+0x3b6>
 80022aa:	2b0f      	cmp	r3, #15
 80022ac:	dc1a      	bgt.n	80022e4 <_malloc_r+0x3ec>
 80022ae:	4648      	mov	r0, r9
 80022b0:	f000 f83e 	bl	8002330 <__malloc_unlock>
 80022b4:	e62d      	b.n	8001f12 <_malloc_r+0x1a>
 80022b6:	f8db 3004 	ldr.w	r3, [fp, #4]
 80022ba:	3e0c      	subs	r6, #12
 80022bc:	f026 0607 	bic.w	r6, r6, #7
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	4333      	orrs	r3, r6
 80022c6:	f8cb 3004 	str.w	r3, [fp, #4]
 80022ca:	eb0b 0306 	add.w	r3, fp, r6
 80022ce:	2205      	movs	r2, #5
 80022d0:	2e0f      	cmp	r6, #15
 80022d2:	605a      	str	r2, [r3, #4]
 80022d4:	609a      	str	r2, [r3, #8]
 80022d6:	d9a0      	bls.n	800221a <_malloc_r+0x322>
 80022d8:	f10b 0108 	add.w	r1, fp, #8
 80022dc:	4648      	mov	r0, r9
 80022de:	f7ff fca5 	bl	8001c2c <_free_r>
 80022e2:	e79a      	b.n	800221a <_malloc_r+0x322>
 80022e4:	68ae      	ldr	r6, [r5, #8]
 80022e6:	f044 0201 	orr.w	r2, r4, #1
 80022ea:	4434      	add	r4, r6
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	6072      	str	r2, [r6, #4]
 80022f2:	60ac      	str	r4, [r5, #8]
 80022f4:	6063      	str	r3, [r4, #4]
 80022f6:	e631      	b.n	8001f5c <_malloc_r+0x64>
 80022f8:	20000554 	.word	0x20000554
 80022fc:	20000500 	.word	0x20000500
 8002300:	00000080 	.word	0x00000080
 8002304:	20000524 	.word	0x20000524
 8002308:	0000007f 	.word	0x0000007f
 800230c:	2000054c 	.word	0x2000054c
 8002310:	20000550 	.word	0x20000550

08002314 <memset>:
 8002314:	4402      	add	r2, r0
 8002316:	4603      	mov	r3, r0
 8002318:	4293      	cmp	r3, r2
 800231a:	d100      	bne.n	800231e <memset+0xa>
 800231c:	4770      	bx	lr
 800231e:	f803 1b01 	strb.w	r1, [r3], #1
 8002322:	e7f9      	b.n	8002318 <memset+0x4>

08002324 <__malloc_lock>:
 8002324:	4801      	ldr	r0, [pc, #4]	; (800232c <__malloc_lock+0x8>)
 8002326:	f7ff bd79 	b.w	8001e1c <__retarget_lock_acquire_recursive>
 800232a:	bf00      	nop
 800232c:	200005e0 	.word	0x200005e0

08002330 <__malloc_unlock>:
 8002330:	4801      	ldr	r0, [pc, #4]	; (8002338 <__malloc_unlock+0x8>)
 8002332:	f7ff bd74 	b.w	8001e1e <__retarget_lock_release_recursive>
 8002336:	bf00      	nop
 8002338:	200005e0 	.word	0x200005e0

0800233c <lflush>:
 800233c:	8983      	ldrh	r3, [r0, #12]
 800233e:	f003 0309 	and.w	r3, r3, #9
 8002342:	2b09      	cmp	r3, #9
 8002344:	d101      	bne.n	800234a <lflush+0xe>
 8002346:	f7ff bb31 	b.w	80019ac <fflush>
 800234a:	2000      	movs	r0, #0
 800234c:	4770      	bx	lr
	...

08002350 <__srefill_r>:
 8002350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002352:	460c      	mov	r4, r1
 8002354:	4605      	mov	r5, r0
 8002356:	b118      	cbz	r0, 8002360 <__srefill_r+0x10>
 8002358:	6983      	ldr	r3, [r0, #24]
 800235a:	b90b      	cbnz	r3, 8002360 <__srefill_r+0x10>
 800235c:	f7ff fb90 	bl	8001a80 <__sinit>
 8002360:	4b41      	ldr	r3, [pc, #260]	; (8002468 <__srefill_r+0x118>)
 8002362:	429c      	cmp	r4, r3
 8002364:	d115      	bne.n	8002392 <__srefill_r+0x42>
 8002366:	686c      	ldr	r4, [r5, #4]
 8002368:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800236c:	049f      	lsls	r7, r3, #18
 800236e:	d406      	bmi.n	800237e <__srefill_r+0x2e>
 8002370:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002374:	81a3      	strh	r3, [r4, #12]
 8002376:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002378:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800237c:	6663      	str	r3, [r4, #100]	; 0x64
 800237e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002382:	2300      	movs	r3, #0
 8002384:	6063      	str	r3, [r4, #4]
 8002386:	b293      	uxth	r3, r2
 8002388:	069e      	lsls	r6, r3, #26
 800238a:	d50c      	bpl.n	80023a6 <__srefill_r+0x56>
 800238c:	f04f 30ff 	mov.w	r0, #4294967295
 8002390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002392:	4b36      	ldr	r3, [pc, #216]	; (800246c <__srefill_r+0x11c>)
 8002394:	429c      	cmp	r4, r3
 8002396:	d101      	bne.n	800239c <__srefill_r+0x4c>
 8002398:	68ac      	ldr	r4, [r5, #8]
 800239a:	e7e5      	b.n	8002368 <__srefill_r+0x18>
 800239c:	4b34      	ldr	r3, [pc, #208]	; (8002470 <__srefill_r+0x120>)
 800239e:	429c      	cmp	r4, r3
 80023a0:	bf08      	it	eq
 80023a2:	68ec      	ldreq	r4, [r5, #12]
 80023a4:	e7e0      	b.n	8002368 <__srefill_r+0x18>
 80023a6:	0758      	lsls	r0, r3, #29
 80023a8:	d448      	bmi.n	800243c <__srefill_r+0xec>
 80023aa:	06d9      	lsls	r1, r3, #27
 80023ac:	d405      	bmi.n	80023ba <__srefill_r+0x6a>
 80023ae:	2309      	movs	r3, #9
 80023b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023b4:	602b      	str	r3, [r5, #0]
 80023b6:	81a2      	strh	r2, [r4, #12]
 80023b8:	e7e8      	b.n	800238c <__srefill_r+0x3c>
 80023ba:	071a      	lsls	r2, r3, #28
 80023bc:	d50b      	bpl.n	80023d6 <__srefill_r+0x86>
 80023be:	4621      	mov	r1, r4
 80023c0:	4628      	mov	r0, r5
 80023c2:	f7ff fab7 	bl	8001934 <_fflush_r>
 80023c6:	2800      	cmp	r0, #0
 80023c8:	d1e0      	bne.n	800238c <__srefill_r+0x3c>
 80023ca:	89a3      	ldrh	r3, [r4, #12]
 80023cc:	60a0      	str	r0, [r4, #8]
 80023ce:	f023 0308 	bic.w	r3, r3, #8
 80023d2:	81a3      	strh	r3, [r4, #12]
 80023d4:	61a0      	str	r0, [r4, #24]
 80023d6:	89a3      	ldrh	r3, [r4, #12]
 80023d8:	f043 0304 	orr.w	r3, r3, #4
 80023dc:	81a3      	strh	r3, [r4, #12]
 80023de:	6923      	ldr	r3, [r4, #16]
 80023e0:	b91b      	cbnz	r3, 80023ea <__srefill_r+0x9a>
 80023e2:	4621      	mov	r1, r4
 80023e4:	4628      	mov	r0, r5
 80023e6:	f7ff fd47 	bl	8001e78 <__smakebuf_r>
 80023ea:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80023ee:	b2be      	uxth	r6, r7
 80023f0:	07b3      	lsls	r3, r6, #30
 80023f2:	d00f      	beq.n	8002414 <__srefill_r+0xc4>
 80023f4:	2301      	movs	r3, #1
 80023f6:	81a3      	strh	r3, [r4, #12]
 80023f8:	4b1e      	ldr	r3, [pc, #120]	; (8002474 <__srefill_r+0x124>)
 80023fa:	491f      	ldr	r1, [pc, #124]	; (8002478 <__srefill_r+0x128>)
 80023fc:	6818      	ldr	r0, [r3, #0]
 80023fe:	f006 0609 	and.w	r6, r6, #9
 8002402:	f7ff fccf 	bl	8001da4 <_fwalk>
 8002406:	2e09      	cmp	r6, #9
 8002408:	81a7      	strh	r7, [r4, #12]
 800240a:	d103      	bne.n	8002414 <__srefill_r+0xc4>
 800240c:	4621      	mov	r1, r4
 800240e:	4628      	mov	r0, r5
 8002410:	f7ff f9fe 	bl	8001810 <__sflush_r>
 8002414:	6922      	ldr	r2, [r4, #16]
 8002416:	6022      	str	r2, [r4, #0]
 8002418:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800241a:	6963      	ldr	r3, [r4, #20]
 800241c:	6a21      	ldr	r1, [r4, #32]
 800241e:	4628      	mov	r0, r5
 8002420:	47b0      	blx	r6
 8002422:	2800      	cmp	r0, #0
 8002424:	6060      	str	r0, [r4, #4]
 8002426:	dc1c      	bgt.n	8002462 <__srefill_r+0x112>
 8002428:	89a3      	ldrh	r3, [r4, #12]
 800242a:	bf17      	itett	ne
 800242c:	2200      	movne	r2, #0
 800242e:	f043 0320 	orreq.w	r3, r3, #32
 8002432:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8002436:	6062      	strne	r2, [r4, #4]
 8002438:	81a3      	strh	r3, [r4, #12]
 800243a:	e7a7      	b.n	800238c <__srefill_r+0x3c>
 800243c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800243e:	2900      	cmp	r1, #0
 8002440:	d0cd      	beq.n	80023de <__srefill_r+0x8e>
 8002442:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002446:	4299      	cmp	r1, r3
 8002448:	d002      	beq.n	8002450 <__srefill_r+0x100>
 800244a:	4628      	mov	r0, r5
 800244c:	f7ff fbee 	bl	8001c2c <_free_r>
 8002450:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002452:	6063      	str	r3, [r4, #4]
 8002454:	2000      	movs	r0, #0
 8002456:	6360      	str	r0, [r4, #52]	; 0x34
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0c0      	beq.n	80023de <__srefill_r+0x8e>
 800245c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800245e:	6023      	str	r3, [r4, #0]
 8002460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002462:	2000      	movs	r0, #0
 8002464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002466:	bf00      	nop
 8002468:	080027b8 	.word	0x080027b8
 800246c:	080027d8 	.word	0x080027d8
 8002470:	08002798 	.word	0x08002798
 8002474:	08002794 	.word	0x08002794
 8002478:	0800233d 	.word	0x0800233d

0800247c <_sbrk_r>:
 800247c:	b538      	push	{r3, r4, r5, lr}
 800247e:	4c06      	ldr	r4, [pc, #24]	; (8002498 <_sbrk_r+0x1c>)
 8002480:	2300      	movs	r3, #0
 8002482:	4605      	mov	r5, r0
 8002484:	4608      	mov	r0, r1
 8002486:	6023      	str	r3, [r4, #0]
 8002488:	f000 f948 	bl	800271c <_sbrk>
 800248c:	1c43      	adds	r3, r0, #1
 800248e:	d102      	bne.n	8002496 <_sbrk_r+0x1a>
 8002490:	6823      	ldr	r3, [r4, #0]
 8002492:	b103      	cbz	r3, 8002496 <_sbrk_r+0x1a>
 8002494:	602b      	str	r3, [r5, #0]
 8002496:	bd38      	pop	{r3, r4, r5, pc}
 8002498:	200005e8 	.word	0x200005e8

0800249c <__sread>:
 800249c:	b510      	push	{r4, lr}
 800249e:	460c      	mov	r4, r1
 80024a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024a4:	f000 f900 	bl	80026a8 <_read_r>
 80024a8:	2800      	cmp	r0, #0
 80024aa:	bfab      	itete	ge
 80024ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80024ae:	89a3      	ldrhlt	r3, [r4, #12]
 80024b0:	181b      	addge	r3, r3, r0
 80024b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80024b6:	bfac      	ite	ge
 80024b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80024ba:	81a3      	strhlt	r3, [r4, #12]
 80024bc:	bd10      	pop	{r4, pc}

080024be <__swrite>:
 80024be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024c2:	461f      	mov	r7, r3
 80024c4:	898b      	ldrh	r3, [r1, #12]
 80024c6:	05db      	lsls	r3, r3, #23
 80024c8:	4605      	mov	r5, r0
 80024ca:	460c      	mov	r4, r1
 80024cc:	4616      	mov	r6, r2
 80024ce:	d505      	bpl.n	80024dc <__swrite+0x1e>
 80024d0:	2302      	movs	r3, #2
 80024d2:	2200      	movs	r2, #0
 80024d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024d8:	f000 f8d4 	bl	8002684 <_lseek_r>
 80024dc:	89a3      	ldrh	r3, [r4, #12]
 80024de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80024e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024e6:	81a3      	strh	r3, [r4, #12]
 80024e8:	4632      	mov	r2, r6
 80024ea:	463b      	mov	r3, r7
 80024ec:	4628      	mov	r0, r5
 80024ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80024f2:	f000 b817 	b.w	8002524 <_write_r>

080024f6 <__sseek>:
 80024f6:	b510      	push	{r4, lr}
 80024f8:	460c      	mov	r4, r1
 80024fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024fe:	f000 f8c1 	bl	8002684 <_lseek_r>
 8002502:	1c43      	adds	r3, r0, #1
 8002504:	89a3      	ldrh	r3, [r4, #12]
 8002506:	bf15      	itete	ne
 8002508:	6560      	strne	r0, [r4, #84]	; 0x54
 800250a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800250e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002512:	81a3      	strheq	r3, [r4, #12]
 8002514:	bf18      	it	ne
 8002516:	81a3      	strhne	r3, [r4, #12]
 8002518:	bd10      	pop	{r4, pc}

0800251a <__sclose>:
 800251a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800251e:	f000 b813 	b.w	8002548 <_close_r>
	...

08002524 <_write_r>:
 8002524:	b538      	push	{r3, r4, r5, lr}
 8002526:	4c07      	ldr	r4, [pc, #28]	; (8002544 <_write_r+0x20>)
 8002528:	4605      	mov	r5, r0
 800252a:	4608      	mov	r0, r1
 800252c:	4611      	mov	r1, r2
 800252e:	2200      	movs	r2, #0
 8002530:	6022      	str	r2, [r4, #0]
 8002532:	461a      	mov	r2, r3
 8002534:	f000 f900 	bl	8002738 <_write>
 8002538:	1c43      	adds	r3, r0, #1
 800253a:	d102      	bne.n	8002542 <_write_r+0x1e>
 800253c:	6823      	ldr	r3, [r4, #0]
 800253e:	b103      	cbz	r3, 8002542 <_write_r+0x1e>
 8002540:	602b      	str	r3, [r5, #0]
 8002542:	bd38      	pop	{r3, r4, r5, pc}
 8002544:	200005e8 	.word	0x200005e8

08002548 <_close_r>:
 8002548:	b538      	push	{r3, r4, r5, lr}
 800254a:	4c06      	ldr	r4, [pc, #24]	; (8002564 <_close_r+0x1c>)
 800254c:	2300      	movs	r3, #0
 800254e:	4605      	mov	r5, r0
 8002550:	4608      	mov	r0, r1
 8002552:	6023      	str	r3, [r4, #0]
 8002554:	f000 f8ba 	bl	80026cc <_close>
 8002558:	1c43      	adds	r3, r0, #1
 800255a:	d102      	bne.n	8002562 <_close_r+0x1a>
 800255c:	6823      	ldr	r3, [r4, #0]
 800255e:	b103      	cbz	r3, 8002562 <_close_r+0x1a>
 8002560:	602b      	str	r3, [r5, #0]
 8002562:	bd38      	pop	{r3, r4, r5, pc}
 8002564:	200005e8 	.word	0x200005e8

08002568 <_fclose_r>:
 8002568:	b570      	push	{r4, r5, r6, lr}
 800256a:	4605      	mov	r5, r0
 800256c:	460c      	mov	r4, r1
 800256e:	b911      	cbnz	r1, 8002576 <_fclose_r+0xe>
 8002570:	2600      	movs	r6, #0
 8002572:	4630      	mov	r0, r6
 8002574:	bd70      	pop	{r4, r5, r6, pc}
 8002576:	b118      	cbz	r0, 8002580 <_fclose_r+0x18>
 8002578:	6983      	ldr	r3, [r0, #24]
 800257a:	b90b      	cbnz	r3, 8002580 <_fclose_r+0x18>
 800257c:	f7ff fa80 	bl	8001a80 <__sinit>
 8002580:	4b2c      	ldr	r3, [pc, #176]	; (8002634 <_fclose_r+0xcc>)
 8002582:	429c      	cmp	r4, r3
 8002584:	d114      	bne.n	80025b0 <_fclose_r+0x48>
 8002586:	686c      	ldr	r4, [r5, #4]
 8002588:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800258a:	07d8      	lsls	r0, r3, #31
 800258c:	d405      	bmi.n	800259a <_fclose_r+0x32>
 800258e:	89a3      	ldrh	r3, [r4, #12]
 8002590:	0599      	lsls	r1, r3, #22
 8002592:	d402      	bmi.n	800259a <_fclose_r+0x32>
 8002594:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002596:	f7ff fc41 	bl	8001e1c <__retarget_lock_acquire_recursive>
 800259a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800259e:	b98b      	cbnz	r3, 80025c4 <_fclose_r+0x5c>
 80025a0:	6e66      	ldr	r6, [r4, #100]	; 0x64
 80025a2:	f016 0601 	ands.w	r6, r6, #1
 80025a6:	d1e3      	bne.n	8002570 <_fclose_r+0x8>
 80025a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80025aa:	f7ff fc38 	bl	8001e1e <__retarget_lock_release_recursive>
 80025ae:	e7e0      	b.n	8002572 <_fclose_r+0xa>
 80025b0:	4b21      	ldr	r3, [pc, #132]	; (8002638 <_fclose_r+0xd0>)
 80025b2:	429c      	cmp	r4, r3
 80025b4:	d101      	bne.n	80025ba <_fclose_r+0x52>
 80025b6:	68ac      	ldr	r4, [r5, #8]
 80025b8:	e7e6      	b.n	8002588 <_fclose_r+0x20>
 80025ba:	4b20      	ldr	r3, [pc, #128]	; (800263c <_fclose_r+0xd4>)
 80025bc:	429c      	cmp	r4, r3
 80025be:	bf08      	it	eq
 80025c0:	68ec      	ldreq	r4, [r5, #12]
 80025c2:	e7e1      	b.n	8002588 <_fclose_r+0x20>
 80025c4:	4621      	mov	r1, r4
 80025c6:	4628      	mov	r0, r5
 80025c8:	f7ff f922 	bl	8001810 <__sflush_r>
 80025cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80025ce:	4606      	mov	r6, r0
 80025d0:	b133      	cbz	r3, 80025e0 <_fclose_r+0x78>
 80025d2:	6a21      	ldr	r1, [r4, #32]
 80025d4:	4628      	mov	r0, r5
 80025d6:	4798      	blx	r3
 80025d8:	2800      	cmp	r0, #0
 80025da:	bfb8      	it	lt
 80025dc:	f04f 36ff 	movlt.w	r6, #4294967295
 80025e0:	89a3      	ldrh	r3, [r4, #12]
 80025e2:	061a      	lsls	r2, r3, #24
 80025e4:	d503      	bpl.n	80025ee <_fclose_r+0x86>
 80025e6:	6921      	ldr	r1, [r4, #16]
 80025e8:	4628      	mov	r0, r5
 80025ea:	f7ff fb1f 	bl	8001c2c <_free_r>
 80025ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80025f0:	b141      	cbz	r1, 8002604 <_fclose_r+0x9c>
 80025f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80025f6:	4299      	cmp	r1, r3
 80025f8:	d002      	beq.n	8002600 <_fclose_r+0x98>
 80025fa:	4628      	mov	r0, r5
 80025fc:	f7ff fb16 	bl	8001c2c <_free_r>
 8002600:	2300      	movs	r3, #0
 8002602:	6363      	str	r3, [r4, #52]	; 0x34
 8002604:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002606:	b121      	cbz	r1, 8002612 <_fclose_r+0xaa>
 8002608:	4628      	mov	r0, r5
 800260a:	f7ff fb0f 	bl	8001c2c <_free_r>
 800260e:	2300      	movs	r3, #0
 8002610:	64a3      	str	r3, [r4, #72]	; 0x48
 8002612:	f7ff fa1d 	bl	8001a50 <__sfp_lock_acquire>
 8002616:	2300      	movs	r3, #0
 8002618:	81a3      	strh	r3, [r4, #12]
 800261a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800261c:	07db      	lsls	r3, r3, #31
 800261e:	d402      	bmi.n	8002626 <_fclose_r+0xbe>
 8002620:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002622:	f7ff fbfc 	bl	8001e1e <__retarget_lock_release_recursive>
 8002626:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002628:	f7ff fbf7 	bl	8001e1a <__retarget_lock_close_recursive>
 800262c:	f7ff fa16 	bl	8001a5c <__sfp_lock_release>
 8002630:	e79f      	b.n	8002572 <_fclose_r+0xa>
 8002632:	bf00      	nop
 8002634:	080027b8 	.word	0x080027b8
 8002638:	080027d8 	.word	0x080027d8
 800263c:	08002798 	.word	0x08002798

08002640 <_fstat_r>:
 8002640:	b538      	push	{r3, r4, r5, lr}
 8002642:	4c07      	ldr	r4, [pc, #28]	; (8002660 <_fstat_r+0x20>)
 8002644:	2300      	movs	r3, #0
 8002646:	4605      	mov	r5, r0
 8002648:	4608      	mov	r0, r1
 800264a:	4611      	mov	r1, r2
 800264c:	6023      	str	r3, [r4, #0]
 800264e:	f000 f845 	bl	80026dc <_fstat>
 8002652:	1c43      	adds	r3, r0, #1
 8002654:	d102      	bne.n	800265c <_fstat_r+0x1c>
 8002656:	6823      	ldr	r3, [r4, #0]
 8002658:	b103      	cbz	r3, 800265c <_fstat_r+0x1c>
 800265a:	602b      	str	r3, [r5, #0]
 800265c:	bd38      	pop	{r3, r4, r5, pc}
 800265e:	bf00      	nop
 8002660:	200005e8 	.word	0x200005e8

08002664 <_isatty_r>:
 8002664:	b538      	push	{r3, r4, r5, lr}
 8002666:	4c06      	ldr	r4, [pc, #24]	; (8002680 <_isatty_r+0x1c>)
 8002668:	2300      	movs	r3, #0
 800266a:	4605      	mov	r5, r0
 800266c:	4608      	mov	r0, r1
 800266e:	6023      	str	r3, [r4, #0]
 8002670:	f000 f83c 	bl	80026ec <_isatty>
 8002674:	1c43      	adds	r3, r0, #1
 8002676:	d102      	bne.n	800267e <_isatty_r+0x1a>
 8002678:	6823      	ldr	r3, [r4, #0]
 800267a:	b103      	cbz	r3, 800267e <_isatty_r+0x1a>
 800267c:	602b      	str	r3, [r5, #0]
 800267e:	bd38      	pop	{r3, r4, r5, pc}
 8002680:	200005e8 	.word	0x200005e8

08002684 <_lseek_r>:
 8002684:	b538      	push	{r3, r4, r5, lr}
 8002686:	4c07      	ldr	r4, [pc, #28]	; (80026a4 <_lseek_r+0x20>)
 8002688:	4605      	mov	r5, r0
 800268a:	4608      	mov	r0, r1
 800268c:	4611      	mov	r1, r2
 800268e:	2200      	movs	r2, #0
 8002690:	6022      	str	r2, [r4, #0]
 8002692:	461a      	mov	r2, r3
 8002694:	f000 f832 	bl	80026fc <_lseek>
 8002698:	1c43      	adds	r3, r0, #1
 800269a:	d102      	bne.n	80026a2 <_lseek_r+0x1e>
 800269c:	6823      	ldr	r3, [r4, #0]
 800269e:	b103      	cbz	r3, 80026a2 <_lseek_r+0x1e>
 80026a0:	602b      	str	r3, [r5, #0]
 80026a2:	bd38      	pop	{r3, r4, r5, pc}
 80026a4:	200005e8 	.word	0x200005e8

080026a8 <_read_r>:
 80026a8:	b538      	push	{r3, r4, r5, lr}
 80026aa:	4c07      	ldr	r4, [pc, #28]	; (80026c8 <_read_r+0x20>)
 80026ac:	4605      	mov	r5, r0
 80026ae:	4608      	mov	r0, r1
 80026b0:	4611      	mov	r1, r2
 80026b2:	2200      	movs	r2, #0
 80026b4:	6022      	str	r2, [r4, #0]
 80026b6:	461a      	mov	r2, r3
 80026b8:	f000 f828 	bl	800270c <_read>
 80026bc:	1c43      	adds	r3, r0, #1
 80026be:	d102      	bne.n	80026c6 <_read_r+0x1e>
 80026c0:	6823      	ldr	r3, [r4, #0]
 80026c2:	b103      	cbz	r3, 80026c6 <_read_r+0x1e>
 80026c4:	602b      	str	r3, [r5, #0]
 80026c6:	bd38      	pop	{r3, r4, r5, pc}
 80026c8:	200005e8 	.word	0x200005e8

080026cc <_close>:
 80026cc:	4b02      	ldr	r3, [pc, #8]	; (80026d8 <_close+0xc>)
 80026ce:	2258      	movs	r2, #88	; 0x58
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	f04f 30ff 	mov.w	r0, #4294967295
 80026d6:	4770      	bx	lr
 80026d8:	200005e8 	.word	0x200005e8

080026dc <_fstat>:
 80026dc:	4b02      	ldr	r3, [pc, #8]	; (80026e8 <_fstat+0xc>)
 80026de:	2258      	movs	r2, #88	; 0x58
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	f04f 30ff 	mov.w	r0, #4294967295
 80026e6:	4770      	bx	lr
 80026e8:	200005e8 	.word	0x200005e8

080026ec <_isatty>:
 80026ec:	4b02      	ldr	r3, [pc, #8]	; (80026f8 <_isatty+0xc>)
 80026ee:	2258      	movs	r2, #88	; 0x58
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	2000      	movs	r0, #0
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	200005e8 	.word	0x200005e8

080026fc <_lseek>:
 80026fc:	4b02      	ldr	r3, [pc, #8]	; (8002708 <_lseek+0xc>)
 80026fe:	2258      	movs	r2, #88	; 0x58
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	f04f 30ff 	mov.w	r0, #4294967295
 8002706:	4770      	bx	lr
 8002708:	200005e8 	.word	0x200005e8

0800270c <_read>:
 800270c:	4b02      	ldr	r3, [pc, #8]	; (8002718 <_read+0xc>)
 800270e:	2258      	movs	r2, #88	; 0x58
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	f04f 30ff 	mov.w	r0, #4294967295
 8002716:	4770      	bx	lr
 8002718:	200005e8 	.word	0x200005e8

0800271c <_sbrk>:
 800271c:	4b04      	ldr	r3, [pc, #16]	; (8002730 <_sbrk+0x14>)
 800271e:	6819      	ldr	r1, [r3, #0]
 8002720:	4602      	mov	r2, r0
 8002722:	b909      	cbnz	r1, 8002728 <_sbrk+0xc>
 8002724:	4903      	ldr	r1, [pc, #12]	; (8002734 <_sbrk+0x18>)
 8002726:	6019      	str	r1, [r3, #0]
 8002728:	6818      	ldr	r0, [r3, #0]
 800272a:	4402      	add	r2, r0
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	4770      	bx	lr
 8002730:	20000558 	.word	0x20000558
 8002734:	200005ec 	.word	0x200005ec

08002738 <_write>:
 8002738:	4b02      	ldr	r3, [pc, #8]	; (8002744 <_write+0xc>)
 800273a:	2258      	movs	r2, #88	; 0x58
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	f04f 30ff 	mov.w	r0, #4294967295
 8002742:	4770      	bx	lr
 8002744:	200005e8 	.word	0x200005e8

08002748 <_init>:
 8002748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800274a:	bf00      	nop
 800274c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800274e:	bc08      	pop	{r3}
 8002750:	469e      	mov	lr, r3
 8002752:	4770      	bx	lr

08002754 <_fini>:
 8002754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002756:	bf00      	nop
 8002758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800275a:	bc08      	pop	{r3}
 800275c:	469e      	mov	lr, r3
 800275e:	4770      	bx	lr
