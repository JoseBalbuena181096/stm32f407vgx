
C:\Users\LENOVO\Documents\ADC\Debug\ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f6c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080010f4  080010f4  000110f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001114  08001114  00011114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001118  08001118  00011118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  0800111c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          00000068  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000006c  2000006c  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000bc24  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001c5d  00000000  00000000  0002bc58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000173a  00000000  00000000  0002d8b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000430  00000000  00000000  0002eff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000005b8  00000000  00000000  0002f420  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00002cc6  00000000  00000000  0002f9d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00001f2f  00000000  00000000  0003269e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000345cd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000964  00000000  00000000  0003464c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080010dc 	.word	0x080010dc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080010dc 	.word	0x080010dc

080001c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80001ca:	4b08      	ldr	r3, [pc, #32]	; (80001ec <HAL_InitTick+0x24>)
{
 80001cc:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80001ce:	6818      	ldr	r0, [r3, #0]
 80001d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80001d8:	f000 fa1c 	bl	8000614 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001dc:	2200      	movs	r2, #0
 80001de:	4621      	mov	r1, r4
 80001e0:	f04f 30ff 	mov.w	r0, #4294967295
 80001e4:	f000 f9e2 	bl	80005ac <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80001e8:	2000      	movs	r0, #0
 80001ea:	bd10      	pop	{r4, pc}
 80001ec:	20000000 	.word	0x20000000

080001f0 <HAL_Init>:
{
 80001f0:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80001f2:	4b0b      	ldr	r3, [pc, #44]	; (8000220 <HAL_Init+0x30>)
 80001f4:	681a      	ldr	r2, [r3, #0]
 80001f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80001fa:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80001fc:	681a      	ldr	r2, [r3, #0]
 80001fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000202:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000204:	681a      	ldr	r2, [r3, #0]
 8000206:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800020a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800020c:	2003      	movs	r0, #3
 800020e:	f000 f9bb 	bl	8000588 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000212:	2000      	movs	r0, #0
 8000214:	f7ff ffd8 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 8000218:	f000 fead 	bl	8000f76 <HAL_MspInit>
}
 800021c:	2000      	movs	r0, #0
 800021e:	bd08      	pop	{r3, pc}
 8000220:	40023c00 	.word	0x40023c00

08000224 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000224:	4a02      	ldr	r2, [pc, #8]	; (8000230 <HAL_IncTick+0xc>)
 8000226:	6813      	ldr	r3, [r2, #0]
 8000228:	3301      	adds	r3, #1
 800022a:	6013      	str	r3, [r2, #0]
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	20000020 	.word	0x20000020

08000234 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000234:	4b01      	ldr	r3, [pc, #4]	; (800023c <HAL_GetTick+0x8>)
 8000236:	6818      	ldr	r0, [r3, #0]
}
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	20000020 	.word	0x20000020

08000240 <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000240:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000242:	4604      	mov	r4, r0
 8000244:	2800      	cmp	r0, #0
 8000246:	f000 809f 	beq.w	8000388 <HAL_ADC_Init+0x148>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800024a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800024c:	b923      	cbnz	r3, 8000258 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800024e:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000250:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000254:	f000 fda6 	bl	8000da4 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000258:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800025a:	06db      	lsls	r3, r3, #27
 800025c:	f100 8092 	bmi.w	8000384 <HAL_ADC_Init+0x144>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000260:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000262:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000266:	f023 0302 	bic.w	r3, r3, #2
 800026a:	f043 0302 	orr.w	r3, r3, #2
 800026e:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000270:	4b46      	ldr	r3, [pc, #280]	; (800038c <HAL_ADC_Init+0x14c>)
 8000272:	685a      	ldr	r2, [r3, #4]
 8000274:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000278:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800027a:	685a      	ldr	r2, [r3, #4]
 800027c:	6861      	ldr	r1, [r4, #4]
 800027e:	430a      	orrs	r2, r1
 8000280:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000282:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000284:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000286:	685a      	ldr	r2, [r3, #4]
 8000288:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800028c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800028e:	685a      	ldr	r2, [r3, #4]
 8000290:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000294:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000296:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000298:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800029a:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800029e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80002a0:	685a      	ldr	r2, [r3, #4]
 80002a2:	430a      	orrs	r2, r1
 80002a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80002a6:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80002a8:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80002aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80002ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80002b0:	689a      	ldr	r2, [r3, #8]
 80002b2:	430a      	orrs	r2, r1
 80002b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80002b6:	4936      	ldr	r1, [pc, #216]	; (8000390 <HAL_ADC_Init+0x150>)
 80002b8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80002ba:	428a      	cmp	r2, r1
 80002bc:	d056      	beq.n	800036c <HAL_ADC_Init+0x12c>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80002be:	6899      	ldr	r1, [r3, #8]
 80002c0:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80002c4:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80002c6:	6899      	ldr	r1, [r3, #8]
 80002c8:	430a      	orrs	r2, r1
 80002ca:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80002cc:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80002ce:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80002d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80002d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80002d6:	689a      	ldr	r2, [r3, #8]
 80002d8:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80002da:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80002dc:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80002de:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80002e0:	f022 0202 	bic.w	r2, r2, #2
 80002e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80002e6:	689a      	ldr	r2, [r3, #8]
 80002e8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80002ec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80002ee:	6a22      	ldr	r2, [r4, #32]
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	d043      	beq.n	800037c <HAL_ADC_Init+0x13c>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80002f4:	685a      	ldr	r2, [r3, #4]
 80002f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80002fa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80002fc:	685a      	ldr	r2, [r3, #4]
 80002fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000302:	605a      	str	r2, [r3, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000304:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000308:	fa92 f2a2 	rbit	r2, r2
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800030c:	fab2 f182 	clz	r1, r2
 8000310:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000312:	6858      	ldr	r0, [r3, #4]
 8000314:	3a01      	subs	r2, #1
 8000316:	408a      	lsls	r2, r1
 8000318:	4302      	orrs	r2, r0
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800031a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800031c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800031e:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000320:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000324:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000328:	3901      	subs	r1, #1
 800032a:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800032e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000330:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000332:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000334:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000338:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800033a:	689a      	ldr	r2, [r3, #8]
 800033c:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000340:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000342:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000344:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800034a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800034c:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800034e:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000350:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000354:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000356:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000358:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800035a:	f023 0303 	bic.w	r3, r3, #3
 800035e:	f043 0301 	orr.w	r3, r3, #1
 8000362:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000364:	2300      	movs	r3, #0
 8000366:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 800036a:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800036c:	689a      	ldr	r2, [r3, #8]
 800036e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000372:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000374:	689a      	ldr	r2, [r3, #8]
 8000376:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800037a:	e7ae      	b.n	80002da <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800037c:	685a      	ldr	r2, [r3, #4]
 800037e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000382:	e7ca      	b.n	800031a <HAL_ADC_Init+0xda>
    tmp_hal_status = HAL_ERROR;
 8000384:	2001      	movs	r0, #1
 8000386:	e7ed      	b.n	8000364 <HAL_ADC_Init+0x124>
    return HAL_ERROR;
 8000388:	2001      	movs	r0, #1
}
 800038a:	bd10      	pop	{r4, pc}
 800038c:	40012300 	.word	0x40012300
 8000390:	0f000001 	.word	0x0f000001

08000394 <HAL_ADC_Start>:
{
 8000394:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8000396:	2300      	movs	r3, #0
 8000398:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800039a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800039e:	2b01      	cmp	r3, #1
 80003a0:	d04e      	beq.n	8000440 <HAL_ADC_Start+0xac>
 80003a2:	2301      	movs	r3, #1
 80003a4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80003a8:	6803      	ldr	r3, [r0, #0]
 80003aa:	689a      	ldr	r2, [r3, #8]
 80003ac:	07d1      	lsls	r1, r2, #31
 80003ae:	d505      	bpl.n	80003bc <HAL_ADC_Start+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80003b0:	689a      	ldr	r2, [r3, #8]
 80003b2:	07d2      	lsls	r2, r2, #31
 80003b4:	d414      	bmi.n	80003e0 <HAL_ADC_Start+0x4c>
  return HAL_OK;
 80003b6:	2000      	movs	r0, #0
}
 80003b8:	b002      	add	sp, #8
 80003ba:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 80003bc:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80003be:	4921      	ldr	r1, [pc, #132]	; (8000444 <HAL_ADC_Start+0xb0>)
    __HAL_ADC_ENABLE(hadc);
 80003c0:	f042 0201 	orr.w	r2, r2, #1
 80003c4:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80003c6:	4a20      	ldr	r2, [pc, #128]	; (8000448 <HAL_ADC_Start+0xb4>)
 80003c8:	6812      	ldr	r2, [r2, #0]
 80003ca:	fbb2 f2f1 	udiv	r2, r2, r1
 80003ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 80003d2:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 80003d4:	9a01      	ldr	r2, [sp, #4]
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d0ea      	beq.n	80003b0 <HAL_ADC_Start+0x1c>
      counter--;
 80003da:	9a01      	ldr	r2, [sp, #4]
 80003dc:	3a01      	subs	r2, #1
 80003de:	e7f8      	b.n	80003d2 <HAL_ADC_Start+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 80003e0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80003e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80003e6:	f022 0201 	bic.w	r2, r2, #1
 80003ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80003ee:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80003f0:	685a      	ldr	r2, [r3, #4]
 80003f2:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80003f4:	bf41      	itttt	mi
 80003f6:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 80003f8:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80003fc:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8000400:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000402:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000404:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000408:	bf1c      	itt	ne
 800040a:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 800040c:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000410:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8000412:	2200      	movs	r2, #0
 8000414:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000418:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800041c:	601a      	str	r2, [r3, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800041e:	4a0b      	ldr	r2, [pc, #44]	; (800044c <HAL_ADC_Start+0xb8>)
 8000420:	6852      	ldr	r2, [r2, #4]
 8000422:	06d2      	lsls	r2, r2, #27
 8000424:	d108      	bne.n	8000438 <HAL_ADC_Start+0xa4>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000426:	6898      	ldr	r0, [r3, #8]
 8000428:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800042c:	d1c3      	bne.n	80003b6 <HAL_ADC_Start+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800042e:	689a      	ldr	r2, [r3, #8]
 8000430:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000434:	609a      	str	r2, [r3, #8]
 8000436:	e7bf      	b.n	80003b8 <HAL_ADC_Start+0x24>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000438:	4a05      	ldr	r2, [pc, #20]	; (8000450 <HAL_ADC_Start+0xbc>)
 800043a:	4293      	cmp	r3, r2
 800043c:	d1bb      	bne.n	80003b6 <HAL_ADC_Start+0x22>
 800043e:	e7f2      	b.n	8000426 <HAL_ADC_Start+0x92>
  __HAL_LOCK(hadc);
 8000440:	2002      	movs	r0, #2
 8000442:	e7b9      	b.n	80003b8 <HAL_ADC_Start+0x24>
 8000444:	000f4240 	.word	0x000f4240
 8000448:	20000000 	.word	0x20000000
 800044c:	40012300 	.word	0x40012300
 8000450:	40012000 	.word	0x40012000

08000454 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8000454:	6803      	ldr	r3, [r0, #0]
 8000456:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8000458:	4770      	bx	lr
	...

0800045c <HAL_ADC_ConfigChannel>:
{
 800045c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 800045e:	2300      	movs	r3, #0
 8000460:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000462:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000466:	2b01      	cmp	r3, #1
 8000468:	f000 8083 	beq.w	8000572 <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 800046c:	680d      	ldr	r5, [r1, #0]
 800046e:	6804      	ldr	r4, [r0, #0]
 8000470:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 8000472:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000474:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8000476:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 800047a:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 800047c:	d92a      	bls.n	80004d4 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800047e:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8000482:	68e7      	ldr	r7, [r4, #12]
 8000484:	3b1e      	subs	r3, #30
 8000486:	f04f 0e07 	mov.w	lr, #7
 800048a:	fa0e fe03 	lsl.w	lr, lr, r3
 800048e:	ea27 070e 	bic.w	r7, r7, lr
 8000492:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000494:	68e7      	ldr	r7, [r4, #12]
 8000496:	fa02 f303 	lsl.w	r3, r2, r3
 800049a:	433b      	orrs	r3, r7
 800049c:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 800049e:	684a      	ldr	r2, [r1, #4]
 80004a0:	2a06      	cmp	r2, #6
 80004a2:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80004a6:	d825      	bhi.n	80004f4 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80004a8:	4413      	add	r3, r2
 80004aa:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80004ac:	1f59      	subs	r1, r3, #5
 80004ae:	231f      	movs	r3, #31
 80004b0:	408b      	lsls	r3, r1
 80004b2:	ea27 0303 	bic.w	r3, r7, r3
 80004b6:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80004b8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80004ba:	fa06 f101 	lsl.w	r1, r6, r1
 80004be:	4311      	orrs	r1, r2
 80004c0:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80004c2:	4b2d      	ldr	r3, [pc, #180]	; (8000578 <HAL_ADC_ConfigChannel+0x11c>)
 80004c4:	429c      	cmp	r4, r3
 80004c6:	d034      	beq.n	8000532 <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 80004c8:	2300      	movs	r3, #0
 80004ca:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80004ce:	4618      	mov	r0, r3
}
 80004d0:	b003      	add	sp, #12
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80004d4:	6927      	ldr	r7, [r4, #16]
 80004d6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80004da:	f04f 0e07 	mov.w	lr, #7
 80004de:	fa0e fe03 	lsl.w	lr, lr, r3
 80004e2:	ea27 070e 	bic.w	r7, r7, lr
 80004e6:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80004e8:	6927      	ldr	r7, [r4, #16]
 80004ea:	fa02 f303 	lsl.w	r3, r2, r3
 80004ee:	433b      	orrs	r3, r7
 80004f0:	6123      	str	r3, [r4, #16]
 80004f2:	e7d4      	b.n	800049e <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 80004f4:	2a0c      	cmp	r2, #12
 80004f6:	d80e      	bhi.n	8000516 <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80004f8:	4413      	add	r3, r2
 80004fa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80004fc:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8000500:	231f      	movs	r3, #31
 8000502:	4093      	lsls	r3, r2
 8000504:	ea21 0303 	bic.w	r3, r1, r3
 8000508:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800050a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800050c:	fa06 f202 	lsl.w	r2, r6, r2
 8000510:	431a      	orrs	r2, r3
 8000512:	6322      	str	r2, [r4, #48]	; 0x30
 8000514:	e7d5      	b.n	80004c2 <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000516:	4413      	add	r3, r2
 8000518:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800051a:	3b41      	subs	r3, #65	; 0x41
 800051c:	221f      	movs	r2, #31
 800051e:	409a      	lsls	r2, r3
 8000520:	ea21 0202 	bic.w	r2, r1, r2
 8000524:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000526:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000528:	fa06 f103 	lsl.w	r1, r6, r3
 800052c:	4311      	orrs	r1, r2
 800052e:	62e1      	str	r1, [r4, #44]	; 0x2c
 8000530:	e7c7      	b.n	80004c2 <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000532:	2d12      	cmp	r5, #18
 8000534:	d104      	bne.n	8000540 <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000536:	4a11      	ldr	r2, [pc, #68]	; (800057c <HAL_ADC_ConfigChannel+0x120>)
 8000538:	6853      	ldr	r3, [r2, #4]
 800053a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800053e:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000540:	f1a5 0310 	sub.w	r3, r5, #16
 8000544:	2b01      	cmp	r3, #1
 8000546:	d8bf      	bhi.n	80004c8 <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000548:	4a0c      	ldr	r2, [pc, #48]	; (800057c <HAL_ADC_ConfigChannel+0x120>)
 800054a:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800054c:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800054e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000552:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000554:	d1b8      	bne.n	80004c8 <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000556:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <HAL_ADC_ConfigChannel+0x124>)
 8000558:	4a0a      	ldr	r2, [pc, #40]	; (8000584 <HAL_ADC_ConfigChannel+0x128>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	fbb3 f2f2 	udiv	r2, r3, r2
 8000560:	230a      	movs	r3, #10
 8000562:	4353      	muls	r3, r2
        counter--;
 8000564:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8000566:	9b01      	ldr	r3, [sp, #4]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d0ad      	beq.n	80004c8 <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 800056c:	9b01      	ldr	r3, [sp, #4]
 800056e:	3b01      	subs	r3, #1
 8000570:	e7f8      	b.n	8000564 <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 8000572:	2002      	movs	r0, #2
 8000574:	e7ac      	b.n	80004d0 <HAL_ADC_ConfigChannel+0x74>
 8000576:	bf00      	nop
 8000578:	40012000 	.word	0x40012000
 800057c:	40012300 	.word	0x40012300
 8000580:	20000000 	.word	0x20000000
 8000584:	000f4240 	.word	0x000f4240

08000588 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000588:	4a07      	ldr	r2, [pc, #28]	; (80005a8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800058a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800058c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000590:	041b      	lsls	r3, r3, #16
 8000592:	0c1b      	lsrs	r3, r3, #16
 8000594:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000598:	0200      	lsls	r0, r0, #8
 800059a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800059e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005a2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005a4:	60d3      	str	r3, [r2, #12]
 80005a6:	4770      	bx	lr
 80005a8:	e000ed00 	.word	0xe000ed00

080005ac <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005ac:	4b17      	ldr	r3, [pc, #92]	; (800060c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	68dc      	ldr	r4, [r3, #12]
 80005b2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005b6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ba:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005bc:	2b04      	cmp	r3, #4
 80005be:	bf28      	it	cs
 80005c0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005c2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005c4:	f04f 0501 	mov.w	r5, #1
 80005c8:	fa05 f303 	lsl.w	r3, r5, r3
 80005cc:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005d0:	bf8c      	ite	hi
 80005d2:	3c03      	subhi	r4, #3
 80005d4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d6:	4019      	ands	r1, r3
 80005d8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005da:	fa05 f404 	lsl.w	r4, r5, r4
 80005de:	3c01      	subs	r4, #1
 80005e0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80005e2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005e4:	ea42 0201 	orr.w	r2, r2, r1
 80005e8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ec:	bfaf      	iteee	ge
 80005ee:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f2:	f000 000f 	andlt.w	r0, r0, #15
 80005f6:	4b06      	ldrlt	r3, [pc, #24]	; (8000610 <HAL_NVIC_SetPriority+0x64>)
 80005f8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fa:	bfa5      	ittet	ge
 80005fc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000600:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000602:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000604:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	bf00      	nop
 800060c:	e000ed00 	.word	0xe000ed00
 8000610:	e000ed14 	.word	0xe000ed14

08000614 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000614:	3801      	subs	r0, #1
 8000616:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800061a:	d20a      	bcs.n	8000632 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061e:	4a07      	ldr	r2, [pc, #28]	; (800063c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000620:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000622:	21f0      	movs	r1, #240	; 0xf0
 8000624:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000628:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800062a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800062c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000632:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	e000e010 	.word	0xe000e010
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000642:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000644:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000646:	bf0c      	ite	eq
 8000648:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800064c:	f022 0204 	bicne.w	r2, r2, #4
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	4770      	bx	lr
 8000654:	e000e010 	.word	0xe000e010

08000658 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000658:	4770      	bx	lr

0800065a <HAL_SYSTICK_IRQHandler>:
{
 800065a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800065c:	f7ff fffc 	bl	8000658 <HAL_SYSTICK_Callback>
 8000660:	bd08      	pop	{r3, pc}
	...

08000664 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000668:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800066a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800066c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800081c <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000670:	4a68      	ldr	r2, [pc, #416]	; (8000814 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000672:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000820 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000676:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000678:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800067a:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800067e:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000680:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000684:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000688:	45b6      	cmp	lr, r6
 800068a:	f040 80ae 	bne.w	80007ea <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800068e:	684c      	ldr	r4, [r1, #4]
 8000690:	f024 0710 	bic.w	r7, r4, #16
 8000694:	2f02      	cmp	r7, #2
 8000696:	d116      	bne.n	80006c6 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000698:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800069c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006a0:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80006a4:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006a8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80006ac:	f04f 0c0f 	mov.w	ip, #15
 80006b0:	fa0c fc0b 	lsl.w	ip, ip, fp
 80006b4:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80006b8:	690d      	ldr	r5, [r1, #16]
 80006ba:	fa05 f50b 	lsl.w	r5, r5, fp
 80006be:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80006c2:	f8ca 5020 	str.w	r5, [sl, #32]
 80006c6:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006ca:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80006cc:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006d0:	fa05 f50a 	lsl.w	r5, r5, sl
 80006d4:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006d6:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006da:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006de:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006e2:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006e4:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006e8:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80006ea:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006ee:	d811      	bhi.n	8000714 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80006f0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006f2:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006f6:	68cf      	ldr	r7, [r1, #12]
 80006f8:	fa07 fc0a 	lsl.w	ip, r7, sl
 80006fc:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000700:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000702:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000704:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000708:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800070c:	409f      	lsls	r7, r3
 800070e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000712:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000714:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000716:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000718:	688f      	ldr	r7, [r1, #8]
 800071a:	fa07 f70a 	lsl.w	r7, r7, sl
 800071e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000720:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000722:	00e5      	lsls	r5, r4, #3
 8000724:	d561      	bpl.n	80007ea <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000726:	f04f 0b00 	mov.w	fp, #0
 800072a:	f8cd b00c 	str.w	fp, [sp, #12]
 800072e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000732:	4d39      	ldr	r5, [pc, #228]	; (8000818 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000734:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000738:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800073c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000740:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000744:	9703      	str	r7, [sp, #12]
 8000746:	9f03      	ldr	r7, [sp, #12]
 8000748:	f023 0703 	bic.w	r7, r3, #3
 800074c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000750:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000754:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000758:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800075c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000760:	f04f 0e0f 	mov.w	lr, #15
 8000764:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000768:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800076a:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800076e:	d043      	beq.n	80007f8 <HAL_GPIO_Init+0x194>
 8000770:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000774:	42a8      	cmp	r0, r5
 8000776:	d041      	beq.n	80007fc <HAL_GPIO_Init+0x198>
 8000778:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800077c:	42a8      	cmp	r0, r5
 800077e:	d03f      	beq.n	8000800 <HAL_GPIO_Init+0x19c>
 8000780:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000784:	42a8      	cmp	r0, r5
 8000786:	d03d      	beq.n	8000804 <HAL_GPIO_Init+0x1a0>
 8000788:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800078c:	42a8      	cmp	r0, r5
 800078e:	d03b      	beq.n	8000808 <HAL_GPIO_Init+0x1a4>
 8000790:	4548      	cmp	r0, r9
 8000792:	d03b      	beq.n	800080c <HAL_GPIO_Init+0x1a8>
 8000794:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000798:	42a8      	cmp	r0, r5
 800079a:	d039      	beq.n	8000810 <HAL_GPIO_Init+0x1ac>
 800079c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007a0:	42a8      	cmp	r0, r5
 80007a2:	bf14      	ite	ne
 80007a4:	2508      	movne	r5, #8
 80007a6:	2507      	moveq	r5, #7
 80007a8:	fa05 f50c 	lsl.w	r5, r5, ip
 80007ac:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007b0:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80007b2:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007b4:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007b6:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007ba:	bf0c      	ite	eq
 80007bc:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007be:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80007c0:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80007c2:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007c4:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80007c8:	bf0c      	ite	eq
 80007ca:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007cc:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80007ce:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007d0:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007d2:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80007d6:	bf0c      	ite	eq
 80007d8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007da:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80007dc:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80007de:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007e0:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80007e2:	bf54      	ite	pl
 80007e4:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80007e6:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80007e8:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007ea:	3301      	adds	r3, #1
 80007ec:	2b10      	cmp	r3, #16
 80007ee:	f47f af44 	bne.w	800067a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80007f2:	b005      	add	sp, #20
 80007f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007f8:	465d      	mov	r5, fp
 80007fa:	e7d5      	b.n	80007a8 <HAL_GPIO_Init+0x144>
 80007fc:	2501      	movs	r5, #1
 80007fe:	e7d3      	b.n	80007a8 <HAL_GPIO_Init+0x144>
 8000800:	2502      	movs	r5, #2
 8000802:	e7d1      	b.n	80007a8 <HAL_GPIO_Init+0x144>
 8000804:	2503      	movs	r5, #3
 8000806:	e7cf      	b.n	80007a8 <HAL_GPIO_Init+0x144>
 8000808:	2504      	movs	r5, #4
 800080a:	e7cd      	b.n	80007a8 <HAL_GPIO_Init+0x144>
 800080c:	2505      	movs	r5, #5
 800080e:	e7cb      	b.n	80007a8 <HAL_GPIO_Init+0x144>
 8000810:	2506      	movs	r5, #6
 8000812:	e7c9      	b.n	80007a8 <HAL_GPIO_Init+0x144>
 8000814:	40013c00 	.word	0x40013c00
 8000818:	40020000 	.word	0x40020000
 800081c:	40023800 	.word	0x40023800
 8000820:	40021400 	.word	0x40021400

08000824 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000824:	b10a      	cbz	r2, 800082a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000826:	6181      	str	r1, [r0, #24]
 8000828:	4770      	bx	lr
 800082a:	0409      	lsls	r1, r1, #16
 800082c:	e7fb      	b.n	8000826 <HAL_GPIO_WritePin+0x2>
	...

08000830 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000830:	6803      	ldr	r3, [r0, #0]
{
 8000832:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000834:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000836:	07d8      	lsls	r0, r3, #31
 8000838:	d43b      	bmi.n	80008b2 <HAL_RCC_OscConfig+0x82>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800083a:	6823      	ldr	r3, [r4, #0]
 800083c:	0799      	lsls	r1, r3, #30
 800083e:	f100 8086 	bmi.w	800094e <HAL_RCC_OscConfig+0x11e>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000842:	6823      	ldr	r3, [r4, #0]
 8000844:	071e      	lsls	r6, r3, #28
 8000846:	f100 80d1 	bmi.w	80009ec <HAL_RCC_OscConfig+0x1bc>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800084a:	6823      	ldr	r3, [r4, #0]
 800084c:	075d      	lsls	r5, r3, #29
 800084e:	d52a      	bpl.n	80008a6 <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000850:	2300      	movs	r3, #0
 8000852:	9301      	str	r3, [sp, #4]
 8000854:	4b8e      	ldr	r3, [pc, #568]	; (8000a90 <HAL_RCC_OscConfig+0x260>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000856:	4d8f      	ldr	r5, [pc, #572]	; (8000a94 <HAL_RCC_OscConfig+0x264>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8000858:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800085a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800085e:	641a      	str	r2, [r3, #64]	; 0x40
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000866:	9301      	str	r3, [sp, #4]
 8000868:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800086a:	682b      	ldr	r3, [r5, #0]
 800086c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000870:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8000872:	f7ff fcdf 	bl	8000234 <HAL_GetTick>
 8000876:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000878:	682b      	ldr	r3, [r5, #0]
 800087a:	05da      	lsls	r2, r3, #23
 800087c:	f140 80d8 	bpl.w	8000a30 <HAL_RCC_OscConfig+0x200>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000880:	68a3      	ldr	r3, [r4, #8]
 8000882:	4d83      	ldr	r5, [pc, #524]	; (8000a90 <HAL_RCC_OscConfig+0x260>)
 8000884:	2b01      	cmp	r3, #1
 8000886:	f040 80da 	bne.w	8000a3e <HAL_RCC_OscConfig+0x20e>
 800088a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	672b      	str	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000892:	f7ff fccf 	bl	8000234 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000896:	4d7e      	ldr	r5, [pc, #504]	; (8000a90 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 8000898:	4606      	mov	r6, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800089a:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800089e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80008a0:	079b      	lsls	r3, r3, #30
 80008a2:	f140 80ed 	bpl.w	8000a80 <HAL_RCC_OscConfig+0x250>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80008a6:	69a2      	ldr	r2, [r4, #24]
 80008a8:	2a00      	cmp	r2, #0
 80008aa:	f040 80f9 	bne.w	8000aa0 <HAL_RCC_OscConfig+0x270>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80008ae:	2000      	movs	r0, #0
 80008b0:	e015      	b.n	80008de <HAL_RCC_OscConfig+0xae>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80008b2:	4b77      	ldr	r3, [pc, #476]	; (8000a90 <HAL_RCC_OscConfig+0x260>)
 80008b4:	689a      	ldr	r2, [r3, #8]
 80008b6:	f002 020c 	and.w	r2, r2, #12
 80008ba:	2a04      	cmp	r2, #4
 80008bc:	d007      	beq.n	80008ce <HAL_RCC_OscConfig+0x9e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008be:	689a      	ldr	r2, [r3, #8]
 80008c0:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80008c4:	2a08      	cmp	r2, #8
 80008c6:	d10c      	bne.n	80008e2 <HAL_RCC_OscConfig+0xb2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	025a      	lsls	r2, r3, #9
 80008cc:	d509      	bpl.n	80008e2 <HAL_RCC_OscConfig+0xb2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008ce:	4b70      	ldr	r3, [pc, #448]	; (8000a90 <HAL_RCC_OscConfig+0x260>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	039b      	lsls	r3, r3, #14
 80008d4:	d5b1      	bpl.n	800083a <HAL_RCC_OscConfig+0xa>
 80008d6:	6863      	ldr	r3, [r4, #4]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d1ae      	bne.n	800083a <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 80008dc:	2001      	movs	r0, #1
}
 80008de:	b003      	add	sp, #12
 80008e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008e2:	6863      	ldr	r3, [r4, #4]
 80008e4:	4d6a      	ldr	r5, [pc, #424]	; (8000a90 <HAL_RCC_OscConfig+0x260>)
 80008e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008ea:	d111      	bne.n	8000910 <HAL_RCC_OscConfig+0xe0>
 80008ec:	682b      	ldr	r3, [r5, #0]
 80008ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008f2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80008f4:	f7ff fc9e 	bl	8000234 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008f8:	4d65      	ldr	r5, [pc, #404]	; (8000a90 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 80008fa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008fc:	682b      	ldr	r3, [r5, #0]
 80008fe:	039f      	lsls	r7, r3, #14
 8000900:	d49b      	bmi.n	800083a <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000902:	f7ff fc97 	bl	8000234 <HAL_GetTick>
 8000906:	1b80      	subs	r0, r0, r6
 8000908:	2864      	cmp	r0, #100	; 0x64
 800090a:	d9f7      	bls.n	80008fc <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 800090c:	2003      	movs	r0, #3
 800090e:	e7e6      	b.n	80008de <HAL_RCC_OscConfig+0xae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000910:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000914:	d104      	bne.n	8000920 <HAL_RCC_OscConfig+0xf0>
 8000916:	682b      	ldr	r3, [r5, #0]
 8000918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800091c:	602b      	str	r3, [r5, #0]
 800091e:	e7e5      	b.n	80008ec <HAL_RCC_OscConfig+0xbc>
 8000920:	682a      	ldr	r2, [r5, #0]
 8000922:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000926:	602a      	str	r2, [r5, #0]
 8000928:	682a      	ldr	r2, [r5, #0]
 800092a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800092e:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000930:	2b00      	cmp	r3, #0
 8000932:	d1df      	bne.n	80008f4 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8000934:	f7ff fc7e 	bl	8000234 <HAL_GetTick>
 8000938:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800093a:	682b      	ldr	r3, [r5, #0]
 800093c:	0398      	lsls	r0, r3, #14
 800093e:	f57f af7c 	bpl.w	800083a <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000942:	f7ff fc77 	bl	8000234 <HAL_GetTick>
 8000946:	1b80      	subs	r0, r0, r6
 8000948:	2864      	cmp	r0, #100	; 0x64
 800094a:	d9f6      	bls.n	800093a <HAL_RCC_OscConfig+0x10a>
 800094c:	e7de      	b.n	800090c <HAL_RCC_OscConfig+0xdc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800094e:	4b50      	ldr	r3, [pc, #320]	; (8000a90 <HAL_RCC_OscConfig+0x260>)
 8000950:	689a      	ldr	r2, [r3, #8]
 8000952:	f012 0f0c 	tst.w	r2, #12
 8000956:	d007      	beq.n	8000968 <HAL_RCC_OscConfig+0x138>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000958:	689a      	ldr	r2, [r3, #8]
 800095a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800095e:	2a08      	cmp	r2, #8
 8000960:	d116      	bne.n	8000990 <HAL_RCC_OscConfig+0x160>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	0259      	lsls	r1, r3, #9
 8000966:	d413      	bmi.n	8000990 <HAL_RCC_OscConfig+0x160>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000968:	4b49      	ldr	r3, [pc, #292]	; (8000a90 <HAL_RCC_OscConfig+0x260>)
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	0792      	lsls	r2, r2, #30
 800096e:	d502      	bpl.n	8000976 <HAL_RCC_OscConfig+0x146>
 8000970:	68e2      	ldr	r2, [r4, #12]
 8000972:	2a01      	cmp	r2, #1
 8000974:	d1b2      	bne.n	80008dc <HAL_RCC_OscConfig+0xac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000976:	6818      	ldr	r0, [r3, #0]
 8000978:	22f8      	movs	r2, #248	; 0xf8
 800097a:	fa92 f2a2 	rbit	r2, r2
 800097e:	fab2 f182 	clz	r1, r2
 8000982:	6922      	ldr	r2, [r4, #16]
 8000984:	408a      	lsls	r2, r1
 8000986:	f020 01f8 	bic.w	r1, r0, #248	; 0xf8
 800098a:	430a      	orrs	r2, r1
 800098c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800098e:	e758      	b.n	8000842 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000990:	68e2      	ldr	r2, [r4, #12]
 8000992:	4b41      	ldr	r3, [pc, #260]	; (8000a98 <HAL_RCC_OscConfig+0x268>)
 8000994:	b1da      	cbz	r2, 80009ce <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_HSI_ENABLE();
 8000996:	2201      	movs	r2, #1
 8000998:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800099a:	f7ff fc4b 	bl	8000234 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800099e:	4d3c      	ldr	r5, [pc, #240]	; (8000a90 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 80009a0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009a2:	682b      	ldr	r3, [r5, #0]
 80009a4:	079b      	lsls	r3, r3, #30
 80009a6:	d50c      	bpl.n	80009c2 <HAL_RCC_OscConfig+0x192>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009a8:	6829      	ldr	r1, [r5, #0]
 80009aa:	23f8      	movs	r3, #248	; 0xf8
 80009ac:	fa93 f3a3 	rbit	r3, r3
 80009b0:	fab3 f283 	clz	r2, r3
 80009b4:	6923      	ldr	r3, [r4, #16]
 80009b6:	4093      	lsls	r3, r2
 80009b8:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 80009bc:	4313      	orrs	r3, r2
 80009be:	602b      	str	r3, [r5, #0]
 80009c0:	e73f      	b.n	8000842 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009c2:	f7ff fc37 	bl	8000234 <HAL_GetTick>
 80009c6:	1b80      	subs	r0, r0, r6
 80009c8:	2802      	cmp	r0, #2
 80009ca:	d9ea      	bls.n	80009a2 <HAL_RCC_OscConfig+0x172>
 80009cc:	e79e      	b.n	800090c <HAL_RCC_OscConfig+0xdc>
        __HAL_RCC_HSI_DISABLE();
 80009ce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009d0:	f7ff fc30 	bl	8000234 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009d4:	4d2e      	ldr	r5, [pc, #184]	; (8000a90 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 80009d6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009d8:	682b      	ldr	r3, [r5, #0]
 80009da:	079f      	lsls	r7, r3, #30
 80009dc:	f57f af31 	bpl.w	8000842 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009e0:	f7ff fc28 	bl	8000234 <HAL_GetTick>
 80009e4:	1b80      	subs	r0, r0, r6
 80009e6:	2802      	cmp	r0, #2
 80009e8:	d9f6      	bls.n	80009d8 <HAL_RCC_OscConfig+0x1a8>
 80009ea:	e78f      	b.n	800090c <HAL_RCC_OscConfig+0xdc>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80009ec:	6962      	ldr	r2, [r4, #20]
 80009ee:	4b2b      	ldr	r3, [pc, #172]	; (8000a9c <HAL_RCC_OscConfig+0x26c>)
 80009f0:	b17a      	cbz	r2, 8000a12 <HAL_RCC_OscConfig+0x1e2>
      __HAL_RCC_LSI_ENABLE();
 80009f2:	2201      	movs	r2, #1
 80009f4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009f6:	f7ff fc1d 	bl	8000234 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009fa:	4d25      	ldr	r5, [pc, #148]	; (8000a90 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 80009fc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009fe:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a00:	0798      	lsls	r0, r3, #30
 8000a02:	f53f af22 	bmi.w	800084a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a06:	f7ff fc15 	bl	8000234 <HAL_GetTick>
 8000a0a:	1b80      	subs	r0, r0, r6
 8000a0c:	2802      	cmp	r0, #2
 8000a0e:	d9f6      	bls.n	80009fe <HAL_RCC_OscConfig+0x1ce>
 8000a10:	e77c      	b.n	800090c <HAL_RCC_OscConfig+0xdc>
      __HAL_RCC_LSI_DISABLE();
 8000a12:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a14:	f7ff fc0e 	bl	8000234 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a18:	4d1d      	ldr	r5, [pc, #116]	; (8000a90 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 8000a1a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a1c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a1e:	0799      	lsls	r1, r3, #30
 8000a20:	f57f af13 	bpl.w	800084a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a24:	f7ff fc06 	bl	8000234 <HAL_GetTick>
 8000a28:	1b80      	subs	r0, r0, r6
 8000a2a:	2802      	cmp	r0, #2
 8000a2c:	d9f6      	bls.n	8000a1c <HAL_RCC_OscConfig+0x1ec>
 8000a2e:	e76d      	b.n	800090c <HAL_RCC_OscConfig+0xdc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000a30:	f7ff fc00 	bl	8000234 <HAL_GetTick>
 8000a34:	1b80      	subs	r0, r0, r6
 8000a36:	2802      	cmp	r0, #2
 8000a38:	f67f af1e 	bls.w	8000878 <HAL_RCC_OscConfig+0x48>
 8000a3c:	e766      	b.n	800090c <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a3e:	2b05      	cmp	r3, #5
 8000a40:	d104      	bne.n	8000a4c <HAL_RCC_OscConfig+0x21c>
 8000a42:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a44:	f043 0304 	orr.w	r3, r3, #4
 8000a48:	672b      	str	r3, [r5, #112]	; 0x70
 8000a4a:	e71e      	b.n	800088a <HAL_RCC_OscConfig+0x5a>
 8000a4c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a4e:	f022 0201 	bic.w	r2, r2, #1
 8000a52:	672a      	str	r2, [r5, #112]	; 0x70
 8000a54:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a56:	f022 0204 	bic.w	r2, r2, #4
 8000a5a:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	f47f af18 	bne.w	8000892 <HAL_RCC_OscConfig+0x62>
      tickstart = HAL_GetTick();
 8000a62:	f7ff fbe7 	bl	8000234 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a66:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000a6a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a6c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a6e:	0798      	lsls	r0, r3, #30
 8000a70:	f57f af19 	bpl.w	80008a6 <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a74:	f7ff fbde 	bl	8000234 <HAL_GetTick>
 8000a78:	1b80      	subs	r0, r0, r6
 8000a7a:	42b8      	cmp	r0, r7
 8000a7c:	d9f6      	bls.n	8000a6c <HAL_RCC_OscConfig+0x23c>
 8000a7e:	e745      	b.n	800090c <HAL_RCC_OscConfig+0xdc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a80:	f7ff fbd8 	bl	8000234 <HAL_GetTick>
 8000a84:	1b80      	subs	r0, r0, r6
 8000a86:	42b8      	cmp	r0, r7
 8000a88:	f67f af09 	bls.w	800089e <HAL_RCC_OscConfig+0x6e>
 8000a8c:	e73e      	b.n	800090c <HAL_RCC_OscConfig+0xdc>
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40007000 	.word	0x40007000
 8000a98:	42470000 	.word	0x42470000
 8000a9c:	42470e80 	.word	0x42470e80
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000aa0:	4d2b      	ldr	r5, [pc, #172]	; (8000b50 <HAL_RCC_OscConfig+0x320>)
 8000aa2:	68ab      	ldr	r3, [r5, #8]
 8000aa4:	f003 030c 	and.w	r3, r3, #12
 8000aa8:	2b08      	cmp	r3, #8
 8000aaa:	f43f af17 	beq.w	80008dc <HAL_RCC_OscConfig+0xac>
 8000aae:	4e29      	ldr	r6, [pc, #164]	; (8000b54 <HAL_RCC_OscConfig+0x324>)
 8000ab0:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ab2:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000ab4:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ab6:	d13e      	bne.n	8000b36 <HAL_RCC_OscConfig+0x306>
        tickstart = HAL_GetTick();
 8000ab8:	f7ff fbbc 	bl	8000234 <HAL_GetTick>
 8000abc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000abe:	682b      	ldr	r3, [r5, #0]
 8000ac0:	0199      	lsls	r1, r3, #6
 8000ac2:	d432      	bmi.n	8000b2a <HAL_RCC_OscConfig+0x2fa>
 8000ac4:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8000ac8:	fa97 f7a7 	rbit	r7, r7
 8000acc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ad0:	fab7 f787 	clz	r7, r7
 8000ad4:	fa92 f2a2 	rbit	r2, r2
 8000ad8:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8000adc:	fab2 f082 	clz	r0, r2
 8000ae0:	fa91 f1a1 	rbit	r1, r1
 8000ae4:	6a22      	ldr	r2, [r4, #32]
 8000ae6:	69e3      	ldr	r3, [r4, #28]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000aec:	fa02 f707 	lsl.w	r7, r2, r7
 8000af0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000af2:	0852      	lsrs	r2, r2, #1
 8000af4:	3a01      	subs	r2, #1
 8000af6:	4082      	lsls	r2, r0
 8000af8:	433b      	orrs	r3, r7
 8000afa:	4313      	orrs	r3, r2
 8000afc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000afe:	4c14      	ldr	r4, [pc, #80]	; (8000b50 <HAL_RCC_OscConfig+0x320>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b00:	fab1 f181 	clz	r1, r1
 8000b04:	fa02 f101 	lsl.w	r1, r2, r1
 8000b08:	430b      	orrs	r3, r1
 8000b0a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b10:	f7ff fb90 	bl	8000234 <HAL_GetTick>
 8000b14:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b16:	6823      	ldr	r3, [r4, #0]
 8000b18:	019a      	lsls	r2, r3, #6
 8000b1a:	f53f aec8 	bmi.w	80008ae <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b1e:	f7ff fb89 	bl	8000234 <HAL_GetTick>
 8000b22:	1b40      	subs	r0, r0, r5
 8000b24:	2802      	cmp	r0, #2
 8000b26:	d9f6      	bls.n	8000b16 <HAL_RCC_OscConfig+0x2e6>
 8000b28:	e6f0      	b.n	800090c <HAL_RCC_OscConfig+0xdc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b2a:	f7ff fb83 	bl	8000234 <HAL_GetTick>
 8000b2e:	1bc0      	subs	r0, r0, r7
 8000b30:	2802      	cmp	r0, #2
 8000b32:	d9c4      	bls.n	8000abe <HAL_RCC_OscConfig+0x28e>
 8000b34:	e6ea      	b.n	800090c <HAL_RCC_OscConfig+0xdc>
        tickstart = HAL_GetTick();
 8000b36:	f7ff fb7d 	bl	8000234 <HAL_GetTick>
 8000b3a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b3c:	682b      	ldr	r3, [r5, #0]
 8000b3e:	019b      	lsls	r3, r3, #6
 8000b40:	f57f aeb5 	bpl.w	80008ae <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b44:	f7ff fb76 	bl	8000234 <HAL_GetTick>
 8000b48:	1b00      	subs	r0, r0, r4
 8000b4a:	2802      	cmp	r0, #2
 8000b4c:	d9f6      	bls.n	8000b3c <HAL_RCC_OscConfig+0x30c>
 8000b4e:	e6dd      	b.n	800090c <HAL_RCC_OscConfig+0xdc>
 8000b50:	40023800 	.word	0x40023800
 8000b54:	42470060 	.word	0x42470060

08000b58 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b58:	4a19      	ldr	r2, [pc, #100]	; (8000bc0 <HAL_RCC_GetSysClockFreq+0x68>)
 8000b5a:	6893      	ldr	r3, [r2, #8]
 8000b5c:	f003 030c 	and.w	r3, r3, #12
 8000b60:	2b04      	cmp	r3, #4
{
 8000b62:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b64:	d003      	beq.n	8000b6e <HAL_RCC_GetSysClockFreq+0x16>
 8000b66:	2b08      	cmp	r3, #8
 8000b68:	d003      	beq.n	8000b72 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000b6a:	4816      	ldr	r0, [pc, #88]	; (8000bc4 <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b6c:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8000b6e:	4816      	ldr	r0, [pc, #88]	; (8000bc8 <HAL_RCC_GetSysClockFreq+0x70>)
 8000b70:	bd10      	pop	{r4, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b72:	6851      	ldr	r1, [r2, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b74:	6853      	ldr	r3, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b76:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b7a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000b7e:	f647 74c0 	movw	r4, #32704	; 0x7fc0
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000b82:	6853      	ldr	r3, [r2, #4]
 8000b84:	fa94 f0a4 	rbit	r0, r4
 8000b88:	fab0 f080 	clz	r0, r0
 8000b8c:	ea03 0304 	and.w	r3, r3, r4
 8000b90:	fa23 f300 	lsr.w	r3, r3, r0
 8000b94:	bf14      	ite	ne
 8000b96:	480c      	ldrne	r0, [pc, #48]	; (8000bc8 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8000b98:	480a      	ldreq	r0, [pc, #40]	; (8000bc4 <HAL_RCC_GetSysClockFreq+0x6c>)
 8000b9a:	fbb0 f0f1 	udiv	r0, r0, r1
 8000b9e:	4358      	muls	r0, r3
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8000ba0:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <HAL_RCC_GetSysClockFreq+0x68>)
 8000ba2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	fa92 f2a2 	rbit	r2, r2
 8000bac:	fab2 f282 	clz	r2, r2
 8000bb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bb4:	40d3      	lsrs	r3, r2
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000bba:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bbe:	bd10      	pop	{r4, pc}
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	00f42400 	.word	0x00f42400
 8000bc8:	017d7840 	.word	0x017d7840

08000bcc <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000bcc:	4b56      	ldr	r3, [pc, #344]	; (8000d28 <HAL_RCC_ClockConfig+0x15c>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	f002 020f 	and.w	r2, r2, #15
 8000bd4:	428a      	cmp	r2, r1
{
 8000bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bda:	4605      	mov	r5, r0
 8000bdc:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000bde:	d330      	bcc.n	8000c42 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000be0:	682a      	ldr	r2, [r5, #0]
 8000be2:	0794      	lsls	r4, r2, #30
 8000be4:	d437      	bmi.n	8000c56 <HAL_RCC_ClockConfig+0x8a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000be6:	07d0      	lsls	r0, r2, #31
 8000be8:	d43d      	bmi.n	8000c66 <HAL_RCC_ClockConfig+0x9a>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000bea:	4b4f      	ldr	r3, [pc, #316]	; (8000d28 <HAL_RCC_ClockConfig+0x15c>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	f002 020f 	and.w	r2, r2, #15
 8000bf2:	4296      	cmp	r6, r2
 8000bf4:	f0c0 8088 	bcc.w	8000d08 <HAL_RCC_ClockConfig+0x13c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bf8:	682a      	ldr	r2, [r5, #0]
 8000bfa:	0751      	lsls	r1, r2, #29
 8000bfc:	f100 808c 	bmi.w	8000d18 <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c00:	0713      	lsls	r3, r2, #28
 8000c02:	d507      	bpl.n	8000c14 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c04:	4a49      	ldr	r2, [pc, #292]	; (8000d2c <HAL_RCC_ClockConfig+0x160>)
 8000c06:	6929      	ldr	r1, [r5, #16]
 8000c08:	6893      	ldr	r3, [r2, #8]
 8000c0a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c0e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c12:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8000c14:	f7ff ffa0 	bl	8000b58 <HAL_RCC_GetSysClockFreq>
 8000c18:	4b44      	ldr	r3, [pc, #272]	; (8000d2c <HAL_RCC_ClockConfig+0x160>)
 8000c1a:	22f0      	movs	r2, #240	; 0xf0
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	fa92 f2a2 	rbit	r2, r2
 8000c22:	fab2 f282 	clz	r2, r2
 8000c26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c2a:	40d3      	lsrs	r3, r2
 8000c2c:	4a40      	ldr	r2, [pc, #256]	; (8000d30 <HAL_RCC_ClockConfig+0x164>)
 8000c2e:	5cd3      	ldrb	r3, [r2, r3]
 8000c30:	40d8      	lsrs	r0, r3
 8000c32:	4b40      	ldr	r3, [pc, #256]	; (8000d34 <HAL_RCC_ClockConfig+0x168>)
 8000c34:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000c36:	2000      	movs	r0, #0
 8000c38:	f7ff fac6 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 8000c3c:	2000      	movs	r0, #0
}
 8000c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c42:	b2ca      	uxtb	r2, r1
 8000c44:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f003 030f 	and.w	r3, r3, #15
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	d0c7      	beq.n	8000be0 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000c50:	2001      	movs	r0, #1
 8000c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c56:	4935      	ldr	r1, [pc, #212]	; (8000d2c <HAL_RCC_ClockConfig+0x160>)
 8000c58:	68a8      	ldr	r0, [r5, #8]
 8000c5a:	688b      	ldr	r3, [r1, #8]
 8000c5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c60:	4303      	orrs	r3, r0
 8000c62:	608b      	str	r3, [r1, #8]
 8000c64:	e7bf      	b.n	8000be6 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c66:	686a      	ldr	r2, [r5, #4]
 8000c68:	4b30      	ldr	r3, [pc, #192]	; (8000d2c <HAL_RCC_ClockConfig+0x160>)
 8000c6a:	2a01      	cmp	r2, #1
 8000c6c:	d11e      	bne.n	8000cac <HAL_RCC_ClockConfig+0xe0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c74:	d0ec      	beq.n	8000c50 <HAL_RCC_ClockConfig+0x84>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c76:	4c2d      	ldr	r4, [pc, #180]	; (8000d2c <HAL_RCC_ClockConfig+0x160>)
 8000c78:	68a3      	ldr	r3, [r4, #8]
 8000c7a:	f023 0303 	bic.w	r3, r3, #3
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8000c82:	f7ff fad7 	bl	8000234 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c86:	686b      	ldr	r3, [r5, #4]
 8000c88:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8000c8a:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c8c:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c90:	d116      	bne.n	8000cc0 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c92:	68a3      	ldr	r3, [r4, #8]
 8000c94:	f003 030c 	and.w	r3, r3, #12
 8000c98:	2b04      	cmp	r3, #4
 8000c9a:	d0a6      	beq.n	8000bea <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c9c:	f7ff faca 	bl	8000234 <HAL_GetTick>
 8000ca0:	1bc0      	subs	r0, r0, r7
 8000ca2:	4540      	cmp	r0, r8
 8000ca4:	d9f5      	bls.n	8000c92 <HAL_RCC_ClockConfig+0xc6>
          return HAL_TIMEOUT;
 8000ca6:	2003      	movs	r0, #3
 8000ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000cac:	1e91      	subs	r1, r2, #2
 8000cae:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cb0:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000cb2:	d802      	bhi.n	8000cba <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cb4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000cb8:	e7dc      	b.n	8000c74 <HAL_RCC_ClockConfig+0xa8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cba:	f013 0f02 	tst.w	r3, #2
 8000cbe:	e7d9      	b.n	8000c74 <HAL_RCC_ClockConfig+0xa8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	d10a      	bne.n	8000cda <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000cc4:	68a3      	ldr	r3, [r4, #8]
 8000cc6:	f003 030c 	and.w	r3, r3, #12
 8000cca:	2b08      	cmp	r3, #8
 8000ccc:	d08d      	beq.n	8000bea <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cce:	f7ff fab1 	bl	8000234 <HAL_GetTick>
 8000cd2:	1bc0      	subs	r0, r0, r7
 8000cd4:	4540      	cmp	r0, r8
 8000cd6:	d9f5      	bls.n	8000cc4 <HAL_RCC_ClockConfig+0xf8>
 8000cd8:	e7e5      	b.n	8000ca6 <HAL_RCC_ClockConfig+0xda>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8000cda:	2b03      	cmp	r3, #3
 8000cdc:	d10f      	bne.n	8000cfe <HAL_RCC_ClockConfig+0x132>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8000cde:	68a3      	ldr	r3, [r4, #8]
 8000ce0:	f003 030c 	and.w	r3, r3, #12
 8000ce4:	2b0c      	cmp	r3, #12
 8000ce6:	d080      	beq.n	8000bea <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ce8:	f7ff faa4 	bl	8000234 <HAL_GetTick>
 8000cec:	1bc0      	subs	r0, r0, r7
 8000cee:	4540      	cmp	r0, r8
 8000cf0:	d9f5      	bls.n	8000cde <HAL_RCC_ClockConfig+0x112>
 8000cf2:	e7d8      	b.n	8000ca6 <HAL_RCC_ClockConfig+0xda>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cf4:	f7ff fa9e 	bl	8000234 <HAL_GetTick>
 8000cf8:	1bc0      	subs	r0, r0, r7
 8000cfa:	4540      	cmp	r0, r8
 8000cfc:	d8d3      	bhi.n	8000ca6 <HAL_RCC_ClockConfig+0xda>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cfe:	68a3      	ldr	r3, [r4, #8]
 8000d00:	f013 0f0c 	tst.w	r3, #12
 8000d04:	d1f6      	bne.n	8000cf4 <HAL_RCC_ClockConfig+0x128>
 8000d06:	e770      	b.n	8000bea <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d08:	b2f2      	uxtb	r2, r6
 8000d0a:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f003 030f 	and.w	r3, r3, #15
 8000d12:	429e      	cmp	r6, r3
 8000d14:	d19c      	bne.n	8000c50 <HAL_RCC_ClockConfig+0x84>
 8000d16:	e76f      	b.n	8000bf8 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d18:	4904      	ldr	r1, [pc, #16]	; (8000d2c <HAL_RCC_ClockConfig+0x160>)
 8000d1a:	68e8      	ldr	r0, [r5, #12]
 8000d1c:	688b      	ldr	r3, [r1, #8]
 8000d1e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d22:	4303      	orrs	r3, r0
 8000d24:	608b      	str	r3, [r1, #8]
 8000d26:	e76b      	b.n	8000c00 <HAL_RCC_ClockConfig+0x34>
 8000d28:	40023c00 	.word	0x40023c00
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	08001101 	.word	0x08001101
 8000d34:	20000000 	.word	0x20000000

08000d38 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000d38:	4b01      	ldr	r3, [pc, #4]	; (8000d40 <HAL_RCC_GetHCLKFreq+0x8>)
 8000d3a:	6818      	ldr	r0, [r3, #0]
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	20000000 	.word	0x20000000

08000d44 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 8000d46:	4813      	ldr	r0, [pc, #76]	; (8000d94 <MX_ADC1_Init+0x50>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d48:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <MX_ADC1_Init+0x54>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d4a:	4a14      	ldr	r2, [pc, #80]	; (8000d9c <MX_ADC1_Init+0x58>)
 8000d4c:	6282      	str	r2, [r0, #40]	; 0x28
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d4e:	2400      	movs	r4, #0
 8000d50:	e880 0018 	stmia.w	r0, {r3, r4}
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d54:	2301      	movs	r3, #1
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d56:	6084      	str	r4, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d58:	6104      	str	r4, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d5a:	6183      	str	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d5c:	6204      	str	r4, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d5e:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d60:	60c4      	str	r4, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d62:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d64:	6304      	str	r4, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d66:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d68:	f7ff fa6a 	bl	8000240 <HAL_ADC_Init>
 8000d6c:	b118      	cbz	r0, 8000d76 <MX_ADC1_Init+0x32>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000d6e:	2148      	movs	r1, #72	; 0x48
 8000d70:	480b      	ldr	r0, [pc, #44]	; (8000da0 <MX_ADC1_Init+0x5c>)
 8000d72:	f000 f8ff 	bl	8000f74 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = 1;
 8000d76:	2301      	movs	r3, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d78:	4669      	mov	r1, sp
 8000d7a:	4806      	ldr	r0, [pc, #24]	; (8000d94 <MX_ADC1_Init+0x50>)
  sConfig.Channel = ADC_CHANNEL_0;
 8000d7c:	9400      	str	r4, [sp, #0]
  sConfig.Rank = 1;
 8000d7e:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d80:	9402      	str	r4, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d82:	f7ff fb6b 	bl	800045c <HAL_ADC_ConfigChannel>
 8000d86:	b118      	cbz	r0, 8000d90 <MX_ADC1_Init+0x4c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000d88:	2152      	movs	r1, #82	; 0x52
 8000d8a:	4805      	ldr	r0, [pc, #20]	; (8000da0 <MX_ADC1_Init+0x5c>)
 8000d8c:	f000 f8f2 	bl	8000f74 <_Error_Handler>
  }

}
 8000d90:	b004      	add	sp, #16
 8000d92:	bd10      	pop	{r4, pc}
 8000d94:	20000024 	.word	0x20000024
 8000d98:	40012000 	.word	0x40012000
 8000d9c:	0f000001 	.word	0x0f000001
 8000da0:	080010f4 	.word	0x080010f4

08000da4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000da4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 8000da6:	6802      	ldr	r2, [r0, #0]
 8000da8:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <HAL_ADC_MspInit+0x3c>)
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d115      	bne.n	8000dda <HAL_ADC_MspInit+0x36>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dae:	2100      	movs	r1, #0
 8000db0:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8000db4:	9100      	str	r1, [sp, #0]
 8000db6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	480a      	ldr	r0, [pc, #40]	; (8000de4 <HAL_ADC_MspInit+0x40>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000dbe:	645a      	str	r2, [r3, #68]	; 0x44
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	9103      	str	r1, [sp, #12]
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dc8:	9300      	str	r3, [sp, #0]
 8000dca:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd0:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd6:	f7ff fc45 	bl	8000664 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000dda:	b007      	add	sp, #28
 8000ddc:	f85d fb04 	ldr.w	pc, [sp], #4
 8000de0:	40012000 	.word	0x40012000
 8000de4:	40020000 	.word	0x40020000

08000de8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000de8:	b530      	push	{r4, r5, lr}
 8000dea:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dec:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <MX_GPIO_Init+0x54>)
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Led_Azul_Pin|Led_Rojo_Pin|Led_Verde_Pin, GPIO_PIN_SET);
 8000dee:	4d14      	ldr	r5, [pc, #80]	; (8000e40 <MX_GPIO_Init+0x58>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000df0:	2400      	movs	r4, #0
 8000df2:	9401      	str	r4, [sp, #4]
 8000df4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000df6:	f042 0210 	orr.w	r2, r2, #16
 8000dfa:	631a      	str	r2, [r3, #48]	; 0x30
 8000dfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dfe:	f002 0210 	and.w	r2, r2, #16
 8000e02:	9201      	str	r2, [sp, #4]
 8000e04:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	9402      	str	r4, [sp, #8]
 8000e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e0a:	f042 0201 	orr.w	r2, r2, #1
 8000e0e:	631a      	str	r2, [r3, #48]	; 0x30
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOE, Led_Azul_Pin|Led_Rojo_Pin|Led_Verde_Pin, GPIO_PIN_SET);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	4628      	mov	r0, r5
 8000e1c:	2107      	movs	r1, #7
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOE, Led_Azul_Pin|Led_Rojo_Pin|Led_Verde_Pin, GPIO_PIN_SET);
 8000e20:	f7ff fd00 	bl	8000824 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Led_Azul_Pin|Led_Rojo_Pin|Led_Verde_Pin;
 8000e24:	2307      	movs	r3, #7
 8000e26:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e28:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2a:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e2c:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e34:	f7ff fc16 	bl	8000664 <HAL_GPIO_Init>

}
 8000e38:	b009      	add	sp, #36	; 0x24
 8000e3a:	bd30      	pop	{r4, r5, pc}
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40021000 	.word	0x40021000

08000e44 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000e44:	b510      	push	{r4, lr}
 8000e46:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e48:	2300      	movs	r3, #0
 8000e4a:	4a21      	ldr	r2, [pc, #132]	; (8000ed0 <SystemClock_Config+0x8c>)
 8000e4c:	9301      	str	r3, [sp, #4]
 8000e4e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000e50:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000e54:	6411      	str	r1, [r2, #64]	; 0x40
 8000e56:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000e58:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000e5c:	9201      	str	r2, [sp, #4]
 8000e5e:	9a01      	ldr	r2, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e60:	4a1c      	ldr	r2, [pc, #112]	; (8000ed4 <SystemClock_Config+0x90>)
 8000e62:	9302      	str	r3, [sp, #8]
 8000e64:	6811      	ldr	r1, [r2, #0]
 8000e66:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000e6a:	6011      	str	r1, [r2, #0]
 8000e6c:	6812      	ldr	r2, [r2, #0]
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e6e:	930e      	str	r3, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e70:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000e74:	9202      	str	r2, [sp, #8]
 8000e76:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e78:	2202      	movs	r2, #2
 8000e7a:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e80:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000e82:	2210      	movs	r2, #16
 8000e84:	920c      	str	r2, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e86:	f7ff fcd3 	bl	8000830 <HAL_RCC_OscConfig>
 8000e8a:	4601      	mov	r1, r0
 8000e8c:	b100      	cbz	r0, 8000e90 <SystemClock_Config+0x4c>
 8000e8e:	e7fe      	b.n	8000e8e <SystemClock_Config+0x4a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e90:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e92:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e94:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e96:	9006      	str	r0, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e98:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e9a:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e9c:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e9e:	f7ff fe95 	bl	8000bcc <HAL_RCC_ClockConfig>
 8000ea2:	4604      	mov	r4, r0
 8000ea4:	b100      	cbz	r0, 8000ea8 <SystemClock_Config+0x64>
 8000ea6:	e7fe      	b.n	8000ea6 <SystemClock_Config+0x62>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000ea8:	f7ff ff46 	bl	8000d38 <HAL_RCC_GetHCLKFreq>
 8000eac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000eb4:	f7ff fbae 	bl	8000614 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000eb8:	2004      	movs	r0, #4
 8000eba:	f7ff fbc1 	bl	8000640 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000ebe:	4622      	mov	r2, r4
 8000ec0:	4621      	mov	r1, r4
 8000ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec6:	f7ff fb71 	bl	80005ac <HAL_NVIC_SetPriority>
}
 8000eca:	b014      	add	sp, #80	; 0x50
 8000ecc:	bd10      	pop	{r4, pc}
 8000ece:	bf00      	nop
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40007000 	.word	0x40007000

08000ed8 <main>:
{
 8000ed8:	b570      	push	{r4, r5, r6, lr}
  HAL_Init();
 8000eda:	f7ff f989 	bl	80001f0 <HAL_Init>
  SystemClock_Config();
 8000ede:	f7ff ffb1 	bl	8000e44 <SystemClock_Config>
  MX_GPIO_Init();
 8000ee2:	f7ff ff81 	bl	8000de8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ee6:	f7ff ff2d 	bl	8000d44 <MX_ADC1_Init>
	 HAL_ADC_Start(&hadc1);
 8000eea:	4d20      	ldr	r5, [pc, #128]	; (8000f6c <main+0x94>)
		 HAL_GPIO_WritePin(GPIOE,Led_Rojo_Pin,Enciende);
 8000eec:	4c20      	ldr	r4, [pc, #128]	; (8000f70 <main+0x98>)
	 else if(Resultado>2048 && Resultado<=3071){
 8000eee:	f240 36fe 	movw	r6, #1022	; 0x3fe
	 HAL_ADC_Start(&hadc1);
 8000ef2:	4628      	mov	r0, r5
 8000ef4:	f7ff fa4e 	bl	8000394 <HAL_ADC_Start>
	 int Resultado=HAL_ADC_GetValue(&hadc1);
 8000ef8:	4628      	mov	r0, r5
 8000efa:	f7ff faab 	bl	8000454 <HAL_ADC_GetValue>
	 if(Resultado<=1024){
 8000efe:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8000f02:	dc0f      	bgt.n	8000f24 <main+0x4c>
		 HAL_GPIO_WritePin(GPIOE,Led_Rojo_Pin,Enciende);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2101      	movs	r1, #1
 8000f08:	4620      	mov	r0, r4
 8000f0a:	f7ff fc8b 	bl	8000824 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOE,Led_Verde_Pin,Apaga);
 8000f0e:	2201      	movs	r2, #1
		 HAL_GPIO_WritePin(GPIOE,Led_Verde_Pin,Enciende);
 8000f10:	2102      	movs	r1, #2
 8000f12:	4620      	mov	r0, r4
 8000f14:	f7ff fc86 	bl	8000824 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOE,Led_Azul_Pin,Apaga);
 8000f18:	2201      	movs	r2, #1
		 HAL_GPIO_WritePin(GPIOE,Led_Azul_Pin,Enciende);
 8000f1a:	2104      	movs	r1, #4
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	f7ff fc81 	bl	8000824 <HAL_GPIO_WritePin>
 8000f22:	e7e6      	b.n	8000ef2 <main+0x1a>
	 else if(Resultado>1024 && Resultado<=2048){
 8000f24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000f28:	1883      	adds	r3, r0, r2
 8000f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f2e:	d206      	bcs.n	8000f3e <main+0x66>
		 HAL_GPIO_WritePin(GPIOE,Led_Rojo_Pin,Enciende);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2101      	movs	r1, #1
		 HAL_GPIO_WritePin(GPIOE,Led_Rojo_Pin,Apaga);
 8000f34:	4620      	mov	r0, r4
 8000f36:	f7ff fc75 	bl	8000824 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOE,Led_Verde_Pin,Enciende);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	e7e8      	b.n	8000f10 <main+0x38>
	 else if(Resultado>2048 && Resultado<=3071){
 8000f3e:	f46f 6300 	mvn.w	r3, #2048	; 0x800
 8000f42:	18c3      	adds	r3, r0, r3
 8000f44:	42b3      	cmp	r3, r6
 8000f46:	d802      	bhi.n	8000f4e <main+0x76>
		 HAL_GPIO_WritePin(GPIOE,Led_Rojo_Pin,Apaga);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	e7f2      	b.n	8000f34 <main+0x5c>
	 else if(Resultado>3071){
 8000f4e:	f5b0 6f40 	cmp.w	r0, #3072	; 0xc00
 8000f52:	dbce      	blt.n	8000ef2 <main+0x1a>
		 HAL_GPIO_WritePin(GPIOE,Led_Rojo_Pin,Enciende);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2101      	movs	r1, #1
 8000f58:	4620      	mov	r0, r4
 8000f5a:	f7ff fc63 	bl	8000824 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOE,Led_Verde_Pin,Enciende);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2102      	movs	r1, #2
 8000f62:	4620      	mov	r0, r4
 8000f64:	f7ff fc5e 	bl	8000824 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOE,Led_Azul_Pin,Enciende);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	e7d6      	b.n	8000f1a <main+0x42>
 8000f6c:	20000024 	.word	0x20000024
 8000f70:	40021000 	.word	0x40021000

08000f74 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8000f74:	e7fe      	b.n	8000f74 <_Error_Handler>

08000f76 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f76:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f7ff fb05 	bl	8000588 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	4611      	mov	r1, r2
 8000f82:	f06f 000b 	mvn.w	r0, #11
 8000f86:	f7ff fb11 	bl	80005ac <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	f06f 000a 	mvn.w	r0, #10
 8000f92:	f7ff fb0b 	bl	80005ac <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	4611      	mov	r1, r2
 8000f9a:	f06f 0009 	mvn.w	r0, #9
 8000f9e:	f7ff fb05 	bl	80005ac <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	4611      	mov	r1, r2
 8000fa6:	f06f 0004 	mvn.w	r0, #4
 8000faa:	f7ff faff 	bl	80005ac <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	4611      	mov	r1, r2
 8000fb2:	f06f 0003 	mvn.w	r0, #3
 8000fb6:	f7ff faf9 	bl	80005ac <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	4611      	mov	r1, r2
 8000fbe:	f06f 0001 	mvn.w	r0, #1
 8000fc2:	f7ff faf3 	bl	80005ac <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	4611      	mov	r1, r2
 8000fca:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000fd2:	f7ff baeb 	b.w	80005ac <HAL_NVIC_SetPriority>

08000fd6 <NMI_Handler>:
 8000fd6:	4770      	bx	lr

08000fd8 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8000fd8:	e7fe      	b.n	8000fd8 <HardFault_Handler>

08000fda <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000fda:	e7fe      	b.n	8000fda <MemManage_Handler>

08000fdc <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8000fdc:	e7fe      	b.n	8000fdc <BusFault_Handler>

08000fde <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8000fde:	e7fe      	b.n	8000fde <UsageFault_Handler>

08000fe0 <SVC_Handler>:
 8000fe0:	4770      	bx	lr

08000fe2 <DebugMon_Handler>:
 8000fe2:	4770      	bx	lr

08000fe4 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8000fe4:	4770      	bx	lr

08000fe6 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000fe6:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe8:	f7ff f91c 	bl	8000224 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8000ff0:	f7ff bb33 	b.w	800065a <HAL_SYSTICK_IRQHandler>

08000ff4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff4:	490f      	ldr	r1, [pc, #60]	; (8001034 <SystemInit+0x40>)
 8000ff6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000ffa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001002:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <SystemInit+0x44>)
 8001004:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001006:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001008:	f042 0201 	orr.w	r2, r2, #1
 800100c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800100e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001016:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800101a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800101c:	4a07      	ldr	r2, [pc, #28]	; (800103c <SystemInit+0x48>)
 800101e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001026:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001028:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800102a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800102e:	608b      	str	r3, [r1, #8]
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000ed00 	.word	0xe000ed00
 8001038:	40023800 	.word	0x40023800
 800103c:	24003010 	.word	0x24003010

08001040 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001040:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001078 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001044:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001046:	e003      	b.n	8001050 <LoopCopyDataInit>

08001048 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800104a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800104c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800104e:	3104      	adds	r1, #4

08001050 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001050:	480b      	ldr	r0, [pc, #44]	; (8001080 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001052:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001054:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001056:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001058:	d3f6      	bcc.n	8001048 <CopyDataInit>
  ldr  r2, =_sbss
 800105a:	4a0b      	ldr	r2, [pc, #44]	; (8001088 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800105c:	e002      	b.n	8001064 <LoopFillZerobss>

0800105e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800105e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001060:	f842 3b04 	str.w	r3, [r2], #4

08001064 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001064:	4b09      	ldr	r3, [pc, #36]	; (800108c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001066:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001068:	d3f9      	bcc.n	800105e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800106a:	f7ff ffc3 	bl	8000ff4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800106e:	f000 f811 	bl	8001094 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001072:	f7ff ff31 	bl	8000ed8 <main>
  bx  lr    
 8001076:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001078:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800107c:	0800111c 	.word	0x0800111c
  ldr  r0, =_sdata
 8001080:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001084:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8001088:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 800108c:	2000006c 	.word	0x2000006c

08001090 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001090:	e7fe      	b.n	8001090 <ADC_IRQHandler>
	...

08001094 <__libc_init_array>:
 8001094:	b570      	push	{r4, r5, r6, lr}
 8001096:	4e0d      	ldr	r6, [pc, #52]	; (80010cc <__libc_init_array+0x38>)
 8001098:	4c0d      	ldr	r4, [pc, #52]	; (80010d0 <__libc_init_array+0x3c>)
 800109a:	1ba4      	subs	r4, r4, r6
 800109c:	10a4      	asrs	r4, r4, #2
 800109e:	2500      	movs	r5, #0
 80010a0:	42a5      	cmp	r5, r4
 80010a2:	d109      	bne.n	80010b8 <__libc_init_array+0x24>
 80010a4:	4e0b      	ldr	r6, [pc, #44]	; (80010d4 <__libc_init_array+0x40>)
 80010a6:	4c0c      	ldr	r4, [pc, #48]	; (80010d8 <__libc_init_array+0x44>)
 80010a8:	f000 f818 	bl	80010dc <_init>
 80010ac:	1ba4      	subs	r4, r4, r6
 80010ae:	10a4      	asrs	r4, r4, #2
 80010b0:	2500      	movs	r5, #0
 80010b2:	42a5      	cmp	r5, r4
 80010b4:	d105      	bne.n	80010c2 <__libc_init_array+0x2e>
 80010b6:	bd70      	pop	{r4, r5, r6, pc}
 80010b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80010bc:	4798      	blx	r3
 80010be:	3501      	adds	r5, #1
 80010c0:	e7ee      	b.n	80010a0 <__libc_init_array+0xc>
 80010c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80010c6:	4798      	blx	r3
 80010c8:	3501      	adds	r5, #1
 80010ca:	e7f2      	b.n	80010b2 <__libc_init_array+0x1e>
 80010cc:	08001114 	.word	0x08001114
 80010d0:	08001114 	.word	0x08001114
 80010d4:	08001114 	.word	0x08001114
 80010d8:	08001118 	.word	0x08001118

080010dc <_init>:
 80010dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010de:	bf00      	nop
 80010e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010e2:	bc08      	pop	{r3}
 80010e4:	469e      	mov	lr, r3
 80010e6:	4770      	bx	lr

080010e8 <_fini>:
 80010e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ea:	bf00      	nop
 80010ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010ee:	bc08      	pop	{r3}
 80010f0:	469e      	mov	lr, r3
 80010f2:	4770      	bx	lr
