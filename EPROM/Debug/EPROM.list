
C:\Users\LENOVO\Documents\EPROM\Debug\EPROM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005314  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  080054a8  080054a8  000154a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005758  08005758  00015758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005760  08005760  00015760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005764  08005764  00015764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000674  20000000  08005768  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020674  2**0
                  CONTENTS
  8 .bss          000000fc  20000674  20000674  00020674  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000770  20000770  00020674  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020674  2**0
                  CONTENTS, READONLY
 11 .debug_info   00010f6b  00000000  00000000  000206a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000223e  00000000  00000000  0003160f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00004f25  00000000  00000000  0003384d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006a8  00000000  00000000  00038778  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a08  00000000  00000000  00038e20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00004d06  00000000  00000000  00039828  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00002c24  00000000  00000000  0003e52e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00041152  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001d38  00000000  00000000  000411d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000674 	.word	0x20000674
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800548c 	.word	0x0800548c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000678 	.word	0x20000678
 80001cc:	0800548c 	.word	0x0800548c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b97a 	b.w	8000eac <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	460d      	mov	r5, r1
 8000bd8:	4604      	mov	r4, r0
 8000bda:	9e08      	ldr	r6, [sp, #32]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d151      	bne.n	8000c84 <__udivmoddi4+0xb4>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4617      	mov	r7, r2
 8000be4:	d96d      	bls.n	8000cc2 <__udivmoddi4+0xf2>
 8000be6:	fab2 fe82 	clz	lr, r2
 8000bea:	f1be 0f00 	cmp.w	lr, #0
 8000bee:	d00b      	beq.n	8000c08 <__udivmoddi4+0x38>
 8000bf0:	f1ce 0c20 	rsb	ip, lr, #32
 8000bf4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000bf8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bfc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c00:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c04:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c08:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c0c:	0c25      	lsrs	r5, r4, #16
 8000c0e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c12:	fa1f f987 	uxth.w	r9, r7
 8000c16:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c1a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c1e:	fb08 f309 	mul.w	r3, r8, r9
 8000c22:	42ab      	cmp	r3, r5
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x6c>
 8000c26:	19ed      	adds	r5, r5, r7
 8000c28:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c2c:	f080 8123 	bcs.w	8000e76 <__udivmoddi4+0x2a6>
 8000c30:	42ab      	cmp	r3, r5
 8000c32:	f240 8120 	bls.w	8000e76 <__udivmoddi4+0x2a6>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	443d      	add	r5, r7
 8000c3c:	1aed      	subs	r5, r5, r3
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c44:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c4c:	fb00 f909 	mul.w	r9, r0, r9
 8000c50:	45a1      	cmp	r9, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x98>
 8000c54:	19e4      	adds	r4, r4, r7
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5a:	f080 810a 	bcs.w	8000e72 <__udivmoddi4+0x2a2>
 8000c5e:	45a1      	cmp	r9, r4
 8000c60:	f240 8107 	bls.w	8000e72 <__udivmoddi4+0x2a2>
 8000c64:	3802      	subs	r0, #2
 8000c66:	443c      	add	r4, r7
 8000c68:	eba4 0409 	sub.w	r4, r4, r9
 8000c6c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c70:	2100      	movs	r1, #0
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d061      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000c76:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	6034      	str	r4, [r6, #0]
 8000c7e:	6073      	str	r3, [r6, #4]
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	428b      	cmp	r3, r1
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0xc8>
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	d054      	beq.n	8000d36 <__udivmoddi4+0x166>
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c92:	4608      	mov	r0, r1
 8000c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c98:	fab3 f183 	clz	r1, r3
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	f040 808e 	bne.w	8000dbe <__udivmoddi4+0x1ee>
 8000ca2:	42ab      	cmp	r3, r5
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xdc>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80fa 	bhi.w	8000ea0 <__udivmoddi4+0x2d0>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb65 0503 	sbc.w	r5, r5, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	46ac      	mov	ip, r5
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d03f      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000cba:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	b912      	cbnz	r2, 8000cca <__udivmoddi4+0xfa>
 8000cc4:	2701      	movs	r7, #1
 8000cc6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cca:	fab7 fe87 	clz	lr, r7
 8000cce:	f1be 0f00 	cmp.w	lr, #0
 8000cd2:	d134      	bne.n	8000d3e <__udivmoddi4+0x16e>
 8000cd4:	1beb      	subs	r3, r5, r7
 8000cd6:	0c3a      	lsrs	r2, r7, #16
 8000cd8:	fa1f fc87 	uxth.w	ip, r7
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fbb3 f8f2 	udiv	r8, r3, r2
 8000ce2:	0c25      	lsrs	r5, r4, #16
 8000ce4:	fb02 3318 	mls	r3, r2, r8, r3
 8000ce8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cec:	fb0c f308 	mul.w	r3, ip, r8
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x134>
 8000cf4:	19ed      	adds	r5, r5, r7
 8000cf6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x132>
 8000cfc:	42ab      	cmp	r3, r5
 8000cfe:	f200 80d1 	bhi.w	8000ea4 <__udivmoddi4+0x2d4>
 8000d02:	4680      	mov	r8, r0
 8000d04:	1aed      	subs	r5, r5, r3
 8000d06:	b2a3      	uxth	r3, r4
 8000d08:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d0c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d10:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d14:	fb0c fc00 	mul.w	ip, ip, r0
 8000d18:	45a4      	cmp	ip, r4
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x15c>
 8000d1c:	19e4      	adds	r4, r4, r7
 8000d1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x15a>
 8000d24:	45a4      	cmp	ip, r4
 8000d26:	f200 80b8 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	eba4 040c 	sub.w	r4, r4, ip
 8000d30:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d34:	e79d      	b.n	8000c72 <__udivmoddi4+0xa2>
 8000d36:	4631      	mov	r1, r6
 8000d38:	4630      	mov	r0, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	f1ce 0420 	rsb	r4, lr, #32
 8000d42:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d46:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d4a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d4e:	0c3a      	lsrs	r2, r7, #16
 8000d50:	fa25 f404 	lsr.w	r4, r5, r4
 8000d54:	ea48 0803 	orr.w	r8, r8, r3
 8000d58:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d5c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d60:	fb02 4411 	mls	r4, r2, r1, r4
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d6c:	fb01 f30c 	mul.w	r3, r1, ip
 8000d70:	42ab      	cmp	r3, r5
 8000d72:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d76:	d909      	bls.n	8000d8c <__udivmoddi4+0x1bc>
 8000d78:	19ed      	adds	r5, r5, r7
 8000d7a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d7e:	f080 808a 	bcs.w	8000e96 <__udivmoddi4+0x2c6>
 8000d82:	42ab      	cmp	r3, r5
 8000d84:	f240 8087 	bls.w	8000e96 <__udivmoddi4+0x2c6>
 8000d88:	3902      	subs	r1, #2
 8000d8a:	443d      	add	r5, r7
 8000d8c:	1aeb      	subs	r3, r5, r3
 8000d8e:	fa1f f588 	uxth.w	r5, r8
 8000d92:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d96:	fb02 3310 	mls	r3, r2, r0, r3
 8000d9a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d9e:	fb00 f30c 	mul.w	r3, r0, ip
 8000da2:	42ab      	cmp	r3, r5
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x1e6>
 8000da6:	19ed      	adds	r5, r5, r7
 8000da8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dac:	d26f      	bcs.n	8000e8e <__udivmoddi4+0x2be>
 8000dae:	42ab      	cmp	r3, r5
 8000db0:	d96d      	bls.n	8000e8e <__udivmoddi4+0x2be>
 8000db2:	3802      	subs	r0, #2
 8000db4:	443d      	add	r5, r7
 8000db6:	1aeb      	subs	r3, r5, r3
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	e78f      	b.n	8000cde <__udivmoddi4+0x10e>
 8000dbe:	f1c1 0720 	rsb	r7, r1, #32
 8000dc2:	fa22 f807 	lsr.w	r8, r2, r7
 8000dc6:	408b      	lsls	r3, r1
 8000dc8:	fa05 f401 	lsl.w	r4, r5, r1
 8000dcc:	ea48 0303 	orr.w	r3, r8, r3
 8000dd0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000dd4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dde:	fbb5 f9fc 	udiv	r9, r5, ip
 8000de2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000de6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000dea:	fa1f f883 	uxth.w	r8, r3
 8000dee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000df2:	fb09 f408 	mul.w	r4, r9, r8
 8000df6:	42ac      	cmp	r4, r5
 8000df8:	fa02 f201 	lsl.w	r2, r2, r1
 8000dfc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x244>
 8000e02:	18ed      	adds	r5, r5, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	d243      	bcs.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0a:	42ac      	cmp	r4, r5
 8000e0c:	d941      	bls.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e12:	441d      	add	r5, r3
 8000e14:	1b2d      	subs	r5, r5, r4
 8000e16:	fa1f fe8e 	uxth.w	lr, lr
 8000e1a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e1e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e22:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e26:	fb00 f808 	mul.w	r8, r0, r8
 8000e2a:	45a0      	cmp	r8, r4
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x26e>
 8000e2e:	18e4      	adds	r4, r4, r3
 8000e30:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e34:	d229      	bcs.n	8000e8a <__udivmoddi4+0x2ba>
 8000e36:	45a0      	cmp	r8, r4
 8000e38:	d927      	bls.n	8000e8a <__udivmoddi4+0x2ba>
 8000e3a:	3802      	subs	r0, #2
 8000e3c:	441c      	add	r4, r3
 8000e3e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e42:	eba4 0408 	sub.w	r4, r4, r8
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	454c      	cmp	r4, r9
 8000e4c:	46c6      	mov	lr, r8
 8000e4e:	464d      	mov	r5, r9
 8000e50:	d315      	bcc.n	8000e7e <__udivmoddi4+0x2ae>
 8000e52:	d012      	beq.n	8000e7a <__udivmoddi4+0x2aa>
 8000e54:	b156      	cbz	r6, 8000e6c <__udivmoddi4+0x29c>
 8000e56:	ebba 030e 	subs.w	r3, sl, lr
 8000e5a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e62:	40cb      	lsrs	r3, r1
 8000e64:	431f      	orrs	r7, r3
 8000e66:	40cc      	lsrs	r4, r1
 8000e68:	6037      	str	r7, [r6, #0]
 8000e6a:	6074      	str	r4, [r6, #4]
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	4618      	mov	r0, r3
 8000e74:	e6f8      	b.n	8000c68 <__udivmoddi4+0x98>
 8000e76:	4690      	mov	r8, r2
 8000e78:	e6e0      	b.n	8000c3c <__udivmoddi4+0x6c>
 8000e7a:	45c2      	cmp	sl, r8
 8000e7c:	d2ea      	bcs.n	8000e54 <__udivmoddi4+0x284>
 8000e7e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e82:	eb69 0503 	sbc.w	r5, r9, r3
 8000e86:	3801      	subs	r0, #1
 8000e88:	e7e4      	b.n	8000e54 <__udivmoddi4+0x284>
 8000e8a:	4628      	mov	r0, r5
 8000e8c:	e7d7      	b.n	8000e3e <__udivmoddi4+0x26e>
 8000e8e:	4640      	mov	r0, r8
 8000e90:	e791      	b.n	8000db6 <__udivmoddi4+0x1e6>
 8000e92:	4681      	mov	r9, r0
 8000e94:	e7be      	b.n	8000e14 <__udivmoddi4+0x244>
 8000e96:	4601      	mov	r1, r0
 8000e98:	e778      	b.n	8000d8c <__udivmoddi4+0x1bc>
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	e745      	b.n	8000d2c <__udivmoddi4+0x15c>
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	e708      	b.n	8000cb6 <__udivmoddi4+0xe6>
 8000ea4:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea8:	443d      	add	r5, r7
 8000eaa:	e72b      	b.n	8000d04 <__udivmoddi4+0x134>

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <HAL_InitTick+0x24>)
{
 8000eb4:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000eb6:	6818      	ldr	r0, [r3, #0]
 8000eb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ebc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ec0:	f000 f888 	bl	8000fd4 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	4621      	mov	r1, r4
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ecc:	f000 f84e 	bl	8000f6c <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	bd10      	pop	{r4, pc}
 8000ed4:	20000000 	.word	0x20000000

08000ed8 <HAL_Init>:
{
 8000ed8:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eda:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <HAL_Init+0x30>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ee2:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000eea:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ef2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef4:	2003      	movs	r0, #3
 8000ef6:	f000 f827 	bl	8000f48 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000efa:	2000      	movs	r0, #0
 8000efc:	f7ff ffd8 	bl	8000eb0 <HAL_InitTick>
  HAL_MspInit();
 8000f00:	f001 facb 	bl	800249a <HAL_MspInit>
}
 8000f04:	2000      	movs	r0, #0
 8000f06:	bd08      	pop	{r3, pc}
 8000f08:	40023c00 	.word	0x40023c00

08000f0c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000f0c:	4a02      	ldr	r2, [pc, #8]	; (8000f18 <HAL_IncTick+0xc>)
 8000f0e:	6813      	ldr	r3, [r2, #0]
 8000f10:	3301      	adds	r3, #1
 8000f12:	6013      	str	r3, [r2, #0]
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	200006c8 	.word	0x200006c8

08000f1c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f1c:	4b01      	ldr	r3, [pc, #4]	; (8000f24 <HAL_GetTick+0x8>)
 8000f1e:	6818      	ldr	r0, [r3, #0]
}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	200006c8 	.word	0x200006c8

08000f28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000f28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000f2a:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f2c:	f7ff fff6 	bl	8000f1c <HAL_GetTick>
  uint32_t wait = Delay;
 8000f30:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f32:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000f34:	4605      	mov	r5, r0
  {
     wait++;
 8000f36:	bf18      	it	ne
 8000f38:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f3a:	f7ff ffef 	bl	8000f1c <HAL_GetTick>
 8000f3e:	1b40      	subs	r0, r0, r5
 8000f40:	42a0      	cmp	r0, r4
 8000f42:	d3fa      	bcc.n	8000f3a <HAL_Delay+0x12>
  {
  }
}
 8000f44:	b003      	add	sp, #12
 8000f46:	bd30      	pop	{r4, r5, pc}

08000f48 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f48:	4a07      	ldr	r2, [pc, #28]	; (8000f68 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000f4a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f50:	041b      	lsls	r3, r3, #16
 8000f52:	0c1b      	lsrs	r3, r3, #16
 8000f54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000f58:	0200      	lsls	r0, r0, #8
 8000f5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f5e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000f62:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000f64:	60d3      	str	r3, [r2, #12]
 8000f66:	4770      	bx	lr
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f6c:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f6e:	b530      	push	{r4, r5, lr}
 8000f70:	68dc      	ldr	r4, [r3, #12]
 8000f72:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f76:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f7c:	2b04      	cmp	r3, #4
 8000f7e:	bf28      	it	cs
 8000f80:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f82:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	f04f 0501 	mov.w	r5, #1
 8000f88:	fa05 f303 	lsl.w	r3, r5, r3
 8000f8c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f90:	bf8c      	ite	hi
 8000f92:	3c03      	subhi	r4, #3
 8000f94:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f96:	4019      	ands	r1, r3
 8000f98:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f9a:	fa05 f404 	lsl.w	r4, r5, r4
 8000f9e:	3c01      	subs	r4, #1
 8000fa0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000fa2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa4:	ea42 0201 	orr.w	r2, r2, r1
 8000fa8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fac:	bfaf      	iteee	ge
 8000fae:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb2:	f000 000f 	andlt.w	r0, r0, #15
 8000fb6:	4b06      	ldrlt	r3, [pc, #24]	; (8000fd0 <HAL_NVIC_SetPriority+0x64>)
 8000fb8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fba:	bfa5      	ittet	ge
 8000fbc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000fc0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000fc8:	bd30      	pop	{r4, r5, pc}
 8000fca:	bf00      	nop
 8000fcc:	e000ed00 	.word	0xe000ed00
 8000fd0:	e000ed14 	.word	0xe000ed14

08000fd4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000fda:	d20a      	bcs.n	8000ff2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fde:	4a07      	ldr	r2, [pc, #28]	; (8000ffc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe2:	21f0      	movs	r1, #240	; 0xf0
 8000fe4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fea:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fec:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000ff2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000e010 	.word	0xe000e010
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001000:	4b04      	ldr	r3, [pc, #16]	; (8001014 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001002:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001004:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001006:	bf0c      	ite	eq
 8001008:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800100c:	f022 0204 	bicne.w	r2, r2, #4
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	4770      	bx	lr
 8001014:	e000e010 	.word	0xe000e010

08001018 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001018:	4770      	bx	lr

0800101a <HAL_SYSTICK_IRQHandler>:
{
 800101a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800101c:	f7ff fffc 	bl	8001018 <HAL_SYSTICK_Callback>
 8001020:	bd08      	pop	{r3, pc}
	...

08001024 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001028:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800102a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80011dc <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001030:	4a68      	ldr	r2, [pc, #416]	; (80011d4 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001032:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80011e0 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001036:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001038:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800103a:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800103e:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001040:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001044:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8001048:	45b6      	cmp	lr, r6
 800104a:	f040 80ae 	bne.w	80011aa <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800104e:	684c      	ldr	r4, [r1, #4]
 8001050:	f024 0710 	bic.w	r7, r4, #16
 8001054:	2f02      	cmp	r7, #2
 8001056:	d116      	bne.n	8001086 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8001058:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800105c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001060:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001064:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001068:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800106c:	f04f 0c0f 	mov.w	ip, #15
 8001070:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001074:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001078:	690d      	ldr	r5, [r1, #16]
 800107a:	fa05 f50b 	lsl.w	r5, r5, fp
 800107e:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8001082:	f8ca 5020 	str.w	r5, [sl, #32]
 8001086:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800108a:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800108c:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001090:	fa05 f50a 	lsl.w	r5, r5, sl
 8001094:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001096:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800109a:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800109e:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010a2:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010a4:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010a8:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80010aa:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010ae:	d811      	bhi.n	80010d4 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80010b0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010b2:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010b6:	68cf      	ldr	r7, [r1, #12]
 80010b8:	fa07 fc0a 	lsl.w	ip, r7, sl
 80010bc:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80010c0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80010c2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010c4:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010c8:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80010cc:	409f      	lsls	r7, r3
 80010ce:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80010d2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80010d4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010d6:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010d8:	688f      	ldr	r7, [r1, #8]
 80010da:	fa07 f70a 	lsl.w	r7, r7, sl
 80010de:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80010e0:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010e2:	00e5      	lsls	r5, r4, #3
 80010e4:	d561      	bpl.n	80011aa <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e6:	f04f 0b00 	mov.w	fp, #0
 80010ea:	f8cd b00c 	str.w	fp, [sp, #12]
 80010ee:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010f2:	4d39      	ldr	r5, [pc, #228]	; (80011d8 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f4:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80010f8:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80010fc:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001100:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001104:	9703      	str	r7, [sp, #12]
 8001106:	9f03      	ldr	r7, [sp, #12]
 8001108:	f023 0703 	bic.w	r7, r3, #3
 800110c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001110:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001114:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001118:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800111c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001120:	f04f 0e0f 	mov.w	lr, #15
 8001124:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001128:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800112a:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800112e:	d043      	beq.n	80011b8 <HAL_GPIO_Init+0x194>
 8001130:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001134:	42a8      	cmp	r0, r5
 8001136:	d041      	beq.n	80011bc <HAL_GPIO_Init+0x198>
 8001138:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800113c:	42a8      	cmp	r0, r5
 800113e:	d03f      	beq.n	80011c0 <HAL_GPIO_Init+0x19c>
 8001140:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001144:	42a8      	cmp	r0, r5
 8001146:	d03d      	beq.n	80011c4 <HAL_GPIO_Init+0x1a0>
 8001148:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800114c:	42a8      	cmp	r0, r5
 800114e:	d03b      	beq.n	80011c8 <HAL_GPIO_Init+0x1a4>
 8001150:	4548      	cmp	r0, r9
 8001152:	d03b      	beq.n	80011cc <HAL_GPIO_Init+0x1a8>
 8001154:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001158:	42a8      	cmp	r0, r5
 800115a:	d039      	beq.n	80011d0 <HAL_GPIO_Init+0x1ac>
 800115c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001160:	42a8      	cmp	r0, r5
 8001162:	bf14      	ite	ne
 8001164:	2508      	movne	r5, #8
 8001166:	2507      	moveq	r5, #7
 8001168:	fa05 f50c 	lsl.w	r5, r5, ip
 800116c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001170:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001172:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001174:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001176:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800117a:	bf0c      	ite	eq
 800117c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800117e:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001180:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8001182:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001184:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001188:	bf0c      	ite	eq
 800118a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800118c:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800118e:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001190:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001192:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001196:	bf0c      	ite	eq
 8001198:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800119a:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 800119c:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800119e:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011a0:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80011a2:	bf54      	ite	pl
 80011a4:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80011a6:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80011a8:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011aa:	3301      	adds	r3, #1
 80011ac:	2b10      	cmp	r3, #16
 80011ae:	f47f af44 	bne.w	800103a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80011b2:	b005      	add	sp, #20
 80011b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011b8:	465d      	mov	r5, fp
 80011ba:	e7d5      	b.n	8001168 <HAL_GPIO_Init+0x144>
 80011bc:	2501      	movs	r5, #1
 80011be:	e7d3      	b.n	8001168 <HAL_GPIO_Init+0x144>
 80011c0:	2502      	movs	r5, #2
 80011c2:	e7d1      	b.n	8001168 <HAL_GPIO_Init+0x144>
 80011c4:	2503      	movs	r5, #3
 80011c6:	e7cf      	b.n	8001168 <HAL_GPIO_Init+0x144>
 80011c8:	2504      	movs	r5, #4
 80011ca:	e7cd      	b.n	8001168 <HAL_GPIO_Init+0x144>
 80011cc:	2505      	movs	r5, #5
 80011ce:	e7cb      	b.n	8001168 <HAL_GPIO_Init+0x144>
 80011d0:	2506      	movs	r5, #6
 80011d2:	e7c9      	b.n	8001168 <HAL_GPIO_Init+0x144>
 80011d4:	40013c00 	.word	0x40013c00
 80011d8:	40020000 	.word	0x40020000
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40021400 	.word	0x40021400

080011e4 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80011e4:	6802      	ldr	r2, [r0, #0]
 80011e6:	6953      	ldr	r3, [r2, #20]
 80011e8:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80011ec:	d00d      	beq.n	800120a <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80011ee:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80011f2:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80011f4:	2304      	movs	r3, #4
 80011f6:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 80011f8:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011fe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8001202:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 8001206:	2001      	movs	r0, #1
 8001208:	4770      	bx	lr
  }
  return HAL_OK;
 800120a:	4618      	mov	r0, r3
}
 800120c:	4770      	bx	lr

0800120e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800120e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001212:	4604      	mov	r4, r0
 8001214:	4617      	mov	r7, r2
 8001216:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001218:	f3c1 4807 	ubfx	r8, r1, #16, #8
 800121c:	b28e      	uxth	r6, r1
 800121e:	6825      	ldr	r5, [r4, #0]
 8001220:	f1b8 0f01 	cmp.w	r8, #1
 8001224:	bf0c      	ite	eq
 8001226:	696b      	ldreq	r3, [r5, #20]
 8001228:	69ab      	ldrne	r3, [r5, #24]
 800122a:	ea36 0303 	bics.w	r3, r6, r3
 800122e:	bf14      	ite	ne
 8001230:	2001      	movne	r0, #1
 8001232:	2000      	moveq	r0, #0
 8001234:	b908      	cbnz	r0, 800123a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8001236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800123a:	696b      	ldr	r3, [r5, #20]
 800123c:	055a      	lsls	r2, r3, #21
 800123e:	d512      	bpl.n	8001266 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001240:	682b      	ldr	r3, [r5, #0]
 8001242:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001246:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001248:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800124c:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800124e:	2304      	movs	r3, #4
 8001250:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8001252:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8001254:	2300      	movs	r3, #0
 8001256:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 8001258:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 800125c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001260:	2001      	movs	r0, #1
 8001262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001266:	1c7b      	adds	r3, r7, #1
 8001268:	d0d9      	beq.n	800121e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800126a:	b94f      	cbnz	r7, 8001280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 800126c:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 800126e:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001270:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001272:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001276:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 800127a:	2003      	movs	r0, #3
 800127c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001280:	f7ff fe4c 	bl	8000f1c <HAL_GetTick>
 8001284:	eba0 0009 	sub.w	r0, r0, r9
 8001288:	4287      	cmp	r7, r0
 800128a:	d2c8      	bcs.n	800121e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 800128c:	e7ee      	b.n	800126c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

0800128e <I2C_WaitOnFlagUntilTimeout>:
{
 800128e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001292:	9e08      	ldr	r6, [sp, #32]
 8001294:	4604      	mov	r4, r0
 8001296:	4690      	mov	r8, r2
 8001298:	461f      	mov	r7, r3
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800129a:	f3c1 4907 	ubfx	r9, r1, #16, #8
 800129e:	b28d      	uxth	r5, r1
 80012a0:	6823      	ldr	r3, [r4, #0]
 80012a2:	f1b9 0f01 	cmp.w	r9, #1
 80012a6:	bf0c      	ite	eq
 80012a8:	695b      	ldreq	r3, [r3, #20]
 80012aa:	699b      	ldrne	r3, [r3, #24]
 80012ac:	ea35 0303 	bics.w	r3, r5, r3
 80012b0:	bf0c      	ite	eq
 80012b2:	2301      	moveq	r3, #1
 80012b4:	2300      	movne	r3, #0
 80012b6:	4543      	cmp	r3, r8
 80012b8:	d002      	beq.n	80012c0 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 80012ba:	2000      	movs	r0, #0
}
 80012bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 80012c0:	1c7b      	adds	r3, r7, #1
 80012c2:	d0ed      	beq.n	80012a0 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80012c4:	b95f      	cbnz	r7, 80012de <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 80012c6:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 80012c8:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80012ca:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80012cc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80012d0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80012d4:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80012d6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80012da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80012de:	f7ff fe1d 	bl	8000f1c <HAL_GetTick>
 80012e2:	1b80      	subs	r0, r0, r6
 80012e4:	4287      	cmp	r7, r0
 80012e6:	d2db      	bcs.n	80012a0 <I2C_WaitOnFlagUntilTimeout+0x12>
 80012e8:	e7ed      	b.n	80012c6 <I2C_WaitOnFlagUntilTimeout+0x38>

080012ea <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 80012ea:	b570      	push	{r4, r5, r6, lr}
 80012ec:	4604      	mov	r4, r0
 80012ee:	460d      	mov	r5, r1
 80012f0:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80012f2:	6823      	ldr	r3, [r4, #0]
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	061b      	lsls	r3, r3, #24
 80012f8:	d501      	bpl.n	80012fe <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 80012fa:	2000      	movs	r0, #0
 80012fc:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80012fe:	4620      	mov	r0, r4
 8001300:	f7ff ff70 	bl	80011e4 <I2C_IsAcknowledgeFailed>
 8001304:	b9a8      	cbnz	r0, 8001332 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001306:	1c6a      	adds	r2, r5, #1
 8001308:	d0f3      	beq.n	80012f2 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800130a:	b965      	cbnz	r5, 8001326 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800130c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800130e:	f043 0320 	orr.w	r3, r3, #32
 8001312:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001314:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001316:	2300      	movs	r3, #0
 8001318:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800131a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800131e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001322:	2003      	movs	r0, #3
 8001324:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001326:	f7ff fdf9 	bl	8000f1c <HAL_GetTick>
 800132a:	1b80      	subs	r0, r0, r6
 800132c:	4285      	cmp	r5, r0
 800132e:	d2e0      	bcs.n	80012f2 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8001330:	e7ec      	b.n	800130c <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001332:	2001      	movs	r0, #1
}
 8001334:	bd70      	pop	{r4, r5, r6, pc}
	...

08001338 <I2C_RequestMemoryWrite>:
{
 8001338:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800133c:	4615      	mov	r5, r2
  hi2c->Instance->CR1 |= I2C_CR1_START;
 800133e:	6802      	ldr	r2, [r0, #0]
{
 8001340:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8001342:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001344:	6813      	ldr	r3, [r2, #0]
 8001346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800134a:	6013      	str	r3, [r2, #0]
{
 800134c:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800134e:	9600      	str	r6, [sp, #0]
 8001350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001352:	2200      	movs	r2, #0
 8001354:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8001358:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800135a:	f7ff ff98 	bl	800128e <I2C_WaitOnFlagUntilTimeout>
 800135e:	b968      	cbnz	r0, 800137c <I2C_RequestMemoryWrite+0x44>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001360:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001362:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001364:	491c      	ldr	r1, [pc, #112]	; (80013d8 <I2C_RequestMemoryWrite+0xa0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001366:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 800136a:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800136c:	4620      	mov	r0, r4
 800136e:	4633      	mov	r3, r6
 8001370:	f7ff ff4d 	bl	800120e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001374:	b130      	cbz	r0, 8001384 <I2C_RequestMemoryWrite+0x4c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001376:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001378:	2b04      	cmp	r3, #4
 800137a:	d018      	beq.n	80013ae <I2C_RequestMemoryWrite+0x76>
      return HAL_TIMEOUT;
 800137c:	2003      	movs	r0, #3
}
 800137e:	b004      	add	sp, #16
 8001380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001384:	6823      	ldr	r3, [r4, #0]
 8001386:	9003      	str	r0, [sp, #12]
 8001388:	695a      	ldr	r2, [r3, #20]
 800138a:	9203      	str	r2, [sp, #12]
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001390:	4632      	mov	r2, r6
 8001392:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001394:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001396:	4620      	mov	r0, r4
 8001398:	f7ff ffa7 	bl	80012ea <I2C_WaitOnTXEFlagUntilTimeout>
 800139c:	b148      	cbz	r0, 80013b2 <I2C_RequestMemoryWrite+0x7a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800139e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013a0:	2b04      	cmp	r3, #4
 80013a2:	d1eb      	bne.n	800137c <I2C_RequestMemoryWrite+0x44>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80013a4:	6822      	ldr	r2, [r4, #0]
 80013a6:	6813      	ldr	r3, [r2, #0]
 80013a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ac:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 80013ae:	2001      	movs	r0, #1
 80013b0:	e7e5      	b.n	800137e <I2C_RequestMemoryWrite+0x46>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80013b2:	f1b8 0f01 	cmp.w	r8, #1
 80013b6:	6823      	ldr	r3, [r4, #0]
 80013b8:	d102      	bne.n	80013c0 <I2C_RequestMemoryWrite+0x88>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80013ba:	b2ed      	uxtb	r5, r5
 80013bc:	611d      	str	r5, [r3, #16]
 80013be:	e7de      	b.n	800137e <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80013c0:	0a2a      	lsrs	r2, r5, #8
 80013c2:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80013c6:	4632      	mov	r2, r6
 80013c8:	4620      	mov	r0, r4
 80013ca:	f7ff ff8e 	bl	80012ea <I2C_WaitOnTXEFlagUntilTimeout>
 80013ce:	2800      	cmp	r0, #0
 80013d0:	d1e5      	bne.n	800139e <I2C_RequestMemoryWrite+0x66>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80013d2:	6823      	ldr	r3, [r4, #0]
 80013d4:	e7f1      	b.n	80013ba <I2C_RequestMemoryWrite+0x82>
 80013d6:	bf00      	nop
 80013d8:	00010002 	.word	0x00010002

080013dc <I2C_RequestMemoryRead>:
{
 80013dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80013e0:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80013e2:	6803      	ldr	r3, [r0, #0]
{
 80013e4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80013e6:	4616      	mov	r6, r2
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80013ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013f6:	601a      	str	r2, [r3, #0]
{
 80013f8:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80013fa:	9500      	str	r5, [sp, #0]
 80013fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80013fe:	2200      	movs	r2, #0
 8001400:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8001404:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001406:	f7ff ff42 	bl	800128e <I2C_WaitOnFlagUntilTimeout>
 800140a:	b980      	cbnz	r0, 800142e <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800140c:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800140e:	492f      	ldr	r1, [pc, #188]	; (80014cc <I2C_RequestMemoryRead+0xf0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001410:	b2ff      	uxtb	r7, r7
 8001412:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 8001416:	611a      	str	r2, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001418:	4620      	mov	r0, r4
 800141a:	462b      	mov	r3, r5
 800141c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800141e:	f7ff fef6 	bl	800120e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001422:	b140      	cbz	r0, 8001436 <I2C_RequestMemoryRead+0x5a>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001424:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001426:	2b04      	cmp	r3, #4
 8001428:	d101      	bne.n	800142e <I2C_RequestMemoryRead+0x52>
      return HAL_ERROR;
 800142a:	2001      	movs	r0, #1
 800142c:	e000      	b.n	8001430 <I2C_RequestMemoryRead+0x54>
      return HAL_TIMEOUT;
 800142e:	2003      	movs	r0, #3
}
 8001430:	b004      	add	sp, #16
 8001432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001436:	6823      	ldr	r3, [r4, #0]
 8001438:	9003      	str	r0, [sp, #12]
 800143a:	695a      	ldr	r2, [r3, #20]
 800143c:	9203      	str	r2, [sp, #12]
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001442:	462a      	mov	r2, r5
 8001444:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001446:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001448:	4620      	mov	r0, r4
 800144a:	f7ff ff4e 	bl	80012ea <I2C_WaitOnTXEFlagUntilTimeout>
 800144e:	b140      	cbz	r0, 8001462 <I2C_RequestMemoryRead+0x86>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001450:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001452:	2b04      	cmp	r3, #4
 8001454:	d1eb      	bne.n	800142e <I2C_RequestMemoryRead+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001456:	6822      	ldr	r2, [r4, #0]
 8001458:	6813      	ldr	r3, [r2, #0]
 800145a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	e7e3      	b.n	800142a <I2C_RequestMemoryRead+0x4e>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001462:	f1b8 0f01 	cmp.w	r8, #1
 8001466:	6823      	ldr	r3, [r4, #0]
 8001468:	d124      	bne.n	80014b4 <I2C_RequestMemoryRead+0xd8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800146a:	b2f6      	uxtb	r6, r6
 800146c:	611e      	str	r6, [r3, #16]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800146e:	462a      	mov	r2, r5
 8001470:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001472:	4620      	mov	r0, r4
 8001474:	f7ff ff39 	bl	80012ea <I2C_WaitOnTXEFlagUntilTimeout>
 8001478:	4602      	mov	r2, r0
 800147a:	2800      	cmp	r0, #0
 800147c:	d1e8      	bne.n	8001450 <I2C_RequestMemoryRead+0x74>
  hi2c->Instance->CR1 |= I2C_CR1_START;
 800147e:	6821      	ldr	r1, [r4, #0]
 8001480:	680b      	ldr	r3, [r1, #0]
 8001482:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001486:	600b      	str	r3, [r1, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001488:	4620      	mov	r0, r4
 800148a:	9500      	str	r5, [sp, #0]
 800148c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800148e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001492:	f7ff fefc 	bl	800128e <I2C_WaitOnFlagUntilTimeout>
 8001496:	2800      	cmp	r0, #0
 8001498:	d1c9      	bne.n	800142e <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800149a:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800149c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800149e:	490b      	ldr	r1, [pc, #44]	; (80014cc <I2C_RequestMemoryRead+0xf0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80014a0:	f047 0701 	orr.w	r7, r7, #1
 80014a4:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80014a6:	4620      	mov	r0, r4
 80014a8:	462b      	mov	r3, r5
 80014aa:	f7ff feb0 	bl	800120e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80014ae:	2800      	cmp	r0, #0
 80014b0:	d1b8      	bne.n	8001424 <I2C_RequestMemoryRead+0x48>
 80014b2:	e7bd      	b.n	8001430 <I2C_RequestMemoryRead+0x54>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80014b4:	0a32      	lsrs	r2, r6, #8
 80014b6:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80014ba:	462a      	mov	r2, r5
 80014bc:	4620      	mov	r0, r4
 80014be:	f7ff ff14 	bl	80012ea <I2C_WaitOnTXEFlagUntilTimeout>
 80014c2:	2800      	cmp	r0, #0
 80014c4:	d1c4      	bne.n	8001450 <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80014c6:	6823      	ldr	r3, [r4, #0]
 80014c8:	e7cf      	b.n	800146a <I2C_RequestMemoryRead+0x8e>
 80014ca:	bf00      	nop
 80014cc:	00010002 	.word	0x00010002

080014d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 80014d0:	b570      	push	{r4, r5, r6, lr}
 80014d2:	4604      	mov	r4, r0
 80014d4:	460d      	mov	r5, r1
 80014d6:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80014d8:	6820      	ldr	r0, [r4, #0]
 80014da:	6943      	ldr	r3, [r0, #20]
 80014dc:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80014e0:	d001      	beq.n	80014e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80014e2:	2000      	movs	r0, #0
}
 80014e4:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80014e6:	6942      	ldr	r2, [r0, #20]
 80014e8:	06d2      	lsls	r2, r2, #27
 80014ea:	d50b      	bpl.n	8001504 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014ec:	f06f 0210 	mvn.w	r2, #16
 80014f0:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 80014f2:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014f4:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80014f6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 80014fa:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80014fc:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 80014fe:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001502:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001504:	b95d      	cbnz	r5, 800151e <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001506:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001508:	f043 0320 	orr.w	r3, r3, #32
 800150c:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 800150e:	2320      	movs	r3, #32
 8001510:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8001514:	2300      	movs	r3, #0
 8001516:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800151a:	2003      	movs	r0, #3
 800151c:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800151e:	f7ff fcfd 	bl	8000f1c <HAL_GetTick>
 8001522:	1b80      	subs	r0, r0, r6
 8001524:	4285      	cmp	r5, r0
 8001526:	d2d7      	bcs.n	80014d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8001528:	e7ed      	b.n	8001506 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

0800152a <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 800152a:	b570      	push	{r4, r5, r6, lr}
 800152c:	4604      	mov	r4, r0
 800152e:	460d      	mov	r5, r1
 8001530:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001532:	6823      	ldr	r3, [r4, #0]
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	075b      	lsls	r3, r3, #29
 8001538:	d501      	bpl.n	800153e <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 800153a:	2000      	movs	r0, #0
 800153c:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800153e:	4620      	mov	r0, r4
 8001540:	f7ff fe50 	bl	80011e4 <I2C_IsAcknowledgeFailed>
 8001544:	b9a8      	cbnz	r0, 8001572 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001546:	1c6a      	adds	r2, r5, #1
 8001548:	d0f3      	beq.n	8001532 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800154a:	b965      	cbnz	r5, 8001566 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800154c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800154e:	f043 0320 	orr.w	r3, r3, #32
 8001552:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001554:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001556:	2300      	movs	r3, #0
 8001558:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800155a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800155e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001562:	2003      	movs	r0, #3
 8001564:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001566:	f7ff fcd9 	bl	8000f1c <HAL_GetTick>
 800156a:	1b80      	subs	r0, r0, r6
 800156c:	4285      	cmp	r5, r0
 800156e:	d2e0      	bcs.n	8001532 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8001570:	e7ec      	b.n	800154c <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001572:	2001      	movs	r0, #1
}
 8001574:	bd70      	pop	{r4, r5, r6, pc}
	...

08001578 <HAL_I2C_Init>:
{
 8001578:	b570      	push	{r4, r5, r6, lr}
  if(hi2c == NULL)
 800157a:	4604      	mov	r4, r0
 800157c:	2800      	cmp	r0, #0
 800157e:	d062      	beq.n	8001646 <HAL_I2C_Init+0xce>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001580:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001584:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001588:	b91b      	cbnz	r3, 8001592 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800158a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800158e:	f000 fec5 	bl	800231c <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 8001592:	6822      	ldr	r2, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001594:	4e2d      	ldr	r6, [pc, #180]	; (800164c <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 8001596:	4d2e      	ldr	r5, [pc, #184]	; (8001650 <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001598:	2324      	movs	r3, #36	; 0x24
 800159a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800159e:	6813      	ldr	r3, [r2, #0]
 80015a0:	f023 0301 	bic.w	r3, r3, #1
 80015a4:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015a6:	f000 fc85 	bl	8001eb4 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80015aa:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 80015ac:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80015ae:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80015b2:	42b3      	cmp	r3, r6
 80015b4:	bf84      	itt	hi
 80015b6:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 80015ba:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 80015bc:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80015be:	bf91      	iteee	ls
 80015c0:	1c69      	addls	r1, r5, #1
 80015c2:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 80015c6:	fbb1 f1f5 	udivhi	r1, r1, r5
 80015ca:	3101      	addhi	r1, #1
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80015cc:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80015ce:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80015d0:	d821      	bhi.n	8001616 <HAL_I2C_Init+0x9e>
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80015d8:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80015dc:	2b03      	cmp	r3, #3
 80015de:	bf98      	it	ls
 80015e0:	2004      	movls	r0, #4
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015e2:	6a21      	ldr	r1, [r4, #32]
 80015e4:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80015e6:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015e8:	430b      	orrs	r3, r1
 80015ea:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80015ec:	68e1      	ldr	r1, [r4, #12]
 80015ee:	6923      	ldr	r3, [r4, #16]
 80015f0:	430b      	orrs	r3, r1
 80015f2:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80015f4:	69a1      	ldr	r1, [r4, #24]
 80015f6:	6963      	ldr	r3, [r4, #20]
 80015f8:	430b      	orrs	r3, r1
 80015fa:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80015fc:	6813      	ldr	r3, [r2, #0]
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001604:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001606:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001608:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800160a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800160e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001610:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001614:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001616:	68a1      	ldr	r1, [r4, #8]
 8001618:	b949      	cbnz	r1, 800162e <HAL_I2C_Init+0xb6>
 800161a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800161e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001622:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001626:	b163      	cbz	r3, 8001642 <HAL_I2C_Init+0xca>
 8001628:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 800162c:	e7d9      	b.n	80015e2 <HAL_I2C_Init+0x6a>
 800162e:	2119      	movs	r1, #25
 8001630:	434b      	muls	r3, r1
 8001632:	fbb0 f0f3 	udiv	r0, r0, r3
 8001636:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800163a:	b113      	cbz	r3, 8001642 <HAL_I2C_Init+0xca>
 800163c:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8001640:	e7cf      	b.n	80015e2 <HAL_I2C_Init+0x6a>
 8001642:	2001      	movs	r0, #1
 8001644:	e7cd      	b.n	80015e2 <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 8001646:	2001      	movs	r0, #1
}
 8001648:	bd70      	pop	{r4, r5, r6, pc}
 800164a:	bf00      	nop
 800164c:	000186a0 	.word	0x000186a0
 8001650:	000f4240 	.word	0x000f4240

08001654 <HAL_I2C_Mem_Write>:
{
 8001654:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001658:	4604      	mov	r4, r0
 800165a:	469a      	mov	sl, r3
 800165c:	4688      	mov	r8, r1
 800165e:	4691      	mov	r9, r2
 8001660:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  tickstart = HAL_GetTick();
 8001662:	f7ff fc5b 	bl	8000f1c <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001666:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800166a:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 800166c:	4605      	mov	r5, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 800166e:	d003      	beq.n	8001678 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8001670:	2002      	movs	r0, #2
}
 8001672:	b002      	add	sp, #8
 8001674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001678:	9000      	str	r0, [sp, #0]
 800167a:	2319      	movs	r3, #25
 800167c:	2201      	movs	r2, #1
 800167e:	493e      	ldr	r1, [pc, #248]	; (8001778 <HAL_I2C_Mem_Write+0x124>)
 8001680:	4620      	mov	r0, r4
 8001682:	f7ff fe04 	bl	800128e <I2C_WaitOnFlagUntilTimeout>
 8001686:	2800      	cmp	r0, #0
 8001688:	d1f2      	bne.n	8001670 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 800168a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800168e:	2b01      	cmp	r3, #1
 8001690:	d0ee      	beq.n	8001670 <HAL_I2C_Mem_Write+0x1c>
 8001692:	2301      	movs	r3, #1
 8001694:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001698:	6823      	ldr	r3, [r4, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800169e:	bf5e      	ittt	pl
 80016a0:	681a      	ldrpl	r2, [r3, #0]
 80016a2:	f042 0201 	orrpl.w	r2, r2, #1
 80016a6:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016ae:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016b0:	2321      	movs	r3, #33	; 0x21
 80016b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80016b6:	2340      	movs	r3, #64	; 0x40
 80016b8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 80016bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80016be:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016c0:	2700      	movs	r7, #0
    hi2c->XferCount   = Size;
 80016c2:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016c6:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80016c8:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016ca:	4b2c      	ldr	r3, [pc, #176]	; (800177c <HAL_I2C_Mem_Write+0x128>)
 80016cc:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80016ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80016d0:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80016d2:	9501      	str	r5, [sp, #4]
 80016d4:	9600      	str	r6, [sp, #0]
 80016d6:	4653      	mov	r3, sl
 80016d8:	464a      	mov	r2, r9
 80016da:	4641      	mov	r1, r8
 80016dc:	4620      	mov	r0, r4
 80016de:	f7ff fe2b 	bl	8001338 <I2C_RequestMemoryWrite>
 80016e2:	2800      	cmp	r0, #0
 80016e4:	d02a      	beq.n	800173c <HAL_I2C_Mem_Write+0xe8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80016e8:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016ec:	2b04      	cmp	r3, #4
 80016ee:	d107      	bne.n	8001700 <HAL_I2C_Mem_Write+0xac>
        return HAL_ERROR;
 80016f0:	2001      	movs	r0, #1
 80016f2:	e7be      	b.n	8001672 <HAL_I2C_Mem_Write+0x1e>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016f4:	f7ff fdf9 	bl	80012ea <I2C_WaitOnTXEFlagUntilTimeout>
 80016f8:	b120      	cbz	r0, 8001704 <HAL_I2C_Mem_Write+0xb0>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016fc:	2b04      	cmp	r3, #4
 80016fe:	d034      	beq.n	800176a <HAL_I2C_Mem_Write+0x116>
          return HAL_TIMEOUT;
 8001700:	2003      	movs	r0, #3
 8001702:	e7b6      	b.n	8001672 <HAL_I2C_Mem_Write+0x1e>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001704:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001706:	6827      	ldr	r7, [r4, #0]
      hi2c->XferSize--;
 8001708:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800170a:	1c4b      	adds	r3, r1, #1
 800170c:	6263      	str	r3, [r4, #36]	; 0x24
 800170e:	780b      	ldrb	r3, [r1, #0]
 8001710:	613b      	str	r3, [r7, #16]
      hi2c->XferCount--;
 8001712:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001714:	3b01      	subs	r3, #1
 8001716:	b29b      	uxth	r3, r3
 8001718:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800171a:	697b      	ldr	r3, [r7, #20]
      hi2c->XferSize--;
 800171c:	1e50      	subs	r0, r2, #1
 800171e:	b280      	uxth	r0, r0
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001720:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 8001722:	8520      	strh	r0, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001724:	d50a      	bpl.n	800173c <HAL_I2C_Mem_Write+0xe8>
 8001726:	b148      	cbz	r0, 800173c <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001728:	1c8b      	adds	r3, r1, #2
 800172a:	6263      	str	r3, [r4, #36]	; 0x24
 800172c:	784b      	ldrb	r3, [r1, #1]
 800172e:	613b      	str	r3, [r7, #16]
        hi2c->XferCount--;
 8001730:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001732:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8001734:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8001736:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8001738:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800173a:	8563      	strh	r3, [r4, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 800173c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800173e:	462a      	mov	r2, r5
 8001740:	4631      	mov	r1, r6
 8001742:	4620      	mov	r0, r4
    while(hi2c->XferSize > 0U)
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1d5      	bne.n	80016f4 <HAL_I2C_Mem_Write+0xa0>
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001748:	f7ff feef 	bl	800152a <I2C_WaitOnBTFFlagUntilTimeout>
 800174c:	2800      	cmp	r0, #0
 800174e:	d1d4      	bne.n	80016fa <HAL_I2C_Mem_Write+0xa6>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001750:	6822      	ldr	r2, [r4, #0]
 8001752:	6813      	ldr	r3, [r2, #0]
 8001754:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001758:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800175a:	2320      	movs	r3, #32
 800175c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001760:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001764:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8001768:	e783      	b.n	8001672 <HAL_I2C_Mem_Write+0x1e>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800176a:	6822      	ldr	r2, [r4, #0]
 800176c:	6813      	ldr	r3, [r2, #0]
 800176e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001772:	6013      	str	r3, [r2, #0]
 8001774:	e7bc      	b.n	80016f0 <HAL_I2C_Mem_Write+0x9c>
 8001776:	bf00      	nop
 8001778:	00100002 	.word	0x00100002
 800177c:	ffff0000 	.word	0xffff0000

08001780 <HAL_I2C_Mem_Read>:
{
 8001780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001784:	4604      	mov	r4, r0
 8001786:	b086      	sub	sp, #24
 8001788:	469a      	mov	sl, r3
 800178a:	460d      	mov	r5, r1
 800178c:	4691      	mov	r9, r2
 800178e:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8001790:	f7ff fbc4 	bl	8000f1c <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001794:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001798:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 800179a:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 800179c:	d004      	beq.n	80017a8 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 800179e:	2502      	movs	r5, #2
}
 80017a0:	4628      	mov	r0, r5
 80017a2:	b006      	add	sp, #24
 80017a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017a8:	9000      	str	r0, [sp, #0]
 80017aa:	2319      	movs	r3, #25
 80017ac:	2201      	movs	r2, #1
 80017ae:	4979      	ldr	r1, [pc, #484]	; (8001994 <HAL_I2C_Mem_Read+0x214>)
 80017b0:	4620      	mov	r0, r4
 80017b2:	f7ff fd6c 	bl	800128e <I2C_WaitOnFlagUntilTimeout>
 80017b6:	2800      	cmp	r0, #0
 80017b8:	d1f1      	bne.n	800179e <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 80017ba:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d0ed      	beq.n	800179e <HAL_I2C_Mem_Read+0x1e>
 80017c2:	2301      	movs	r3, #1
 80017c4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017c8:	6823      	ldr	r3, [r4, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80017ce:	bf5e      	ittt	pl
 80017d0:	681a      	ldrpl	r2, [r3, #0]
 80017d2:	f042 0201 	orrpl.w	r2, r2, #1
 80017d6:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017de:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80017e0:	2322      	movs	r3, #34	; 0x22
 80017e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017e6:	2340      	movs	r3, #64	; 0x40
 80017e8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 80017ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80017ee:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017f0:	f04f 0800 	mov.w	r8, #0
    hi2c->XferCount   = Size;
 80017f4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017f8:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80017fc:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017fe:	4b66      	ldr	r3, [pc, #408]	; (8001998 <HAL_I2C_Mem_Read+0x218>)
 8001800:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001802:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001804:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001806:	4629      	mov	r1, r5
 8001808:	9601      	str	r6, [sp, #4]
 800180a:	9700      	str	r7, [sp, #0]
 800180c:	4653      	mov	r3, sl
 800180e:	464a      	mov	r2, r9
 8001810:	4620      	mov	r0, r4
 8001812:	f7ff fde3 	bl	80013dc <I2C_RequestMemoryRead>
 8001816:	4605      	mov	r5, r0
 8001818:	b130      	cbz	r0, 8001828 <HAL_I2C_Mem_Read+0xa8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800181a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800181c:	f884 803c 	strb.w	r8, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001820:	2b04      	cmp	r3, #4
 8001822:	d13a      	bne.n	800189a <HAL_I2C_Mem_Read+0x11a>
              return HAL_ERROR;
 8001824:	2501      	movs	r5, #1
 8001826:	e7bb      	b.n	80017a0 <HAL_I2C_Mem_Read+0x20>
    if(hi2c->XferSize == 0U)
 8001828:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800182a:	6823      	ldr	r3, [r4, #0]
 800182c:	b992      	cbnz	r2, 8001854 <HAL_I2C_Mem_Read+0xd4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800182e:	9002      	str	r0, [sp, #8]
 8001830:	695a      	ldr	r2, [r3, #20]
 8001832:	9202      	str	r2, [sp, #8]
 8001834:	699a      	ldr	r2, [r3, #24]
 8001836:	9202      	str	r2, [sp, #8]
 8001838:	9a02      	ldr	r2, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001840:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001842:	2320      	movs	r3, #32
 8001844:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001848:	2300      	movs	r3, #0
 800184a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 800184e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001852:	e7a5      	b.n	80017a0 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 1U)
 8001854:	2a01      	cmp	r2, #1
 8001856:	d122      	bne.n	800189e <HAL_I2C_Mem_Read+0x11e>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800185e:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001860:	9003      	str	r0, [sp, #12]
 8001862:	695a      	ldr	r2, [r3, #20]
 8001864:	9203      	str	r2, [sp, #12]
 8001866:	699a      	ldr	r2, [r3, #24]
 8001868:	9203      	str	r2, [sp, #12]
 800186a:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001872:	601a      	str	r2, [r3, #0]
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001874:	f8df 8124 	ldr.w	r8, [pc, #292]	; 800199c <HAL_I2C_Mem_Read+0x21c>
    while(hi2c->XferSize > 0U)
 8001878:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0e1      	beq.n	8001842 <HAL_I2C_Mem_Read+0xc2>
      if(hi2c->XferSize <= 3U)
 800187e:	2b03      	cmp	r3, #3
 8001880:	d86b      	bhi.n	800195a <HAL_I2C_Mem_Read+0x1da>
        if(hi2c->XferSize== 1U)
 8001882:	2b01      	cmp	r3, #1
 8001884:	d123      	bne.n	80018ce <HAL_I2C_Mem_Read+0x14e>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001886:	4632      	mov	r2, r6
 8001888:	4639      	mov	r1, r7
 800188a:	4620      	mov	r0, r4
 800188c:	f7ff fe20 	bl	80014d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001890:	2800      	cmp	r0, #0
 8001892:	d039      	beq.n	8001908 <HAL_I2C_Mem_Read+0x188>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001894:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001896:	2b20      	cmp	r3, #32
 8001898:	d1c4      	bne.n	8001824 <HAL_I2C_Mem_Read+0xa4>
              return HAL_TIMEOUT;
 800189a:	2503      	movs	r5, #3
 800189c:	e780      	b.n	80017a0 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 2U)
 800189e:	2a02      	cmp	r2, #2
 80018a0:	d10e      	bne.n	80018c0 <HAL_I2C_Mem_Read+0x140>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018a8:	601a      	str	r2, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018b0:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018b2:	9004      	str	r0, [sp, #16]
 80018b4:	695a      	ldr	r2, [r3, #20]
 80018b6:	9204      	str	r2, [sp, #16]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	9304      	str	r3, [sp, #16]
 80018bc:	9b04      	ldr	r3, [sp, #16]
 80018be:	e7d9      	b.n	8001874 <HAL_I2C_Mem_Read+0xf4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018c0:	9005      	str	r0, [sp, #20]
 80018c2:	695a      	ldr	r2, [r3, #20]
 80018c4:	9205      	str	r2, [sp, #20]
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	9305      	str	r3, [sp, #20]
 80018ca:	9b05      	ldr	r3, [sp, #20]
 80018cc:	e7d2      	b.n	8001874 <HAL_I2C_Mem_Read+0xf4>
        else if(hi2c->XferSize == 2U)
 80018ce:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80018d0:	9600      	str	r6, [sp, #0]
 80018d2:	463b      	mov	r3, r7
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	4641      	mov	r1, r8
 80018da:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 80018dc:	d122      	bne.n	8001924 <HAL_I2C_Mem_Read+0x1a4>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80018de:	f7ff fcd6 	bl	800128e <I2C_WaitOnFlagUntilTimeout>
 80018e2:	2800      	cmp	r0, #0
 80018e4:	d1d9      	bne.n	800189a <HAL_I2C_Mem_Read+0x11a>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80018e6:	6823      	ldr	r3, [r4, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018ee:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80018f0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	1c51      	adds	r1, r2, #1
 80018f6:	6261      	str	r1, [r4, #36]	; 0x24
 80018f8:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 80018fa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80018fc:	3b01      	subs	r3, #1
 80018fe:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001900:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001902:	3b01      	subs	r3, #1
 8001904:	b29b      	uxth	r3, r3
 8001906:	8563      	strh	r3, [r4, #42]	; 0x2a
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001908:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800190a:	1c5a      	adds	r2, r3, #1
 800190c:	6262      	str	r2, [r4, #36]	; 0x24
 800190e:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001910:	6912      	ldr	r2, [r2, #16]
 8001912:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001914:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001916:	3b01      	subs	r3, #1
 8001918:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800191a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800191c:	3b01      	subs	r3, #1
 800191e:	b29b      	uxth	r3, r3
 8001920:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001922:	e7a9      	b.n	8001878 <HAL_I2C_Mem_Read+0xf8>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001924:	f7ff fcb3 	bl	800128e <I2C_WaitOnFlagUntilTimeout>
 8001928:	4602      	mov	r2, r0
 800192a:	2800      	cmp	r0, #0
 800192c:	d1b5      	bne.n	800189a <HAL_I2C_Mem_Read+0x11a>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800192e:	6823      	ldr	r3, [r4, #0]
 8001930:	6819      	ldr	r1, [r3, #0]
 8001932:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001936:	6019      	str	r1, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001938:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	1c48      	adds	r0, r1, #1
 800193e:	6260      	str	r0, [r4, #36]	; 0x24
 8001940:	700b      	strb	r3, [r1, #0]
          hi2c->XferSize--;
 8001942:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001944:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 8001946:	3b01      	subs	r3, #1
 8001948:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800194a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800194c:	3b01      	subs	r3, #1
 800194e:	b29b      	uxth	r3, r3
 8001950:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001952:	4641      	mov	r1, r8
 8001954:	463b      	mov	r3, r7
 8001956:	4620      	mov	r0, r4
 8001958:	e7c1      	b.n	80018de <HAL_I2C_Mem_Read+0x15e>
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800195a:	4632      	mov	r2, r6
 800195c:	4639      	mov	r1, r7
 800195e:	4620      	mov	r0, r4
 8001960:	f7ff fdb6 	bl	80014d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001964:	2800      	cmp	r0, #0
 8001966:	d195      	bne.n	8001894 <HAL_I2C_Mem_Read+0x114>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001968:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800196a:	1c5a      	adds	r2, r3, #1
 800196c:	6262      	str	r2, [r4, #36]	; 0x24
 800196e:	6822      	ldr	r2, [r4, #0]
 8001970:	6912      	ldr	r2, [r2, #16]
 8001972:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8001974:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001976:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 8001978:	3b01      	subs	r3, #1
 800197a:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800197c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800197e:	3b01      	subs	r3, #1
 8001980:	b29b      	uxth	r3, r3
 8001982:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001984:	6953      	ldr	r3, [r2, #20]
 8001986:	075b      	lsls	r3, r3, #29
 8001988:	f57f af76 	bpl.w	8001878 <HAL_I2C_Mem_Read+0xf8>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800198c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800198e:	1c59      	adds	r1, r3, #1
 8001990:	6261      	str	r1, [r4, #36]	; 0x24
 8001992:	e7bd      	b.n	8001910 <HAL_I2C_Mem_Read+0x190>
 8001994:	00100002 	.word	0x00100002
 8001998:	ffff0000 	.word	0xffff0000
 800199c:	00010004 	.word	0x00010004

080019a0 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019a0:	6803      	ldr	r3, [r0, #0]
{
 80019a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80019a4:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019a6:	07d8      	lsls	r0, r3, #31
 80019a8:	d43b      	bmi.n	8001a22 <HAL_RCC_OscConfig+0x82>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019aa:	6823      	ldr	r3, [r4, #0]
 80019ac:	0799      	lsls	r1, r3, #30
 80019ae:	f100 8086 	bmi.w	8001abe <HAL_RCC_OscConfig+0x11e>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019b2:	6823      	ldr	r3, [r4, #0]
 80019b4:	071e      	lsls	r6, r3, #28
 80019b6:	f100 80d1 	bmi.w	8001b5c <HAL_RCC_OscConfig+0x1bc>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ba:	6823      	ldr	r3, [r4, #0]
 80019bc:	075d      	lsls	r5, r3, #29
 80019be:	d52a      	bpl.n	8001a16 <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80019c0:	2300      	movs	r3, #0
 80019c2:	9301      	str	r3, [sp, #4]
 80019c4:	4b8e      	ldr	r3, [pc, #568]	; (8001c00 <HAL_RCC_OscConfig+0x260>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80019c6:	4d8f      	ldr	r5, [pc, #572]	; (8001c04 <HAL_RCC_OscConfig+0x264>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80019c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019ca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019ce:	641a      	str	r2, [r3, #64]	; 0x40
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d6:	9301      	str	r3, [sp, #4]
 80019d8:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80019da:	682b      	ldr	r3, [r5, #0]
 80019dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e0:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 80019e2:	f7ff fa9b 	bl	8000f1c <HAL_GetTick>
 80019e6:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80019e8:	682b      	ldr	r3, [r5, #0]
 80019ea:	05da      	lsls	r2, r3, #23
 80019ec:	f140 80d8 	bpl.w	8001ba0 <HAL_RCC_OscConfig+0x200>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f0:	68a3      	ldr	r3, [r4, #8]
 80019f2:	4d83      	ldr	r5, [pc, #524]	; (8001c00 <HAL_RCC_OscConfig+0x260>)
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	f040 80da 	bne.w	8001bae <HAL_RCC_OscConfig+0x20e>
 80019fa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	672b      	str	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a02:	f7ff fa8b 	bl	8000f1c <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a06:	4d7e      	ldr	r5, [pc, #504]	; (8001c00 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 8001a08:	4606      	mov	r6, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a0a:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a0e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001a10:	079b      	lsls	r3, r3, #30
 8001a12:	f140 80ed 	bpl.w	8001bf0 <HAL_RCC_OscConfig+0x250>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a16:	69a2      	ldr	r2, [r4, #24]
 8001a18:	2a00      	cmp	r2, #0
 8001a1a:	f040 80f9 	bne.w	8001c10 <HAL_RCC_OscConfig+0x270>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001a1e:	2000      	movs	r0, #0
 8001a20:	e015      	b.n	8001a4e <HAL_RCC_OscConfig+0xae>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a22:	4b77      	ldr	r3, [pc, #476]	; (8001c00 <HAL_RCC_OscConfig+0x260>)
 8001a24:	689a      	ldr	r2, [r3, #8]
 8001a26:	f002 020c 	and.w	r2, r2, #12
 8001a2a:	2a04      	cmp	r2, #4
 8001a2c:	d007      	beq.n	8001a3e <HAL_RCC_OscConfig+0x9e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a34:	2a08      	cmp	r2, #8
 8001a36:	d10c      	bne.n	8001a52 <HAL_RCC_OscConfig+0xb2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	025a      	lsls	r2, r3, #9
 8001a3c:	d509      	bpl.n	8001a52 <HAL_RCC_OscConfig+0xb2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a3e:	4b70      	ldr	r3, [pc, #448]	; (8001c00 <HAL_RCC_OscConfig+0x260>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	039b      	lsls	r3, r3, #14
 8001a44:	d5b1      	bpl.n	80019aa <HAL_RCC_OscConfig+0xa>
 8001a46:	6863      	ldr	r3, [r4, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1ae      	bne.n	80019aa <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 8001a4c:	2001      	movs	r0, #1
}
 8001a4e:	b003      	add	sp, #12
 8001a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a52:	6863      	ldr	r3, [r4, #4]
 8001a54:	4d6a      	ldr	r5, [pc, #424]	; (8001c00 <HAL_RCC_OscConfig+0x260>)
 8001a56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a5a:	d111      	bne.n	8001a80 <HAL_RCC_OscConfig+0xe0>
 8001a5c:	682b      	ldr	r3, [r5, #0]
 8001a5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a62:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001a64:	f7ff fa5a 	bl	8000f1c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a68:	4d65      	ldr	r5, [pc, #404]	; (8001c00 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 8001a6a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6c:	682b      	ldr	r3, [r5, #0]
 8001a6e:	039f      	lsls	r7, r3, #14
 8001a70:	d49b      	bmi.n	80019aa <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a72:	f7ff fa53 	bl	8000f1c <HAL_GetTick>
 8001a76:	1b80      	subs	r0, r0, r6
 8001a78:	2864      	cmp	r0, #100	; 0x64
 8001a7a:	d9f7      	bls.n	8001a6c <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8001a7c:	2003      	movs	r0, #3
 8001a7e:	e7e6      	b.n	8001a4e <HAL_RCC_OscConfig+0xae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a84:	d104      	bne.n	8001a90 <HAL_RCC_OscConfig+0xf0>
 8001a86:	682b      	ldr	r3, [r5, #0]
 8001a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a8c:	602b      	str	r3, [r5, #0]
 8001a8e:	e7e5      	b.n	8001a5c <HAL_RCC_OscConfig+0xbc>
 8001a90:	682a      	ldr	r2, [r5, #0]
 8001a92:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a96:	602a      	str	r2, [r5, #0]
 8001a98:	682a      	ldr	r2, [r5, #0]
 8001a9a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a9e:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1df      	bne.n	8001a64 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8001aa4:	f7ff fa3a 	bl	8000f1c <HAL_GetTick>
 8001aa8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aaa:	682b      	ldr	r3, [r5, #0]
 8001aac:	0398      	lsls	r0, r3, #14
 8001aae:	f57f af7c 	bpl.w	80019aa <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ab2:	f7ff fa33 	bl	8000f1c <HAL_GetTick>
 8001ab6:	1b80      	subs	r0, r0, r6
 8001ab8:	2864      	cmp	r0, #100	; 0x64
 8001aba:	d9f6      	bls.n	8001aaa <HAL_RCC_OscConfig+0x10a>
 8001abc:	e7de      	b.n	8001a7c <HAL_RCC_OscConfig+0xdc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001abe:	4b50      	ldr	r3, [pc, #320]	; (8001c00 <HAL_RCC_OscConfig+0x260>)
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	f012 0f0c 	tst.w	r2, #12
 8001ac6:	d007      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x138>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ace:	2a08      	cmp	r2, #8
 8001ad0:	d116      	bne.n	8001b00 <HAL_RCC_OscConfig+0x160>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	0259      	lsls	r1, r3, #9
 8001ad6:	d413      	bmi.n	8001b00 <HAL_RCC_OscConfig+0x160>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ad8:	4b49      	ldr	r3, [pc, #292]	; (8001c00 <HAL_RCC_OscConfig+0x260>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	0792      	lsls	r2, r2, #30
 8001ade:	d502      	bpl.n	8001ae6 <HAL_RCC_OscConfig+0x146>
 8001ae0:	68e2      	ldr	r2, [r4, #12]
 8001ae2:	2a01      	cmp	r2, #1
 8001ae4:	d1b2      	bne.n	8001a4c <HAL_RCC_OscConfig+0xac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae6:	6818      	ldr	r0, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae8:	22f8      	movs	r2, #248	; 0xf8
 8001aea:	fa92 f2a2 	rbit	r2, r2
 8001aee:	fab2 f182 	clz	r1, r2
 8001af2:	6922      	ldr	r2, [r4, #16]
 8001af4:	408a      	lsls	r2, r1
 8001af6:	f020 01f8 	bic.w	r1, r0, #248	; 0xf8
 8001afa:	430a      	orrs	r2, r1
 8001afc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001afe:	e758      	b.n	80019b2 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b00:	68e2      	ldr	r2, [r4, #12]
 8001b02:	4b41      	ldr	r3, [pc, #260]	; (8001c08 <HAL_RCC_OscConfig+0x268>)
 8001b04:	b1da      	cbz	r2, 8001b3e <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_HSI_ENABLE();
 8001b06:	2201      	movs	r2, #1
 8001b08:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b0a:	f7ff fa07 	bl	8000f1c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0e:	4d3c      	ldr	r5, [pc, #240]	; (8001c00 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 8001b10:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b12:	682b      	ldr	r3, [r5, #0]
 8001b14:	079b      	lsls	r3, r3, #30
 8001b16:	d50c      	bpl.n	8001b32 <HAL_RCC_OscConfig+0x192>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b18:	6829      	ldr	r1, [r5, #0]
 8001b1a:	23f8      	movs	r3, #248	; 0xf8
 8001b1c:	fa93 f3a3 	rbit	r3, r3
 8001b20:	fab3 f283 	clz	r2, r3
 8001b24:	6923      	ldr	r3, [r4, #16]
 8001b26:	4093      	lsls	r3, r2
 8001b28:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	602b      	str	r3, [r5, #0]
 8001b30:	e73f      	b.n	80019b2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b32:	f7ff f9f3 	bl	8000f1c <HAL_GetTick>
 8001b36:	1b80      	subs	r0, r0, r6
 8001b38:	2802      	cmp	r0, #2
 8001b3a:	d9ea      	bls.n	8001b12 <HAL_RCC_OscConfig+0x172>
 8001b3c:	e79e      	b.n	8001a7c <HAL_RCC_OscConfig+0xdc>
        __HAL_RCC_HSI_DISABLE();
 8001b3e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b40:	f7ff f9ec 	bl	8000f1c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b44:	4d2e      	ldr	r5, [pc, #184]	; (8001c00 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 8001b46:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b48:	682b      	ldr	r3, [r5, #0]
 8001b4a:	079f      	lsls	r7, r3, #30
 8001b4c:	f57f af31 	bpl.w	80019b2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b50:	f7ff f9e4 	bl	8000f1c <HAL_GetTick>
 8001b54:	1b80      	subs	r0, r0, r6
 8001b56:	2802      	cmp	r0, #2
 8001b58:	d9f6      	bls.n	8001b48 <HAL_RCC_OscConfig+0x1a8>
 8001b5a:	e78f      	b.n	8001a7c <HAL_RCC_OscConfig+0xdc>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b5c:	6962      	ldr	r2, [r4, #20]
 8001b5e:	4b2b      	ldr	r3, [pc, #172]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001b60:	b17a      	cbz	r2, 8001b82 <HAL_RCC_OscConfig+0x1e2>
      __HAL_RCC_LSI_ENABLE();
 8001b62:	2201      	movs	r2, #1
 8001b64:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001b66:	f7ff f9d9 	bl	8000f1c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b6a:	4d25      	ldr	r5, [pc, #148]	; (8001c00 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 8001b6c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b6e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001b70:	0798      	lsls	r0, r3, #30
 8001b72:	f53f af22 	bmi.w	80019ba <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b76:	f7ff f9d1 	bl	8000f1c <HAL_GetTick>
 8001b7a:	1b80      	subs	r0, r0, r6
 8001b7c:	2802      	cmp	r0, #2
 8001b7e:	d9f6      	bls.n	8001b6e <HAL_RCC_OscConfig+0x1ce>
 8001b80:	e77c      	b.n	8001a7c <HAL_RCC_OscConfig+0xdc>
      __HAL_RCC_LSI_DISABLE();
 8001b82:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001b84:	f7ff f9ca 	bl	8000f1c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b88:	4d1d      	ldr	r5, [pc, #116]	; (8001c00 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 8001b8a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b8c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001b8e:	0799      	lsls	r1, r3, #30
 8001b90:	f57f af13 	bpl.w	80019ba <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b94:	f7ff f9c2 	bl	8000f1c <HAL_GetTick>
 8001b98:	1b80      	subs	r0, r0, r6
 8001b9a:	2802      	cmp	r0, #2
 8001b9c:	d9f6      	bls.n	8001b8c <HAL_RCC_OscConfig+0x1ec>
 8001b9e:	e76d      	b.n	8001a7c <HAL_RCC_OscConfig+0xdc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001ba0:	f7ff f9bc 	bl	8000f1c <HAL_GetTick>
 8001ba4:	1b80      	subs	r0, r0, r6
 8001ba6:	2802      	cmp	r0, #2
 8001ba8:	f67f af1e 	bls.w	80019e8 <HAL_RCC_OscConfig+0x48>
 8001bac:	e766      	b.n	8001a7c <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bae:	2b05      	cmp	r3, #5
 8001bb0:	d104      	bne.n	8001bbc <HAL_RCC_OscConfig+0x21c>
 8001bb2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001bb4:	f043 0304 	orr.w	r3, r3, #4
 8001bb8:	672b      	str	r3, [r5, #112]	; 0x70
 8001bba:	e71e      	b.n	80019fa <HAL_RCC_OscConfig+0x5a>
 8001bbc:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001bbe:	f022 0201 	bic.w	r2, r2, #1
 8001bc2:	672a      	str	r2, [r5, #112]	; 0x70
 8001bc4:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001bc6:	f022 0204 	bic.w	r2, r2, #4
 8001bca:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f47f af18 	bne.w	8001a02 <HAL_RCC_OscConfig+0x62>
      tickstart = HAL_GetTick();
 8001bd2:	f7ff f9a3 	bl	8000f1c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bd6:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001bda:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bdc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001bde:	0798      	lsls	r0, r3, #30
 8001be0:	f57f af19 	bpl.w	8001a16 <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001be4:	f7ff f99a 	bl	8000f1c <HAL_GetTick>
 8001be8:	1b80      	subs	r0, r0, r6
 8001bea:	42b8      	cmp	r0, r7
 8001bec:	d9f6      	bls.n	8001bdc <HAL_RCC_OscConfig+0x23c>
 8001bee:	e745      	b.n	8001a7c <HAL_RCC_OscConfig+0xdc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bf0:	f7ff f994 	bl	8000f1c <HAL_GetTick>
 8001bf4:	1b80      	subs	r0, r0, r6
 8001bf6:	42b8      	cmp	r0, r7
 8001bf8:	f67f af09 	bls.w	8001a0e <HAL_RCC_OscConfig+0x6e>
 8001bfc:	e73e      	b.n	8001a7c <HAL_RCC_OscConfig+0xdc>
 8001bfe:	bf00      	nop
 8001c00:	40023800 	.word	0x40023800
 8001c04:	40007000 	.word	0x40007000
 8001c08:	42470000 	.word	0x42470000
 8001c0c:	42470e80 	.word	0x42470e80
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c10:	4d2b      	ldr	r5, [pc, #172]	; (8001cc0 <HAL_RCC_OscConfig+0x320>)
 8001c12:	68ab      	ldr	r3, [r5, #8]
 8001c14:	f003 030c 	and.w	r3, r3, #12
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	f43f af17 	beq.w	8001a4c <HAL_RCC_OscConfig+0xac>
 8001c1e:	4e29      	ldr	r6, [pc, #164]	; (8001cc4 <HAL_RCC_OscConfig+0x324>)
 8001c20:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c22:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001c24:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c26:	d13e      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x306>
        tickstart = HAL_GetTick();
 8001c28:	f7ff f978 	bl	8000f1c <HAL_GetTick>
 8001c2c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c2e:	682b      	ldr	r3, [r5, #0]
 8001c30:	0199      	lsls	r1, r3, #6
 8001c32:	d432      	bmi.n	8001c9a <HAL_RCC_OscConfig+0x2fa>
 8001c34:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8001c38:	fa97 f7a7 	rbit	r7, r7
 8001c3c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c40:	fab7 f787 	clz	r7, r7
 8001c44:	fa92 f2a2 	rbit	r2, r2
 8001c48:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8001c4c:	fab2 f082 	clz	r0, r2
 8001c50:	fa91 f1a1 	rbit	r1, r1
 8001c54:	6a22      	ldr	r2, [r4, #32]
 8001c56:	69e3      	ldr	r3, [r4, #28]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c5c:	fa02 f707 	lsl.w	r7, r2, r7
 8001c60:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001c62:	0852      	lsrs	r2, r2, #1
 8001c64:	3a01      	subs	r2, #1
 8001c66:	4082      	lsls	r2, r0
 8001c68:	433b      	orrs	r3, r7
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c6e:	4c14      	ldr	r4, [pc, #80]	; (8001cc0 <HAL_RCC_OscConfig+0x320>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c70:	fab1 f181 	clz	r1, r1
 8001c74:	fa02 f101 	lsl.w	r1, r2, r1
 8001c78:	430b      	orrs	r3, r1
 8001c7a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001c80:	f7ff f94c 	bl	8000f1c <HAL_GetTick>
 8001c84:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c86:	6823      	ldr	r3, [r4, #0]
 8001c88:	019a      	lsls	r2, r3, #6
 8001c8a:	f53f aec8 	bmi.w	8001a1e <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c8e:	f7ff f945 	bl	8000f1c <HAL_GetTick>
 8001c92:	1b40      	subs	r0, r0, r5
 8001c94:	2802      	cmp	r0, #2
 8001c96:	d9f6      	bls.n	8001c86 <HAL_RCC_OscConfig+0x2e6>
 8001c98:	e6f0      	b.n	8001a7c <HAL_RCC_OscConfig+0xdc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c9a:	f7ff f93f 	bl	8000f1c <HAL_GetTick>
 8001c9e:	1bc0      	subs	r0, r0, r7
 8001ca0:	2802      	cmp	r0, #2
 8001ca2:	d9c4      	bls.n	8001c2e <HAL_RCC_OscConfig+0x28e>
 8001ca4:	e6ea      	b.n	8001a7c <HAL_RCC_OscConfig+0xdc>
        tickstart = HAL_GetTick();
 8001ca6:	f7ff f939 	bl	8000f1c <HAL_GetTick>
 8001caa:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cac:	682b      	ldr	r3, [r5, #0]
 8001cae:	019b      	lsls	r3, r3, #6
 8001cb0:	f57f aeb5 	bpl.w	8001a1e <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb4:	f7ff f932 	bl	8000f1c <HAL_GetTick>
 8001cb8:	1b00      	subs	r0, r0, r4
 8001cba:	2802      	cmp	r0, #2
 8001cbc:	d9f6      	bls.n	8001cac <HAL_RCC_OscConfig+0x30c>
 8001cbe:	e6dd      	b.n	8001a7c <HAL_RCC_OscConfig+0xdc>
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	42470060 	.word	0x42470060

08001cc8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cc8:	4a19      	ldr	r2, [pc, #100]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x68>)
 8001cca:	6893      	ldr	r3, [r2, #8]
 8001ccc:	f003 030c 	and.w	r3, r3, #12
 8001cd0:	2b04      	cmp	r3, #4
{
 8001cd2:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cd4:	d003      	beq.n	8001cde <HAL_RCC_GetSysClockFreq+0x16>
 8001cd6:	2b08      	cmp	r3, #8
 8001cd8:	d003      	beq.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cda:	4816      	ldr	r0, [pc, #88]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001cdc:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8001cde:	4816      	ldr	r0, [pc, #88]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x70>)
 8001ce0:	bd10      	pop	{r4, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ce2:	6851      	ldr	r1, [r2, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ce4:	6853      	ldr	r3, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ce6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cea:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001cee:	f647 74c0 	movw	r4, #32704	; 0x7fc0
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001cf2:	6853      	ldr	r3, [r2, #4]
 8001cf4:	fa94 f0a4 	rbit	r0, r4
 8001cf8:	fab0 f080 	clz	r0, r0
 8001cfc:	ea03 0304 	and.w	r3, r3, r4
 8001d00:	fa23 f300 	lsr.w	r3, r3, r0
 8001d04:	bf14      	ite	ne
 8001d06:	480c      	ldrne	r0, [pc, #48]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8001d08:	480a      	ldreq	r0, [pc, #40]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001d0a:	fbb0 f0f1 	udiv	r0, r0, r1
 8001d0e:	4358      	muls	r0, r3
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8001d10:	4b07      	ldr	r3, [pc, #28]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x68>)
 8001d12:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	fa92 f2a2 	rbit	r2, r2
 8001d1c:	fab2 f282 	clz	r2, r2
 8001d20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d24:	40d3      	lsrs	r3, r2
 8001d26:	3301      	adds	r3, #1
 8001d28:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001d2a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d2e:	bd10      	pop	{r4, pc}
 8001d30:	40023800 	.word	0x40023800
 8001d34:	00f42400 	.word	0x00f42400
 8001d38:	017d7840 	.word	0x017d7840

08001d3c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001d3c:	4b56      	ldr	r3, [pc, #344]	; (8001e98 <HAL_RCC_ClockConfig+0x15c>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	f002 020f 	and.w	r2, r2, #15
 8001d44:	428a      	cmp	r2, r1
{
 8001d46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d4a:	4605      	mov	r5, r0
 8001d4c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001d4e:	d330      	bcc.n	8001db2 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d50:	682a      	ldr	r2, [r5, #0]
 8001d52:	0794      	lsls	r4, r2, #30
 8001d54:	d437      	bmi.n	8001dc6 <HAL_RCC_ClockConfig+0x8a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d56:	07d0      	lsls	r0, r2, #31
 8001d58:	d43d      	bmi.n	8001dd6 <HAL_RCC_ClockConfig+0x9a>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001d5a:	4b4f      	ldr	r3, [pc, #316]	; (8001e98 <HAL_RCC_ClockConfig+0x15c>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	f002 020f 	and.w	r2, r2, #15
 8001d62:	4296      	cmp	r6, r2
 8001d64:	f0c0 8088 	bcc.w	8001e78 <HAL_RCC_ClockConfig+0x13c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d68:	682a      	ldr	r2, [r5, #0]
 8001d6a:	0751      	lsls	r1, r2, #29
 8001d6c:	f100 808c 	bmi.w	8001e88 <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d70:	0713      	lsls	r3, r2, #28
 8001d72:	d507      	bpl.n	8001d84 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d74:	4a49      	ldr	r2, [pc, #292]	; (8001e9c <HAL_RCC_ClockConfig+0x160>)
 8001d76:	6929      	ldr	r1, [r5, #16]
 8001d78:	6893      	ldr	r3, [r2, #8]
 8001d7a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001d7e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001d82:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001d84:	f7ff ffa0 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 8001d88:	4b44      	ldr	r3, [pc, #272]	; (8001e9c <HAL_RCC_ClockConfig+0x160>)
 8001d8a:	22f0      	movs	r2, #240	; 0xf0
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	fa92 f2a2 	rbit	r2, r2
 8001d92:	fab2 f282 	clz	r2, r2
 8001d96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d9a:	40d3      	lsrs	r3, r2
 8001d9c:	4a40      	ldr	r2, [pc, #256]	; (8001ea0 <HAL_RCC_ClockConfig+0x164>)
 8001d9e:	5cd3      	ldrb	r3, [r2, r3]
 8001da0:	40d8      	lsrs	r0, r3
 8001da2:	4b40      	ldr	r3, [pc, #256]	; (8001ea4 <HAL_RCC_ClockConfig+0x168>)
 8001da4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001da6:	2000      	movs	r0, #0
 8001da8:	f7ff f882 	bl	8000eb0 <HAL_InitTick>
  return HAL_OK;
 8001dac:	2000      	movs	r0, #0
}
 8001dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db2:	b2ca      	uxtb	r2, r1
 8001db4:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 030f 	and.w	r3, r3, #15
 8001dbc:	4299      	cmp	r1, r3
 8001dbe:	d0c7      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001dc0:	2001      	movs	r0, #1
 8001dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dc6:	4935      	ldr	r1, [pc, #212]	; (8001e9c <HAL_RCC_ClockConfig+0x160>)
 8001dc8:	68a8      	ldr	r0, [r5, #8]
 8001dca:	688b      	ldr	r3, [r1, #8]
 8001dcc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dd0:	4303      	orrs	r3, r0
 8001dd2:	608b      	str	r3, [r1, #8]
 8001dd4:	e7bf      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dd6:	686a      	ldr	r2, [r5, #4]
 8001dd8:	4b30      	ldr	r3, [pc, #192]	; (8001e9c <HAL_RCC_ClockConfig+0x160>)
 8001dda:	2a01      	cmp	r2, #1
 8001ddc:	d11e      	bne.n	8001e1c <HAL_RCC_ClockConfig+0xe0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de4:	d0ec      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x84>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001de6:	4c2d      	ldr	r4, [pc, #180]	; (8001e9c <HAL_RCC_ClockConfig+0x160>)
 8001de8:	68a3      	ldr	r3, [r4, #8]
 8001dea:	f023 0303 	bic.w	r3, r3, #3
 8001dee:	4313      	orrs	r3, r2
 8001df0:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8001df2:	f7ff f893 	bl	8000f1c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001df6:	686b      	ldr	r3, [r5, #4]
 8001df8:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8001dfa:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dfc:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e00:	d116      	bne.n	8001e30 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e02:	68a3      	ldr	r3, [r4, #8]
 8001e04:	f003 030c 	and.w	r3, r3, #12
 8001e08:	2b04      	cmp	r3, #4
 8001e0a:	d0a6      	beq.n	8001d5a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e0c:	f7ff f886 	bl	8000f1c <HAL_GetTick>
 8001e10:	1bc0      	subs	r0, r0, r7
 8001e12:	4540      	cmp	r0, r8
 8001e14:	d9f5      	bls.n	8001e02 <HAL_RCC_ClockConfig+0xc6>
          return HAL_TIMEOUT;
 8001e16:	2003      	movs	r0, #3
 8001e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8001e1c:	1e91      	subs	r1, r2, #2
 8001e1e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e20:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8001e22:	d802      	bhi.n	8001e2a <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e24:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001e28:	e7dc      	b.n	8001de4 <HAL_RCC_ClockConfig+0xa8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e2a:	f013 0f02 	tst.w	r3, #2
 8001e2e:	e7d9      	b.n	8001de4 <HAL_RCC_ClockConfig+0xa8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d10a      	bne.n	8001e4a <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e34:	68a3      	ldr	r3, [r4, #8]
 8001e36:	f003 030c 	and.w	r3, r3, #12
 8001e3a:	2b08      	cmp	r3, #8
 8001e3c:	d08d      	beq.n	8001d5a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e3e:	f7ff f86d 	bl	8000f1c <HAL_GetTick>
 8001e42:	1bc0      	subs	r0, r0, r7
 8001e44:	4540      	cmp	r0, r8
 8001e46:	d9f5      	bls.n	8001e34 <HAL_RCC_ClockConfig+0xf8>
 8001e48:	e7e5      	b.n	8001e16 <HAL_RCC_ClockConfig+0xda>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8001e4a:	2b03      	cmp	r3, #3
 8001e4c:	d10f      	bne.n	8001e6e <HAL_RCC_ClockConfig+0x132>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8001e4e:	68a3      	ldr	r3, [r4, #8]
 8001e50:	f003 030c 	and.w	r3, r3, #12
 8001e54:	2b0c      	cmp	r3, #12
 8001e56:	d080      	beq.n	8001d5a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e58:	f7ff f860 	bl	8000f1c <HAL_GetTick>
 8001e5c:	1bc0      	subs	r0, r0, r7
 8001e5e:	4540      	cmp	r0, r8
 8001e60:	d9f5      	bls.n	8001e4e <HAL_RCC_ClockConfig+0x112>
 8001e62:	e7d8      	b.n	8001e16 <HAL_RCC_ClockConfig+0xda>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e64:	f7ff f85a 	bl	8000f1c <HAL_GetTick>
 8001e68:	1bc0      	subs	r0, r0, r7
 8001e6a:	4540      	cmp	r0, r8
 8001e6c:	d8d3      	bhi.n	8001e16 <HAL_RCC_ClockConfig+0xda>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e6e:	68a3      	ldr	r3, [r4, #8]
 8001e70:	f013 0f0c 	tst.w	r3, #12
 8001e74:	d1f6      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x128>
 8001e76:	e770      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e78:	b2f2      	uxtb	r2, r6
 8001e7a:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	429e      	cmp	r6, r3
 8001e84:	d19c      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0x84>
 8001e86:	e76f      	b.n	8001d68 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e88:	4904      	ldr	r1, [pc, #16]	; (8001e9c <HAL_RCC_ClockConfig+0x160>)
 8001e8a:	68e8      	ldr	r0, [r5, #12]
 8001e8c:	688b      	ldr	r3, [r1, #8]
 8001e8e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001e92:	4303      	orrs	r3, r0
 8001e94:	608b      	str	r3, [r1, #8]
 8001e96:	e76b      	b.n	8001d70 <HAL_RCC_ClockConfig+0x34>
 8001e98:	40023c00 	.word	0x40023c00
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	080054c1 	.word	0x080054c1
 8001ea4:	20000000 	.word	0x20000000

08001ea8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001ea8:	4b01      	ldr	r3, [pc, #4]	; (8001eb0 <HAL_RCC_GetHCLKFreq+0x8>)
 8001eaa:	6818      	ldr	r0, [r3, #0]
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	20000000 	.word	0x20000000

08001eb4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8001eb4:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eb6:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	fa92 f2a2 	rbit	r2, r2
 8001ec0:	fab2 f282 	clz	r2, r2
 8001ec4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001ec8:	40d3      	lsrs	r3, r2
 8001eca:	4a04      	ldr	r2, [pc, #16]	; (8001edc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ecc:	5cd3      	ldrb	r3, [r2, r3]
 8001ece:	4a04      	ldr	r2, [pc, #16]	; (8001ee0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001ed0:	6810      	ldr	r0, [r2, #0]
}
 8001ed2:	40d8      	lsrs	r0, r3
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	080054d1 	.word	0x080054d1
 8001ee0:	20000000 	.word	0x20000000

08001ee4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8001ee4:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ee6:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	fa92 f2a2 	rbit	r2, r2
 8001ef0:	fab2 f282 	clz	r2, r2
 8001ef4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001ef8:	40d3      	lsrs	r3, r2
 8001efa:	4a04      	ldr	r2, [pc, #16]	; (8001f0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001efc:	5cd3      	ldrb	r3, [r2, r3]
 8001efe:	4a04      	ldr	r2, [pc, #16]	; (8001f10 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001f00:	6810      	ldr	r0, [r2, #0]
} 
 8001f02:	40d8      	lsrs	r0, r3
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	080054d1 	.word	0x080054d1
 8001f10:	20000000 	.word	0x20000000

08001f14 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001f18:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001f1a:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8001f1c:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f1e:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001f20:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001f24:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001f26:	6133      	str	r3, [r6, #16]
{
 8001f28:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f2a:	6883      	ldr	r3, [r0, #8]
 8001f2c:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8001f2e:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f30:	4303      	orrs	r3, r0
 8001f32:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001f34:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f38:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001f3a:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f3e:	430b      	orrs	r3, r1
 8001f40:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001f42:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001f44:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001f46:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001f48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8001f4c:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f4e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001f52:	6173      	str	r3, [r6, #20]
 8001f54:	4b7a      	ldr	r3, [pc, #488]	; (8002140 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f56:	d17c      	bne.n	8002052 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f58:	429e      	cmp	r6, r3
 8001f5a:	d003      	beq.n	8001f64 <UART_SetConfig+0x50>
 8001f5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f60:	429e      	cmp	r6, r3
 8001f62:	d144      	bne.n	8001fee <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001f64:	f7ff ffbe 	bl	8001ee4 <HAL_RCC_GetPCLK2Freq>
 8001f68:	2519      	movs	r5, #25
 8001f6a:	fb05 f300 	mul.w	r3, r5, r0
 8001f6e:	6860      	ldr	r0, [r4, #4]
 8001f70:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001f74:	0040      	lsls	r0, r0, #1
 8001f76:	fbb3 f3f0 	udiv	r3, r3, r0
 8001f7a:	fbb3 f3f9 	udiv	r3, r3, r9
 8001f7e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001f82:	f7ff ffaf 	bl	8001ee4 <HAL_RCC_GetPCLK2Freq>
 8001f86:	6863      	ldr	r3, [r4, #4]
 8001f88:	4368      	muls	r0, r5
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	fbb0 f7f3 	udiv	r7, r0, r3
 8001f90:	f7ff ffa8 	bl	8001ee4 <HAL_RCC_GetPCLK2Freq>
 8001f94:	6863      	ldr	r3, [r4, #4]
 8001f96:	4368      	muls	r0, r5
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f9e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001fa2:	fb09 7313 	mls	r3, r9, r3, r7
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	3332      	adds	r3, #50	; 0x32
 8001faa:	fbb3 f3f9 	udiv	r3, r3, r9
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001fb4:	f7ff ff96 	bl	8001ee4 <HAL_RCC_GetPCLK2Freq>
 8001fb8:	6862      	ldr	r2, [r4, #4]
 8001fba:	4368      	muls	r0, r5
 8001fbc:	0052      	lsls	r2, r2, #1
 8001fbe:	fbb0 faf2 	udiv	sl, r0, r2
 8001fc2:	f7ff ff8f 	bl	8001ee4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001fc6:	6863      	ldr	r3, [r4, #4]
 8001fc8:	4368      	muls	r0, r5
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fd0:	fbb3 f3f9 	udiv	r3, r3, r9
 8001fd4:	fb09 a313 	mls	r3, r9, r3, sl
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	3332      	adds	r3, #50	; 0x32
 8001fdc:	fbb3 f3f9 	udiv	r3, r3, r9
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001fe6:	443b      	add	r3, r7
 8001fe8:	60b3      	str	r3, [r6, #8]
 8001fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001fee:	f7ff ff61 	bl	8001eb4 <HAL_RCC_GetPCLK1Freq>
 8001ff2:	2519      	movs	r5, #25
 8001ff4:	fb05 f300 	mul.w	r3, r5, r0
 8001ff8:	6860      	ldr	r0, [r4, #4]
 8001ffa:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001ffe:	0040      	lsls	r0, r0, #1
 8002000:	fbb3 f3f0 	udiv	r3, r3, r0
 8002004:	fbb3 f3f9 	udiv	r3, r3, r9
 8002008:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800200c:	f7ff ff52 	bl	8001eb4 <HAL_RCC_GetPCLK1Freq>
 8002010:	6863      	ldr	r3, [r4, #4]
 8002012:	4368      	muls	r0, r5
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	fbb0 f7f3 	udiv	r7, r0, r3
 800201a:	f7ff ff4b 	bl	8001eb4 <HAL_RCC_GetPCLK1Freq>
 800201e:	6863      	ldr	r3, [r4, #4]
 8002020:	4368      	muls	r0, r5
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	fbb0 f3f3 	udiv	r3, r0, r3
 8002028:	fbb3 f3f9 	udiv	r3, r3, r9
 800202c:	fb09 7313 	mls	r3, r9, r3, r7
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	3332      	adds	r3, #50	; 0x32
 8002034:	fbb3 f3f9 	udiv	r3, r3, r9
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800203e:	f7ff ff39 	bl	8001eb4 <HAL_RCC_GetPCLK1Freq>
 8002042:	6862      	ldr	r2, [r4, #4]
 8002044:	4368      	muls	r0, r5
 8002046:	0052      	lsls	r2, r2, #1
 8002048:	fbb0 faf2 	udiv	sl, r0, r2
 800204c:	f7ff ff32 	bl	8001eb4 <HAL_RCC_GetPCLK1Freq>
 8002050:	e7b9      	b.n	8001fc6 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002052:	429e      	cmp	r6, r3
 8002054:	d002      	beq.n	800205c <UART_SetConfig+0x148>
 8002056:	4b3b      	ldr	r3, [pc, #236]	; (8002144 <UART_SetConfig+0x230>)
 8002058:	429e      	cmp	r6, r3
 800205a:	d140      	bne.n	80020de <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800205c:	f7ff ff42 	bl	8001ee4 <HAL_RCC_GetPCLK2Freq>
 8002060:	6867      	ldr	r7, [r4, #4]
 8002062:	2519      	movs	r5, #25
 8002064:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002068:	fb05 f300 	mul.w	r3, r5, r0
 800206c:	00bf      	lsls	r7, r7, #2
 800206e:	fbb3 f3f7 	udiv	r3, r3, r7
 8002072:	fbb3 f3f9 	udiv	r3, r3, r9
 8002076:	011f      	lsls	r7, r3, #4
 8002078:	f7ff ff34 	bl	8001ee4 <HAL_RCC_GetPCLK2Freq>
 800207c:	6863      	ldr	r3, [r4, #4]
 800207e:	4368      	muls	r0, r5
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	fbb0 f8f3 	udiv	r8, r0, r3
 8002086:	f7ff ff2d 	bl	8001ee4 <HAL_RCC_GetPCLK2Freq>
 800208a:	6863      	ldr	r3, [r4, #4]
 800208c:	4368      	muls	r0, r5
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	fbb0 f3f3 	udiv	r3, r0, r3
 8002094:	fbb3 f3f9 	udiv	r3, r3, r9
 8002098:	fb09 8313 	mls	r3, r9, r3, r8
 800209c:	011b      	lsls	r3, r3, #4
 800209e:	3332      	adds	r3, #50	; 0x32
 80020a0:	fbb3 f3f9 	udiv	r3, r3, r9
 80020a4:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80020a8:	f7ff ff1c 	bl	8001ee4 <HAL_RCC_GetPCLK2Freq>
 80020ac:	6862      	ldr	r2, [r4, #4]
 80020ae:	4368      	muls	r0, r5
 80020b0:	0092      	lsls	r2, r2, #2
 80020b2:	fbb0 faf2 	udiv	sl, r0, r2
 80020b6:	f7ff ff15 	bl	8001ee4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80020ba:	6863      	ldr	r3, [r4, #4]
 80020bc:	4368      	muls	r0, r5
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80020c4:	fbb3 f3f9 	udiv	r3, r3, r9
 80020c8:	fb09 a313 	mls	r3, r9, r3, sl
 80020cc:	011b      	lsls	r3, r3, #4
 80020ce:	3332      	adds	r3, #50	; 0x32
 80020d0:	fbb3 f3f9 	udiv	r3, r3, r9
 80020d4:	f003 030f 	and.w	r3, r3, #15
 80020d8:	ea43 0308 	orr.w	r3, r3, r8
 80020dc:	e783      	b.n	8001fe6 <UART_SetConfig+0xd2>
 80020de:	f7ff fee9 	bl	8001eb4 <HAL_RCC_GetPCLK1Freq>
 80020e2:	6867      	ldr	r7, [r4, #4]
 80020e4:	2519      	movs	r5, #25
 80020e6:	f04f 0964 	mov.w	r9, #100	; 0x64
 80020ea:	fb05 f300 	mul.w	r3, r5, r0
 80020ee:	00bf      	lsls	r7, r7, #2
 80020f0:	fbb3 f3f7 	udiv	r3, r3, r7
 80020f4:	fbb3 f3f9 	udiv	r3, r3, r9
 80020f8:	011f      	lsls	r7, r3, #4
 80020fa:	f7ff fedb 	bl	8001eb4 <HAL_RCC_GetPCLK1Freq>
 80020fe:	6863      	ldr	r3, [r4, #4]
 8002100:	4368      	muls	r0, r5
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	fbb0 f8f3 	udiv	r8, r0, r3
 8002108:	f7ff fed4 	bl	8001eb4 <HAL_RCC_GetPCLK1Freq>
 800210c:	6863      	ldr	r3, [r4, #4]
 800210e:	4368      	muls	r0, r5
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	fbb0 f3f3 	udiv	r3, r0, r3
 8002116:	fbb3 f3f9 	udiv	r3, r3, r9
 800211a:	fb09 8313 	mls	r3, r9, r3, r8
 800211e:	011b      	lsls	r3, r3, #4
 8002120:	3332      	adds	r3, #50	; 0x32
 8002122:	fbb3 f3f9 	udiv	r3, r3, r9
 8002126:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800212a:	f7ff fec3 	bl	8001eb4 <HAL_RCC_GetPCLK1Freq>
 800212e:	6862      	ldr	r2, [r4, #4]
 8002130:	4368      	muls	r0, r5
 8002132:	0092      	lsls	r2, r2, #2
 8002134:	fbb0 faf2 	udiv	sl, r0, r2
 8002138:	f7ff febc 	bl	8001eb4 <HAL_RCC_GetPCLK1Freq>
 800213c:	e7bd      	b.n	80020ba <UART_SetConfig+0x1a6>
 800213e:	bf00      	nop
 8002140:	40011000 	.word	0x40011000
 8002144:	40011400 	.word	0x40011400

08002148 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800214a:	4604      	mov	r4, r0
 800214c:	460e      	mov	r6, r1
 800214e:	4617      	mov	r7, r2
 8002150:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002152:	6821      	ldr	r1, [r4, #0]
 8002154:	680b      	ldr	r3, [r1, #0]
 8002156:	ea36 0303 	bics.w	r3, r6, r3
 800215a:	d101      	bne.n	8002160 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 800215c:	2000      	movs	r0, #0
}
 800215e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002160:	1c6b      	adds	r3, r5, #1
 8002162:	d0f7      	beq.n	8002154 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002164:	b995      	cbnz	r5, 800218c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002166:	6823      	ldr	r3, [r4, #0]
 8002168:	68da      	ldr	r2, [r3, #12]
 800216a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800216e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002170:	695a      	ldr	r2, [r3, #20]
 8002172:	f022 0201 	bic.w	r2, r2, #1
 8002176:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002178:	2320      	movs	r3, #32
 800217a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800217e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8002182:	2300      	movs	r3, #0
 8002184:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8002188:	2003      	movs	r0, #3
 800218a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800218c:	f7fe fec6 	bl	8000f1c <HAL_GetTick>
 8002190:	1bc0      	subs	r0, r0, r7
 8002192:	4285      	cmp	r5, r0
 8002194:	d2dd      	bcs.n	8002152 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8002196:	e7e6      	b.n	8002166 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08002198 <HAL_UART_Init>:
{
 8002198:	b510      	push	{r4, lr}
  if(huart == NULL)
 800219a:	4604      	mov	r4, r0
 800219c:	b340      	cbz	r0, 80021f0 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 800219e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80021a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80021a6:	b91b      	cbnz	r3, 80021b0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80021a8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80021ac:	f000 f9fa 	bl	80025a4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80021b0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80021b2:	2324      	movs	r3, #36	; 0x24
 80021b4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80021b8:	68d3      	ldr	r3, [r2, #12]
 80021ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80021be:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80021c0:	4620      	mov	r0, r4
 80021c2:	f7ff fea7 	bl	8001f14 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021c6:	6823      	ldr	r3, [r4, #0]
 80021c8:	691a      	ldr	r2, [r3, #16]
 80021ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021ce:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021d0:	695a      	ldr	r2, [r3, #20]
 80021d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021d6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80021d8:	68da      	ldr	r2, [r3, #12]
 80021da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021de:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021e0:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80021e2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021e4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80021e6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80021ea:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80021ee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80021f0:	2001      	movs	r0, #1
}
 80021f2:	bd10      	pop	{r4, pc}

080021f4 <HAL_UART_Transmit>:
{
 80021f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021f8:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 80021fa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80021fe:	2b20      	cmp	r3, #32
{
 8002200:	4604      	mov	r4, r0
 8002202:	460d      	mov	r5, r1
 8002204:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 8002206:	d14f      	bne.n	80022a8 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 8002208:	2900      	cmp	r1, #0
 800220a:	d04a      	beq.n	80022a2 <HAL_UART_Transmit+0xae>
 800220c:	2a00      	cmp	r2, #0
 800220e:	d048      	beq.n	80022a2 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8002210:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002214:	2b01      	cmp	r3, #1
 8002216:	d047      	beq.n	80022a8 <HAL_UART_Transmit+0xb4>
 8002218:	2301      	movs	r3, #1
 800221a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800221e:	2300      	movs	r3, #0
 8002220:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002222:	2321      	movs	r3, #33	; 0x21
 8002224:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002228:	f7fe fe78 	bl	8000f1c <HAL_GetTick>
    huart->TxXferSize = Size;
 800222c:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8002230:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8002232:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8002236:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002238:	b29b      	uxth	r3, r3
 800223a:	b96b      	cbnz	r3, 8002258 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800223c:	463b      	mov	r3, r7
 800223e:	4632      	mov	r2, r6
 8002240:	2140      	movs	r1, #64	; 0x40
 8002242:	4620      	mov	r0, r4
 8002244:	f7ff ff80 	bl	8002148 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002248:	b9b0      	cbnz	r0, 8002278 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 800224a:	2320      	movs	r3, #32
 800224c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002250:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8002254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8002258:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800225a:	3b01      	subs	r3, #1
 800225c:	b29b      	uxth	r3, r3
 800225e:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002260:	68a3      	ldr	r3, [r4, #8]
 8002262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002266:	4632      	mov	r2, r6
 8002268:	463b      	mov	r3, r7
 800226a:	f04f 0180 	mov.w	r1, #128	; 0x80
 800226e:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002270:	d10e      	bne.n	8002290 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002272:	f7ff ff69 	bl	8002148 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002276:	b110      	cbz	r0, 800227e <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8002278:	2003      	movs	r0, #3
 800227a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800227e:	882b      	ldrh	r3, [r5, #0]
 8002280:	6822      	ldr	r2, [r4, #0]
 8002282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002286:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002288:	6923      	ldr	r3, [r4, #16]
 800228a:	b943      	cbnz	r3, 800229e <HAL_UART_Transmit+0xaa>
          pData +=2U;
 800228c:	3502      	adds	r5, #2
 800228e:	e7d2      	b.n	8002236 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002290:	f7ff ff5a 	bl	8002148 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002294:	2800      	cmp	r0, #0
 8002296:	d1ef      	bne.n	8002278 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002298:	6823      	ldr	r3, [r4, #0]
 800229a:	782a      	ldrb	r2, [r5, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	3501      	adds	r5, #1
 80022a0:	e7c9      	b.n	8002236 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80022a2:	2001      	movs	r0, #1
 80022a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80022a8:	2002      	movs	r0, #2
}
 80022aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080022b0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80022b0:	b082      	sub	sp, #8

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	9301      	str	r3, [sp, #4]
 80022b6:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <MX_GPIO_Init+0x20>)
 80022b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ba:	f042 0202 	orr.w	r2, r2, #2
 80022be:	631a      	str	r2, [r3, #48]	; 0x30
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	9301      	str	r3, [sp, #4]
 80022c8:	9b01      	ldr	r3, [sp, #4]

}
 80022ca:	b002      	add	sp, #8
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	40023800 	.word	0x40023800

080022d4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80022d4:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 80022d6:	480d      	ldr	r0, [pc, #52]	; (800230c <MX_I2C1_Init+0x38>)
  hi2c1.Init.ClockSpeed = 400000;
 80022d8:	4b0d      	ldr	r3, [pc, #52]	; (8002310 <MX_I2C1_Init+0x3c>)
 80022da:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8002318 <MX_I2C1_Init+0x44>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 400000;
 80022e2:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022e6:	2300      	movs	r3, #0
 80022e8:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80022ea:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022ec:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022ee:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80022f0:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022f2:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022f4:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022f6:	f7ff f93f 	bl	8001578 <HAL_I2C_Init>
 80022fa:	b128      	cbz	r0, 8002308 <MX_I2C1_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 80022fc:	2142      	movs	r1, #66	; 0x42
 80022fe:	4805      	ldr	r0, [pc, #20]	; (8002314 <MX_I2C1_Init+0x40>)
  }

}
 8002300:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8002304:	f000 b8c8 	b.w	8002498 <_Error_Handler>
 8002308:	bd08      	pop	{r3, pc}
 800230a:	bf00      	nop
 800230c:	200006cc 	.word	0x200006cc
 8002310:	40005400 	.word	0x40005400
 8002314:	080054a8 	.word	0x080054a8
 8002318:	00061a80 	.word	0x00061a80

0800231c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800231c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 800231e:	6802      	ldr	r2, [r0, #0]
 8002320:	4b10      	ldr	r3, [pc, #64]	; (8002364 <HAL_I2C_MspInit+0x48>)
 8002322:	429a      	cmp	r2, r3
 8002324:	d11a      	bne.n	800235c <HAL_I2C_MspInit+0x40>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002326:	23c0      	movs	r3, #192	; 0xc0
 8002328:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800232a:	2312      	movs	r3, #18
 800232c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800232e:	2301      	movs	r3, #1
 8002330:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002332:	2303      	movs	r3, #3
 8002334:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002336:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002338:	eb0d 0103 	add.w	r1, sp, r3
 800233c:	480a      	ldr	r0, [pc, #40]	; (8002368 <HAL_I2C_MspInit+0x4c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800233e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002340:	f7fe fe70 	bl	8001024 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002344:	2300      	movs	r3, #0
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	4b08      	ldr	r3, [pc, #32]	; (800236c <HAL_I2C_MspInit+0x50>)
 800234a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800234c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002350:	641a      	str	r2, [r3, #64]	; 0x40
 8002352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800235c:	b007      	add	sp, #28
 800235e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002362:	bf00      	nop
 8002364:	40005400 	.word	0x40005400
 8002368:	40020400 	.word	0x40020400
 800236c:	40023800 	.word	0x40023800

08002370 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8002370:	b510      	push	{r4, lr}
 8002372:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002374:	2300      	movs	r3, #0
 8002376:	4a21      	ldr	r2, [pc, #132]	; (80023fc <SystemClock_Config+0x8c>)
 8002378:	9301      	str	r3, [sp, #4]
 800237a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800237c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002380:	6411      	str	r1, [r2, #64]	; 0x40
 8002382:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002384:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002388:	9201      	str	r2, [sp, #4]
 800238a:	9a01      	ldr	r2, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800238c:	4a1c      	ldr	r2, [pc, #112]	; (8002400 <SystemClock_Config+0x90>)
 800238e:	9302      	str	r3, [sp, #8]
 8002390:	6811      	ldr	r1, [r2, #0]
 8002392:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002396:	6011      	str	r1, [r2, #0]
 8002398:	6812      	ldr	r2, [r2, #0]
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800239a:	930e      	str	r3, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800239c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80023a0:	9202      	str	r2, [sp, #8]
 80023a2:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023a4:	2202      	movs	r2, #2
 80023a6:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023a8:	2201      	movs	r2, #1
 80023aa:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023ac:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80023ae:	2210      	movs	r2, #16
 80023b0:	920c      	str	r2, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023b2:	f7ff faf5 	bl	80019a0 <HAL_RCC_OscConfig>
 80023b6:	4601      	mov	r1, r0
 80023b8:	b100      	cbz	r0, 80023bc <SystemClock_Config+0x4c>
 80023ba:	e7fe      	b.n	80023ba <SystemClock_Config+0x4a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023bc:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80023be:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023c0:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023c2:	9006      	str	r0, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023c4:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80023c6:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023c8:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80023ca:	f7ff fcb7 	bl	8001d3c <HAL_RCC_ClockConfig>
 80023ce:	4604      	mov	r4, r0
 80023d0:	b100      	cbz	r0, 80023d4 <SystemClock_Config+0x64>
 80023d2:	e7fe      	b.n	80023d2 <SystemClock_Config+0x62>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80023d4:	f7ff fd68 	bl	8001ea8 <HAL_RCC_GetHCLKFreq>
 80023d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80023e0:	f7fe fdf8 	bl	8000fd4 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80023e4:	2004      	movs	r0, #4
 80023e6:	f7fe fe0b 	bl	8001000 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80023ea:	4622      	mov	r2, r4
 80023ec:	4621      	mov	r1, r4
 80023ee:	f04f 30ff 	mov.w	r0, #4294967295
 80023f2:	f7fe fdbb 	bl	8000f6c <HAL_NVIC_SetPriority>
}
 80023f6:	b014      	add	sp, #80	; 0x50
 80023f8:	bd10      	pop	{r4, pc}
 80023fa:	bf00      	nop
 80023fc:	40023800 	.word	0x40023800
 8002400:	40007000 	.word	0x40007000

08002404 <main>:
{
 8002404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002408:	b092      	sub	sp, #72	; 0x48
  HAL_Init();
 800240a:	f7fe fd65 	bl	8000ed8 <HAL_Init>
  SystemClock_Config();
 800240e:	f7ff ffaf 	bl	8002370 <SystemClock_Config>
  MX_GPIO_Init();
 8002412:	f7ff ff4d 	bl	80022b0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002416:	f000 f8a5 	bl	8002564 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800241a:	f7ff ff5b 	bl	80022d4 <MX_I2C1_Init>
  for(int i=0;i<=9;i++){
 800241e:	2300      	movs	r3, #0
	  datos[i]=numero+i;
 8002420:	aa04      	add	r2, sp, #16
 8002422:	549b      	strb	r3, [r3, r2]
  for(int i=0;i<=9;i++){
 8002424:	3301      	adds	r3, #1
 8002426:	2b0a      	cmp	r3, #10
 8002428:	d1fb      	bne.n	8002422 <main+0x1e>
  HAL_I2C_Mem_Write(&hi2c1,ADDMEMORY,0x00,32,datos,10,50);
 800242a:	2132      	movs	r1, #50	; 0x32
 800242c:	e88d 000c 	stmia.w	sp, {r2, r3}
 8002430:	9102      	str	r1, [sp, #8]
 8002432:	2320      	movs	r3, #32
 8002434:	2200      	movs	r2, #0
 8002436:	21a0      	movs	r1, #160	; 0xa0
 8002438:	4814      	ldr	r0, [pc, #80]	; (800248c <main+0x88>)
	  HAL_I2C_Mem_Read(&hi2c1,ADDMEMORY,0x00,32,datos_in,10,50);
 800243a:	f8df 8050 	ldr.w	r8, [pc, #80]	; 800248c <main+0x88>
		  sprintf(bufer, "Datos=%.d\n\r",datos_in[i]);
 800243e:	4e14      	ldr	r6, [pc, #80]	; (8002490 <main+0x8c>)
		  HAL_UART_Transmit(&huart3,(uint8_t*)bufer,(uint16_t)strlen(bufer),(uint32_t)100);
 8002440:	4f14      	ldr	r7, [pc, #80]	; (8002494 <main+0x90>)
  HAL_I2C_Mem_Write(&hi2c1,ADDMEMORY,0x00,32,datos,10,50);
 8002442:	f7ff f907 	bl	8001654 <HAL_I2C_Mem_Write>
	  HAL_I2C_Mem_Read(&hi2c1,ADDMEMORY,0x00,32,datos_in,10,50);
 8002446:	2332      	movs	r3, #50	; 0x32
 8002448:	9302      	str	r3, [sp, #8]
 800244a:	ad07      	add	r5, sp, #28
 800244c:	230a      	movs	r3, #10
 800244e:	9301      	str	r3, [sp, #4]
 8002450:	9500      	str	r5, [sp, #0]
 8002452:	2320      	movs	r3, #32
 8002454:	2200      	movs	r2, #0
 8002456:	21a0      	movs	r1, #160	; 0xa0
 8002458:	4640      	mov	r0, r8
 800245a:	f7ff f991 	bl	8001780 <HAL_I2C_Mem_Read>
	  for(int i=0;i<=9;i++){
 800245e:	2400      	movs	r4, #0
		  sprintf(bufer, "Datos=%.d\n\r",datos_in[i]);
 8002460:	5d2a      	ldrb	r2, [r5, r4]
 8002462:	4631      	mov	r1, r6
 8002464:	a80a      	add	r0, sp, #40	; 0x28
 8002466:	f000 f915 	bl	8002694 <sprintf>
		  HAL_UART_Transmit(&huart3,(uint8_t*)bufer,(uint16_t)strlen(bufer),(uint32_t)100);
 800246a:	a80a      	add	r0, sp, #40	; 0x28
 800246c:	f7fd feb0 	bl	80001d0 <strlen>
 8002470:	2364      	movs	r3, #100	; 0x64
 8002472:	b282      	uxth	r2, r0
 8002474:	a90a      	add	r1, sp, #40	; 0x28
 8002476:	4638      	mov	r0, r7
 8002478:	f7ff febc 	bl	80021f4 <HAL_UART_Transmit>
	  for(int i=0;i<=9;i++){
 800247c:	3401      	adds	r4, #1
		  HAL_Delay(250);
 800247e:	20fa      	movs	r0, #250	; 0xfa
 8002480:	f7fe fd52 	bl	8000f28 <HAL_Delay>
	  for(int i=0;i<=9;i++){
 8002484:	2c0a      	cmp	r4, #10
 8002486:	d1eb      	bne.n	8002460 <main+0x5c>
 8002488:	e7dd      	b.n	8002446 <main+0x42>
 800248a:	bf00      	nop
 800248c:	200006cc 	.word	0x200006cc
 8002490:	080054b5 	.word	0x080054b5
 8002494:	20000720 	.word	0x20000720

08002498 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8002498:	e7fe      	b.n	8002498 <_Error_Handler>

0800249a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800249a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800249c:	2003      	movs	r0, #3
 800249e:	f7fe fd53 	bl	8000f48 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80024a2:	2200      	movs	r2, #0
 80024a4:	4611      	mov	r1, r2
 80024a6:	f06f 000b 	mvn.w	r0, #11
 80024aa:	f7fe fd5f 	bl	8000f6c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80024ae:	2200      	movs	r2, #0
 80024b0:	4611      	mov	r1, r2
 80024b2:	f06f 000a 	mvn.w	r0, #10
 80024b6:	f7fe fd59 	bl	8000f6c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80024ba:	2200      	movs	r2, #0
 80024bc:	4611      	mov	r1, r2
 80024be:	f06f 0009 	mvn.w	r0, #9
 80024c2:	f7fe fd53 	bl	8000f6c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80024c6:	2200      	movs	r2, #0
 80024c8:	4611      	mov	r1, r2
 80024ca:	f06f 0004 	mvn.w	r0, #4
 80024ce:	f7fe fd4d 	bl	8000f6c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80024d2:	2200      	movs	r2, #0
 80024d4:	4611      	mov	r1, r2
 80024d6:	f06f 0003 	mvn.w	r0, #3
 80024da:	f7fe fd47 	bl	8000f6c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80024de:	2200      	movs	r2, #0
 80024e0:	4611      	mov	r1, r2
 80024e2:	f06f 0001 	mvn.w	r0, #1
 80024e6:	f7fe fd41 	bl	8000f6c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80024ea:	2200      	movs	r2, #0
 80024ec:	4611      	mov	r1, r2
 80024ee:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80024f6:	f7fe bd39 	b.w	8000f6c <HAL_NVIC_SetPriority>

080024fa <NMI_Handler>:
 80024fa:	4770      	bx	lr

080024fc <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80024fc:	e7fe      	b.n	80024fc <HardFault_Handler>

080024fe <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80024fe:	e7fe      	b.n	80024fe <MemManage_Handler>

08002500 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002500:	e7fe      	b.n	8002500 <BusFault_Handler>

08002502 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002502:	e7fe      	b.n	8002502 <UsageFault_Handler>

08002504 <SVC_Handler>:
 8002504:	4770      	bx	lr

08002506 <DebugMon_Handler>:
 8002506:	4770      	bx	lr

08002508 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002508:	4770      	bx	lr

0800250a <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800250a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800250c:	f7fe fcfe 	bl	8000f0c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002510:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002514:	f7fe bd81 	b.w	800101a <HAL_SYSTICK_IRQHandler>

08002518 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002518:	490f      	ldr	r1, [pc, #60]	; (8002558 <SystemInit+0x40>)
 800251a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800251e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002526:	4b0d      	ldr	r3, [pc, #52]	; (800255c <SystemInit+0x44>)
 8002528:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800252a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800252c:	f042 0201 	orr.w	r2, r2, #1
 8002530:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002532:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800253a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800253e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002540:	4a07      	ldr	r2, [pc, #28]	; (8002560 <SystemInit+0x48>)
 8002542:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800254a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800254c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800254e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002552:	608b      	str	r3, [r1, #8]
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	e000ed00 	.word	0xe000ed00
 800255c:	40023800 	.word	0x40023800
 8002560:	24003010 	.word	0x24003010

08002564 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002564:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 8002566:	480c      	ldr	r0, [pc, #48]	; (8002598 <MX_USART3_UART_Init+0x34>)
  huart3.Init.BaudRate = 115200;
 8002568:	4b0c      	ldr	r3, [pc, #48]	; (800259c <MX_USART3_UART_Init+0x38>)
 800256a:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 800256e:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002572:	220c      	movs	r2, #12
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002574:	2300      	movs	r3, #0
 8002576:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002578:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800257a:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800257c:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800257e:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002580:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002582:	f7ff fe09 	bl	8002198 <HAL_UART_Init>
 8002586:	b128      	cbz	r0, 8002594 <MX_USART3_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002588:	2142      	movs	r1, #66	; 0x42
 800258a:	4805      	ldr	r0, [pc, #20]	; (80025a0 <MX_USART3_UART_Init+0x3c>)
  }

}
 800258c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8002590:	f7ff bf82 	b.w	8002498 <_Error_Handler>
 8002594:	bd08      	pop	{r3, pc}
 8002596:	bf00      	nop
 8002598:	20000720 	.word	0x20000720
 800259c:	40004800 	.word	0x40004800
 80025a0:	080054d9 	.word	0x080054d9

080025a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART3)
 80025a6:	6802      	ldr	r2, [r0, #0]
 80025a8:	4b10      	ldr	r3, [pc, #64]	; (80025ec <HAL_UART_MspInit+0x48>)
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d11a      	bne.n	80025e4 <HAL_UART_MspInit+0x40>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	4b0f      	ldr	r3, [pc, #60]	; (80025f0 <HAL_UART_MspInit+0x4c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b4:	480f      	ldr	r0, [pc, #60]	; (80025f4 <HAL_UART_MspInit+0x50>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80025b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025b8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80025bc:	641a      	str	r2, [r3, #64]	; 0x40
 80025be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80025c8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80025cc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ce:	2302      	movs	r3, #2
 80025d0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025d2:	2301      	movs	r3, #1
 80025d4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d6:	2303      	movs	r3, #3
 80025d8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025da:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025dc:	2307      	movs	r3, #7
 80025de:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e0:	f7fe fd20 	bl	8001024 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80025e4:	b007      	add	sp, #28
 80025e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80025ea:	bf00      	nop
 80025ec:	40004800 	.word	0x40004800
 80025f0:	40023800 	.word	0x40023800
 80025f4:	40020400 	.word	0x40020400

080025f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80025f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002630 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80025fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80025fe:	e003      	b.n	8002608 <LoopCopyDataInit>

08002600 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002600:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002602:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002604:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002606:	3104      	adds	r1, #4

08002608 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002608:	480b      	ldr	r0, [pc, #44]	; (8002638 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800260a:	4b0c      	ldr	r3, [pc, #48]	; (800263c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800260c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800260e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002610:	d3f6      	bcc.n	8002600 <CopyDataInit>
  ldr  r2, =_sbss
 8002612:	4a0b      	ldr	r2, [pc, #44]	; (8002640 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002614:	e002      	b.n	800261c <LoopFillZerobss>

08002616 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002616:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002618:	f842 3b04 	str.w	r3, [r2], #4

0800261c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800261c:	4b09      	ldr	r3, [pc, #36]	; (8002644 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800261e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002620:	d3f9      	bcc.n	8002616 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002622:	f7ff ff79 	bl	8002518 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002626:	f000 f811 	bl	800264c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800262a:	f7ff feeb 	bl	8002404 <main>
  bx  lr    
 800262e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002630:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002634:	08005768 	.word	0x08005768
  ldr  r0, =_sdata
 8002638:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800263c:	20000674 	.word	0x20000674
  ldr  r2, =_sbss
 8002640:	20000674 	.word	0x20000674
  ldr  r3, = _ebss
 8002644:	20000770 	.word	0x20000770

08002648 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002648:	e7fe      	b.n	8002648 <ADC_IRQHandler>
	...

0800264c <__libc_init_array>:
 800264c:	b570      	push	{r4, r5, r6, lr}
 800264e:	4e0d      	ldr	r6, [pc, #52]	; (8002684 <__libc_init_array+0x38>)
 8002650:	4c0d      	ldr	r4, [pc, #52]	; (8002688 <__libc_init_array+0x3c>)
 8002652:	1ba4      	subs	r4, r4, r6
 8002654:	10a4      	asrs	r4, r4, #2
 8002656:	2500      	movs	r5, #0
 8002658:	42a5      	cmp	r5, r4
 800265a:	d109      	bne.n	8002670 <__libc_init_array+0x24>
 800265c:	4e0b      	ldr	r6, [pc, #44]	; (800268c <__libc_init_array+0x40>)
 800265e:	4c0c      	ldr	r4, [pc, #48]	; (8002690 <__libc_init_array+0x44>)
 8002660:	f002 ff14 	bl	800548c <_init>
 8002664:	1ba4      	subs	r4, r4, r6
 8002666:	10a4      	asrs	r4, r4, #2
 8002668:	2500      	movs	r5, #0
 800266a:	42a5      	cmp	r5, r4
 800266c:	d105      	bne.n	800267a <__libc_init_array+0x2e>
 800266e:	bd70      	pop	{r4, r5, r6, pc}
 8002670:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002674:	4798      	blx	r3
 8002676:	3501      	adds	r5, #1
 8002678:	e7ee      	b.n	8002658 <__libc_init_array+0xc>
 800267a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800267e:	4798      	blx	r3
 8002680:	3501      	adds	r5, #1
 8002682:	e7f2      	b.n	800266a <__libc_init_array+0x1e>
 8002684:	08005760 	.word	0x08005760
 8002688:	08005760 	.word	0x08005760
 800268c:	08005760 	.word	0x08005760
 8002690:	08005764 	.word	0x08005764

08002694 <sprintf>:
 8002694:	b40e      	push	{r1, r2, r3}
 8002696:	b500      	push	{lr}
 8002698:	b09c      	sub	sp, #112	; 0x70
 800269a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800269e:	ab1d      	add	r3, sp, #116	; 0x74
 80026a0:	f8ad 1014 	strh.w	r1, [sp, #20]
 80026a4:	9002      	str	r0, [sp, #8]
 80026a6:	9006      	str	r0, [sp, #24]
 80026a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80026ac:	480a      	ldr	r0, [pc, #40]	; (80026d8 <sprintf+0x44>)
 80026ae:	9104      	str	r1, [sp, #16]
 80026b0:	9107      	str	r1, [sp, #28]
 80026b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80026b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80026ba:	f8ad 1016 	strh.w	r1, [sp, #22]
 80026be:	6800      	ldr	r0, [r0, #0]
 80026c0:	9301      	str	r3, [sp, #4]
 80026c2:	a902      	add	r1, sp, #8
 80026c4:	f000 f80c 	bl	80026e0 <_svfprintf_r>
 80026c8:	9b02      	ldr	r3, [sp, #8]
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]
 80026ce:	b01c      	add	sp, #112	; 0x70
 80026d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80026d4:	b003      	add	sp, #12
 80026d6:	4770      	bx	lr
 80026d8:	20000004 	.word	0x20000004
 80026dc:	00000000 	.word	0x00000000

080026e0 <_svfprintf_r>:
 80026e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026e4:	b0bd      	sub	sp, #244	; 0xf4
 80026e6:	468a      	mov	sl, r1
 80026e8:	4615      	mov	r5, r2
 80026ea:	461f      	mov	r7, r3
 80026ec:	4683      	mov	fp, r0
 80026ee:	f001 fe25 	bl	800433c <_localeconv_r>
 80026f2:	6803      	ldr	r3, [r0, #0]
 80026f4:	930d      	str	r3, [sp, #52]	; 0x34
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fd fd6a 	bl	80001d0 <strlen>
 80026fc:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8002700:	9008      	str	r0, [sp, #32]
 8002702:	061b      	lsls	r3, r3, #24
 8002704:	d518      	bpl.n	8002738 <_svfprintf_r+0x58>
 8002706:	f8da 3010 	ldr.w	r3, [sl, #16]
 800270a:	b9ab      	cbnz	r3, 8002738 <_svfprintf_r+0x58>
 800270c:	2140      	movs	r1, #64	; 0x40
 800270e:	4658      	mov	r0, fp
 8002710:	f001 fe2a 	bl	8004368 <_malloc_r>
 8002714:	f8ca 0000 	str.w	r0, [sl]
 8002718:	f8ca 0010 	str.w	r0, [sl, #16]
 800271c:	b948      	cbnz	r0, 8002732 <_svfprintf_r+0x52>
 800271e:	230c      	movs	r3, #12
 8002720:	f8cb 3000 	str.w	r3, [fp]
 8002724:	f04f 33ff 	mov.w	r3, #4294967295
 8002728:	9309      	str	r3, [sp, #36]	; 0x24
 800272a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800272c:	b03d      	add	sp, #244	; 0xf4
 800272e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002732:	2340      	movs	r3, #64	; 0x40
 8002734:	f8ca 3014 	str.w	r3, [sl, #20]
 8002738:	ed9f 7b99 	vldr	d7, [pc, #612]	; 80029a0 <_svfprintf_r+0x2c0>
 800273c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002740:	2300      	movs	r3, #0
 8002742:	ac2c      	add	r4, sp, #176	; 0xb0
 8002744:	941f      	str	r4, [sp, #124]	; 0x7c
 8002746:	9321      	str	r3, [sp, #132]	; 0x84
 8002748:	9320      	str	r3, [sp, #128]	; 0x80
 800274a:	9505      	str	r5, [sp, #20]
 800274c:	9303      	str	r3, [sp, #12]
 800274e:	9311      	str	r3, [sp, #68]	; 0x44
 8002750:	9310      	str	r3, [sp, #64]	; 0x40
 8002752:	9309      	str	r3, [sp, #36]	; 0x24
 8002754:	9d05      	ldr	r5, [sp, #20]
 8002756:	462b      	mov	r3, r5
 8002758:	f813 2b01 	ldrb.w	r2, [r3], #1
 800275c:	b112      	cbz	r2, 8002764 <_svfprintf_r+0x84>
 800275e:	2a25      	cmp	r2, #37	; 0x25
 8002760:	f040 8083 	bne.w	800286a <_svfprintf_r+0x18a>
 8002764:	9b05      	ldr	r3, [sp, #20]
 8002766:	1aee      	subs	r6, r5, r3
 8002768:	d00d      	beq.n	8002786 <_svfprintf_r+0xa6>
 800276a:	e884 0048 	stmia.w	r4, {r3, r6}
 800276e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002770:	4433      	add	r3, r6
 8002772:	9321      	str	r3, [sp, #132]	; 0x84
 8002774:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002776:	3301      	adds	r3, #1
 8002778:	2b07      	cmp	r3, #7
 800277a:	9320      	str	r3, [sp, #128]	; 0x80
 800277c:	dc77      	bgt.n	800286e <_svfprintf_r+0x18e>
 800277e:	3408      	adds	r4, #8
 8002780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002782:	4433      	add	r3, r6
 8002784:	9309      	str	r3, [sp, #36]	; 0x24
 8002786:	782b      	ldrb	r3, [r5, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 8729 	beq.w	80035e0 <_svfprintf_r+0xf00>
 800278e:	2300      	movs	r3, #0
 8002790:	1c69      	adds	r1, r5, #1
 8002792:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8002796:	461a      	mov	r2, r3
 8002798:	f04f 39ff 	mov.w	r9, #4294967295
 800279c:	930a      	str	r3, [sp, #40]	; 0x28
 800279e:	461d      	mov	r5, r3
 80027a0:	200a      	movs	r0, #10
 80027a2:	1c4e      	adds	r6, r1, #1
 80027a4:	7809      	ldrb	r1, [r1, #0]
 80027a6:	9605      	str	r6, [sp, #20]
 80027a8:	9102      	str	r1, [sp, #8]
 80027aa:	9902      	ldr	r1, [sp, #8]
 80027ac:	3920      	subs	r1, #32
 80027ae:	2958      	cmp	r1, #88	; 0x58
 80027b0:	f200 8418 	bhi.w	8002fe4 <_svfprintf_r+0x904>
 80027b4:	e8df f011 	tbh	[pc, r1, lsl #1]
 80027b8:	041600a6 	.word	0x041600a6
 80027bc:	00ab0416 	.word	0x00ab0416
 80027c0:	04160416 	.word	0x04160416
 80027c4:	04160416 	.word	0x04160416
 80027c8:	04160416 	.word	0x04160416
 80027cc:	006500ae 	.word	0x006500ae
 80027d0:	00b70416 	.word	0x00b70416
 80027d4:	041600ba 	.word	0x041600ba
 80027d8:	00da00d7 	.word	0x00da00d7
 80027dc:	00da00da 	.word	0x00da00da
 80027e0:	00da00da 	.word	0x00da00da
 80027e4:	00da00da 	.word	0x00da00da
 80027e8:	00da00da 	.word	0x00da00da
 80027ec:	04160416 	.word	0x04160416
 80027f0:	04160416 	.word	0x04160416
 80027f4:	04160416 	.word	0x04160416
 80027f8:	04160416 	.word	0x04160416
 80027fc:	04160416 	.word	0x04160416
 8002800:	012b0115 	.word	0x012b0115
 8002804:	012b0416 	.word	0x012b0416
 8002808:	04160416 	.word	0x04160416
 800280c:	04160416 	.word	0x04160416
 8002810:	041600ed 	.word	0x041600ed
 8002814:	03400416 	.word	0x03400416
 8002818:	04160416 	.word	0x04160416
 800281c:	04160416 	.word	0x04160416
 8002820:	03a80416 	.word	0x03a80416
 8002824:	04160416 	.word	0x04160416
 8002828:	04160086 	.word	0x04160086
 800282c:	04160416 	.word	0x04160416
 8002830:	04160416 	.word	0x04160416
 8002834:	04160416 	.word	0x04160416
 8002838:	04160416 	.word	0x04160416
 800283c:	01070416 	.word	0x01070416
 8002840:	012b006b 	.word	0x012b006b
 8002844:	012b012b 	.word	0x012b012b
 8002848:	006b00f0 	.word	0x006b00f0
 800284c:	04160416 	.word	0x04160416
 8002850:	041600fa 	.word	0x041600fa
 8002854:	03420322 	.word	0x03420322
 8002858:	01010376 	.word	0x01010376
 800285c:	03870416 	.word	0x03870416
 8002860:	03aa0416 	.word	0x03aa0416
 8002864:	04160416 	.word	0x04160416
 8002868:	03c2      	.short	0x03c2
 800286a:	461d      	mov	r5, r3
 800286c:	e773      	b.n	8002756 <_svfprintf_r+0x76>
 800286e:	aa1f      	add	r2, sp, #124	; 0x7c
 8002870:	4651      	mov	r1, sl
 8002872:	4658      	mov	r0, fp
 8002874:	f002 fa7e 	bl	8004d74 <__ssprint_r>
 8002878:	2800      	cmp	r0, #0
 800287a:	f040 8692 	bne.w	80035a2 <_svfprintf_r+0xec2>
 800287e:	ac2c      	add	r4, sp, #176	; 0xb0
 8002880:	e77e      	b.n	8002780 <_svfprintf_r+0xa0>
 8002882:	2301      	movs	r3, #1
 8002884:	222b      	movs	r2, #43	; 0x2b
 8002886:	9905      	ldr	r1, [sp, #20]
 8002888:	e78b      	b.n	80027a2 <_svfprintf_r+0xc2>
 800288a:	460f      	mov	r7, r1
 800288c:	e7fb      	b.n	8002886 <_svfprintf_r+0x1a6>
 800288e:	b10b      	cbz	r3, 8002894 <_svfprintf_r+0x1b4>
 8002890:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002894:	06ae      	lsls	r6, r5, #26
 8002896:	f140 80aa 	bpl.w	80029ee <_svfprintf_r+0x30e>
 800289a:	3707      	adds	r7, #7
 800289c:	f027 0707 	bic.w	r7, r7, #7
 80028a0:	f107 0308 	add.w	r3, r7, #8
 80028a4:	e9d7 6700 	ldrd	r6, r7, [r7]
 80028a8:	9304      	str	r3, [sp, #16]
 80028aa:	2e00      	cmp	r6, #0
 80028ac:	f177 0300 	sbcs.w	r3, r7, #0
 80028b0:	da06      	bge.n	80028c0 <_svfprintf_r+0x1e0>
 80028b2:	4276      	negs	r6, r6
 80028b4:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80028b8:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80028bc:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80028c0:	2301      	movs	r3, #1
 80028c2:	e2ca      	b.n	8002e5a <_svfprintf_r+0x77a>
 80028c4:	b10b      	cbz	r3, 80028ca <_svfprintf_r+0x1ea>
 80028c6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80028ca:	4b37      	ldr	r3, [pc, #220]	; (80029a8 <_svfprintf_r+0x2c8>)
 80028cc:	9311      	str	r3, [sp, #68]	; 0x44
 80028ce:	06ab      	lsls	r3, r5, #26
 80028d0:	f140 8339 	bpl.w	8002f46 <_svfprintf_r+0x866>
 80028d4:	3707      	adds	r7, #7
 80028d6:	f027 0707 	bic.w	r7, r7, #7
 80028da:	f107 0308 	add.w	r3, r7, #8
 80028de:	e9d7 6700 	ldrd	r6, r7, [r7]
 80028e2:	9304      	str	r3, [sp, #16]
 80028e4:	07e8      	lsls	r0, r5, #31
 80028e6:	d50b      	bpl.n	8002900 <_svfprintf_r+0x220>
 80028e8:	ea56 0307 	orrs.w	r3, r6, r7
 80028ec:	d008      	beq.n	8002900 <_svfprintf_r+0x220>
 80028ee:	2330      	movs	r3, #48	; 0x30
 80028f0:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80028f4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80028f8:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 80028fc:	f045 0502 	orr.w	r5, r5, #2
 8002900:	2302      	movs	r3, #2
 8002902:	e2a7      	b.n	8002e54 <_svfprintf_r+0x774>
 8002904:	2a00      	cmp	r2, #0
 8002906:	d1be      	bne.n	8002886 <_svfprintf_r+0x1a6>
 8002908:	2301      	movs	r3, #1
 800290a:	2220      	movs	r2, #32
 800290c:	e7bb      	b.n	8002886 <_svfprintf_r+0x1a6>
 800290e:	f045 0501 	orr.w	r5, r5, #1
 8002912:	e7b8      	b.n	8002886 <_svfprintf_r+0x1a6>
 8002914:	683e      	ldr	r6, [r7, #0]
 8002916:	960a      	str	r6, [sp, #40]	; 0x28
 8002918:	2e00      	cmp	r6, #0
 800291a:	f107 0104 	add.w	r1, r7, #4
 800291e:	dab4      	bge.n	800288a <_svfprintf_r+0x1aa>
 8002920:	4276      	negs	r6, r6
 8002922:	960a      	str	r6, [sp, #40]	; 0x28
 8002924:	460f      	mov	r7, r1
 8002926:	f045 0504 	orr.w	r5, r5, #4
 800292a:	e7ac      	b.n	8002886 <_svfprintf_r+0x1a6>
 800292c:	9905      	ldr	r1, [sp, #20]
 800292e:	1c4e      	adds	r6, r1, #1
 8002930:	7809      	ldrb	r1, [r1, #0]
 8002932:	9102      	str	r1, [sp, #8]
 8002934:	292a      	cmp	r1, #42	; 0x2a
 8002936:	d010      	beq.n	800295a <_svfprintf_r+0x27a>
 8002938:	f04f 0900 	mov.w	r9, #0
 800293c:	9605      	str	r6, [sp, #20]
 800293e:	9902      	ldr	r1, [sp, #8]
 8002940:	3930      	subs	r1, #48	; 0x30
 8002942:	2909      	cmp	r1, #9
 8002944:	f63f af31 	bhi.w	80027aa <_svfprintf_r+0xca>
 8002948:	fb00 1909 	mla	r9, r0, r9, r1
 800294c:	9905      	ldr	r1, [sp, #20]
 800294e:	460e      	mov	r6, r1
 8002950:	f816 1b01 	ldrb.w	r1, [r6], #1
 8002954:	9102      	str	r1, [sp, #8]
 8002956:	9605      	str	r6, [sp, #20]
 8002958:	e7f1      	b.n	800293e <_svfprintf_r+0x25e>
 800295a:	6839      	ldr	r1, [r7, #0]
 800295c:	9605      	str	r6, [sp, #20]
 800295e:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 8002962:	3704      	adds	r7, #4
 8002964:	e78f      	b.n	8002886 <_svfprintf_r+0x1a6>
 8002966:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800296a:	e78c      	b.n	8002886 <_svfprintf_r+0x1a6>
 800296c:	2100      	movs	r1, #0
 800296e:	910a      	str	r1, [sp, #40]	; 0x28
 8002970:	9902      	ldr	r1, [sp, #8]
 8002972:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8002974:	3930      	subs	r1, #48	; 0x30
 8002976:	fb00 1106 	mla	r1, r0, r6, r1
 800297a:	910a      	str	r1, [sp, #40]	; 0x28
 800297c:	9905      	ldr	r1, [sp, #20]
 800297e:	460e      	mov	r6, r1
 8002980:	f816 1b01 	ldrb.w	r1, [r6], #1
 8002984:	9102      	str	r1, [sp, #8]
 8002986:	9902      	ldr	r1, [sp, #8]
 8002988:	9605      	str	r6, [sp, #20]
 800298a:	3930      	subs	r1, #48	; 0x30
 800298c:	2909      	cmp	r1, #9
 800298e:	d9ef      	bls.n	8002970 <_svfprintf_r+0x290>
 8002990:	e70b      	b.n	80027aa <_svfprintf_r+0xca>
 8002992:	f045 0508 	orr.w	r5, r5, #8
 8002996:	e776      	b.n	8002886 <_svfprintf_r+0x1a6>
 8002998:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 800299c:	e773      	b.n	8002886 <_svfprintf_r+0x1a6>
 800299e:	bf00      	nop
	...
 80029a8:	080054f8 	.word	0x080054f8
 80029ac:	9905      	ldr	r1, [sp, #20]
 80029ae:	7809      	ldrb	r1, [r1, #0]
 80029b0:	296c      	cmp	r1, #108	; 0x6c
 80029b2:	d105      	bne.n	80029c0 <_svfprintf_r+0x2e0>
 80029b4:	9905      	ldr	r1, [sp, #20]
 80029b6:	3101      	adds	r1, #1
 80029b8:	9105      	str	r1, [sp, #20]
 80029ba:	f045 0520 	orr.w	r5, r5, #32
 80029be:	e762      	b.n	8002886 <_svfprintf_r+0x1a6>
 80029c0:	f045 0510 	orr.w	r5, r5, #16
 80029c4:	e75f      	b.n	8002886 <_svfprintf_r+0x1a6>
 80029c6:	1d3b      	adds	r3, r7, #4
 80029c8:	9304      	str	r3, [sp, #16]
 80029ca:	2600      	movs	r6, #0
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 80029d2:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80029d6:	f04f 0901 	mov.w	r9, #1
 80029da:	4637      	mov	r7, r6
 80029dc:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 80029e0:	e11b      	b.n	8002c1a <_svfprintf_r+0x53a>
 80029e2:	b10b      	cbz	r3, 80029e8 <_svfprintf_r+0x308>
 80029e4:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80029e8:	f045 0510 	orr.w	r5, r5, #16
 80029ec:	e752      	b.n	8002894 <_svfprintf_r+0x1b4>
 80029ee:	f015 0f10 	tst.w	r5, #16
 80029f2:	f107 0304 	add.w	r3, r7, #4
 80029f6:	d003      	beq.n	8002a00 <_svfprintf_r+0x320>
 80029f8:	683e      	ldr	r6, [r7, #0]
 80029fa:	9304      	str	r3, [sp, #16]
 80029fc:	17f7      	asrs	r7, r6, #31
 80029fe:	e754      	b.n	80028aa <_svfprintf_r+0x1ca>
 8002a00:	683e      	ldr	r6, [r7, #0]
 8002a02:	9304      	str	r3, [sp, #16]
 8002a04:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002a08:	bf18      	it	ne
 8002a0a:	b236      	sxthne	r6, r6
 8002a0c:	e7f6      	b.n	80029fc <_svfprintf_r+0x31c>
 8002a0e:	b10b      	cbz	r3, 8002a14 <_svfprintf_r+0x334>
 8002a10:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002a14:	3707      	adds	r7, #7
 8002a16:	f027 0707 	bic.w	r7, r7, #7
 8002a1a:	f107 0308 	add.w	r3, r7, #8
 8002a1e:	9304      	str	r3, [sp, #16]
 8002a20:	ed97 7b00 	vldr	d7, [r7]
 8002a24:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002a28:	9b06      	ldr	r3, [sp, #24]
 8002a2a:	9312      	str	r3, [sp, #72]	; 0x48
 8002a2c:	9b07      	ldr	r3, [sp, #28]
 8002a2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a32:	9313      	str	r3, [sp, #76]	; 0x4c
 8002a34:	f04f 32ff 	mov.w	r2, #4294967295
 8002a38:	4b4a      	ldr	r3, [pc, #296]	; (8002b64 <_svfprintf_r+0x484>)
 8002a3a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8002a3e:	f7fe f871 	bl	8000b24 <__aeabi_dcmpun>
 8002a42:	2800      	cmp	r0, #0
 8002a44:	f040 85d5 	bne.w	80035f2 <_svfprintf_r+0xf12>
 8002a48:	f04f 32ff 	mov.w	r2, #4294967295
 8002a4c:	4b45      	ldr	r3, [pc, #276]	; (8002b64 <_svfprintf_r+0x484>)
 8002a4e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8002a52:	f7fe f849 	bl	8000ae8 <__aeabi_dcmple>
 8002a56:	2800      	cmp	r0, #0
 8002a58:	f040 85cb 	bne.w	80035f2 <_svfprintf_r+0xf12>
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	2300      	movs	r3, #0
 8002a60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002a64:	f7fe f836 	bl	8000ad4 <__aeabi_dcmplt>
 8002a68:	b110      	cbz	r0, 8002a70 <_svfprintf_r+0x390>
 8002a6a:	232d      	movs	r3, #45	; 0x2d
 8002a6c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8002a70:	4b3d      	ldr	r3, [pc, #244]	; (8002b68 <_svfprintf_r+0x488>)
 8002a72:	4a3e      	ldr	r2, [pc, #248]	; (8002b6c <_svfprintf_r+0x48c>)
 8002a74:	9902      	ldr	r1, [sp, #8]
 8002a76:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8002a7a:	2947      	cmp	r1, #71	; 0x47
 8002a7c:	bfcc      	ite	gt
 8002a7e:	4690      	movgt	r8, r2
 8002a80:	4698      	movle	r8, r3
 8002a82:	f04f 0903 	mov.w	r9, #3
 8002a86:	2600      	movs	r6, #0
 8002a88:	4637      	mov	r7, r6
 8002a8a:	e0c6      	b.n	8002c1a <_svfprintf_r+0x53a>
 8002a8c:	f1b9 3fff 	cmp.w	r9, #4294967295
 8002a90:	d022      	beq.n	8002ad8 <_svfprintf_r+0x3f8>
 8002a92:	9b02      	ldr	r3, [sp, #8]
 8002a94:	f023 0320 	bic.w	r3, r3, #32
 8002a98:	2b47      	cmp	r3, #71	; 0x47
 8002a9a:	d104      	bne.n	8002aa6 <_svfprintf_r+0x3c6>
 8002a9c:	f1b9 0f00 	cmp.w	r9, #0
 8002aa0:	bf08      	it	eq
 8002aa2:	f04f 0901 	moveq.w	r9, #1
 8002aa6:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8002aaa:	930c      	str	r3, [sp, #48]	; 0x30
 8002aac:	9b07      	ldr	r3, [sp, #28]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	da15      	bge.n	8002ade <_svfprintf_r+0x3fe>
 8002ab2:	9b06      	ldr	r3, [sp, #24]
 8002ab4:	930e      	str	r3, [sp, #56]	; 0x38
 8002ab6:	9b07      	ldr	r3, [sp, #28]
 8002ab8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002abc:	930f      	str	r3, [sp, #60]	; 0x3c
 8002abe:	232d      	movs	r3, #45	; 0x2d
 8002ac0:	930b      	str	r3, [sp, #44]	; 0x2c
 8002ac2:	9b02      	ldr	r3, [sp, #8]
 8002ac4:	f023 0720 	bic.w	r7, r3, #32
 8002ac8:	2f46      	cmp	r7, #70	; 0x46
 8002aca:	d00e      	beq.n	8002aea <_svfprintf_r+0x40a>
 8002acc:	2f45      	cmp	r7, #69	; 0x45
 8002ace:	d146      	bne.n	8002b5e <_svfprintf_r+0x47e>
 8002ad0:	f109 0601 	add.w	r6, r9, #1
 8002ad4:	2102      	movs	r1, #2
 8002ad6:	e00a      	b.n	8002aee <_svfprintf_r+0x40e>
 8002ad8:	f04f 0906 	mov.w	r9, #6
 8002adc:	e7e3      	b.n	8002aa6 <_svfprintf_r+0x3c6>
 8002ade:	ed9d 7b06 	vldr	d7, [sp, #24]
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8002ae8:	e7ea      	b.n	8002ac0 <_svfprintf_r+0x3e0>
 8002aea:	464e      	mov	r6, r9
 8002aec:	2103      	movs	r1, #3
 8002aee:	ab1d      	add	r3, sp, #116	; 0x74
 8002af0:	9301      	str	r3, [sp, #4]
 8002af2:	ab1a      	add	r3, sp, #104	; 0x68
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	4632      	mov	r2, r6
 8002af8:	ab19      	add	r3, sp, #100	; 0x64
 8002afa:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8002afe:	4658      	mov	r0, fp
 8002b00:	f000 fe4e 	bl	80037a0 <_dtoa_r>
 8002b04:	2f47      	cmp	r7, #71	; 0x47
 8002b06:	4680      	mov	r8, r0
 8002b08:	d102      	bne.n	8002b10 <_svfprintf_r+0x430>
 8002b0a:	07e8      	lsls	r0, r5, #31
 8002b0c:	f140 857e 	bpl.w	800360c <_svfprintf_r+0xf2c>
 8002b10:	eb08 0306 	add.w	r3, r8, r6
 8002b14:	2f46      	cmp	r7, #70	; 0x46
 8002b16:	9303      	str	r3, [sp, #12]
 8002b18:	d111      	bne.n	8002b3e <_svfprintf_r+0x45e>
 8002b1a:	f898 3000 	ldrb.w	r3, [r8]
 8002b1e:	2b30      	cmp	r3, #48	; 0x30
 8002b20:	d109      	bne.n	8002b36 <_svfprintf_r+0x456>
 8002b22:	2200      	movs	r2, #0
 8002b24:	2300      	movs	r3, #0
 8002b26:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002b2a:	f7fd ffc9 	bl	8000ac0 <__aeabi_dcmpeq>
 8002b2e:	b910      	cbnz	r0, 8002b36 <_svfprintf_r+0x456>
 8002b30:	f1c6 0601 	rsb	r6, r6, #1
 8002b34:	9619      	str	r6, [sp, #100]	; 0x64
 8002b36:	9a03      	ldr	r2, [sp, #12]
 8002b38:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002b3a:	441a      	add	r2, r3
 8002b3c:	9203      	str	r2, [sp, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2300      	movs	r3, #0
 8002b42:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002b46:	f7fd ffbb 	bl	8000ac0 <__aeabi_dcmpeq>
 8002b4a:	b988      	cbnz	r0, 8002b70 <_svfprintf_r+0x490>
 8002b4c:	2230      	movs	r2, #48	; 0x30
 8002b4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002b50:	9903      	ldr	r1, [sp, #12]
 8002b52:	4299      	cmp	r1, r3
 8002b54:	d90e      	bls.n	8002b74 <_svfprintf_r+0x494>
 8002b56:	1c59      	adds	r1, r3, #1
 8002b58:	911d      	str	r1, [sp, #116]	; 0x74
 8002b5a:	701a      	strb	r2, [r3, #0]
 8002b5c:	e7f7      	b.n	8002b4e <_svfprintf_r+0x46e>
 8002b5e:	464e      	mov	r6, r9
 8002b60:	e7b8      	b.n	8002ad4 <_svfprintf_r+0x3f4>
 8002b62:	bf00      	nop
 8002b64:	7fefffff 	.word	0x7fefffff
 8002b68:	080054e8 	.word	0x080054e8
 8002b6c:	080054ec 	.word	0x080054ec
 8002b70:	9b03      	ldr	r3, [sp, #12]
 8002b72:	931d      	str	r3, [sp, #116]	; 0x74
 8002b74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002b76:	2f47      	cmp	r7, #71	; 0x47
 8002b78:	eba3 0308 	sub.w	r3, r3, r8
 8002b7c:	9303      	str	r3, [sp, #12]
 8002b7e:	f040 80fa 	bne.w	8002d76 <_svfprintf_r+0x696>
 8002b82:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002b84:	1cd9      	adds	r1, r3, #3
 8002b86:	db02      	blt.n	8002b8e <_svfprintf_r+0x4ae>
 8002b88:	4599      	cmp	r9, r3
 8002b8a:	f280 8120 	bge.w	8002dce <_svfprintf_r+0x6ee>
 8002b8e:	9b02      	ldr	r3, [sp, #8]
 8002b90:	3b02      	subs	r3, #2
 8002b92:	9302      	str	r3, [sp, #8]
 8002b94:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8002b96:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8002b9a:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 8002b9e:	1e53      	subs	r3, r2, #1
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	9319      	str	r3, [sp, #100]	; 0x64
 8002ba4:	bfb6      	itet	lt
 8002ba6:	f1c2 0301 	rsblt	r3, r2, #1
 8002baa:	222b      	movge	r2, #43	; 0x2b
 8002bac:	222d      	movlt	r2, #45	; 0x2d
 8002bae:	2b09      	cmp	r3, #9
 8002bb0:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8002bb4:	f340 80fb 	ble.w	8002dae <_svfprintf_r+0x6ce>
 8002bb8:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8002bbc:	260a      	movs	r6, #10
 8002bbe:	fb93 f0f6 	sdiv	r0, r3, r6
 8002bc2:	fb06 3310 	mls	r3, r6, r0, r3
 8002bc6:	3330      	adds	r3, #48	; 0x30
 8002bc8:	2809      	cmp	r0, #9
 8002bca:	f802 3c01 	strb.w	r3, [r2, #-1]
 8002bce:	f102 31ff 	add.w	r1, r2, #4294967295
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	f300 80e4 	bgt.w	8002da0 <_svfprintf_r+0x6c0>
 8002bd8:	3330      	adds	r3, #48	; 0x30
 8002bda:	f801 3c01 	strb.w	r3, [r1, #-1]
 8002bde:	3a02      	subs	r2, #2
 8002be0:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8002be4:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8002be8:	4282      	cmp	r2, r0
 8002bea:	4619      	mov	r1, r3
 8002bec:	f0c0 80da 	bcc.w	8002da4 <_svfprintf_r+0x6c4>
 8002bf0:	9a03      	ldr	r2, [sp, #12]
 8002bf2:	ab1b      	add	r3, sp, #108	; 0x6c
 8002bf4:	1acb      	subs	r3, r1, r3
 8002bf6:	2a01      	cmp	r2, #1
 8002bf8:	9310      	str	r3, [sp, #64]	; 0x40
 8002bfa:	eb03 0902 	add.w	r9, r3, r2
 8002bfe:	dc02      	bgt.n	8002c06 <_svfprintf_r+0x526>
 8002c00:	f015 0701 	ands.w	r7, r5, #1
 8002c04:	d002      	beq.n	8002c0c <_svfprintf_r+0x52c>
 8002c06:	9b08      	ldr	r3, [sp, #32]
 8002c08:	2700      	movs	r7, #0
 8002c0a:	4499      	add	r9, r3
 8002c0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002c0e:	b113      	cbz	r3, 8002c16 <_svfprintf_r+0x536>
 8002c10:	232d      	movs	r3, #45	; 0x2d
 8002c12:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8002c16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002c18:	2600      	movs	r6, #0
 8002c1a:	454e      	cmp	r6, r9
 8002c1c:	4633      	mov	r3, r6
 8002c1e:	bfb8      	it	lt
 8002c20:	464b      	movlt	r3, r9
 8002c22:	930b      	str	r3, [sp, #44]	; 0x2c
 8002c24:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8002c28:	b113      	cbz	r3, 8002c30 <_svfprintf_r+0x550>
 8002c2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002c30:	f015 0302 	ands.w	r3, r5, #2
 8002c34:	9314      	str	r3, [sp, #80]	; 0x50
 8002c36:	bf1e      	ittt	ne
 8002c38:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8002c3a:	3302      	addne	r3, #2
 8002c3c:	930b      	strne	r3, [sp, #44]	; 0x2c
 8002c3e:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8002c42:	9315      	str	r3, [sp, #84]	; 0x54
 8002c44:	d118      	bne.n	8002c78 <_svfprintf_r+0x598>
 8002c46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002c4a:	1a9b      	subs	r3, r3, r2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	930c      	str	r3, [sp, #48]	; 0x30
 8002c50:	dd12      	ble.n	8002c78 <_svfprintf_r+0x598>
 8002c52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002c54:	2b10      	cmp	r3, #16
 8002c56:	4ba9      	ldr	r3, [pc, #676]	; (8002efc <_svfprintf_r+0x81c>)
 8002c58:	6023      	str	r3, [r4, #0]
 8002c5a:	f300 81d5 	bgt.w	8003008 <_svfprintf_r+0x928>
 8002c5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002c60:	6063      	str	r3, [r4, #4]
 8002c62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002c64:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002c66:	4413      	add	r3, r2
 8002c68:	9321      	str	r3, [sp, #132]	; 0x84
 8002c6a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	2b07      	cmp	r3, #7
 8002c70:	9320      	str	r3, [sp, #128]	; 0x80
 8002c72:	f300 81e2 	bgt.w	800303a <_svfprintf_r+0x95a>
 8002c76:	3408      	adds	r4, #8
 8002c78:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8002c7c:	b173      	cbz	r3, 8002c9c <_svfprintf_r+0x5bc>
 8002c7e:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8002c82:	6023      	str	r3, [r4, #0]
 8002c84:	2301      	movs	r3, #1
 8002c86:	6063      	str	r3, [r4, #4]
 8002c88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	9321      	str	r3, [sp, #132]	; 0x84
 8002c8e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002c90:	3301      	adds	r3, #1
 8002c92:	2b07      	cmp	r3, #7
 8002c94:	9320      	str	r3, [sp, #128]	; 0x80
 8002c96:	f300 81da 	bgt.w	800304e <_svfprintf_r+0x96e>
 8002c9a:	3408      	adds	r4, #8
 8002c9c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002c9e:	b16b      	cbz	r3, 8002cbc <_svfprintf_r+0x5dc>
 8002ca0:	ab18      	add	r3, sp, #96	; 0x60
 8002ca2:	6023      	str	r3, [r4, #0]
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	6063      	str	r3, [r4, #4]
 8002ca8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002caa:	3302      	adds	r3, #2
 8002cac:	9321      	str	r3, [sp, #132]	; 0x84
 8002cae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	2b07      	cmp	r3, #7
 8002cb4:	9320      	str	r3, [sp, #128]	; 0x80
 8002cb6:	f300 81d4 	bgt.w	8003062 <_svfprintf_r+0x982>
 8002cba:	3408      	adds	r4, #8
 8002cbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002cbe:	2b80      	cmp	r3, #128	; 0x80
 8002cc0:	d114      	bne.n	8002cec <_svfprintf_r+0x60c>
 8002cc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002cc4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002cc6:	1a9b      	subs	r3, r3, r2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	dd0f      	ble.n	8002cec <_svfprintf_r+0x60c>
 8002ccc:	4a8c      	ldr	r2, [pc, #560]	; (8002f00 <_svfprintf_r+0x820>)
 8002cce:	6022      	str	r2, [r4, #0]
 8002cd0:	2b10      	cmp	r3, #16
 8002cd2:	f300 81d0 	bgt.w	8003076 <_svfprintf_r+0x996>
 8002cd6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002cd8:	6063      	str	r3, [r4, #4]
 8002cda:	4413      	add	r3, r2
 8002cdc:	9321      	str	r3, [sp, #132]	; 0x84
 8002cde:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	2b07      	cmp	r3, #7
 8002ce4:	9320      	str	r3, [sp, #128]	; 0x80
 8002ce6:	f300 81df 	bgt.w	80030a8 <_svfprintf_r+0x9c8>
 8002cea:	3408      	adds	r4, #8
 8002cec:	eba6 0609 	sub.w	r6, r6, r9
 8002cf0:	2e00      	cmp	r6, #0
 8002cf2:	dd0f      	ble.n	8002d14 <_svfprintf_r+0x634>
 8002cf4:	4b82      	ldr	r3, [pc, #520]	; (8002f00 <_svfprintf_r+0x820>)
 8002cf6:	6023      	str	r3, [r4, #0]
 8002cf8:	2e10      	cmp	r6, #16
 8002cfa:	f300 81df 	bgt.w	80030bc <_svfprintf_r+0x9dc>
 8002cfe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002d00:	9821      	ldr	r0, [sp, #132]	; 0x84
 8002d02:	6066      	str	r6, [r4, #4]
 8002d04:	3301      	adds	r3, #1
 8002d06:	4406      	add	r6, r0
 8002d08:	2b07      	cmp	r3, #7
 8002d0a:	9621      	str	r6, [sp, #132]	; 0x84
 8002d0c:	9320      	str	r3, [sp, #128]	; 0x80
 8002d0e:	f300 81ec 	bgt.w	80030ea <_svfprintf_r+0xa0a>
 8002d12:	3408      	adds	r4, #8
 8002d14:	05eb      	lsls	r3, r5, #23
 8002d16:	f100 81f2 	bmi.w	80030fe <_svfprintf_r+0xa1e>
 8002d1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002d1c:	e884 0300 	stmia.w	r4, {r8, r9}
 8002d20:	444b      	add	r3, r9
 8002d22:	9321      	str	r3, [sp, #132]	; 0x84
 8002d24:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002d26:	3301      	adds	r3, #1
 8002d28:	2b07      	cmp	r3, #7
 8002d2a:	9320      	str	r3, [sp, #128]	; 0x80
 8002d2c:	f340 8419 	ble.w	8003562 <_svfprintf_r+0xe82>
 8002d30:	aa1f      	add	r2, sp, #124	; 0x7c
 8002d32:	4651      	mov	r1, sl
 8002d34:	4658      	mov	r0, fp
 8002d36:	f002 f81d 	bl	8004d74 <__ssprint_r>
 8002d3a:	2800      	cmp	r0, #0
 8002d3c:	f040 8431 	bne.w	80035a2 <_svfprintf_r+0xec2>
 8002d40:	ac2c      	add	r4, sp, #176	; 0xb0
 8002d42:	076b      	lsls	r3, r5, #29
 8002d44:	f100 8410 	bmi.w	8003568 <_svfprintf_r+0xe88>
 8002d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002d4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002d4e:	428a      	cmp	r2, r1
 8002d50:	bfac      	ite	ge
 8002d52:	189b      	addge	r3, r3, r2
 8002d54:	185b      	addlt	r3, r3, r1
 8002d56:	9309      	str	r3, [sp, #36]	; 0x24
 8002d58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002d5a:	b13b      	cbz	r3, 8002d6c <_svfprintf_r+0x68c>
 8002d5c:	aa1f      	add	r2, sp, #124	; 0x7c
 8002d5e:	4651      	mov	r1, sl
 8002d60:	4658      	mov	r0, fp
 8002d62:	f002 f807 	bl	8004d74 <__ssprint_r>
 8002d66:	2800      	cmp	r0, #0
 8002d68:	f040 841b 	bne.w	80035a2 <_svfprintf_r+0xec2>
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	9320      	str	r3, [sp, #128]	; 0x80
 8002d70:	9f04      	ldr	r7, [sp, #16]
 8002d72:	ac2c      	add	r4, sp, #176	; 0xb0
 8002d74:	e4ee      	b.n	8002754 <_svfprintf_r+0x74>
 8002d76:	9b02      	ldr	r3, [sp, #8]
 8002d78:	2b65      	cmp	r3, #101	; 0x65
 8002d7a:	f77f af0b 	ble.w	8002b94 <_svfprintf_r+0x4b4>
 8002d7e:	9b02      	ldr	r3, [sp, #8]
 8002d80:	2b66      	cmp	r3, #102	; 0x66
 8002d82:	d124      	bne.n	8002dce <_svfprintf_r+0x6ee>
 8002d84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	dd19      	ble.n	8002dbe <_svfprintf_r+0x6de>
 8002d8a:	f1b9 0f00 	cmp.w	r9, #0
 8002d8e:	d101      	bne.n	8002d94 <_svfprintf_r+0x6b4>
 8002d90:	07ea      	lsls	r2, r5, #31
 8002d92:	d502      	bpl.n	8002d9a <_svfprintf_r+0x6ba>
 8002d94:	9a08      	ldr	r2, [sp, #32]
 8002d96:	4413      	add	r3, r2
 8002d98:	444b      	add	r3, r9
 8002d9a:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8002d9c:	4699      	mov	r9, r3
 8002d9e:	e735      	b.n	8002c0c <_svfprintf_r+0x52c>
 8002da0:	460a      	mov	r2, r1
 8002da2:	e70c      	b.n	8002bbe <_svfprintf_r+0x4de>
 8002da4:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002da8:	f803 1b01 	strb.w	r1, [r3], #1
 8002dac:	e71c      	b.n	8002be8 <_svfprintf_r+0x508>
 8002dae:	2230      	movs	r2, #48	; 0x30
 8002db0:	4413      	add	r3, r2
 8002db2:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8002db6:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8002dba:	a91c      	add	r1, sp, #112	; 0x70
 8002dbc:	e718      	b.n	8002bf0 <_svfprintf_r+0x510>
 8002dbe:	f1b9 0f00 	cmp.w	r9, #0
 8002dc2:	d101      	bne.n	8002dc8 <_svfprintf_r+0x6e8>
 8002dc4:	07eb      	lsls	r3, r5, #31
 8002dc6:	d515      	bpl.n	8002df4 <_svfprintf_r+0x714>
 8002dc8:	9b08      	ldr	r3, [sp, #32]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	e7e4      	b.n	8002d98 <_svfprintf_r+0x6b8>
 8002dce:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8002dd0:	9b03      	ldr	r3, [sp, #12]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	db06      	blt.n	8002de4 <_svfprintf_r+0x704>
 8002dd6:	07ef      	lsls	r7, r5, #31
 8002dd8:	d50e      	bpl.n	8002df8 <_svfprintf_r+0x718>
 8002dda:	9b08      	ldr	r3, [sp, #32]
 8002ddc:	4413      	add	r3, r2
 8002dde:	2267      	movs	r2, #103	; 0x67
 8002de0:	9202      	str	r2, [sp, #8]
 8002de2:	e7da      	b.n	8002d9a <_svfprintf_r+0x6ba>
 8002de4:	9b03      	ldr	r3, [sp, #12]
 8002de6:	9908      	ldr	r1, [sp, #32]
 8002de8:	2a00      	cmp	r2, #0
 8002dea:	440b      	add	r3, r1
 8002dec:	dcf7      	bgt.n	8002dde <_svfprintf_r+0x6fe>
 8002dee:	f1c2 0201 	rsb	r2, r2, #1
 8002df2:	e7f3      	b.n	8002ddc <_svfprintf_r+0x6fc>
 8002df4:	2301      	movs	r3, #1
 8002df6:	e7d0      	b.n	8002d9a <_svfprintf_r+0x6ba>
 8002df8:	4613      	mov	r3, r2
 8002dfa:	e7f0      	b.n	8002dde <_svfprintf_r+0x6fe>
 8002dfc:	b10b      	cbz	r3, 8002e02 <_svfprintf_r+0x722>
 8002dfe:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002e02:	f015 0f20 	tst.w	r5, #32
 8002e06:	f107 0304 	add.w	r3, r7, #4
 8002e0a:	d008      	beq.n	8002e1e <_svfprintf_r+0x73e>
 8002e0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	17ce      	asrs	r6, r1, #31
 8002e12:	4608      	mov	r0, r1
 8002e14:	4631      	mov	r1, r6
 8002e16:	e9c2 0100 	strd	r0, r1, [r2]
 8002e1a:	461f      	mov	r7, r3
 8002e1c:	e49a      	b.n	8002754 <_svfprintf_r+0x74>
 8002e1e:	06ee      	lsls	r6, r5, #27
 8002e20:	d503      	bpl.n	8002e2a <_svfprintf_r+0x74a>
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002e26:	6011      	str	r1, [r2, #0]
 8002e28:	e7f7      	b.n	8002e1a <_svfprintf_r+0x73a>
 8002e2a:	0668      	lsls	r0, r5, #25
 8002e2c:	d5f9      	bpl.n	8002e22 <_svfprintf_r+0x742>
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8002e34:	8011      	strh	r1, [r2, #0]
 8002e36:	e7f0      	b.n	8002e1a <_svfprintf_r+0x73a>
 8002e38:	f045 0510 	orr.w	r5, r5, #16
 8002e3c:	f015 0320 	ands.w	r3, r5, #32
 8002e40:	d022      	beq.n	8002e88 <_svfprintf_r+0x7a8>
 8002e42:	3707      	adds	r7, #7
 8002e44:	f027 0707 	bic.w	r7, r7, #7
 8002e48:	f107 0308 	add.w	r3, r7, #8
 8002e4c:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002e50:	9304      	str	r3, [sp, #16]
 8002e52:	2300      	movs	r3, #0
 8002e54:	2200      	movs	r2, #0
 8002e56:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002e5a:	f1b9 3fff 	cmp.w	r9, #4294967295
 8002e5e:	f000 83db 	beq.w	8003618 <_svfprintf_r+0xf38>
 8002e62:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 8002e66:	920b      	str	r2, [sp, #44]	; 0x2c
 8002e68:	ea56 0207 	orrs.w	r2, r6, r7
 8002e6c:	f040 83d9 	bne.w	8003622 <_svfprintf_r+0xf42>
 8002e70:	f1b9 0f00 	cmp.w	r9, #0
 8002e74:	f000 80aa 	beq.w	8002fcc <_svfprintf_r+0x8ec>
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d076      	beq.n	8002f6a <_svfprintf_r+0x88a>
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	f000 8091 	beq.w	8002fa4 <_svfprintf_r+0x8c4>
 8002e82:	2600      	movs	r6, #0
 8002e84:	2700      	movs	r7, #0
 8002e86:	e3d2      	b.n	800362e <_svfprintf_r+0xf4e>
 8002e88:	1d3a      	adds	r2, r7, #4
 8002e8a:	f015 0110 	ands.w	r1, r5, #16
 8002e8e:	9204      	str	r2, [sp, #16]
 8002e90:	d002      	beq.n	8002e98 <_svfprintf_r+0x7b8>
 8002e92:	683e      	ldr	r6, [r7, #0]
 8002e94:	2700      	movs	r7, #0
 8002e96:	e7dd      	b.n	8002e54 <_svfprintf_r+0x774>
 8002e98:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8002e9c:	d0f9      	beq.n	8002e92 <_svfprintf_r+0x7b2>
 8002e9e:	883e      	ldrh	r6, [r7, #0]
 8002ea0:	2700      	movs	r7, #0
 8002ea2:	e7d6      	b.n	8002e52 <_svfprintf_r+0x772>
 8002ea4:	1d3b      	adds	r3, r7, #4
 8002ea6:	9304      	str	r3, [sp, #16]
 8002ea8:	2330      	movs	r3, #48	; 0x30
 8002eaa:	2278      	movs	r2, #120	; 0x78
 8002eac:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8002eb0:	4b14      	ldr	r3, [pc, #80]	; (8002f04 <_svfprintf_r+0x824>)
 8002eb2:	683e      	ldr	r6, [r7, #0]
 8002eb4:	9311      	str	r3, [sp, #68]	; 0x44
 8002eb6:	2700      	movs	r7, #0
 8002eb8:	f045 0502 	orr.w	r5, r5, #2
 8002ebc:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	9202      	str	r2, [sp, #8]
 8002ec4:	e7c6      	b.n	8002e54 <_svfprintf_r+0x774>
 8002ec6:	1d3b      	adds	r3, r7, #4
 8002ec8:	2600      	movs	r6, #0
 8002eca:	f1b9 3fff 	cmp.w	r9, #4294967295
 8002ece:	9304      	str	r3, [sp, #16]
 8002ed0:	f8d7 8000 	ldr.w	r8, [r7]
 8002ed4:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8002ed8:	d00a      	beq.n	8002ef0 <_svfprintf_r+0x810>
 8002eda:	464a      	mov	r2, r9
 8002edc:	4631      	mov	r1, r6
 8002ede:	4640      	mov	r0, r8
 8002ee0:	f7fd f97e 	bl	80001e0 <memchr>
 8002ee4:	2800      	cmp	r0, #0
 8002ee6:	f000 808d 	beq.w	8003004 <_svfprintf_r+0x924>
 8002eea:	eba0 0908 	sub.w	r9, r0, r8
 8002eee:	e5cb      	b.n	8002a88 <_svfprintf_r+0x3a8>
 8002ef0:	4640      	mov	r0, r8
 8002ef2:	f7fd f96d 	bl	80001d0 <strlen>
 8002ef6:	4681      	mov	r9, r0
 8002ef8:	e5c6      	b.n	8002a88 <_svfprintf_r+0x3a8>
 8002efa:	bf00      	nop
 8002efc:	0800551c 	.word	0x0800551c
 8002f00:	0800552c 	.word	0x0800552c
 8002f04:	08005509 	.word	0x08005509
 8002f08:	f045 0510 	orr.w	r5, r5, #16
 8002f0c:	06a9      	lsls	r1, r5, #26
 8002f0e:	d509      	bpl.n	8002f24 <_svfprintf_r+0x844>
 8002f10:	3707      	adds	r7, #7
 8002f12:	f027 0707 	bic.w	r7, r7, #7
 8002f16:	f107 0308 	add.w	r3, r7, #8
 8002f1a:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002f1e:	9304      	str	r3, [sp, #16]
 8002f20:	2301      	movs	r3, #1
 8002f22:	e797      	b.n	8002e54 <_svfprintf_r+0x774>
 8002f24:	1d3b      	adds	r3, r7, #4
 8002f26:	f015 0f10 	tst.w	r5, #16
 8002f2a:	9304      	str	r3, [sp, #16]
 8002f2c:	d001      	beq.n	8002f32 <_svfprintf_r+0x852>
 8002f2e:	683e      	ldr	r6, [r7, #0]
 8002f30:	e002      	b.n	8002f38 <_svfprintf_r+0x858>
 8002f32:	066a      	lsls	r2, r5, #25
 8002f34:	d5fb      	bpl.n	8002f2e <_svfprintf_r+0x84e>
 8002f36:	883e      	ldrh	r6, [r7, #0]
 8002f38:	2700      	movs	r7, #0
 8002f3a:	e7f1      	b.n	8002f20 <_svfprintf_r+0x840>
 8002f3c:	b10b      	cbz	r3, 8002f42 <_svfprintf_r+0x862>
 8002f3e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002f42:	4ba3      	ldr	r3, [pc, #652]	; (80031d0 <_svfprintf_r+0xaf0>)
 8002f44:	e4c2      	b.n	80028cc <_svfprintf_r+0x1ec>
 8002f46:	1d3b      	adds	r3, r7, #4
 8002f48:	f015 0f10 	tst.w	r5, #16
 8002f4c:	9304      	str	r3, [sp, #16]
 8002f4e:	d001      	beq.n	8002f54 <_svfprintf_r+0x874>
 8002f50:	683e      	ldr	r6, [r7, #0]
 8002f52:	e002      	b.n	8002f5a <_svfprintf_r+0x87a>
 8002f54:	066e      	lsls	r6, r5, #25
 8002f56:	d5fb      	bpl.n	8002f50 <_svfprintf_r+0x870>
 8002f58:	883e      	ldrh	r6, [r7, #0]
 8002f5a:	2700      	movs	r7, #0
 8002f5c:	e4c2      	b.n	80028e4 <_svfprintf_r+0x204>
 8002f5e:	4643      	mov	r3, r8
 8002f60:	e366      	b.n	8003630 <_svfprintf_r+0xf50>
 8002f62:	2f00      	cmp	r7, #0
 8002f64:	bf08      	it	eq
 8002f66:	2e0a      	cmpeq	r6, #10
 8002f68:	d205      	bcs.n	8002f76 <_svfprintf_r+0x896>
 8002f6a:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8002f6e:	3630      	adds	r6, #48	; 0x30
 8002f70:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8002f74:	e377      	b.n	8003666 <_svfprintf_r+0xf86>
 8002f76:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8002f7a:	4630      	mov	r0, r6
 8002f7c:	4639      	mov	r1, r7
 8002f7e:	220a      	movs	r2, #10
 8002f80:	2300      	movs	r3, #0
 8002f82:	f7fd fe0d 	bl	8000ba0 <__aeabi_uldivmod>
 8002f86:	3230      	adds	r2, #48	; 0x30
 8002f88:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	4630      	mov	r0, r6
 8002f90:	4639      	mov	r1, r7
 8002f92:	220a      	movs	r2, #10
 8002f94:	f7fd fe04 	bl	8000ba0 <__aeabi_uldivmod>
 8002f98:	4606      	mov	r6, r0
 8002f9a:	460f      	mov	r7, r1
 8002f9c:	ea56 0307 	orrs.w	r3, r6, r7
 8002fa0:	d1eb      	bne.n	8002f7a <_svfprintf_r+0x89a>
 8002fa2:	e360      	b.n	8003666 <_svfprintf_r+0xf86>
 8002fa4:	2600      	movs	r6, #0
 8002fa6:	2700      	movs	r7, #0
 8002fa8:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8002fac:	f006 030f 	and.w	r3, r6, #15
 8002fb0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002fb2:	5cd3      	ldrb	r3, [r2, r3]
 8002fb4:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8002fb8:	0933      	lsrs	r3, r6, #4
 8002fba:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8002fbe:	093a      	lsrs	r2, r7, #4
 8002fc0:	461e      	mov	r6, r3
 8002fc2:	4617      	mov	r7, r2
 8002fc4:	ea56 0307 	orrs.w	r3, r6, r7
 8002fc8:	d1f0      	bne.n	8002fac <_svfprintf_r+0x8cc>
 8002fca:	e34c      	b.n	8003666 <_svfprintf_r+0xf86>
 8002fcc:	b93b      	cbnz	r3, 8002fde <_svfprintf_r+0x8fe>
 8002fce:	07ea      	lsls	r2, r5, #31
 8002fd0:	d505      	bpl.n	8002fde <_svfprintf_r+0x8fe>
 8002fd2:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8002fd6:	2330      	movs	r3, #48	; 0x30
 8002fd8:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8002fdc:	e343      	b.n	8003666 <_svfprintf_r+0xf86>
 8002fde:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8002fe2:	e340      	b.n	8003666 <_svfprintf_r+0xf86>
 8002fe4:	b10b      	cbz	r3, 8002fea <_svfprintf_r+0x90a>
 8002fe6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002fea:	9b02      	ldr	r3, [sp, #8]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 82f7 	beq.w	80035e0 <_svfprintf_r+0xf00>
 8002ff2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002ff6:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8002ffa:	2600      	movs	r6, #0
 8002ffc:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8003000:	9704      	str	r7, [sp, #16]
 8003002:	e4e8      	b.n	80029d6 <_svfprintf_r+0x2f6>
 8003004:	4606      	mov	r6, r0
 8003006:	e53f      	b.n	8002a88 <_svfprintf_r+0x3a8>
 8003008:	2310      	movs	r3, #16
 800300a:	6063      	str	r3, [r4, #4]
 800300c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800300e:	3310      	adds	r3, #16
 8003010:	9321      	str	r3, [sp, #132]	; 0x84
 8003012:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003014:	3301      	adds	r3, #1
 8003016:	2b07      	cmp	r3, #7
 8003018:	9320      	str	r3, [sp, #128]	; 0x80
 800301a:	dc04      	bgt.n	8003026 <_svfprintf_r+0x946>
 800301c:	3408      	adds	r4, #8
 800301e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003020:	3b10      	subs	r3, #16
 8003022:	930c      	str	r3, [sp, #48]	; 0x30
 8003024:	e615      	b.n	8002c52 <_svfprintf_r+0x572>
 8003026:	aa1f      	add	r2, sp, #124	; 0x7c
 8003028:	4651      	mov	r1, sl
 800302a:	4658      	mov	r0, fp
 800302c:	f001 fea2 	bl	8004d74 <__ssprint_r>
 8003030:	2800      	cmp	r0, #0
 8003032:	f040 82b6 	bne.w	80035a2 <_svfprintf_r+0xec2>
 8003036:	ac2c      	add	r4, sp, #176	; 0xb0
 8003038:	e7f1      	b.n	800301e <_svfprintf_r+0x93e>
 800303a:	aa1f      	add	r2, sp, #124	; 0x7c
 800303c:	4651      	mov	r1, sl
 800303e:	4658      	mov	r0, fp
 8003040:	f001 fe98 	bl	8004d74 <__ssprint_r>
 8003044:	2800      	cmp	r0, #0
 8003046:	f040 82ac 	bne.w	80035a2 <_svfprintf_r+0xec2>
 800304a:	ac2c      	add	r4, sp, #176	; 0xb0
 800304c:	e614      	b.n	8002c78 <_svfprintf_r+0x598>
 800304e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003050:	4651      	mov	r1, sl
 8003052:	4658      	mov	r0, fp
 8003054:	f001 fe8e 	bl	8004d74 <__ssprint_r>
 8003058:	2800      	cmp	r0, #0
 800305a:	f040 82a2 	bne.w	80035a2 <_svfprintf_r+0xec2>
 800305e:	ac2c      	add	r4, sp, #176	; 0xb0
 8003060:	e61c      	b.n	8002c9c <_svfprintf_r+0x5bc>
 8003062:	aa1f      	add	r2, sp, #124	; 0x7c
 8003064:	4651      	mov	r1, sl
 8003066:	4658      	mov	r0, fp
 8003068:	f001 fe84 	bl	8004d74 <__ssprint_r>
 800306c:	2800      	cmp	r0, #0
 800306e:	f040 8298 	bne.w	80035a2 <_svfprintf_r+0xec2>
 8003072:	ac2c      	add	r4, sp, #176	; 0xb0
 8003074:	e622      	b.n	8002cbc <_svfprintf_r+0x5dc>
 8003076:	2210      	movs	r2, #16
 8003078:	6062      	str	r2, [r4, #4]
 800307a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800307c:	3210      	adds	r2, #16
 800307e:	9221      	str	r2, [sp, #132]	; 0x84
 8003080:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003082:	3201      	adds	r2, #1
 8003084:	2a07      	cmp	r2, #7
 8003086:	9220      	str	r2, [sp, #128]	; 0x80
 8003088:	dc02      	bgt.n	8003090 <_svfprintf_r+0x9b0>
 800308a:	3408      	adds	r4, #8
 800308c:	3b10      	subs	r3, #16
 800308e:	e61d      	b.n	8002ccc <_svfprintf_r+0x5ec>
 8003090:	aa1f      	add	r2, sp, #124	; 0x7c
 8003092:	4651      	mov	r1, sl
 8003094:	4658      	mov	r0, fp
 8003096:	930c      	str	r3, [sp, #48]	; 0x30
 8003098:	f001 fe6c 	bl	8004d74 <__ssprint_r>
 800309c:	2800      	cmp	r0, #0
 800309e:	f040 8280 	bne.w	80035a2 <_svfprintf_r+0xec2>
 80030a2:	ac2c      	add	r4, sp, #176	; 0xb0
 80030a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80030a6:	e7f1      	b.n	800308c <_svfprintf_r+0x9ac>
 80030a8:	aa1f      	add	r2, sp, #124	; 0x7c
 80030aa:	4651      	mov	r1, sl
 80030ac:	4658      	mov	r0, fp
 80030ae:	f001 fe61 	bl	8004d74 <__ssprint_r>
 80030b2:	2800      	cmp	r0, #0
 80030b4:	f040 8275 	bne.w	80035a2 <_svfprintf_r+0xec2>
 80030b8:	ac2c      	add	r4, sp, #176	; 0xb0
 80030ba:	e617      	b.n	8002cec <_svfprintf_r+0x60c>
 80030bc:	2310      	movs	r3, #16
 80030be:	6063      	str	r3, [r4, #4]
 80030c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80030c2:	3310      	adds	r3, #16
 80030c4:	9321      	str	r3, [sp, #132]	; 0x84
 80030c6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80030c8:	3301      	adds	r3, #1
 80030ca:	2b07      	cmp	r3, #7
 80030cc:	9320      	str	r3, [sp, #128]	; 0x80
 80030ce:	dc02      	bgt.n	80030d6 <_svfprintf_r+0x9f6>
 80030d0:	3408      	adds	r4, #8
 80030d2:	3e10      	subs	r6, #16
 80030d4:	e60e      	b.n	8002cf4 <_svfprintf_r+0x614>
 80030d6:	aa1f      	add	r2, sp, #124	; 0x7c
 80030d8:	4651      	mov	r1, sl
 80030da:	4658      	mov	r0, fp
 80030dc:	f001 fe4a 	bl	8004d74 <__ssprint_r>
 80030e0:	2800      	cmp	r0, #0
 80030e2:	f040 825e 	bne.w	80035a2 <_svfprintf_r+0xec2>
 80030e6:	ac2c      	add	r4, sp, #176	; 0xb0
 80030e8:	e7f3      	b.n	80030d2 <_svfprintf_r+0x9f2>
 80030ea:	aa1f      	add	r2, sp, #124	; 0x7c
 80030ec:	4651      	mov	r1, sl
 80030ee:	4658      	mov	r0, fp
 80030f0:	f001 fe40 	bl	8004d74 <__ssprint_r>
 80030f4:	2800      	cmp	r0, #0
 80030f6:	f040 8254 	bne.w	80035a2 <_svfprintf_r+0xec2>
 80030fa:	ac2c      	add	r4, sp, #176	; 0xb0
 80030fc:	e60a      	b.n	8002d14 <_svfprintf_r+0x634>
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	2b65      	cmp	r3, #101	; 0x65
 8003102:	f340 81a9 	ble.w	8003458 <_svfprintf_r+0xd78>
 8003106:	2200      	movs	r2, #0
 8003108:	2300      	movs	r3, #0
 800310a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800310e:	f7fd fcd7 	bl	8000ac0 <__aeabi_dcmpeq>
 8003112:	2800      	cmp	r0, #0
 8003114:	d062      	beq.n	80031dc <_svfprintf_r+0xafc>
 8003116:	4b2f      	ldr	r3, [pc, #188]	; (80031d4 <_svfprintf_r+0xaf4>)
 8003118:	6023      	str	r3, [r4, #0]
 800311a:	2301      	movs	r3, #1
 800311c:	6063      	str	r3, [r4, #4]
 800311e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003120:	3301      	adds	r3, #1
 8003122:	9321      	str	r3, [sp, #132]	; 0x84
 8003124:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003126:	3301      	adds	r3, #1
 8003128:	2b07      	cmp	r3, #7
 800312a:	9320      	str	r3, [sp, #128]	; 0x80
 800312c:	dc25      	bgt.n	800317a <_svfprintf_r+0xa9a>
 800312e:	3408      	adds	r4, #8
 8003130:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003132:	9a03      	ldr	r2, [sp, #12]
 8003134:	4293      	cmp	r3, r2
 8003136:	db02      	blt.n	800313e <_svfprintf_r+0xa5e>
 8003138:	07ee      	lsls	r6, r5, #31
 800313a:	f57f ae02 	bpl.w	8002d42 <_svfprintf_r+0x662>
 800313e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003140:	6023      	str	r3, [r4, #0]
 8003142:	9b08      	ldr	r3, [sp, #32]
 8003144:	6063      	str	r3, [r4, #4]
 8003146:	9a08      	ldr	r2, [sp, #32]
 8003148:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800314a:	4413      	add	r3, r2
 800314c:	9321      	str	r3, [sp, #132]	; 0x84
 800314e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003150:	3301      	adds	r3, #1
 8003152:	2b07      	cmp	r3, #7
 8003154:	9320      	str	r3, [sp, #128]	; 0x80
 8003156:	dc1a      	bgt.n	800318e <_svfprintf_r+0xaae>
 8003158:	3408      	adds	r4, #8
 800315a:	9b03      	ldr	r3, [sp, #12]
 800315c:	1e5e      	subs	r6, r3, #1
 800315e:	2e00      	cmp	r6, #0
 8003160:	f77f adef 	ble.w	8002d42 <_svfprintf_r+0x662>
 8003164:	4f1c      	ldr	r7, [pc, #112]	; (80031d8 <_svfprintf_r+0xaf8>)
 8003166:	f04f 0810 	mov.w	r8, #16
 800316a:	2e10      	cmp	r6, #16
 800316c:	6027      	str	r7, [r4, #0]
 800316e:	dc18      	bgt.n	80031a2 <_svfprintf_r+0xac2>
 8003170:	6066      	str	r6, [r4, #4]
 8003172:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003174:	441e      	add	r6, r3
 8003176:	9621      	str	r6, [sp, #132]	; 0x84
 8003178:	e5d4      	b.n	8002d24 <_svfprintf_r+0x644>
 800317a:	aa1f      	add	r2, sp, #124	; 0x7c
 800317c:	4651      	mov	r1, sl
 800317e:	4658      	mov	r0, fp
 8003180:	f001 fdf8 	bl	8004d74 <__ssprint_r>
 8003184:	2800      	cmp	r0, #0
 8003186:	f040 820c 	bne.w	80035a2 <_svfprintf_r+0xec2>
 800318a:	ac2c      	add	r4, sp, #176	; 0xb0
 800318c:	e7d0      	b.n	8003130 <_svfprintf_r+0xa50>
 800318e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003190:	4651      	mov	r1, sl
 8003192:	4658      	mov	r0, fp
 8003194:	f001 fdee 	bl	8004d74 <__ssprint_r>
 8003198:	2800      	cmp	r0, #0
 800319a:	f040 8202 	bne.w	80035a2 <_svfprintf_r+0xec2>
 800319e:	ac2c      	add	r4, sp, #176	; 0xb0
 80031a0:	e7db      	b.n	800315a <_svfprintf_r+0xa7a>
 80031a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80031a4:	f8c4 8004 	str.w	r8, [r4, #4]
 80031a8:	3310      	adds	r3, #16
 80031aa:	9321      	str	r3, [sp, #132]	; 0x84
 80031ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80031ae:	3301      	adds	r3, #1
 80031b0:	2b07      	cmp	r3, #7
 80031b2:	9320      	str	r3, [sp, #128]	; 0x80
 80031b4:	dc02      	bgt.n	80031bc <_svfprintf_r+0xadc>
 80031b6:	3408      	adds	r4, #8
 80031b8:	3e10      	subs	r6, #16
 80031ba:	e7d6      	b.n	800316a <_svfprintf_r+0xa8a>
 80031bc:	aa1f      	add	r2, sp, #124	; 0x7c
 80031be:	4651      	mov	r1, sl
 80031c0:	4658      	mov	r0, fp
 80031c2:	f001 fdd7 	bl	8004d74 <__ssprint_r>
 80031c6:	2800      	cmp	r0, #0
 80031c8:	f040 81eb 	bne.w	80035a2 <_svfprintf_r+0xec2>
 80031cc:	ac2c      	add	r4, sp, #176	; 0xb0
 80031ce:	e7f3      	b.n	80031b8 <_svfprintf_r+0xad8>
 80031d0:	08005509 	.word	0x08005509
 80031d4:	0800551a 	.word	0x0800551a
 80031d8:	0800552c 	.word	0x0800552c
 80031dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80031de:	2b00      	cmp	r3, #0
 80031e0:	dc7a      	bgt.n	80032d8 <_svfprintf_r+0xbf8>
 80031e2:	4b9b      	ldr	r3, [pc, #620]	; (8003450 <_svfprintf_r+0xd70>)
 80031e4:	6023      	str	r3, [r4, #0]
 80031e6:	2301      	movs	r3, #1
 80031e8:	6063      	str	r3, [r4, #4]
 80031ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80031ec:	3301      	adds	r3, #1
 80031ee:	9321      	str	r3, [sp, #132]	; 0x84
 80031f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80031f2:	3301      	adds	r3, #1
 80031f4:	2b07      	cmp	r3, #7
 80031f6:	9320      	str	r3, [sp, #128]	; 0x80
 80031f8:	dc44      	bgt.n	8003284 <_svfprintf_r+0xba4>
 80031fa:	3408      	adds	r4, #8
 80031fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80031fe:	b923      	cbnz	r3, 800320a <_svfprintf_r+0xb2a>
 8003200:	9b03      	ldr	r3, [sp, #12]
 8003202:	b913      	cbnz	r3, 800320a <_svfprintf_r+0xb2a>
 8003204:	07e8      	lsls	r0, r5, #31
 8003206:	f57f ad9c 	bpl.w	8002d42 <_svfprintf_r+0x662>
 800320a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800320c:	6023      	str	r3, [r4, #0]
 800320e:	9b08      	ldr	r3, [sp, #32]
 8003210:	6063      	str	r3, [r4, #4]
 8003212:	9a08      	ldr	r2, [sp, #32]
 8003214:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003216:	4413      	add	r3, r2
 8003218:	9321      	str	r3, [sp, #132]	; 0x84
 800321a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800321c:	3301      	adds	r3, #1
 800321e:	2b07      	cmp	r3, #7
 8003220:	9320      	str	r3, [sp, #128]	; 0x80
 8003222:	dc39      	bgt.n	8003298 <_svfprintf_r+0xbb8>
 8003224:	f104 0308 	add.w	r3, r4, #8
 8003228:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800322a:	2e00      	cmp	r6, #0
 800322c:	da19      	bge.n	8003262 <_svfprintf_r+0xb82>
 800322e:	4f89      	ldr	r7, [pc, #548]	; (8003454 <_svfprintf_r+0xd74>)
 8003230:	4276      	negs	r6, r6
 8003232:	2410      	movs	r4, #16
 8003234:	2e10      	cmp	r6, #16
 8003236:	601f      	str	r7, [r3, #0]
 8003238:	dc38      	bgt.n	80032ac <_svfprintf_r+0xbcc>
 800323a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800323c:	605e      	str	r6, [r3, #4]
 800323e:	4416      	add	r6, r2
 8003240:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003242:	9621      	str	r6, [sp, #132]	; 0x84
 8003244:	3201      	adds	r2, #1
 8003246:	2a07      	cmp	r2, #7
 8003248:	f103 0308 	add.w	r3, r3, #8
 800324c:	9220      	str	r2, [sp, #128]	; 0x80
 800324e:	dd08      	ble.n	8003262 <_svfprintf_r+0xb82>
 8003250:	aa1f      	add	r2, sp, #124	; 0x7c
 8003252:	4651      	mov	r1, sl
 8003254:	4658      	mov	r0, fp
 8003256:	f001 fd8d 	bl	8004d74 <__ssprint_r>
 800325a:	2800      	cmp	r0, #0
 800325c:	f040 81a1 	bne.w	80035a2 <_svfprintf_r+0xec2>
 8003260:	ab2c      	add	r3, sp, #176	; 0xb0
 8003262:	9a03      	ldr	r2, [sp, #12]
 8003264:	605a      	str	r2, [r3, #4]
 8003266:	9903      	ldr	r1, [sp, #12]
 8003268:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800326a:	f8c3 8000 	str.w	r8, [r3]
 800326e:	440a      	add	r2, r1
 8003270:	9221      	str	r2, [sp, #132]	; 0x84
 8003272:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003274:	3201      	adds	r2, #1
 8003276:	2a07      	cmp	r2, #7
 8003278:	9220      	str	r2, [sp, #128]	; 0x80
 800327a:	f73f ad59 	bgt.w	8002d30 <_svfprintf_r+0x650>
 800327e:	f103 0408 	add.w	r4, r3, #8
 8003282:	e55e      	b.n	8002d42 <_svfprintf_r+0x662>
 8003284:	aa1f      	add	r2, sp, #124	; 0x7c
 8003286:	4651      	mov	r1, sl
 8003288:	4658      	mov	r0, fp
 800328a:	f001 fd73 	bl	8004d74 <__ssprint_r>
 800328e:	2800      	cmp	r0, #0
 8003290:	f040 8187 	bne.w	80035a2 <_svfprintf_r+0xec2>
 8003294:	ac2c      	add	r4, sp, #176	; 0xb0
 8003296:	e7b1      	b.n	80031fc <_svfprintf_r+0xb1c>
 8003298:	aa1f      	add	r2, sp, #124	; 0x7c
 800329a:	4651      	mov	r1, sl
 800329c:	4658      	mov	r0, fp
 800329e:	f001 fd69 	bl	8004d74 <__ssprint_r>
 80032a2:	2800      	cmp	r0, #0
 80032a4:	f040 817d 	bne.w	80035a2 <_svfprintf_r+0xec2>
 80032a8:	ab2c      	add	r3, sp, #176	; 0xb0
 80032aa:	e7bd      	b.n	8003228 <_svfprintf_r+0xb48>
 80032ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80032ae:	605c      	str	r4, [r3, #4]
 80032b0:	3210      	adds	r2, #16
 80032b2:	9221      	str	r2, [sp, #132]	; 0x84
 80032b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80032b6:	3201      	adds	r2, #1
 80032b8:	2a07      	cmp	r2, #7
 80032ba:	9220      	str	r2, [sp, #128]	; 0x80
 80032bc:	dc02      	bgt.n	80032c4 <_svfprintf_r+0xbe4>
 80032be:	3308      	adds	r3, #8
 80032c0:	3e10      	subs	r6, #16
 80032c2:	e7b7      	b.n	8003234 <_svfprintf_r+0xb54>
 80032c4:	aa1f      	add	r2, sp, #124	; 0x7c
 80032c6:	4651      	mov	r1, sl
 80032c8:	4658      	mov	r0, fp
 80032ca:	f001 fd53 	bl	8004d74 <__ssprint_r>
 80032ce:	2800      	cmp	r0, #0
 80032d0:	f040 8167 	bne.w	80035a2 <_svfprintf_r+0xec2>
 80032d4:	ab2c      	add	r3, sp, #176	; 0xb0
 80032d6:	e7f3      	b.n	80032c0 <_svfprintf_r+0xbe0>
 80032d8:	9b03      	ldr	r3, [sp, #12]
 80032da:	42bb      	cmp	r3, r7
 80032dc:	bfa8      	it	ge
 80032de:	463b      	movge	r3, r7
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	461e      	mov	r6, r3
 80032e4:	dd0b      	ble.n	80032fe <_svfprintf_r+0xc1e>
 80032e6:	6063      	str	r3, [r4, #4]
 80032e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80032ea:	f8c4 8000 	str.w	r8, [r4]
 80032ee:	4433      	add	r3, r6
 80032f0:	9321      	str	r3, [sp, #132]	; 0x84
 80032f2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80032f4:	3301      	adds	r3, #1
 80032f6:	2b07      	cmp	r3, #7
 80032f8:	9320      	str	r3, [sp, #128]	; 0x80
 80032fa:	dc5f      	bgt.n	80033bc <_svfprintf_r+0xcdc>
 80032fc:	3408      	adds	r4, #8
 80032fe:	2e00      	cmp	r6, #0
 8003300:	bfac      	ite	ge
 8003302:	1bbe      	subge	r6, r7, r6
 8003304:	463e      	movlt	r6, r7
 8003306:	2e00      	cmp	r6, #0
 8003308:	dd0f      	ble.n	800332a <_svfprintf_r+0xc4a>
 800330a:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8003454 <_svfprintf_r+0xd74>
 800330e:	f8c4 9000 	str.w	r9, [r4]
 8003312:	2e10      	cmp	r6, #16
 8003314:	dc5c      	bgt.n	80033d0 <_svfprintf_r+0xcf0>
 8003316:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003318:	6066      	str	r6, [r4, #4]
 800331a:	441e      	add	r6, r3
 800331c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800331e:	9621      	str	r6, [sp, #132]	; 0x84
 8003320:	3301      	adds	r3, #1
 8003322:	2b07      	cmp	r3, #7
 8003324:	9320      	str	r3, [sp, #128]	; 0x80
 8003326:	dc6a      	bgt.n	80033fe <_svfprintf_r+0xd1e>
 8003328:	3408      	adds	r4, #8
 800332a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800332c:	9a03      	ldr	r2, [sp, #12]
 800332e:	4293      	cmp	r3, r2
 8003330:	db01      	blt.n	8003336 <_svfprintf_r+0xc56>
 8003332:	07e9      	lsls	r1, r5, #31
 8003334:	d50d      	bpl.n	8003352 <_svfprintf_r+0xc72>
 8003336:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003338:	6023      	str	r3, [r4, #0]
 800333a:	9b08      	ldr	r3, [sp, #32]
 800333c:	6063      	str	r3, [r4, #4]
 800333e:	9a08      	ldr	r2, [sp, #32]
 8003340:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003342:	4413      	add	r3, r2
 8003344:	9321      	str	r3, [sp, #132]	; 0x84
 8003346:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003348:	3301      	adds	r3, #1
 800334a:	2b07      	cmp	r3, #7
 800334c:	9320      	str	r3, [sp, #128]	; 0x80
 800334e:	dc60      	bgt.n	8003412 <_svfprintf_r+0xd32>
 8003350:	3408      	adds	r4, #8
 8003352:	9b03      	ldr	r3, [sp, #12]
 8003354:	9a03      	ldr	r2, [sp, #12]
 8003356:	1bde      	subs	r6, r3, r7
 8003358:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	429e      	cmp	r6, r3
 800335e:	bfa8      	it	ge
 8003360:	461e      	movge	r6, r3
 8003362:	2e00      	cmp	r6, #0
 8003364:	dd0b      	ble.n	800337e <_svfprintf_r+0xc9e>
 8003366:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003368:	6066      	str	r6, [r4, #4]
 800336a:	4433      	add	r3, r6
 800336c:	9321      	str	r3, [sp, #132]	; 0x84
 800336e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003370:	3301      	adds	r3, #1
 8003372:	4447      	add	r7, r8
 8003374:	2b07      	cmp	r3, #7
 8003376:	6027      	str	r7, [r4, #0]
 8003378:	9320      	str	r3, [sp, #128]	; 0x80
 800337a:	dc54      	bgt.n	8003426 <_svfprintf_r+0xd46>
 800337c:	3408      	adds	r4, #8
 800337e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003380:	9a03      	ldr	r2, [sp, #12]
 8003382:	2e00      	cmp	r6, #0
 8003384:	eba2 0303 	sub.w	r3, r2, r3
 8003388:	bfac      	ite	ge
 800338a:	1b9e      	subge	r6, r3, r6
 800338c:	461e      	movlt	r6, r3
 800338e:	2e00      	cmp	r6, #0
 8003390:	f77f acd7 	ble.w	8002d42 <_svfprintf_r+0x662>
 8003394:	4f2f      	ldr	r7, [pc, #188]	; (8003454 <_svfprintf_r+0xd74>)
 8003396:	f04f 0810 	mov.w	r8, #16
 800339a:	2e10      	cmp	r6, #16
 800339c:	6027      	str	r7, [r4, #0]
 800339e:	f77f aee7 	ble.w	8003170 <_svfprintf_r+0xa90>
 80033a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80033a4:	f8c4 8004 	str.w	r8, [r4, #4]
 80033a8:	3310      	adds	r3, #16
 80033aa:	9321      	str	r3, [sp, #132]	; 0x84
 80033ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80033ae:	3301      	adds	r3, #1
 80033b0:	2b07      	cmp	r3, #7
 80033b2:	9320      	str	r3, [sp, #128]	; 0x80
 80033b4:	dc41      	bgt.n	800343a <_svfprintf_r+0xd5a>
 80033b6:	3408      	adds	r4, #8
 80033b8:	3e10      	subs	r6, #16
 80033ba:	e7ee      	b.n	800339a <_svfprintf_r+0xcba>
 80033bc:	aa1f      	add	r2, sp, #124	; 0x7c
 80033be:	4651      	mov	r1, sl
 80033c0:	4658      	mov	r0, fp
 80033c2:	f001 fcd7 	bl	8004d74 <__ssprint_r>
 80033c6:	2800      	cmp	r0, #0
 80033c8:	f040 80eb 	bne.w	80035a2 <_svfprintf_r+0xec2>
 80033cc:	ac2c      	add	r4, sp, #176	; 0xb0
 80033ce:	e796      	b.n	80032fe <_svfprintf_r+0xc1e>
 80033d0:	2310      	movs	r3, #16
 80033d2:	6063      	str	r3, [r4, #4]
 80033d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80033d6:	3310      	adds	r3, #16
 80033d8:	9321      	str	r3, [sp, #132]	; 0x84
 80033da:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80033dc:	3301      	adds	r3, #1
 80033de:	2b07      	cmp	r3, #7
 80033e0:	9320      	str	r3, [sp, #128]	; 0x80
 80033e2:	dc02      	bgt.n	80033ea <_svfprintf_r+0xd0a>
 80033e4:	3408      	adds	r4, #8
 80033e6:	3e10      	subs	r6, #16
 80033e8:	e791      	b.n	800330e <_svfprintf_r+0xc2e>
 80033ea:	aa1f      	add	r2, sp, #124	; 0x7c
 80033ec:	4651      	mov	r1, sl
 80033ee:	4658      	mov	r0, fp
 80033f0:	f001 fcc0 	bl	8004d74 <__ssprint_r>
 80033f4:	2800      	cmp	r0, #0
 80033f6:	f040 80d4 	bne.w	80035a2 <_svfprintf_r+0xec2>
 80033fa:	ac2c      	add	r4, sp, #176	; 0xb0
 80033fc:	e7f3      	b.n	80033e6 <_svfprintf_r+0xd06>
 80033fe:	aa1f      	add	r2, sp, #124	; 0x7c
 8003400:	4651      	mov	r1, sl
 8003402:	4658      	mov	r0, fp
 8003404:	f001 fcb6 	bl	8004d74 <__ssprint_r>
 8003408:	2800      	cmp	r0, #0
 800340a:	f040 80ca 	bne.w	80035a2 <_svfprintf_r+0xec2>
 800340e:	ac2c      	add	r4, sp, #176	; 0xb0
 8003410:	e78b      	b.n	800332a <_svfprintf_r+0xc4a>
 8003412:	aa1f      	add	r2, sp, #124	; 0x7c
 8003414:	4651      	mov	r1, sl
 8003416:	4658      	mov	r0, fp
 8003418:	f001 fcac 	bl	8004d74 <__ssprint_r>
 800341c:	2800      	cmp	r0, #0
 800341e:	f040 80c0 	bne.w	80035a2 <_svfprintf_r+0xec2>
 8003422:	ac2c      	add	r4, sp, #176	; 0xb0
 8003424:	e795      	b.n	8003352 <_svfprintf_r+0xc72>
 8003426:	aa1f      	add	r2, sp, #124	; 0x7c
 8003428:	4651      	mov	r1, sl
 800342a:	4658      	mov	r0, fp
 800342c:	f001 fca2 	bl	8004d74 <__ssprint_r>
 8003430:	2800      	cmp	r0, #0
 8003432:	f040 80b6 	bne.w	80035a2 <_svfprintf_r+0xec2>
 8003436:	ac2c      	add	r4, sp, #176	; 0xb0
 8003438:	e7a1      	b.n	800337e <_svfprintf_r+0xc9e>
 800343a:	aa1f      	add	r2, sp, #124	; 0x7c
 800343c:	4651      	mov	r1, sl
 800343e:	4658      	mov	r0, fp
 8003440:	f001 fc98 	bl	8004d74 <__ssprint_r>
 8003444:	2800      	cmp	r0, #0
 8003446:	f040 80ac 	bne.w	80035a2 <_svfprintf_r+0xec2>
 800344a:	ac2c      	add	r4, sp, #176	; 0xb0
 800344c:	e7b4      	b.n	80033b8 <_svfprintf_r+0xcd8>
 800344e:	bf00      	nop
 8003450:	0800551a 	.word	0x0800551a
 8003454:	0800552c 	.word	0x0800552c
 8003458:	9b03      	ldr	r3, [sp, #12]
 800345a:	2b01      	cmp	r3, #1
 800345c:	dc01      	bgt.n	8003462 <_svfprintf_r+0xd82>
 800345e:	07ea      	lsls	r2, r5, #31
 8003460:	d576      	bpl.n	8003550 <_svfprintf_r+0xe70>
 8003462:	2301      	movs	r3, #1
 8003464:	6063      	str	r3, [r4, #4]
 8003466:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003468:	f8c4 8000 	str.w	r8, [r4]
 800346c:	3301      	adds	r3, #1
 800346e:	9321      	str	r3, [sp, #132]	; 0x84
 8003470:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003472:	3301      	adds	r3, #1
 8003474:	2b07      	cmp	r3, #7
 8003476:	9320      	str	r3, [sp, #128]	; 0x80
 8003478:	dc36      	bgt.n	80034e8 <_svfprintf_r+0xe08>
 800347a:	3408      	adds	r4, #8
 800347c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800347e:	6023      	str	r3, [r4, #0]
 8003480:	9b08      	ldr	r3, [sp, #32]
 8003482:	6063      	str	r3, [r4, #4]
 8003484:	9a08      	ldr	r2, [sp, #32]
 8003486:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003488:	4413      	add	r3, r2
 800348a:	9321      	str	r3, [sp, #132]	; 0x84
 800348c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800348e:	3301      	adds	r3, #1
 8003490:	2b07      	cmp	r3, #7
 8003492:	9320      	str	r3, [sp, #128]	; 0x80
 8003494:	dc31      	bgt.n	80034fa <_svfprintf_r+0xe1a>
 8003496:	3408      	adds	r4, #8
 8003498:	2300      	movs	r3, #0
 800349a:	2200      	movs	r2, #0
 800349c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80034a0:	f7fd fb0e 	bl	8000ac0 <__aeabi_dcmpeq>
 80034a4:	9b03      	ldr	r3, [sp, #12]
 80034a6:	1e5e      	subs	r6, r3, #1
 80034a8:	2800      	cmp	r0, #0
 80034aa:	d12f      	bne.n	800350c <_svfprintf_r+0xe2c>
 80034ac:	f108 0301 	add.w	r3, r8, #1
 80034b0:	e884 0048 	stmia.w	r4, {r3, r6}
 80034b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80034b6:	9a03      	ldr	r2, [sp, #12]
 80034b8:	3b01      	subs	r3, #1
 80034ba:	4413      	add	r3, r2
 80034bc:	9321      	str	r3, [sp, #132]	; 0x84
 80034be:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80034c0:	3301      	adds	r3, #1
 80034c2:	2b07      	cmp	r3, #7
 80034c4:	9320      	str	r3, [sp, #128]	; 0x80
 80034c6:	dd4a      	ble.n	800355e <_svfprintf_r+0xe7e>
 80034c8:	aa1f      	add	r2, sp, #124	; 0x7c
 80034ca:	4651      	mov	r1, sl
 80034cc:	4658      	mov	r0, fp
 80034ce:	f001 fc51 	bl	8004d74 <__ssprint_r>
 80034d2:	2800      	cmp	r0, #0
 80034d4:	d165      	bne.n	80035a2 <_svfprintf_r+0xec2>
 80034d6:	ac2c      	add	r4, sp, #176	; 0xb0
 80034d8:	ab1b      	add	r3, sp, #108	; 0x6c
 80034da:	6023      	str	r3, [r4, #0]
 80034dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80034de:	6063      	str	r3, [r4, #4]
 80034e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80034e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80034e4:	4413      	add	r3, r2
 80034e6:	e41c      	b.n	8002d22 <_svfprintf_r+0x642>
 80034e8:	aa1f      	add	r2, sp, #124	; 0x7c
 80034ea:	4651      	mov	r1, sl
 80034ec:	4658      	mov	r0, fp
 80034ee:	f001 fc41 	bl	8004d74 <__ssprint_r>
 80034f2:	2800      	cmp	r0, #0
 80034f4:	d155      	bne.n	80035a2 <_svfprintf_r+0xec2>
 80034f6:	ac2c      	add	r4, sp, #176	; 0xb0
 80034f8:	e7c0      	b.n	800347c <_svfprintf_r+0xd9c>
 80034fa:	aa1f      	add	r2, sp, #124	; 0x7c
 80034fc:	4651      	mov	r1, sl
 80034fe:	4658      	mov	r0, fp
 8003500:	f001 fc38 	bl	8004d74 <__ssprint_r>
 8003504:	2800      	cmp	r0, #0
 8003506:	d14c      	bne.n	80035a2 <_svfprintf_r+0xec2>
 8003508:	ac2c      	add	r4, sp, #176	; 0xb0
 800350a:	e7c5      	b.n	8003498 <_svfprintf_r+0xdb8>
 800350c:	2e00      	cmp	r6, #0
 800350e:	dde3      	ble.n	80034d8 <_svfprintf_r+0xdf8>
 8003510:	4f59      	ldr	r7, [pc, #356]	; (8003678 <_svfprintf_r+0xf98>)
 8003512:	f04f 0810 	mov.w	r8, #16
 8003516:	2e10      	cmp	r6, #16
 8003518:	6027      	str	r7, [r4, #0]
 800351a:	dc04      	bgt.n	8003526 <_svfprintf_r+0xe46>
 800351c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800351e:	6066      	str	r6, [r4, #4]
 8003520:	441e      	add	r6, r3
 8003522:	9621      	str	r6, [sp, #132]	; 0x84
 8003524:	e7cb      	b.n	80034be <_svfprintf_r+0xdde>
 8003526:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003528:	f8c4 8004 	str.w	r8, [r4, #4]
 800352c:	3310      	adds	r3, #16
 800352e:	9321      	str	r3, [sp, #132]	; 0x84
 8003530:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003532:	3301      	adds	r3, #1
 8003534:	2b07      	cmp	r3, #7
 8003536:	9320      	str	r3, [sp, #128]	; 0x80
 8003538:	dc02      	bgt.n	8003540 <_svfprintf_r+0xe60>
 800353a:	3408      	adds	r4, #8
 800353c:	3e10      	subs	r6, #16
 800353e:	e7ea      	b.n	8003516 <_svfprintf_r+0xe36>
 8003540:	aa1f      	add	r2, sp, #124	; 0x7c
 8003542:	4651      	mov	r1, sl
 8003544:	4658      	mov	r0, fp
 8003546:	f001 fc15 	bl	8004d74 <__ssprint_r>
 800354a:	bb50      	cbnz	r0, 80035a2 <_svfprintf_r+0xec2>
 800354c:	ac2c      	add	r4, sp, #176	; 0xb0
 800354e:	e7f5      	b.n	800353c <_svfprintf_r+0xe5c>
 8003550:	2301      	movs	r3, #1
 8003552:	6063      	str	r3, [r4, #4]
 8003554:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003556:	f8c4 8000 	str.w	r8, [r4]
 800355a:	3301      	adds	r3, #1
 800355c:	e7ae      	b.n	80034bc <_svfprintf_r+0xddc>
 800355e:	3408      	adds	r4, #8
 8003560:	e7ba      	b.n	80034d8 <_svfprintf_r+0xdf8>
 8003562:	3408      	adds	r4, #8
 8003564:	f7ff bbed 	b.w	8002d42 <_svfprintf_r+0x662>
 8003568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800356a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800356c:	1a9d      	subs	r5, r3, r2
 800356e:	2d00      	cmp	r5, #0
 8003570:	f77f abea 	ble.w	8002d48 <_svfprintf_r+0x668>
 8003574:	2610      	movs	r6, #16
 8003576:	4b41      	ldr	r3, [pc, #260]	; (800367c <_svfprintf_r+0xf9c>)
 8003578:	6023      	str	r3, [r4, #0]
 800357a:	2d10      	cmp	r5, #16
 800357c:	dc1b      	bgt.n	80035b6 <_svfprintf_r+0xed6>
 800357e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003580:	6065      	str	r5, [r4, #4]
 8003582:	441d      	add	r5, r3
 8003584:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003586:	9521      	str	r5, [sp, #132]	; 0x84
 8003588:	3301      	adds	r3, #1
 800358a:	2b07      	cmp	r3, #7
 800358c:	9320      	str	r3, [sp, #128]	; 0x80
 800358e:	f77f abdb 	ble.w	8002d48 <_svfprintf_r+0x668>
 8003592:	aa1f      	add	r2, sp, #124	; 0x7c
 8003594:	4651      	mov	r1, sl
 8003596:	4658      	mov	r0, fp
 8003598:	f001 fbec 	bl	8004d74 <__ssprint_r>
 800359c:	2800      	cmp	r0, #0
 800359e:	f43f abd3 	beq.w	8002d48 <_svfprintf_r+0x668>
 80035a2:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80035a6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80035aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035ac:	bf18      	it	ne
 80035ae:	f04f 33ff 	movne.w	r3, #4294967295
 80035b2:	f7ff b8b9 	b.w	8002728 <_svfprintf_r+0x48>
 80035b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80035b8:	6066      	str	r6, [r4, #4]
 80035ba:	3310      	adds	r3, #16
 80035bc:	9321      	str	r3, [sp, #132]	; 0x84
 80035be:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80035c0:	3301      	adds	r3, #1
 80035c2:	2b07      	cmp	r3, #7
 80035c4:	9320      	str	r3, [sp, #128]	; 0x80
 80035c6:	dc02      	bgt.n	80035ce <_svfprintf_r+0xeee>
 80035c8:	3408      	adds	r4, #8
 80035ca:	3d10      	subs	r5, #16
 80035cc:	e7d3      	b.n	8003576 <_svfprintf_r+0xe96>
 80035ce:	aa1f      	add	r2, sp, #124	; 0x7c
 80035d0:	4651      	mov	r1, sl
 80035d2:	4658      	mov	r0, fp
 80035d4:	f001 fbce 	bl	8004d74 <__ssprint_r>
 80035d8:	2800      	cmp	r0, #0
 80035da:	d1e2      	bne.n	80035a2 <_svfprintf_r+0xec2>
 80035dc:	ac2c      	add	r4, sp, #176	; 0xb0
 80035de:	e7f4      	b.n	80035ca <_svfprintf_r+0xeea>
 80035e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d0dd      	beq.n	80035a2 <_svfprintf_r+0xec2>
 80035e6:	aa1f      	add	r2, sp, #124	; 0x7c
 80035e8:	4651      	mov	r1, sl
 80035ea:	4658      	mov	r0, fp
 80035ec:	f001 fbc2 	bl	8004d74 <__ssprint_r>
 80035f0:	e7d7      	b.n	80035a2 <_svfprintf_r+0xec2>
 80035f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80035f6:	4610      	mov	r0, r2
 80035f8:	4619      	mov	r1, r3
 80035fa:	f7fd fa93 	bl	8000b24 <__aeabi_dcmpun>
 80035fe:	2800      	cmp	r0, #0
 8003600:	f43f aa44 	beq.w	8002a8c <_svfprintf_r+0x3ac>
 8003604:	4b1e      	ldr	r3, [pc, #120]	; (8003680 <_svfprintf_r+0xfa0>)
 8003606:	4a1f      	ldr	r2, [pc, #124]	; (8003684 <_svfprintf_r+0xfa4>)
 8003608:	f7ff ba34 	b.w	8002a74 <_svfprintf_r+0x394>
 800360c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800360e:	eba3 0308 	sub.w	r3, r3, r8
 8003612:	9303      	str	r3, [sp, #12]
 8003614:	f7ff bab5 	b.w	8002b82 <_svfprintf_r+0x4a2>
 8003618:	ea56 0207 	orrs.w	r2, r6, r7
 800361c:	950b      	str	r5, [sp, #44]	; 0x2c
 800361e:	f43f ac2b 	beq.w	8002e78 <_svfprintf_r+0x798>
 8003622:	2b01      	cmp	r3, #1
 8003624:	f43f ac9d 	beq.w	8002f62 <_svfprintf_r+0x882>
 8003628:	2b02      	cmp	r3, #2
 800362a:	f43f acbd 	beq.w	8002fa8 <_svfprintf_r+0x8c8>
 800362e:	ab2c      	add	r3, sp, #176	; 0xb0
 8003630:	08f1      	lsrs	r1, r6, #3
 8003632:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8003636:	08f8      	lsrs	r0, r7, #3
 8003638:	f006 0207 	and.w	r2, r6, #7
 800363c:	4607      	mov	r7, r0
 800363e:	460e      	mov	r6, r1
 8003640:	3230      	adds	r2, #48	; 0x30
 8003642:	ea56 0107 	orrs.w	r1, r6, r7
 8003646:	f103 38ff 	add.w	r8, r3, #4294967295
 800364a:	f803 2c01 	strb.w	r2, [r3, #-1]
 800364e:	f47f ac86 	bne.w	8002f5e <_svfprintf_r+0x87e>
 8003652:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003654:	07c9      	lsls	r1, r1, #31
 8003656:	d506      	bpl.n	8003666 <_svfprintf_r+0xf86>
 8003658:	2a30      	cmp	r2, #48	; 0x30
 800365a:	d004      	beq.n	8003666 <_svfprintf_r+0xf86>
 800365c:	2230      	movs	r2, #48	; 0x30
 800365e:	f808 2c01 	strb.w	r2, [r8, #-1]
 8003662:	f1a3 0802 	sub.w	r8, r3, #2
 8003666:	464e      	mov	r6, r9
 8003668:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 800366c:	eba9 0908 	sub.w	r9, r9, r8
 8003670:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003672:	2700      	movs	r7, #0
 8003674:	f7ff bad1 	b.w	8002c1a <_svfprintf_r+0x53a>
 8003678:	0800552c 	.word	0x0800552c
 800367c:	0800551c 	.word	0x0800551c
 8003680:	080054f0 	.word	0x080054f0
 8003684:	080054f4 	.word	0x080054f4

08003688 <quorem>:
 8003688:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800368c:	6903      	ldr	r3, [r0, #16]
 800368e:	690c      	ldr	r4, [r1, #16]
 8003690:	429c      	cmp	r4, r3
 8003692:	4680      	mov	r8, r0
 8003694:	f300 8082 	bgt.w	800379c <quorem+0x114>
 8003698:	3c01      	subs	r4, #1
 800369a:	f101 0714 	add.w	r7, r1, #20
 800369e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80036a2:	f100 0614 	add.w	r6, r0, #20
 80036a6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80036aa:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80036ae:	eb06 030e 	add.w	r3, r6, lr
 80036b2:	3501      	adds	r5, #1
 80036b4:	eb07 090e 	add.w	r9, r7, lr
 80036b8:	9301      	str	r3, [sp, #4]
 80036ba:	fbb0 f5f5 	udiv	r5, r0, r5
 80036be:	b395      	cbz	r5, 8003726 <quorem+0x9e>
 80036c0:	f04f 0a00 	mov.w	sl, #0
 80036c4:	4638      	mov	r0, r7
 80036c6:	46b4      	mov	ip, r6
 80036c8:	46d3      	mov	fp, sl
 80036ca:	f850 2b04 	ldr.w	r2, [r0], #4
 80036ce:	b293      	uxth	r3, r2
 80036d0:	fb05 a303 	mla	r3, r5, r3, sl
 80036d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80036d8:	b29b      	uxth	r3, r3
 80036da:	ebab 0303 	sub.w	r3, fp, r3
 80036de:	0c12      	lsrs	r2, r2, #16
 80036e0:	f8bc b000 	ldrh.w	fp, [ip]
 80036e4:	fb05 a202 	mla	r2, r5, r2, sl
 80036e8:	fa13 f38b 	uxtah	r3, r3, fp
 80036ec:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80036f0:	fa1f fb82 	uxth.w	fp, r2
 80036f4:	f8dc 2000 	ldr.w	r2, [ip]
 80036f8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80036fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003700:	b29b      	uxth	r3, r3
 8003702:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003706:	4581      	cmp	r9, r0
 8003708:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800370c:	f84c 3b04 	str.w	r3, [ip], #4
 8003710:	d2db      	bcs.n	80036ca <quorem+0x42>
 8003712:	f856 300e 	ldr.w	r3, [r6, lr]
 8003716:	b933      	cbnz	r3, 8003726 <quorem+0x9e>
 8003718:	9b01      	ldr	r3, [sp, #4]
 800371a:	3b04      	subs	r3, #4
 800371c:	429e      	cmp	r6, r3
 800371e:	461a      	mov	r2, r3
 8003720:	d330      	bcc.n	8003784 <quorem+0xfc>
 8003722:	f8c8 4010 	str.w	r4, [r8, #16]
 8003726:	4640      	mov	r0, r8
 8003728:	f001 fa4d 	bl	8004bc6 <__mcmp>
 800372c:	2800      	cmp	r0, #0
 800372e:	db25      	blt.n	800377c <quorem+0xf4>
 8003730:	3501      	adds	r5, #1
 8003732:	4630      	mov	r0, r6
 8003734:	f04f 0e00 	mov.w	lr, #0
 8003738:	f857 2b04 	ldr.w	r2, [r7], #4
 800373c:	f8d0 c000 	ldr.w	ip, [r0]
 8003740:	b293      	uxth	r3, r2
 8003742:	ebae 0303 	sub.w	r3, lr, r3
 8003746:	0c12      	lsrs	r2, r2, #16
 8003748:	fa13 f38c 	uxtah	r3, r3, ip
 800374c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003750:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003754:	b29b      	uxth	r3, r3
 8003756:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800375a:	45b9      	cmp	r9, r7
 800375c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8003760:	f840 3b04 	str.w	r3, [r0], #4
 8003764:	d2e8      	bcs.n	8003738 <quorem+0xb0>
 8003766:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800376a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800376e:	b92a      	cbnz	r2, 800377c <quorem+0xf4>
 8003770:	3b04      	subs	r3, #4
 8003772:	429e      	cmp	r6, r3
 8003774:	461a      	mov	r2, r3
 8003776:	d30b      	bcc.n	8003790 <quorem+0x108>
 8003778:	f8c8 4010 	str.w	r4, [r8, #16]
 800377c:	4628      	mov	r0, r5
 800377e:	b003      	add	sp, #12
 8003780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003784:	6812      	ldr	r2, [r2, #0]
 8003786:	3b04      	subs	r3, #4
 8003788:	2a00      	cmp	r2, #0
 800378a:	d1ca      	bne.n	8003722 <quorem+0x9a>
 800378c:	3c01      	subs	r4, #1
 800378e:	e7c5      	b.n	800371c <quorem+0x94>
 8003790:	6812      	ldr	r2, [r2, #0]
 8003792:	3b04      	subs	r3, #4
 8003794:	2a00      	cmp	r2, #0
 8003796:	d1ef      	bne.n	8003778 <quorem+0xf0>
 8003798:	3c01      	subs	r4, #1
 800379a:	e7ea      	b.n	8003772 <quorem+0xea>
 800379c:	2000      	movs	r0, #0
 800379e:	e7ee      	b.n	800377e <quorem+0xf6>

080037a0 <_dtoa_r>:
 80037a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037a4:	ec57 6b10 	vmov	r6, r7, d0
 80037a8:	b097      	sub	sp, #92	; 0x5c
 80037aa:	e9cd 6700 	strd	r6, r7, [sp]
 80037ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80037b0:	9107      	str	r1, [sp, #28]
 80037b2:	4604      	mov	r4, r0
 80037b4:	920a      	str	r2, [sp, #40]	; 0x28
 80037b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80037b8:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80037ba:	b93e      	cbnz	r6, 80037cc <_dtoa_r+0x2c>
 80037bc:	2010      	movs	r0, #16
 80037be:	f000 fdcb 	bl	8004358 <malloc>
 80037c2:	6260      	str	r0, [r4, #36]	; 0x24
 80037c4:	6046      	str	r6, [r0, #4]
 80037c6:	6086      	str	r6, [r0, #8]
 80037c8:	6006      	str	r6, [r0, #0]
 80037ca:	60c6      	str	r6, [r0, #12]
 80037cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037ce:	6819      	ldr	r1, [r3, #0]
 80037d0:	b151      	cbz	r1, 80037e8 <_dtoa_r+0x48>
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	604a      	str	r2, [r1, #4]
 80037d6:	2301      	movs	r3, #1
 80037d8:	4093      	lsls	r3, r2
 80037da:	608b      	str	r3, [r1, #8]
 80037dc:	4620      	mov	r0, r4
 80037de:	f001 f81d 	bl	800481c <_Bfree>
 80037e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	9b01      	ldr	r3, [sp, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	bfbf      	itttt	lt
 80037ee:	2301      	movlt	r3, #1
 80037f0:	602b      	strlt	r3, [r5, #0]
 80037f2:	9b01      	ldrlt	r3, [sp, #4]
 80037f4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80037f8:	bfb2      	itee	lt
 80037fa:	9301      	strlt	r3, [sp, #4]
 80037fc:	2300      	movge	r3, #0
 80037fe:	602b      	strge	r3, [r5, #0]
 8003800:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003804:	4ba8      	ldr	r3, [pc, #672]	; (8003aa8 <_dtoa_r+0x308>)
 8003806:	ea33 0308 	bics.w	r3, r3, r8
 800380a:	d11b      	bne.n	8003844 <_dtoa_r+0xa4>
 800380c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800380e:	f242 730f 	movw	r3, #9999	; 0x270f
 8003812:	6013      	str	r3, [r2, #0]
 8003814:	9b00      	ldr	r3, [sp, #0]
 8003816:	b923      	cbnz	r3, 8003822 <_dtoa_r+0x82>
 8003818:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800381c:	2800      	cmp	r0, #0
 800381e:	f000 8578 	beq.w	8004312 <_dtoa_r+0xb72>
 8003822:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003824:	b953      	cbnz	r3, 800383c <_dtoa_r+0x9c>
 8003826:	4ba1      	ldr	r3, [pc, #644]	; (8003aac <_dtoa_r+0x30c>)
 8003828:	e021      	b.n	800386e <_dtoa_r+0xce>
 800382a:	4ba1      	ldr	r3, [pc, #644]	; (8003ab0 <_dtoa_r+0x310>)
 800382c:	9302      	str	r3, [sp, #8]
 800382e:	3308      	adds	r3, #8
 8003830:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003832:	6013      	str	r3, [r2, #0]
 8003834:	9802      	ldr	r0, [sp, #8]
 8003836:	b017      	add	sp, #92	; 0x5c
 8003838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800383c:	4b9b      	ldr	r3, [pc, #620]	; (8003aac <_dtoa_r+0x30c>)
 800383e:	9302      	str	r3, [sp, #8]
 8003840:	3303      	adds	r3, #3
 8003842:	e7f5      	b.n	8003830 <_dtoa_r+0x90>
 8003844:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003848:	2200      	movs	r2, #0
 800384a:	2300      	movs	r3, #0
 800384c:	4630      	mov	r0, r6
 800384e:	4639      	mov	r1, r7
 8003850:	f7fd f936 	bl	8000ac0 <__aeabi_dcmpeq>
 8003854:	4681      	mov	r9, r0
 8003856:	b160      	cbz	r0, 8003872 <_dtoa_r+0xd2>
 8003858:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800385a:	2301      	movs	r3, #1
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 8553 	beq.w	800430c <_dtoa_r+0xb6c>
 8003866:	4b93      	ldr	r3, [pc, #588]	; (8003ab4 <_dtoa_r+0x314>)
 8003868:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800386a:	6013      	str	r3, [r2, #0]
 800386c:	3b01      	subs	r3, #1
 800386e:	9302      	str	r3, [sp, #8]
 8003870:	e7e0      	b.n	8003834 <_dtoa_r+0x94>
 8003872:	aa14      	add	r2, sp, #80	; 0x50
 8003874:	a915      	add	r1, sp, #84	; 0x54
 8003876:	ec47 6b10 	vmov	d0, r6, r7
 800387a:	4620      	mov	r0, r4
 800387c:	f001 fa1b 	bl	8004cb6 <__d2b>
 8003880:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003884:	4682      	mov	sl, r0
 8003886:	2d00      	cmp	r5, #0
 8003888:	d07e      	beq.n	8003988 <_dtoa_r+0x1e8>
 800388a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800388e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003892:	4630      	mov	r0, r6
 8003894:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003898:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800389c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 80038a0:	2200      	movs	r2, #0
 80038a2:	4b85      	ldr	r3, [pc, #532]	; (8003ab8 <_dtoa_r+0x318>)
 80038a4:	f7fc fcf0 	bl	8000288 <__aeabi_dsub>
 80038a8:	a379      	add	r3, pc, #484	; (adr r3, 8003a90 <_dtoa_r+0x2f0>)
 80038aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ae:	f7fc fe9f 	bl	80005f0 <__aeabi_dmul>
 80038b2:	a379      	add	r3, pc, #484	; (adr r3, 8003a98 <_dtoa_r+0x2f8>)
 80038b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b8:	f7fc fce8 	bl	800028c <__adddf3>
 80038bc:	4606      	mov	r6, r0
 80038be:	4628      	mov	r0, r5
 80038c0:	460f      	mov	r7, r1
 80038c2:	f7fc fe2f 	bl	8000524 <__aeabi_i2d>
 80038c6:	a376      	add	r3, pc, #472	; (adr r3, 8003aa0 <_dtoa_r+0x300>)
 80038c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038cc:	f7fc fe90 	bl	80005f0 <__aeabi_dmul>
 80038d0:	4602      	mov	r2, r0
 80038d2:	460b      	mov	r3, r1
 80038d4:	4630      	mov	r0, r6
 80038d6:	4639      	mov	r1, r7
 80038d8:	f7fc fcd8 	bl	800028c <__adddf3>
 80038dc:	4606      	mov	r6, r0
 80038de:	460f      	mov	r7, r1
 80038e0:	f7fd f936 	bl	8000b50 <__aeabi_d2iz>
 80038e4:	2200      	movs	r2, #0
 80038e6:	4683      	mov	fp, r0
 80038e8:	2300      	movs	r3, #0
 80038ea:	4630      	mov	r0, r6
 80038ec:	4639      	mov	r1, r7
 80038ee:	f7fd f8f1 	bl	8000ad4 <__aeabi_dcmplt>
 80038f2:	b158      	cbz	r0, 800390c <_dtoa_r+0x16c>
 80038f4:	4658      	mov	r0, fp
 80038f6:	f7fc fe15 	bl	8000524 <__aeabi_i2d>
 80038fa:	4602      	mov	r2, r0
 80038fc:	460b      	mov	r3, r1
 80038fe:	4630      	mov	r0, r6
 8003900:	4639      	mov	r1, r7
 8003902:	f7fd f8dd 	bl	8000ac0 <__aeabi_dcmpeq>
 8003906:	b908      	cbnz	r0, 800390c <_dtoa_r+0x16c>
 8003908:	f10b 3bff 	add.w	fp, fp, #4294967295
 800390c:	f1bb 0f16 	cmp.w	fp, #22
 8003910:	d859      	bhi.n	80039c6 <_dtoa_r+0x226>
 8003912:	496a      	ldr	r1, [pc, #424]	; (8003abc <_dtoa_r+0x31c>)
 8003914:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8003918:	e9dd 2300 	ldrd	r2, r3, [sp]
 800391c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003920:	f7fd f8f6 	bl	8000b10 <__aeabi_dcmpgt>
 8003924:	2800      	cmp	r0, #0
 8003926:	d050      	beq.n	80039ca <_dtoa_r+0x22a>
 8003928:	f10b 3bff 	add.w	fp, fp, #4294967295
 800392c:	2300      	movs	r3, #0
 800392e:	930e      	str	r3, [sp, #56]	; 0x38
 8003930:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003932:	1b5d      	subs	r5, r3, r5
 8003934:	1e6b      	subs	r3, r5, #1
 8003936:	9306      	str	r3, [sp, #24]
 8003938:	bf45      	ittet	mi
 800393a:	f1c5 0301 	rsbmi	r3, r5, #1
 800393e:	9305      	strmi	r3, [sp, #20]
 8003940:	2300      	movpl	r3, #0
 8003942:	2300      	movmi	r3, #0
 8003944:	bf4c      	ite	mi
 8003946:	9306      	strmi	r3, [sp, #24]
 8003948:	9305      	strpl	r3, [sp, #20]
 800394a:	f1bb 0f00 	cmp.w	fp, #0
 800394e:	db3e      	blt.n	80039ce <_dtoa_r+0x22e>
 8003950:	9b06      	ldr	r3, [sp, #24]
 8003952:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8003956:	445b      	add	r3, fp
 8003958:	9306      	str	r3, [sp, #24]
 800395a:	2300      	movs	r3, #0
 800395c:	9308      	str	r3, [sp, #32]
 800395e:	9b07      	ldr	r3, [sp, #28]
 8003960:	2b09      	cmp	r3, #9
 8003962:	f200 80af 	bhi.w	8003ac4 <_dtoa_r+0x324>
 8003966:	2b05      	cmp	r3, #5
 8003968:	bfc4      	itt	gt
 800396a:	3b04      	subgt	r3, #4
 800396c:	9307      	strgt	r3, [sp, #28]
 800396e:	9b07      	ldr	r3, [sp, #28]
 8003970:	f1a3 0302 	sub.w	r3, r3, #2
 8003974:	bfcc      	ite	gt
 8003976:	2600      	movgt	r6, #0
 8003978:	2601      	movle	r6, #1
 800397a:	2b03      	cmp	r3, #3
 800397c:	f200 80ae 	bhi.w	8003adc <_dtoa_r+0x33c>
 8003980:	e8df f003 	tbb	[pc, r3]
 8003984:	772f8482 	.word	0x772f8482
 8003988:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800398a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800398c:	441d      	add	r5, r3
 800398e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003992:	2b20      	cmp	r3, #32
 8003994:	dd11      	ble.n	80039ba <_dtoa_r+0x21a>
 8003996:	9a00      	ldr	r2, [sp, #0]
 8003998:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800399c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80039a0:	fa22 f000 	lsr.w	r0, r2, r0
 80039a4:	fa08 f303 	lsl.w	r3, r8, r3
 80039a8:	4318      	orrs	r0, r3
 80039aa:	f7fc fdab 	bl	8000504 <__aeabi_ui2d>
 80039ae:	2301      	movs	r3, #1
 80039b0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80039b4:	3d01      	subs	r5, #1
 80039b6:	9312      	str	r3, [sp, #72]	; 0x48
 80039b8:	e772      	b.n	80038a0 <_dtoa_r+0x100>
 80039ba:	f1c3 0020 	rsb	r0, r3, #32
 80039be:	9b00      	ldr	r3, [sp, #0]
 80039c0:	fa03 f000 	lsl.w	r0, r3, r0
 80039c4:	e7f1      	b.n	80039aa <_dtoa_r+0x20a>
 80039c6:	2301      	movs	r3, #1
 80039c8:	e7b1      	b.n	800392e <_dtoa_r+0x18e>
 80039ca:	900e      	str	r0, [sp, #56]	; 0x38
 80039cc:	e7b0      	b.n	8003930 <_dtoa_r+0x190>
 80039ce:	9b05      	ldr	r3, [sp, #20]
 80039d0:	eba3 030b 	sub.w	r3, r3, fp
 80039d4:	9305      	str	r3, [sp, #20]
 80039d6:	f1cb 0300 	rsb	r3, fp, #0
 80039da:	9308      	str	r3, [sp, #32]
 80039dc:	2300      	movs	r3, #0
 80039de:	930b      	str	r3, [sp, #44]	; 0x2c
 80039e0:	e7bd      	b.n	800395e <_dtoa_r+0x1be>
 80039e2:	2301      	movs	r3, #1
 80039e4:	9309      	str	r3, [sp, #36]	; 0x24
 80039e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	dd7a      	ble.n	8003ae2 <_dtoa_r+0x342>
 80039ec:	9304      	str	r3, [sp, #16]
 80039ee:	9303      	str	r3, [sp, #12]
 80039f0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80039f2:	2200      	movs	r2, #0
 80039f4:	606a      	str	r2, [r5, #4]
 80039f6:	2104      	movs	r1, #4
 80039f8:	f101 0214 	add.w	r2, r1, #20
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d975      	bls.n	8003aec <_dtoa_r+0x34c>
 8003a00:	6869      	ldr	r1, [r5, #4]
 8003a02:	4620      	mov	r0, r4
 8003a04:	f000 fed6 	bl	80047b4 <_Balloc>
 8003a08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a0a:	6028      	str	r0, [r5, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	9302      	str	r3, [sp, #8]
 8003a10:	9b03      	ldr	r3, [sp, #12]
 8003a12:	2b0e      	cmp	r3, #14
 8003a14:	f200 80e5 	bhi.w	8003be2 <_dtoa_r+0x442>
 8003a18:	2e00      	cmp	r6, #0
 8003a1a:	f000 80e2 	beq.w	8003be2 <_dtoa_r+0x442>
 8003a1e:	ed9d 7b00 	vldr	d7, [sp]
 8003a22:	f1bb 0f00 	cmp.w	fp, #0
 8003a26:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8003a2a:	dd74      	ble.n	8003b16 <_dtoa_r+0x376>
 8003a2c:	4a23      	ldr	r2, [pc, #140]	; (8003abc <_dtoa_r+0x31c>)
 8003a2e:	f00b 030f 	and.w	r3, fp, #15
 8003a32:	ea4f 162b 	mov.w	r6, fp, asr #4
 8003a36:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003a3a:	06f0      	lsls	r0, r6, #27
 8003a3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003a40:	d559      	bpl.n	8003af6 <_dtoa_r+0x356>
 8003a42:	4b1f      	ldr	r3, [pc, #124]	; (8003ac0 <_dtoa_r+0x320>)
 8003a44:	ec51 0b17 	vmov	r0, r1, d7
 8003a48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003a4c:	f7fc fefa 	bl	8000844 <__aeabi_ddiv>
 8003a50:	e9cd 0100 	strd	r0, r1, [sp]
 8003a54:	f006 060f 	and.w	r6, r6, #15
 8003a58:	2503      	movs	r5, #3
 8003a5a:	4f19      	ldr	r7, [pc, #100]	; (8003ac0 <_dtoa_r+0x320>)
 8003a5c:	2e00      	cmp	r6, #0
 8003a5e:	d14c      	bne.n	8003afa <_dtoa_r+0x35a>
 8003a60:	4642      	mov	r2, r8
 8003a62:	464b      	mov	r3, r9
 8003a64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003a68:	f7fc feec 	bl	8000844 <__aeabi_ddiv>
 8003a6c:	e9cd 0100 	strd	r0, r1, [sp]
 8003a70:	e06a      	b.n	8003b48 <_dtoa_r+0x3a8>
 8003a72:	2301      	movs	r3, #1
 8003a74:	9309      	str	r3, [sp, #36]	; 0x24
 8003a76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a78:	445b      	add	r3, fp
 8003a7a:	9304      	str	r3, [sp, #16]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	9303      	str	r3, [sp, #12]
 8003a82:	bfb8      	it	lt
 8003a84:	2301      	movlt	r3, #1
 8003a86:	e7b3      	b.n	80039f0 <_dtoa_r+0x250>
 8003a88:	2300      	movs	r3, #0
 8003a8a:	e7ab      	b.n	80039e4 <_dtoa_r+0x244>
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	e7f1      	b.n	8003a74 <_dtoa_r+0x2d4>
 8003a90:	636f4361 	.word	0x636f4361
 8003a94:	3fd287a7 	.word	0x3fd287a7
 8003a98:	8b60c8b3 	.word	0x8b60c8b3
 8003a9c:	3fc68a28 	.word	0x3fc68a28
 8003aa0:	509f79fb 	.word	0x509f79fb
 8003aa4:	3fd34413 	.word	0x3fd34413
 8003aa8:	7ff00000 	.word	0x7ff00000
 8003aac:	08005545 	.word	0x08005545
 8003ab0:	0800553c 	.word	0x0800553c
 8003ab4:	0800551b 	.word	0x0800551b
 8003ab8:	3ff80000 	.word	0x3ff80000
 8003abc:	08005578 	.word	0x08005578
 8003ac0:	08005550 	.word	0x08005550
 8003ac4:	2601      	movs	r6, #1
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	9307      	str	r3, [sp, #28]
 8003aca:	9609      	str	r6, [sp, #36]	; 0x24
 8003acc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad0:	9304      	str	r3, [sp, #16]
 8003ad2:	9303      	str	r3, [sp, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	2312      	movs	r3, #18
 8003ad8:	920a      	str	r2, [sp, #40]	; 0x28
 8003ada:	e789      	b.n	80039f0 <_dtoa_r+0x250>
 8003adc:	2301      	movs	r3, #1
 8003ade:	9309      	str	r3, [sp, #36]	; 0x24
 8003ae0:	e7f4      	b.n	8003acc <_dtoa_r+0x32c>
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	9304      	str	r3, [sp, #16]
 8003ae6:	9303      	str	r3, [sp, #12]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	e7f5      	b.n	8003ad8 <_dtoa_r+0x338>
 8003aec:	686a      	ldr	r2, [r5, #4]
 8003aee:	3201      	adds	r2, #1
 8003af0:	606a      	str	r2, [r5, #4]
 8003af2:	0049      	lsls	r1, r1, #1
 8003af4:	e780      	b.n	80039f8 <_dtoa_r+0x258>
 8003af6:	2502      	movs	r5, #2
 8003af8:	e7af      	b.n	8003a5a <_dtoa_r+0x2ba>
 8003afa:	07f1      	lsls	r1, r6, #31
 8003afc:	d508      	bpl.n	8003b10 <_dtoa_r+0x370>
 8003afe:	4640      	mov	r0, r8
 8003b00:	4649      	mov	r1, r9
 8003b02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b06:	f7fc fd73 	bl	80005f0 <__aeabi_dmul>
 8003b0a:	3501      	adds	r5, #1
 8003b0c:	4680      	mov	r8, r0
 8003b0e:	4689      	mov	r9, r1
 8003b10:	1076      	asrs	r6, r6, #1
 8003b12:	3708      	adds	r7, #8
 8003b14:	e7a2      	b.n	8003a5c <_dtoa_r+0x2bc>
 8003b16:	f000 809d 	beq.w	8003c54 <_dtoa_r+0x4b4>
 8003b1a:	f1cb 0600 	rsb	r6, fp, #0
 8003b1e:	4b9f      	ldr	r3, [pc, #636]	; (8003d9c <_dtoa_r+0x5fc>)
 8003b20:	4f9f      	ldr	r7, [pc, #636]	; (8003da0 <_dtoa_r+0x600>)
 8003b22:	f006 020f 	and.w	r2, r6, #15
 8003b26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003b32:	f7fc fd5d 	bl	80005f0 <__aeabi_dmul>
 8003b36:	e9cd 0100 	strd	r0, r1, [sp]
 8003b3a:	1136      	asrs	r6, r6, #4
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	2502      	movs	r5, #2
 8003b40:	2e00      	cmp	r6, #0
 8003b42:	d17c      	bne.n	8003c3e <_dtoa_r+0x49e>
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d191      	bne.n	8003a6c <_dtoa_r+0x2cc>
 8003b48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 8084 	beq.w	8003c58 <_dtoa_r+0x4b8>
 8003b50:	e9dd 8900 	ldrd	r8, r9, [sp]
 8003b54:	2200      	movs	r2, #0
 8003b56:	4b93      	ldr	r3, [pc, #588]	; (8003da4 <_dtoa_r+0x604>)
 8003b58:	4640      	mov	r0, r8
 8003b5a:	4649      	mov	r1, r9
 8003b5c:	f7fc ffba 	bl	8000ad4 <__aeabi_dcmplt>
 8003b60:	2800      	cmp	r0, #0
 8003b62:	d079      	beq.n	8003c58 <_dtoa_r+0x4b8>
 8003b64:	9b03      	ldr	r3, [sp, #12]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d076      	beq.n	8003c58 <_dtoa_r+0x4b8>
 8003b6a:	9b04      	ldr	r3, [sp, #16]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	dd34      	ble.n	8003bda <_dtoa_r+0x43a>
 8003b70:	2200      	movs	r2, #0
 8003b72:	4b8d      	ldr	r3, [pc, #564]	; (8003da8 <_dtoa_r+0x608>)
 8003b74:	4640      	mov	r0, r8
 8003b76:	4649      	mov	r1, r9
 8003b78:	f7fc fd3a 	bl	80005f0 <__aeabi_dmul>
 8003b7c:	e9cd 0100 	strd	r0, r1, [sp]
 8003b80:	9e04      	ldr	r6, [sp, #16]
 8003b82:	f10b 37ff 	add.w	r7, fp, #4294967295
 8003b86:	3501      	adds	r5, #1
 8003b88:	4628      	mov	r0, r5
 8003b8a:	f7fc fccb 	bl	8000524 <__aeabi_i2d>
 8003b8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003b92:	f7fc fd2d 	bl	80005f0 <__aeabi_dmul>
 8003b96:	2200      	movs	r2, #0
 8003b98:	4b84      	ldr	r3, [pc, #528]	; (8003dac <_dtoa_r+0x60c>)
 8003b9a:	f7fc fb77 	bl	800028c <__adddf3>
 8003b9e:	4680      	mov	r8, r0
 8003ba0:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8003ba4:	2e00      	cmp	r6, #0
 8003ba6:	d15a      	bne.n	8003c5e <_dtoa_r+0x4be>
 8003ba8:	2200      	movs	r2, #0
 8003baa:	4b81      	ldr	r3, [pc, #516]	; (8003db0 <_dtoa_r+0x610>)
 8003bac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003bb0:	f7fc fb6a 	bl	8000288 <__aeabi_dsub>
 8003bb4:	4642      	mov	r2, r8
 8003bb6:	464b      	mov	r3, r9
 8003bb8:	e9cd 0100 	strd	r0, r1, [sp]
 8003bbc:	f7fc ffa8 	bl	8000b10 <__aeabi_dcmpgt>
 8003bc0:	2800      	cmp	r0, #0
 8003bc2:	f040 829b 	bne.w	80040fc <_dtoa_r+0x95c>
 8003bc6:	4642      	mov	r2, r8
 8003bc8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003bcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003bd0:	f7fc ff80 	bl	8000ad4 <__aeabi_dcmplt>
 8003bd4:	2800      	cmp	r0, #0
 8003bd6:	f040 828f 	bne.w	80040f8 <_dtoa_r+0x958>
 8003bda:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003bde:	e9cd 2300 	strd	r2, r3, [sp]
 8003be2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f2c0 8150 	blt.w	8003e8a <_dtoa_r+0x6ea>
 8003bea:	f1bb 0f0e 	cmp.w	fp, #14
 8003bee:	f300 814c 	bgt.w	8003e8a <_dtoa_r+0x6ea>
 8003bf2:	4b6a      	ldr	r3, [pc, #424]	; (8003d9c <_dtoa_r+0x5fc>)
 8003bf4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003bf8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003bfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f280 80da 	bge.w	8003db8 <_dtoa_r+0x618>
 8003c04:	9b03      	ldr	r3, [sp, #12]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f300 80d6 	bgt.w	8003db8 <_dtoa_r+0x618>
 8003c0c:	f040 8273 	bne.w	80040f6 <_dtoa_r+0x956>
 8003c10:	2200      	movs	r2, #0
 8003c12:	4b67      	ldr	r3, [pc, #412]	; (8003db0 <_dtoa_r+0x610>)
 8003c14:	4640      	mov	r0, r8
 8003c16:	4649      	mov	r1, r9
 8003c18:	f7fc fcea 	bl	80005f0 <__aeabi_dmul>
 8003c1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003c20:	f7fc ff6c 	bl	8000afc <__aeabi_dcmpge>
 8003c24:	9e03      	ldr	r6, [sp, #12]
 8003c26:	4637      	mov	r7, r6
 8003c28:	2800      	cmp	r0, #0
 8003c2a:	f040 824a 	bne.w	80040c2 <_dtoa_r+0x922>
 8003c2e:	9b02      	ldr	r3, [sp, #8]
 8003c30:	9a02      	ldr	r2, [sp, #8]
 8003c32:	1c5d      	adds	r5, r3, #1
 8003c34:	2331      	movs	r3, #49	; 0x31
 8003c36:	7013      	strb	r3, [r2, #0]
 8003c38:	f10b 0b01 	add.w	fp, fp, #1
 8003c3c:	e245      	b.n	80040ca <_dtoa_r+0x92a>
 8003c3e:	07f2      	lsls	r2, r6, #31
 8003c40:	d505      	bpl.n	8003c4e <_dtoa_r+0x4ae>
 8003c42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c46:	f7fc fcd3 	bl	80005f0 <__aeabi_dmul>
 8003c4a:	3501      	adds	r5, #1
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	1076      	asrs	r6, r6, #1
 8003c50:	3708      	adds	r7, #8
 8003c52:	e775      	b.n	8003b40 <_dtoa_r+0x3a0>
 8003c54:	2502      	movs	r5, #2
 8003c56:	e777      	b.n	8003b48 <_dtoa_r+0x3a8>
 8003c58:	465f      	mov	r7, fp
 8003c5a:	9e03      	ldr	r6, [sp, #12]
 8003c5c:	e794      	b.n	8003b88 <_dtoa_r+0x3e8>
 8003c5e:	9a02      	ldr	r2, [sp, #8]
 8003c60:	4b4e      	ldr	r3, [pc, #312]	; (8003d9c <_dtoa_r+0x5fc>)
 8003c62:	4432      	add	r2, r6
 8003c64:	9213      	str	r2, [sp, #76]	; 0x4c
 8003c66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c68:	1e71      	subs	r1, r6, #1
 8003c6a:	2a00      	cmp	r2, #0
 8003c6c:	d048      	beq.n	8003d00 <_dtoa_r+0x560>
 8003c6e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c76:	2000      	movs	r0, #0
 8003c78:	494e      	ldr	r1, [pc, #312]	; (8003db4 <_dtoa_r+0x614>)
 8003c7a:	f7fc fde3 	bl	8000844 <__aeabi_ddiv>
 8003c7e:	4642      	mov	r2, r8
 8003c80:	464b      	mov	r3, r9
 8003c82:	f7fc fb01 	bl	8000288 <__aeabi_dsub>
 8003c86:	9d02      	ldr	r5, [sp, #8]
 8003c88:	4680      	mov	r8, r0
 8003c8a:	4689      	mov	r9, r1
 8003c8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003c90:	f7fc ff5e 	bl	8000b50 <__aeabi_d2iz>
 8003c94:	4606      	mov	r6, r0
 8003c96:	f7fc fc45 	bl	8000524 <__aeabi_i2d>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003ca2:	f7fc faf1 	bl	8000288 <__aeabi_dsub>
 8003ca6:	3630      	adds	r6, #48	; 0x30
 8003ca8:	f805 6b01 	strb.w	r6, [r5], #1
 8003cac:	4642      	mov	r2, r8
 8003cae:	464b      	mov	r3, r9
 8003cb0:	e9cd 0100 	strd	r0, r1, [sp]
 8003cb4:	f7fc ff0e 	bl	8000ad4 <__aeabi_dcmplt>
 8003cb8:	2800      	cmp	r0, #0
 8003cba:	d165      	bne.n	8003d88 <_dtoa_r+0x5e8>
 8003cbc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003cc0:	2000      	movs	r0, #0
 8003cc2:	4938      	ldr	r1, [pc, #224]	; (8003da4 <_dtoa_r+0x604>)
 8003cc4:	f7fc fae0 	bl	8000288 <__aeabi_dsub>
 8003cc8:	4642      	mov	r2, r8
 8003cca:	464b      	mov	r3, r9
 8003ccc:	f7fc ff02 	bl	8000ad4 <__aeabi_dcmplt>
 8003cd0:	2800      	cmp	r0, #0
 8003cd2:	f040 80ba 	bne.w	8003e4a <_dtoa_r+0x6aa>
 8003cd6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003cd8:	429d      	cmp	r5, r3
 8003cda:	f43f af7e 	beq.w	8003bda <_dtoa_r+0x43a>
 8003cde:	2200      	movs	r2, #0
 8003ce0:	4b31      	ldr	r3, [pc, #196]	; (8003da8 <_dtoa_r+0x608>)
 8003ce2:	4640      	mov	r0, r8
 8003ce4:	4649      	mov	r1, r9
 8003ce6:	f7fc fc83 	bl	80005f0 <__aeabi_dmul>
 8003cea:	2200      	movs	r2, #0
 8003cec:	4680      	mov	r8, r0
 8003cee:	4689      	mov	r9, r1
 8003cf0:	4b2d      	ldr	r3, [pc, #180]	; (8003da8 <_dtoa_r+0x608>)
 8003cf2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003cf6:	f7fc fc7b 	bl	80005f0 <__aeabi_dmul>
 8003cfa:	e9cd 0100 	strd	r0, r1, [sp]
 8003cfe:	e7c5      	b.n	8003c8c <_dtoa_r+0x4ec>
 8003d00:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8003d04:	4642      	mov	r2, r8
 8003d06:	464b      	mov	r3, r9
 8003d08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d0c:	f7fc fc70 	bl	80005f0 <__aeabi_dmul>
 8003d10:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003d14:	9d02      	ldr	r5, [sp, #8]
 8003d16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003d1a:	f7fc ff19 	bl	8000b50 <__aeabi_d2iz>
 8003d1e:	4606      	mov	r6, r0
 8003d20:	f7fc fc00 	bl	8000524 <__aeabi_i2d>
 8003d24:	3630      	adds	r6, #48	; 0x30
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003d2e:	f7fc faab 	bl	8000288 <__aeabi_dsub>
 8003d32:	f805 6b01 	strb.w	r6, [r5], #1
 8003d36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003d38:	42ab      	cmp	r3, r5
 8003d3a:	4680      	mov	r8, r0
 8003d3c:	4689      	mov	r9, r1
 8003d3e:	f04f 0200 	mov.w	r2, #0
 8003d42:	d125      	bne.n	8003d90 <_dtoa_r+0x5f0>
 8003d44:	4b1b      	ldr	r3, [pc, #108]	; (8003db4 <_dtoa_r+0x614>)
 8003d46:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003d4a:	f7fc fa9f 	bl	800028c <__adddf3>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	460b      	mov	r3, r1
 8003d52:	4640      	mov	r0, r8
 8003d54:	4649      	mov	r1, r9
 8003d56:	f7fc fedb 	bl	8000b10 <__aeabi_dcmpgt>
 8003d5a:	2800      	cmp	r0, #0
 8003d5c:	d175      	bne.n	8003e4a <_dtoa_r+0x6aa>
 8003d5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003d62:	2000      	movs	r0, #0
 8003d64:	4913      	ldr	r1, [pc, #76]	; (8003db4 <_dtoa_r+0x614>)
 8003d66:	f7fc fa8f 	bl	8000288 <__aeabi_dsub>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	4640      	mov	r0, r8
 8003d70:	4649      	mov	r1, r9
 8003d72:	f7fc feaf 	bl	8000ad4 <__aeabi_dcmplt>
 8003d76:	2800      	cmp	r0, #0
 8003d78:	f43f af2f 	beq.w	8003bda <_dtoa_r+0x43a>
 8003d7c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003d80:	2b30      	cmp	r3, #48	; 0x30
 8003d82:	f105 32ff 	add.w	r2, r5, #4294967295
 8003d86:	d001      	beq.n	8003d8c <_dtoa_r+0x5ec>
 8003d88:	46bb      	mov	fp, r7
 8003d8a:	e04d      	b.n	8003e28 <_dtoa_r+0x688>
 8003d8c:	4615      	mov	r5, r2
 8003d8e:	e7f5      	b.n	8003d7c <_dtoa_r+0x5dc>
 8003d90:	4b05      	ldr	r3, [pc, #20]	; (8003da8 <_dtoa_r+0x608>)
 8003d92:	f7fc fc2d 	bl	80005f0 <__aeabi_dmul>
 8003d96:	e9cd 0100 	strd	r0, r1, [sp]
 8003d9a:	e7bc      	b.n	8003d16 <_dtoa_r+0x576>
 8003d9c:	08005578 	.word	0x08005578
 8003da0:	08005550 	.word	0x08005550
 8003da4:	3ff00000 	.word	0x3ff00000
 8003da8:	40240000 	.word	0x40240000
 8003dac:	401c0000 	.word	0x401c0000
 8003db0:	40140000 	.word	0x40140000
 8003db4:	3fe00000 	.word	0x3fe00000
 8003db8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003dbc:	9d02      	ldr	r5, [sp, #8]
 8003dbe:	4642      	mov	r2, r8
 8003dc0:	464b      	mov	r3, r9
 8003dc2:	4630      	mov	r0, r6
 8003dc4:	4639      	mov	r1, r7
 8003dc6:	f7fc fd3d 	bl	8000844 <__aeabi_ddiv>
 8003dca:	f7fc fec1 	bl	8000b50 <__aeabi_d2iz>
 8003dce:	9000      	str	r0, [sp, #0]
 8003dd0:	f7fc fba8 	bl	8000524 <__aeabi_i2d>
 8003dd4:	4642      	mov	r2, r8
 8003dd6:	464b      	mov	r3, r9
 8003dd8:	f7fc fc0a 	bl	80005f0 <__aeabi_dmul>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	460b      	mov	r3, r1
 8003de0:	4630      	mov	r0, r6
 8003de2:	4639      	mov	r1, r7
 8003de4:	f7fc fa50 	bl	8000288 <__aeabi_dsub>
 8003de8:	9e00      	ldr	r6, [sp, #0]
 8003dea:	9f03      	ldr	r7, [sp, #12]
 8003dec:	3630      	adds	r6, #48	; 0x30
 8003dee:	f805 6b01 	strb.w	r6, [r5], #1
 8003df2:	9e02      	ldr	r6, [sp, #8]
 8003df4:	1bae      	subs	r6, r5, r6
 8003df6:	42b7      	cmp	r7, r6
 8003df8:	4602      	mov	r2, r0
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	d138      	bne.n	8003e70 <_dtoa_r+0x6d0>
 8003dfe:	f7fc fa45 	bl	800028c <__adddf3>
 8003e02:	4606      	mov	r6, r0
 8003e04:	460f      	mov	r7, r1
 8003e06:	4602      	mov	r2, r0
 8003e08:	460b      	mov	r3, r1
 8003e0a:	4640      	mov	r0, r8
 8003e0c:	4649      	mov	r1, r9
 8003e0e:	f7fc fe61 	bl	8000ad4 <__aeabi_dcmplt>
 8003e12:	b9c8      	cbnz	r0, 8003e48 <_dtoa_r+0x6a8>
 8003e14:	4632      	mov	r2, r6
 8003e16:	463b      	mov	r3, r7
 8003e18:	4640      	mov	r0, r8
 8003e1a:	4649      	mov	r1, r9
 8003e1c:	f7fc fe50 	bl	8000ac0 <__aeabi_dcmpeq>
 8003e20:	b110      	cbz	r0, 8003e28 <_dtoa_r+0x688>
 8003e22:	9b00      	ldr	r3, [sp, #0]
 8003e24:	07db      	lsls	r3, r3, #31
 8003e26:	d40f      	bmi.n	8003e48 <_dtoa_r+0x6a8>
 8003e28:	4651      	mov	r1, sl
 8003e2a:	4620      	mov	r0, r4
 8003e2c:	f000 fcf6 	bl	800481c <_Bfree>
 8003e30:	2300      	movs	r3, #0
 8003e32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003e34:	702b      	strb	r3, [r5, #0]
 8003e36:	f10b 0301 	add.w	r3, fp, #1
 8003e3a:	6013      	str	r3, [r2, #0]
 8003e3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f43f acf8 	beq.w	8003834 <_dtoa_r+0x94>
 8003e44:	601d      	str	r5, [r3, #0]
 8003e46:	e4f5      	b.n	8003834 <_dtoa_r+0x94>
 8003e48:	465f      	mov	r7, fp
 8003e4a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003e4e:	2a39      	cmp	r2, #57	; 0x39
 8003e50:	f105 33ff 	add.w	r3, r5, #4294967295
 8003e54:	d106      	bne.n	8003e64 <_dtoa_r+0x6c4>
 8003e56:	9a02      	ldr	r2, [sp, #8]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d107      	bne.n	8003e6c <_dtoa_r+0x6cc>
 8003e5c:	2330      	movs	r3, #48	; 0x30
 8003e5e:	7013      	strb	r3, [r2, #0]
 8003e60:	3701      	adds	r7, #1
 8003e62:	4613      	mov	r3, r2
 8003e64:	781a      	ldrb	r2, [r3, #0]
 8003e66:	3201      	adds	r2, #1
 8003e68:	701a      	strb	r2, [r3, #0]
 8003e6a:	e78d      	b.n	8003d88 <_dtoa_r+0x5e8>
 8003e6c:	461d      	mov	r5, r3
 8003e6e:	e7ec      	b.n	8003e4a <_dtoa_r+0x6aa>
 8003e70:	2200      	movs	r2, #0
 8003e72:	4ba4      	ldr	r3, [pc, #656]	; (8004104 <_dtoa_r+0x964>)
 8003e74:	f7fc fbbc 	bl	80005f0 <__aeabi_dmul>
 8003e78:	2200      	movs	r2, #0
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	4606      	mov	r6, r0
 8003e7e:	460f      	mov	r7, r1
 8003e80:	f7fc fe1e 	bl	8000ac0 <__aeabi_dcmpeq>
 8003e84:	2800      	cmp	r0, #0
 8003e86:	d09a      	beq.n	8003dbe <_dtoa_r+0x61e>
 8003e88:	e7ce      	b.n	8003e28 <_dtoa_r+0x688>
 8003e8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e8c:	2a00      	cmp	r2, #0
 8003e8e:	f000 80cd 	beq.w	800402c <_dtoa_r+0x88c>
 8003e92:	9a07      	ldr	r2, [sp, #28]
 8003e94:	2a01      	cmp	r2, #1
 8003e96:	f300 80af 	bgt.w	8003ff8 <_dtoa_r+0x858>
 8003e9a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003e9c:	2a00      	cmp	r2, #0
 8003e9e:	f000 80a7 	beq.w	8003ff0 <_dtoa_r+0x850>
 8003ea2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003ea6:	9e08      	ldr	r6, [sp, #32]
 8003ea8:	9d05      	ldr	r5, [sp, #20]
 8003eaa:	9a05      	ldr	r2, [sp, #20]
 8003eac:	441a      	add	r2, r3
 8003eae:	9205      	str	r2, [sp, #20]
 8003eb0:	9a06      	ldr	r2, [sp, #24]
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	441a      	add	r2, r3
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	9206      	str	r2, [sp, #24]
 8003eba:	f000 fd4f 	bl	800495c <__i2b>
 8003ebe:	4607      	mov	r7, r0
 8003ec0:	2d00      	cmp	r5, #0
 8003ec2:	dd0c      	ble.n	8003ede <_dtoa_r+0x73e>
 8003ec4:	9b06      	ldr	r3, [sp, #24]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	dd09      	ble.n	8003ede <_dtoa_r+0x73e>
 8003eca:	42ab      	cmp	r3, r5
 8003ecc:	9a05      	ldr	r2, [sp, #20]
 8003ece:	bfa8      	it	ge
 8003ed0:	462b      	movge	r3, r5
 8003ed2:	1ad2      	subs	r2, r2, r3
 8003ed4:	9205      	str	r2, [sp, #20]
 8003ed6:	9a06      	ldr	r2, [sp, #24]
 8003ed8:	1aed      	subs	r5, r5, r3
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	9306      	str	r3, [sp, #24]
 8003ede:	9b08      	ldr	r3, [sp, #32]
 8003ee0:	b1f3      	cbz	r3, 8003f20 <_dtoa_r+0x780>
 8003ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 80a5 	beq.w	8004034 <_dtoa_r+0x894>
 8003eea:	2e00      	cmp	r6, #0
 8003eec:	dd10      	ble.n	8003f10 <_dtoa_r+0x770>
 8003eee:	4639      	mov	r1, r7
 8003ef0:	4632      	mov	r2, r6
 8003ef2:	4620      	mov	r0, r4
 8003ef4:	f000 fdc8 	bl	8004a88 <__pow5mult>
 8003ef8:	4652      	mov	r2, sl
 8003efa:	4601      	mov	r1, r0
 8003efc:	4607      	mov	r7, r0
 8003efe:	4620      	mov	r0, r4
 8003f00:	f000 fd35 	bl	800496e <__multiply>
 8003f04:	4651      	mov	r1, sl
 8003f06:	4680      	mov	r8, r0
 8003f08:	4620      	mov	r0, r4
 8003f0a:	f000 fc87 	bl	800481c <_Bfree>
 8003f0e:	46c2      	mov	sl, r8
 8003f10:	9b08      	ldr	r3, [sp, #32]
 8003f12:	1b9a      	subs	r2, r3, r6
 8003f14:	d004      	beq.n	8003f20 <_dtoa_r+0x780>
 8003f16:	4651      	mov	r1, sl
 8003f18:	4620      	mov	r0, r4
 8003f1a:	f000 fdb5 	bl	8004a88 <__pow5mult>
 8003f1e:	4682      	mov	sl, r0
 8003f20:	2101      	movs	r1, #1
 8003f22:	4620      	mov	r0, r4
 8003f24:	f000 fd1a 	bl	800495c <__i2b>
 8003f28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	4606      	mov	r6, r0
 8003f2e:	f340 8083 	ble.w	8004038 <_dtoa_r+0x898>
 8003f32:	461a      	mov	r2, r3
 8003f34:	4601      	mov	r1, r0
 8003f36:	4620      	mov	r0, r4
 8003f38:	f000 fda6 	bl	8004a88 <__pow5mult>
 8003f3c:	9b07      	ldr	r3, [sp, #28]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	4606      	mov	r6, r0
 8003f42:	dd7c      	ble.n	800403e <_dtoa_r+0x89e>
 8003f44:	f04f 0800 	mov.w	r8, #0
 8003f48:	6933      	ldr	r3, [r6, #16]
 8003f4a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003f4e:	6918      	ldr	r0, [r3, #16]
 8003f50:	f000 fcb6 	bl	80048c0 <__hi0bits>
 8003f54:	f1c0 0020 	rsb	r0, r0, #32
 8003f58:	9b06      	ldr	r3, [sp, #24]
 8003f5a:	4418      	add	r0, r3
 8003f5c:	f010 001f 	ands.w	r0, r0, #31
 8003f60:	f000 8096 	beq.w	8004090 <_dtoa_r+0x8f0>
 8003f64:	f1c0 0320 	rsb	r3, r0, #32
 8003f68:	2b04      	cmp	r3, #4
 8003f6a:	f340 8087 	ble.w	800407c <_dtoa_r+0x8dc>
 8003f6e:	9b05      	ldr	r3, [sp, #20]
 8003f70:	f1c0 001c 	rsb	r0, r0, #28
 8003f74:	4403      	add	r3, r0
 8003f76:	9305      	str	r3, [sp, #20]
 8003f78:	9b06      	ldr	r3, [sp, #24]
 8003f7a:	4405      	add	r5, r0
 8003f7c:	4403      	add	r3, r0
 8003f7e:	9306      	str	r3, [sp, #24]
 8003f80:	9b05      	ldr	r3, [sp, #20]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	dd05      	ble.n	8003f92 <_dtoa_r+0x7f2>
 8003f86:	4651      	mov	r1, sl
 8003f88:	461a      	mov	r2, r3
 8003f8a:	4620      	mov	r0, r4
 8003f8c:	f000 fdca 	bl	8004b24 <__lshift>
 8003f90:	4682      	mov	sl, r0
 8003f92:	9b06      	ldr	r3, [sp, #24]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	dd05      	ble.n	8003fa4 <_dtoa_r+0x804>
 8003f98:	4631      	mov	r1, r6
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	4620      	mov	r0, r4
 8003f9e:	f000 fdc1 	bl	8004b24 <__lshift>
 8003fa2:	4606      	mov	r6, r0
 8003fa4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d074      	beq.n	8004094 <_dtoa_r+0x8f4>
 8003faa:	4631      	mov	r1, r6
 8003fac:	4650      	mov	r0, sl
 8003fae:	f000 fe0a 	bl	8004bc6 <__mcmp>
 8003fb2:	2800      	cmp	r0, #0
 8003fb4:	da6e      	bge.n	8004094 <_dtoa_r+0x8f4>
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	4651      	mov	r1, sl
 8003fba:	220a      	movs	r2, #10
 8003fbc:	4620      	mov	r0, r4
 8003fbe:	f000 fc44 	bl	800484a <__multadd>
 8003fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fc4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003fc8:	4682      	mov	sl, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 81a8 	beq.w	8004320 <_dtoa_r+0xb80>
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	4639      	mov	r1, r7
 8003fd4:	220a      	movs	r2, #10
 8003fd6:	4620      	mov	r0, r4
 8003fd8:	f000 fc37 	bl	800484a <__multadd>
 8003fdc:	9b04      	ldr	r3, [sp, #16]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	4607      	mov	r7, r0
 8003fe2:	f300 80c8 	bgt.w	8004176 <_dtoa_r+0x9d6>
 8003fe6:	9b07      	ldr	r3, [sp, #28]
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	f340 80c4 	ble.w	8004176 <_dtoa_r+0x9d6>
 8003fee:	e059      	b.n	80040a4 <_dtoa_r+0x904>
 8003ff0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003ff2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003ff6:	e756      	b.n	8003ea6 <_dtoa_r+0x706>
 8003ff8:	9b03      	ldr	r3, [sp, #12]
 8003ffa:	1e5e      	subs	r6, r3, #1
 8003ffc:	9b08      	ldr	r3, [sp, #32]
 8003ffe:	42b3      	cmp	r3, r6
 8004000:	bfbf      	itttt	lt
 8004002:	9b08      	ldrlt	r3, [sp, #32]
 8004004:	9608      	strlt	r6, [sp, #32]
 8004006:	1af2      	sublt	r2, r6, r3
 8004008:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800400a:	bfb6      	itet	lt
 800400c:	189b      	addlt	r3, r3, r2
 800400e:	1b9e      	subge	r6, r3, r6
 8004010:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8004012:	9b03      	ldr	r3, [sp, #12]
 8004014:	bfb8      	it	lt
 8004016:	2600      	movlt	r6, #0
 8004018:	2b00      	cmp	r3, #0
 800401a:	bfb9      	ittee	lt
 800401c:	9b05      	ldrlt	r3, [sp, #20]
 800401e:	9a03      	ldrlt	r2, [sp, #12]
 8004020:	9d05      	ldrge	r5, [sp, #20]
 8004022:	9b03      	ldrge	r3, [sp, #12]
 8004024:	bfbc      	itt	lt
 8004026:	1a9d      	sublt	r5, r3, r2
 8004028:	2300      	movlt	r3, #0
 800402a:	e73e      	b.n	8003eaa <_dtoa_r+0x70a>
 800402c:	9e08      	ldr	r6, [sp, #32]
 800402e:	9d05      	ldr	r5, [sp, #20]
 8004030:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004032:	e745      	b.n	8003ec0 <_dtoa_r+0x720>
 8004034:	9a08      	ldr	r2, [sp, #32]
 8004036:	e76e      	b.n	8003f16 <_dtoa_r+0x776>
 8004038:	9b07      	ldr	r3, [sp, #28]
 800403a:	2b01      	cmp	r3, #1
 800403c:	dc19      	bgt.n	8004072 <_dtoa_r+0x8d2>
 800403e:	9b00      	ldr	r3, [sp, #0]
 8004040:	b9bb      	cbnz	r3, 8004072 <_dtoa_r+0x8d2>
 8004042:	9b01      	ldr	r3, [sp, #4]
 8004044:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004048:	b99b      	cbnz	r3, 8004072 <_dtoa_r+0x8d2>
 800404a:	9b01      	ldr	r3, [sp, #4]
 800404c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004050:	0d1b      	lsrs	r3, r3, #20
 8004052:	051b      	lsls	r3, r3, #20
 8004054:	b183      	cbz	r3, 8004078 <_dtoa_r+0x8d8>
 8004056:	9b05      	ldr	r3, [sp, #20]
 8004058:	3301      	adds	r3, #1
 800405a:	9305      	str	r3, [sp, #20]
 800405c:	9b06      	ldr	r3, [sp, #24]
 800405e:	3301      	adds	r3, #1
 8004060:	9306      	str	r3, [sp, #24]
 8004062:	f04f 0801 	mov.w	r8, #1
 8004066:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004068:	2b00      	cmp	r3, #0
 800406a:	f47f af6d 	bne.w	8003f48 <_dtoa_r+0x7a8>
 800406e:	2001      	movs	r0, #1
 8004070:	e772      	b.n	8003f58 <_dtoa_r+0x7b8>
 8004072:	f04f 0800 	mov.w	r8, #0
 8004076:	e7f6      	b.n	8004066 <_dtoa_r+0x8c6>
 8004078:	4698      	mov	r8, r3
 800407a:	e7f4      	b.n	8004066 <_dtoa_r+0x8c6>
 800407c:	d080      	beq.n	8003f80 <_dtoa_r+0x7e0>
 800407e:	9a05      	ldr	r2, [sp, #20]
 8004080:	331c      	adds	r3, #28
 8004082:	441a      	add	r2, r3
 8004084:	9205      	str	r2, [sp, #20]
 8004086:	9a06      	ldr	r2, [sp, #24]
 8004088:	441a      	add	r2, r3
 800408a:	441d      	add	r5, r3
 800408c:	4613      	mov	r3, r2
 800408e:	e776      	b.n	8003f7e <_dtoa_r+0x7de>
 8004090:	4603      	mov	r3, r0
 8004092:	e7f4      	b.n	800407e <_dtoa_r+0x8de>
 8004094:	9b03      	ldr	r3, [sp, #12]
 8004096:	2b00      	cmp	r3, #0
 8004098:	dc36      	bgt.n	8004108 <_dtoa_r+0x968>
 800409a:	9b07      	ldr	r3, [sp, #28]
 800409c:	2b02      	cmp	r3, #2
 800409e:	dd33      	ble.n	8004108 <_dtoa_r+0x968>
 80040a0:	9b03      	ldr	r3, [sp, #12]
 80040a2:	9304      	str	r3, [sp, #16]
 80040a4:	9b04      	ldr	r3, [sp, #16]
 80040a6:	b963      	cbnz	r3, 80040c2 <_dtoa_r+0x922>
 80040a8:	4631      	mov	r1, r6
 80040aa:	2205      	movs	r2, #5
 80040ac:	4620      	mov	r0, r4
 80040ae:	f000 fbcc 	bl	800484a <__multadd>
 80040b2:	4601      	mov	r1, r0
 80040b4:	4606      	mov	r6, r0
 80040b6:	4650      	mov	r0, sl
 80040b8:	f000 fd85 	bl	8004bc6 <__mcmp>
 80040bc:	2800      	cmp	r0, #0
 80040be:	f73f adb6 	bgt.w	8003c2e <_dtoa_r+0x48e>
 80040c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040c4:	9d02      	ldr	r5, [sp, #8]
 80040c6:	ea6f 0b03 	mvn.w	fp, r3
 80040ca:	2300      	movs	r3, #0
 80040cc:	9303      	str	r3, [sp, #12]
 80040ce:	4631      	mov	r1, r6
 80040d0:	4620      	mov	r0, r4
 80040d2:	f000 fba3 	bl	800481c <_Bfree>
 80040d6:	2f00      	cmp	r7, #0
 80040d8:	f43f aea6 	beq.w	8003e28 <_dtoa_r+0x688>
 80040dc:	9b03      	ldr	r3, [sp, #12]
 80040de:	b12b      	cbz	r3, 80040ec <_dtoa_r+0x94c>
 80040e0:	42bb      	cmp	r3, r7
 80040e2:	d003      	beq.n	80040ec <_dtoa_r+0x94c>
 80040e4:	4619      	mov	r1, r3
 80040e6:	4620      	mov	r0, r4
 80040e8:	f000 fb98 	bl	800481c <_Bfree>
 80040ec:	4639      	mov	r1, r7
 80040ee:	4620      	mov	r0, r4
 80040f0:	f000 fb94 	bl	800481c <_Bfree>
 80040f4:	e698      	b.n	8003e28 <_dtoa_r+0x688>
 80040f6:	2600      	movs	r6, #0
 80040f8:	4637      	mov	r7, r6
 80040fa:	e7e2      	b.n	80040c2 <_dtoa_r+0x922>
 80040fc:	46bb      	mov	fp, r7
 80040fe:	4637      	mov	r7, r6
 8004100:	e595      	b.n	8003c2e <_dtoa_r+0x48e>
 8004102:	bf00      	nop
 8004104:	40240000 	.word	0x40240000
 8004108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800410a:	bb93      	cbnz	r3, 8004172 <_dtoa_r+0x9d2>
 800410c:	9b03      	ldr	r3, [sp, #12]
 800410e:	9304      	str	r3, [sp, #16]
 8004110:	9d02      	ldr	r5, [sp, #8]
 8004112:	4631      	mov	r1, r6
 8004114:	4650      	mov	r0, sl
 8004116:	f7ff fab7 	bl	8003688 <quorem>
 800411a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800411e:	f805 9b01 	strb.w	r9, [r5], #1
 8004122:	9b02      	ldr	r3, [sp, #8]
 8004124:	9a04      	ldr	r2, [sp, #16]
 8004126:	1aeb      	subs	r3, r5, r3
 8004128:	429a      	cmp	r2, r3
 800412a:	f300 80dc 	bgt.w	80042e6 <_dtoa_r+0xb46>
 800412e:	9b02      	ldr	r3, [sp, #8]
 8004130:	2a01      	cmp	r2, #1
 8004132:	bfac      	ite	ge
 8004134:	189b      	addge	r3, r3, r2
 8004136:	3301      	addlt	r3, #1
 8004138:	4698      	mov	r8, r3
 800413a:	2300      	movs	r3, #0
 800413c:	9303      	str	r3, [sp, #12]
 800413e:	4651      	mov	r1, sl
 8004140:	2201      	movs	r2, #1
 8004142:	4620      	mov	r0, r4
 8004144:	f000 fcee 	bl	8004b24 <__lshift>
 8004148:	4631      	mov	r1, r6
 800414a:	4682      	mov	sl, r0
 800414c:	f000 fd3b 	bl	8004bc6 <__mcmp>
 8004150:	2800      	cmp	r0, #0
 8004152:	f300 808d 	bgt.w	8004270 <_dtoa_r+0xad0>
 8004156:	d103      	bne.n	8004160 <_dtoa_r+0x9c0>
 8004158:	f019 0f01 	tst.w	r9, #1
 800415c:	f040 8088 	bne.w	8004270 <_dtoa_r+0xad0>
 8004160:	4645      	mov	r5, r8
 8004162:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004166:	2b30      	cmp	r3, #48	; 0x30
 8004168:	f105 32ff 	add.w	r2, r5, #4294967295
 800416c:	d1af      	bne.n	80040ce <_dtoa_r+0x92e>
 800416e:	4615      	mov	r5, r2
 8004170:	e7f7      	b.n	8004162 <_dtoa_r+0x9c2>
 8004172:	9b03      	ldr	r3, [sp, #12]
 8004174:	9304      	str	r3, [sp, #16]
 8004176:	2d00      	cmp	r5, #0
 8004178:	dd05      	ble.n	8004186 <_dtoa_r+0x9e6>
 800417a:	4639      	mov	r1, r7
 800417c:	462a      	mov	r2, r5
 800417e:	4620      	mov	r0, r4
 8004180:	f000 fcd0 	bl	8004b24 <__lshift>
 8004184:	4607      	mov	r7, r0
 8004186:	f1b8 0f00 	cmp.w	r8, #0
 800418a:	d04c      	beq.n	8004226 <_dtoa_r+0xa86>
 800418c:	6879      	ldr	r1, [r7, #4]
 800418e:	4620      	mov	r0, r4
 8004190:	f000 fb10 	bl	80047b4 <_Balloc>
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	3202      	adds	r2, #2
 8004198:	4605      	mov	r5, r0
 800419a:	0092      	lsls	r2, r2, #2
 800419c:	f107 010c 	add.w	r1, r7, #12
 80041a0:	300c      	adds	r0, #12
 80041a2:	f000 faef 	bl	8004784 <memcpy>
 80041a6:	2201      	movs	r2, #1
 80041a8:	4629      	mov	r1, r5
 80041aa:	4620      	mov	r0, r4
 80041ac:	f000 fcba 	bl	8004b24 <__lshift>
 80041b0:	9b00      	ldr	r3, [sp, #0]
 80041b2:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80041b6:	9703      	str	r7, [sp, #12]
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	4607      	mov	r7, r0
 80041be:	9305      	str	r3, [sp, #20]
 80041c0:	4631      	mov	r1, r6
 80041c2:	4650      	mov	r0, sl
 80041c4:	f7ff fa60 	bl	8003688 <quorem>
 80041c8:	9903      	ldr	r1, [sp, #12]
 80041ca:	4605      	mov	r5, r0
 80041cc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80041d0:	4650      	mov	r0, sl
 80041d2:	f000 fcf8 	bl	8004bc6 <__mcmp>
 80041d6:	463a      	mov	r2, r7
 80041d8:	9000      	str	r0, [sp, #0]
 80041da:	4631      	mov	r1, r6
 80041dc:	4620      	mov	r0, r4
 80041de:	f000 fd0c 	bl	8004bfa <__mdiff>
 80041e2:	68c3      	ldr	r3, [r0, #12]
 80041e4:	4602      	mov	r2, r0
 80041e6:	bb03      	cbnz	r3, 800422a <_dtoa_r+0xa8a>
 80041e8:	4601      	mov	r1, r0
 80041ea:	9006      	str	r0, [sp, #24]
 80041ec:	4650      	mov	r0, sl
 80041ee:	f000 fcea 	bl	8004bc6 <__mcmp>
 80041f2:	9a06      	ldr	r2, [sp, #24]
 80041f4:	4603      	mov	r3, r0
 80041f6:	4611      	mov	r1, r2
 80041f8:	4620      	mov	r0, r4
 80041fa:	9306      	str	r3, [sp, #24]
 80041fc:	f000 fb0e 	bl	800481c <_Bfree>
 8004200:	9b06      	ldr	r3, [sp, #24]
 8004202:	b9a3      	cbnz	r3, 800422e <_dtoa_r+0xa8e>
 8004204:	9a07      	ldr	r2, [sp, #28]
 8004206:	b992      	cbnz	r2, 800422e <_dtoa_r+0xa8e>
 8004208:	9a05      	ldr	r2, [sp, #20]
 800420a:	b982      	cbnz	r2, 800422e <_dtoa_r+0xa8e>
 800420c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004210:	d029      	beq.n	8004266 <_dtoa_r+0xac6>
 8004212:	9b00      	ldr	r3, [sp, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	dd01      	ble.n	800421c <_dtoa_r+0xa7c>
 8004218:	f105 0931 	add.w	r9, r5, #49	; 0x31
 800421c:	f108 0501 	add.w	r5, r8, #1
 8004220:	f888 9000 	strb.w	r9, [r8]
 8004224:	e753      	b.n	80040ce <_dtoa_r+0x92e>
 8004226:	4638      	mov	r0, r7
 8004228:	e7c2      	b.n	80041b0 <_dtoa_r+0xa10>
 800422a:	2301      	movs	r3, #1
 800422c:	e7e3      	b.n	80041f6 <_dtoa_r+0xa56>
 800422e:	9a00      	ldr	r2, [sp, #0]
 8004230:	2a00      	cmp	r2, #0
 8004232:	db04      	blt.n	800423e <_dtoa_r+0xa9e>
 8004234:	d125      	bne.n	8004282 <_dtoa_r+0xae2>
 8004236:	9a07      	ldr	r2, [sp, #28]
 8004238:	bb1a      	cbnz	r2, 8004282 <_dtoa_r+0xae2>
 800423a:	9a05      	ldr	r2, [sp, #20]
 800423c:	bb0a      	cbnz	r2, 8004282 <_dtoa_r+0xae2>
 800423e:	2b00      	cmp	r3, #0
 8004240:	ddec      	ble.n	800421c <_dtoa_r+0xa7c>
 8004242:	4651      	mov	r1, sl
 8004244:	2201      	movs	r2, #1
 8004246:	4620      	mov	r0, r4
 8004248:	f000 fc6c 	bl	8004b24 <__lshift>
 800424c:	4631      	mov	r1, r6
 800424e:	4682      	mov	sl, r0
 8004250:	f000 fcb9 	bl	8004bc6 <__mcmp>
 8004254:	2800      	cmp	r0, #0
 8004256:	dc03      	bgt.n	8004260 <_dtoa_r+0xac0>
 8004258:	d1e0      	bne.n	800421c <_dtoa_r+0xa7c>
 800425a:	f019 0f01 	tst.w	r9, #1
 800425e:	d0dd      	beq.n	800421c <_dtoa_r+0xa7c>
 8004260:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004264:	d1d8      	bne.n	8004218 <_dtoa_r+0xa78>
 8004266:	2339      	movs	r3, #57	; 0x39
 8004268:	f888 3000 	strb.w	r3, [r8]
 800426c:	f108 0801 	add.w	r8, r8, #1
 8004270:	4645      	mov	r5, r8
 8004272:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004276:	2b39      	cmp	r3, #57	; 0x39
 8004278:	f105 32ff 	add.w	r2, r5, #4294967295
 800427c:	d03b      	beq.n	80042f6 <_dtoa_r+0xb56>
 800427e:	3301      	adds	r3, #1
 8004280:	e040      	b.n	8004304 <_dtoa_r+0xb64>
 8004282:	2b00      	cmp	r3, #0
 8004284:	f108 0501 	add.w	r5, r8, #1
 8004288:	dd05      	ble.n	8004296 <_dtoa_r+0xaf6>
 800428a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800428e:	d0ea      	beq.n	8004266 <_dtoa_r+0xac6>
 8004290:	f109 0901 	add.w	r9, r9, #1
 8004294:	e7c4      	b.n	8004220 <_dtoa_r+0xa80>
 8004296:	9b02      	ldr	r3, [sp, #8]
 8004298:	9a04      	ldr	r2, [sp, #16]
 800429a:	f805 9c01 	strb.w	r9, [r5, #-1]
 800429e:	1aeb      	subs	r3, r5, r3
 80042a0:	4293      	cmp	r3, r2
 80042a2:	46a8      	mov	r8, r5
 80042a4:	f43f af4b 	beq.w	800413e <_dtoa_r+0x99e>
 80042a8:	4651      	mov	r1, sl
 80042aa:	2300      	movs	r3, #0
 80042ac:	220a      	movs	r2, #10
 80042ae:	4620      	mov	r0, r4
 80042b0:	f000 facb 	bl	800484a <__multadd>
 80042b4:	9b03      	ldr	r3, [sp, #12]
 80042b6:	9903      	ldr	r1, [sp, #12]
 80042b8:	42bb      	cmp	r3, r7
 80042ba:	4682      	mov	sl, r0
 80042bc:	f04f 0300 	mov.w	r3, #0
 80042c0:	f04f 020a 	mov.w	r2, #10
 80042c4:	4620      	mov	r0, r4
 80042c6:	d104      	bne.n	80042d2 <_dtoa_r+0xb32>
 80042c8:	f000 fabf 	bl	800484a <__multadd>
 80042cc:	9003      	str	r0, [sp, #12]
 80042ce:	4607      	mov	r7, r0
 80042d0:	e776      	b.n	80041c0 <_dtoa_r+0xa20>
 80042d2:	f000 faba 	bl	800484a <__multadd>
 80042d6:	2300      	movs	r3, #0
 80042d8:	9003      	str	r0, [sp, #12]
 80042da:	220a      	movs	r2, #10
 80042dc:	4639      	mov	r1, r7
 80042de:	4620      	mov	r0, r4
 80042e0:	f000 fab3 	bl	800484a <__multadd>
 80042e4:	e7f3      	b.n	80042ce <_dtoa_r+0xb2e>
 80042e6:	4651      	mov	r1, sl
 80042e8:	2300      	movs	r3, #0
 80042ea:	220a      	movs	r2, #10
 80042ec:	4620      	mov	r0, r4
 80042ee:	f000 faac 	bl	800484a <__multadd>
 80042f2:	4682      	mov	sl, r0
 80042f4:	e70d      	b.n	8004112 <_dtoa_r+0x972>
 80042f6:	9b02      	ldr	r3, [sp, #8]
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d105      	bne.n	8004308 <_dtoa_r+0xb68>
 80042fc:	9a02      	ldr	r2, [sp, #8]
 80042fe:	f10b 0b01 	add.w	fp, fp, #1
 8004302:	2331      	movs	r3, #49	; 0x31
 8004304:	7013      	strb	r3, [r2, #0]
 8004306:	e6e2      	b.n	80040ce <_dtoa_r+0x92e>
 8004308:	4615      	mov	r5, r2
 800430a:	e7b2      	b.n	8004272 <_dtoa_r+0xad2>
 800430c:	4b09      	ldr	r3, [pc, #36]	; (8004334 <_dtoa_r+0xb94>)
 800430e:	f7ff baae 	b.w	800386e <_dtoa_r+0xce>
 8004312:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004314:	2b00      	cmp	r3, #0
 8004316:	f47f aa88 	bne.w	800382a <_dtoa_r+0x8a>
 800431a:	4b07      	ldr	r3, [pc, #28]	; (8004338 <_dtoa_r+0xb98>)
 800431c:	f7ff baa7 	b.w	800386e <_dtoa_r+0xce>
 8004320:	9b04      	ldr	r3, [sp, #16]
 8004322:	2b00      	cmp	r3, #0
 8004324:	f73f aef4 	bgt.w	8004110 <_dtoa_r+0x970>
 8004328:	9b07      	ldr	r3, [sp, #28]
 800432a:	2b02      	cmp	r3, #2
 800432c:	f77f aef0 	ble.w	8004110 <_dtoa_r+0x970>
 8004330:	e6b8      	b.n	80040a4 <_dtoa_r+0x904>
 8004332:	bf00      	nop
 8004334:	0800551a 	.word	0x0800551a
 8004338:	0800553c 	.word	0x0800553c

0800433c <_localeconv_r>:
 800433c:	4b04      	ldr	r3, [pc, #16]	; (8004350 <_localeconv_r+0x14>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6a18      	ldr	r0, [r3, #32]
 8004342:	4b04      	ldr	r3, [pc, #16]	; (8004354 <_localeconv_r+0x18>)
 8004344:	2800      	cmp	r0, #0
 8004346:	bf08      	it	eq
 8004348:	4618      	moveq	r0, r3
 800434a:	30f0      	adds	r0, #240	; 0xf0
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	20000004 	.word	0x20000004
 8004354:	20000508 	.word	0x20000508

08004358 <malloc>:
 8004358:	4b02      	ldr	r3, [pc, #8]	; (8004364 <malloc+0xc>)
 800435a:	4601      	mov	r1, r0
 800435c:	6818      	ldr	r0, [r3, #0]
 800435e:	f000 b803 	b.w	8004368 <_malloc_r>
 8004362:	bf00      	nop
 8004364:	20000004 	.word	0x20000004

08004368 <_malloc_r>:
 8004368:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800436c:	f101 040b 	add.w	r4, r1, #11
 8004370:	2c16      	cmp	r4, #22
 8004372:	4681      	mov	r9, r0
 8004374:	d907      	bls.n	8004386 <_malloc_r+0x1e>
 8004376:	f034 0407 	bics.w	r4, r4, #7
 800437a:	d505      	bpl.n	8004388 <_malloc_r+0x20>
 800437c:	230c      	movs	r3, #12
 800437e:	f8c9 3000 	str.w	r3, [r9]
 8004382:	2600      	movs	r6, #0
 8004384:	e131      	b.n	80045ea <_malloc_r+0x282>
 8004386:	2410      	movs	r4, #16
 8004388:	428c      	cmp	r4, r1
 800438a:	d3f7      	bcc.n	800437c <_malloc_r+0x14>
 800438c:	4648      	mov	r0, r9
 800438e:	f000 fa05 	bl	800479c <__malloc_lock>
 8004392:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8004396:	4d9c      	ldr	r5, [pc, #624]	; (8004608 <_malloc_r+0x2a0>)
 8004398:	d236      	bcs.n	8004408 <_malloc_r+0xa0>
 800439a:	f104 0208 	add.w	r2, r4, #8
 800439e:	442a      	add	r2, r5
 80043a0:	f1a2 0108 	sub.w	r1, r2, #8
 80043a4:	6856      	ldr	r6, [r2, #4]
 80043a6:	428e      	cmp	r6, r1
 80043a8:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 80043ac:	d102      	bne.n	80043b4 <_malloc_r+0x4c>
 80043ae:	68d6      	ldr	r6, [r2, #12]
 80043b0:	42b2      	cmp	r2, r6
 80043b2:	d010      	beq.n	80043d6 <_malloc_r+0x6e>
 80043b4:	6873      	ldr	r3, [r6, #4]
 80043b6:	68f2      	ldr	r2, [r6, #12]
 80043b8:	68b1      	ldr	r1, [r6, #8]
 80043ba:	f023 0303 	bic.w	r3, r3, #3
 80043be:	60ca      	str	r2, [r1, #12]
 80043c0:	4433      	add	r3, r6
 80043c2:	6091      	str	r1, [r2, #8]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	f042 0201 	orr.w	r2, r2, #1
 80043ca:	605a      	str	r2, [r3, #4]
 80043cc:	4648      	mov	r0, r9
 80043ce:	f000 f9eb 	bl	80047a8 <__malloc_unlock>
 80043d2:	3608      	adds	r6, #8
 80043d4:	e109      	b.n	80045ea <_malloc_r+0x282>
 80043d6:	3302      	adds	r3, #2
 80043d8:	4a8c      	ldr	r2, [pc, #560]	; (800460c <_malloc_r+0x2a4>)
 80043da:	692e      	ldr	r6, [r5, #16]
 80043dc:	4296      	cmp	r6, r2
 80043de:	4611      	mov	r1, r2
 80043e0:	d06d      	beq.n	80044be <_malloc_r+0x156>
 80043e2:	6870      	ldr	r0, [r6, #4]
 80043e4:	f020 0003 	bic.w	r0, r0, #3
 80043e8:	1b07      	subs	r7, r0, r4
 80043ea:	2f0f      	cmp	r7, #15
 80043ec:	dd47      	ble.n	800447e <_malloc_r+0x116>
 80043ee:	1933      	adds	r3, r6, r4
 80043f0:	f044 0401 	orr.w	r4, r4, #1
 80043f4:	6074      	str	r4, [r6, #4]
 80043f6:	616b      	str	r3, [r5, #20]
 80043f8:	612b      	str	r3, [r5, #16]
 80043fa:	60da      	str	r2, [r3, #12]
 80043fc:	609a      	str	r2, [r3, #8]
 80043fe:	f047 0201 	orr.w	r2, r7, #1
 8004402:	605a      	str	r2, [r3, #4]
 8004404:	5037      	str	r7, [r6, r0]
 8004406:	e7e1      	b.n	80043cc <_malloc_r+0x64>
 8004408:	0a63      	lsrs	r3, r4, #9
 800440a:	d02a      	beq.n	8004462 <_malloc_r+0xfa>
 800440c:	2b04      	cmp	r3, #4
 800440e:	d812      	bhi.n	8004436 <_malloc_r+0xce>
 8004410:	09a3      	lsrs	r3, r4, #6
 8004412:	3338      	adds	r3, #56	; 0x38
 8004414:	1c5a      	adds	r2, r3, #1
 8004416:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800441a:	f1a2 0008 	sub.w	r0, r2, #8
 800441e:	6856      	ldr	r6, [r2, #4]
 8004420:	4286      	cmp	r6, r0
 8004422:	d006      	beq.n	8004432 <_malloc_r+0xca>
 8004424:	6872      	ldr	r2, [r6, #4]
 8004426:	f022 0203 	bic.w	r2, r2, #3
 800442a:	1b11      	subs	r1, r2, r4
 800442c:	290f      	cmp	r1, #15
 800442e:	dd1c      	ble.n	800446a <_malloc_r+0x102>
 8004430:	3b01      	subs	r3, #1
 8004432:	3301      	adds	r3, #1
 8004434:	e7d0      	b.n	80043d8 <_malloc_r+0x70>
 8004436:	2b14      	cmp	r3, #20
 8004438:	d801      	bhi.n	800443e <_malloc_r+0xd6>
 800443a:	335b      	adds	r3, #91	; 0x5b
 800443c:	e7ea      	b.n	8004414 <_malloc_r+0xac>
 800443e:	2b54      	cmp	r3, #84	; 0x54
 8004440:	d802      	bhi.n	8004448 <_malloc_r+0xe0>
 8004442:	0b23      	lsrs	r3, r4, #12
 8004444:	336e      	adds	r3, #110	; 0x6e
 8004446:	e7e5      	b.n	8004414 <_malloc_r+0xac>
 8004448:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800444c:	d802      	bhi.n	8004454 <_malloc_r+0xec>
 800444e:	0be3      	lsrs	r3, r4, #15
 8004450:	3377      	adds	r3, #119	; 0x77
 8004452:	e7df      	b.n	8004414 <_malloc_r+0xac>
 8004454:	f240 5254 	movw	r2, #1364	; 0x554
 8004458:	4293      	cmp	r3, r2
 800445a:	d804      	bhi.n	8004466 <_malloc_r+0xfe>
 800445c:	0ca3      	lsrs	r3, r4, #18
 800445e:	337c      	adds	r3, #124	; 0x7c
 8004460:	e7d8      	b.n	8004414 <_malloc_r+0xac>
 8004462:	233f      	movs	r3, #63	; 0x3f
 8004464:	e7d6      	b.n	8004414 <_malloc_r+0xac>
 8004466:	237e      	movs	r3, #126	; 0x7e
 8004468:	e7d4      	b.n	8004414 <_malloc_r+0xac>
 800446a:	2900      	cmp	r1, #0
 800446c:	68f1      	ldr	r1, [r6, #12]
 800446e:	db04      	blt.n	800447a <_malloc_r+0x112>
 8004470:	68b3      	ldr	r3, [r6, #8]
 8004472:	60d9      	str	r1, [r3, #12]
 8004474:	608b      	str	r3, [r1, #8]
 8004476:	18b3      	adds	r3, r6, r2
 8004478:	e7a4      	b.n	80043c4 <_malloc_r+0x5c>
 800447a:	460e      	mov	r6, r1
 800447c:	e7d0      	b.n	8004420 <_malloc_r+0xb8>
 800447e:	2f00      	cmp	r7, #0
 8004480:	616a      	str	r2, [r5, #20]
 8004482:	612a      	str	r2, [r5, #16]
 8004484:	db05      	blt.n	8004492 <_malloc_r+0x12a>
 8004486:	4430      	add	r0, r6
 8004488:	6843      	ldr	r3, [r0, #4]
 800448a:	f043 0301 	orr.w	r3, r3, #1
 800448e:	6043      	str	r3, [r0, #4]
 8004490:	e79c      	b.n	80043cc <_malloc_r+0x64>
 8004492:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004496:	d244      	bcs.n	8004522 <_malloc_r+0x1ba>
 8004498:	08c0      	lsrs	r0, r0, #3
 800449a:	1087      	asrs	r7, r0, #2
 800449c:	2201      	movs	r2, #1
 800449e:	fa02 f707 	lsl.w	r7, r2, r7
 80044a2:	686a      	ldr	r2, [r5, #4]
 80044a4:	3001      	adds	r0, #1
 80044a6:	433a      	orrs	r2, r7
 80044a8:	606a      	str	r2, [r5, #4]
 80044aa:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80044ae:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 80044b2:	60b7      	str	r7, [r6, #8]
 80044b4:	3a08      	subs	r2, #8
 80044b6:	60f2      	str	r2, [r6, #12]
 80044b8:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 80044bc:	60fe      	str	r6, [r7, #12]
 80044be:	2001      	movs	r0, #1
 80044c0:	109a      	asrs	r2, r3, #2
 80044c2:	fa00 f202 	lsl.w	r2, r0, r2
 80044c6:	6868      	ldr	r0, [r5, #4]
 80044c8:	4282      	cmp	r2, r0
 80044ca:	f200 80a1 	bhi.w	8004610 <_malloc_r+0x2a8>
 80044ce:	4202      	tst	r2, r0
 80044d0:	d106      	bne.n	80044e0 <_malloc_r+0x178>
 80044d2:	f023 0303 	bic.w	r3, r3, #3
 80044d6:	0052      	lsls	r2, r2, #1
 80044d8:	4202      	tst	r2, r0
 80044da:	f103 0304 	add.w	r3, r3, #4
 80044de:	d0fa      	beq.n	80044d6 <_malloc_r+0x16e>
 80044e0:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 80044e4:	46e0      	mov	r8, ip
 80044e6:	469e      	mov	lr, r3
 80044e8:	f8d8 600c 	ldr.w	r6, [r8, #12]
 80044ec:	4546      	cmp	r6, r8
 80044ee:	d153      	bne.n	8004598 <_malloc_r+0x230>
 80044f0:	f10e 0e01 	add.w	lr, lr, #1
 80044f4:	f01e 0f03 	tst.w	lr, #3
 80044f8:	f108 0808 	add.w	r8, r8, #8
 80044fc:	d1f4      	bne.n	80044e8 <_malloc_r+0x180>
 80044fe:	0798      	lsls	r0, r3, #30
 8004500:	d179      	bne.n	80045f6 <_malloc_r+0x28e>
 8004502:	686b      	ldr	r3, [r5, #4]
 8004504:	ea23 0302 	bic.w	r3, r3, r2
 8004508:	606b      	str	r3, [r5, #4]
 800450a:	6868      	ldr	r0, [r5, #4]
 800450c:	0052      	lsls	r2, r2, #1
 800450e:	4282      	cmp	r2, r0
 8004510:	d87e      	bhi.n	8004610 <_malloc_r+0x2a8>
 8004512:	2a00      	cmp	r2, #0
 8004514:	d07c      	beq.n	8004610 <_malloc_r+0x2a8>
 8004516:	4673      	mov	r3, lr
 8004518:	4202      	tst	r2, r0
 800451a:	d1e1      	bne.n	80044e0 <_malloc_r+0x178>
 800451c:	3304      	adds	r3, #4
 800451e:	0052      	lsls	r2, r2, #1
 8004520:	e7fa      	b.n	8004518 <_malloc_r+0x1b0>
 8004522:	0a42      	lsrs	r2, r0, #9
 8004524:	2a04      	cmp	r2, #4
 8004526:	d815      	bhi.n	8004554 <_malloc_r+0x1ec>
 8004528:	0982      	lsrs	r2, r0, #6
 800452a:	3238      	adds	r2, #56	; 0x38
 800452c:	1c57      	adds	r7, r2, #1
 800452e:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8004532:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8004536:	45be      	cmp	lr, r7
 8004538:	d126      	bne.n	8004588 <_malloc_r+0x220>
 800453a:	2001      	movs	r0, #1
 800453c:	1092      	asrs	r2, r2, #2
 800453e:	fa00 f202 	lsl.w	r2, r0, r2
 8004542:	6868      	ldr	r0, [r5, #4]
 8004544:	4310      	orrs	r0, r2
 8004546:	6068      	str	r0, [r5, #4]
 8004548:	f8c6 e00c 	str.w	lr, [r6, #12]
 800454c:	60b7      	str	r7, [r6, #8]
 800454e:	f8ce 6008 	str.w	r6, [lr, #8]
 8004552:	e7b3      	b.n	80044bc <_malloc_r+0x154>
 8004554:	2a14      	cmp	r2, #20
 8004556:	d801      	bhi.n	800455c <_malloc_r+0x1f4>
 8004558:	325b      	adds	r2, #91	; 0x5b
 800455a:	e7e7      	b.n	800452c <_malloc_r+0x1c4>
 800455c:	2a54      	cmp	r2, #84	; 0x54
 800455e:	d802      	bhi.n	8004566 <_malloc_r+0x1fe>
 8004560:	0b02      	lsrs	r2, r0, #12
 8004562:	326e      	adds	r2, #110	; 0x6e
 8004564:	e7e2      	b.n	800452c <_malloc_r+0x1c4>
 8004566:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800456a:	d802      	bhi.n	8004572 <_malloc_r+0x20a>
 800456c:	0bc2      	lsrs	r2, r0, #15
 800456e:	3277      	adds	r2, #119	; 0x77
 8004570:	e7dc      	b.n	800452c <_malloc_r+0x1c4>
 8004572:	f240 5754 	movw	r7, #1364	; 0x554
 8004576:	42ba      	cmp	r2, r7
 8004578:	bf9a      	itte	ls
 800457a:	0c82      	lsrls	r2, r0, #18
 800457c:	327c      	addls	r2, #124	; 0x7c
 800457e:	227e      	movhi	r2, #126	; 0x7e
 8004580:	e7d4      	b.n	800452c <_malloc_r+0x1c4>
 8004582:	68bf      	ldr	r7, [r7, #8]
 8004584:	45be      	cmp	lr, r7
 8004586:	d004      	beq.n	8004592 <_malloc_r+0x22a>
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	f022 0203 	bic.w	r2, r2, #3
 800458e:	4290      	cmp	r0, r2
 8004590:	d3f7      	bcc.n	8004582 <_malloc_r+0x21a>
 8004592:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8004596:	e7d7      	b.n	8004548 <_malloc_r+0x1e0>
 8004598:	6870      	ldr	r0, [r6, #4]
 800459a:	68f7      	ldr	r7, [r6, #12]
 800459c:	f020 0003 	bic.w	r0, r0, #3
 80045a0:	eba0 0a04 	sub.w	sl, r0, r4
 80045a4:	f1ba 0f0f 	cmp.w	sl, #15
 80045a8:	dd10      	ble.n	80045cc <_malloc_r+0x264>
 80045aa:	68b2      	ldr	r2, [r6, #8]
 80045ac:	1933      	adds	r3, r6, r4
 80045ae:	f044 0401 	orr.w	r4, r4, #1
 80045b2:	6074      	str	r4, [r6, #4]
 80045b4:	60d7      	str	r7, [r2, #12]
 80045b6:	60ba      	str	r2, [r7, #8]
 80045b8:	f04a 0201 	orr.w	r2, sl, #1
 80045bc:	616b      	str	r3, [r5, #20]
 80045be:	612b      	str	r3, [r5, #16]
 80045c0:	60d9      	str	r1, [r3, #12]
 80045c2:	6099      	str	r1, [r3, #8]
 80045c4:	605a      	str	r2, [r3, #4]
 80045c6:	f846 a000 	str.w	sl, [r6, r0]
 80045ca:	e6ff      	b.n	80043cc <_malloc_r+0x64>
 80045cc:	f1ba 0f00 	cmp.w	sl, #0
 80045d0:	db0f      	blt.n	80045f2 <_malloc_r+0x28a>
 80045d2:	4430      	add	r0, r6
 80045d4:	6843      	ldr	r3, [r0, #4]
 80045d6:	f043 0301 	orr.w	r3, r3, #1
 80045da:	6043      	str	r3, [r0, #4]
 80045dc:	f856 3f08 	ldr.w	r3, [r6, #8]!
 80045e0:	4648      	mov	r0, r9
 80045e2:	60df      	str	r7, [r3, #12]
 80045e4:	60bb      	str	r3, [r7, #8]
 80045e6:	f000 f8df 	bl	80047a8 <__malloc_unlock>
 80045ea:	4630      	mov	r0, r6
 80045ec:	b003      	add	sp, #12
 80045ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045f2:	463e      	mov	r6, r7
 80045f4:	e77a      	b.n	80044ec <_malloc_r+0x184>
 80045f6:	f85c 0908 	ldr.w	r0, [ip], #-8
 80045fa:	4584      	cmp	ip, r0
 80045fc:	f103 33ff 	add.w	r3, r3, #4294967295
 8004600:	f43f af7d 	beq.w	80044fe <_malloc_r+0x196>
 8004604:	e781      	b.n	800450a <_malloc_r+0x1a2>
 8004606:	bf00      	nop
 8004608:	200000f8 	.word	0x200000f8
 800460c:	20000100 	.word	0x20000100
 8004610:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8004614:	f8db 6004 	ldr.w	r6, [fp, #4]
 8004618:	f026 0603 	bic.w	r6, r6, #3
 800461c:	42b4      	cmp	r4, r6
 800461e:	d803      	bhi.n	8004628 <_malloc_r+0x2c0>
 8004620:	1b33      	subs	r3, r6, r4
 8004622:	2b0f      	cmp	r3, #15
 8004624:	f300 8096 	bgt.w	8004754 <_malloc_r+0x3ec>
 8004628:	4a4f      	ldr	r2, [pc, #316]	; (8004768 <_malloc_r+0x400>)
 800462a:	6817      	ldr	r7, [r2, #0]
 800462c:	4a4f      	ldr	r2, [pc, #316]	; (800476c <_malloc_r+0x404>)
 800462e:	6811      	ldr	r1, [r2, #0]
 8004630:	3710      	adds	r7, #16
 8004632:	3101      	adds	r1, #1
 8004634:	eb0b 0306 	add.w	r3, fp, r6
 8004638:	4427      	add	r7, r4
 800463a:	d005      	beq.n	8004648 <_malloc_r+0x2e0>
 800463c:	494c      	ldr	r1, [pc, #304]	; (8004770 <_malloc_r+0x408>)
 800463e:	3901      	subs	r1, #1
 8004640:	440f      	add	r7, r1
 8004642:	3101      	adds	r1, #1
 8004644:	4249      	negs	r1, r1
 8004646:	400f      	ands	r7, r1
 8004648:	4639      	mov	r1, r7
 800464a:	4648      	mov	r0, r9
 800464c:	9201      	str	r2, [sp, #4]
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	f000 fb80 	bl	8004d54 <_sbrk_r>
 8004654:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004658:	4680      	mov	r8, r0
 800465a:	d056      	beq.n	800470a <_malloc_r+0x3a2>
 800465c:	9b00      	ldr	r3, [sp, #0]
 800465e:	9a01      	ldr	r2, [sp, #4]
 8004660:	4283      	cmp	r3, r0
 8004662:	d901      	bls.n	8004668 <_malloc_r+0x300>
 8004664:	45ab      	cmp	fp, r5
 8004666:	d150      	bne.n	800470a <_malloc_r+0x3a2>
 8004668:	4842      	ldr	r0, [pc, #264]	; (8004774 <_malloc_r+0x40c>)
 800466a:	6801      	ldr	r1, [r0, #0]
 800466c:	4543      	cmp	r3, r8
 800466e:	eb07 0e01 	add.w	lr, r7, r1
 8004672:	f8c0 e000 	str.w	lr, [r0]
 8004676:	4940      	ldr	r1, [pc, #256]	; (8004778 <_malloc_r+0x410>)
 8004678:	4682      	mov	sl, r0
 800467a:	d113      	bne.n	80046a4 <_malloc_r+0x33c>
 800467c:	420b      	tst	r3, r1
 800467e:	d111      	bne.n	80046a4 <_malloc_r+0x33c>
 8004680:	68ab      	ldr	r3, [r5, #8]
 8004682:	443e      	add	r6, r7
 8004684:	f046 0601 	orr.w	r6, r6, #1
 8004688:	605e      	str	r6, [r3, #4]
 800468a:	4a3c      	ldr	r2, [pc, #240]	; (800477c <_malloc_r+0x414>)
 800468c:	f8da 3000 	ldr.w	r3, [sl]
 8004690:	6811      	ldr	r1, [r2, #0]
 8004692:	428b      	cmp	r3, r1
 8004694:	bf88      	it	hi
 8004696:	6013      	strhi	r3, [r2, #0]
 8004698:	4a39      	ldr	r2, [pc, #228]	; (8004780 <_malloc_r+0x418>)
 800469a:	6811      	ldr	r1, [r2, #0]
 800469c:	428b      	cmp	r3, r1
 800469e:	bf88      	it	hi
 80046a0:	6013      	strhi	r3, [r2, #0]
 80046a2:	e032      	b.n	800470a <_malloc_r+0x3a2>
 80046a4:	6810      	ldr	r0, [r2, #0]
 80046a6:	3001      	adds	r0, #1
 80046a8:	bf1b      	ittet	ne
 80046aa:	eba8 0303 	subne.w	r3, r8, r3
 80046ae:	4473      	addne	r3, lr
 80046b0:	f8c2 8000 	streq.w	r8, [r2]
 80046b4:	f8ca 3000 	strne.w	r3, [sl]
 80046b8:	f018 0007 	ands.w	r0, r8, #7
 80046bc:	bf1c      	itt	ne
 80046be:	f1c0 0008 	rsbne	r0, r0, #8
 80046c2:	4480      	addne	r8, r0
 80046c4:	4b2a      	ldr	r3, [pc, #168]	; (8004770 <_malloc_r+0x408>)
 80046c6:	4447      	add	r7, r8
 80046c8:	4418      	add	r0, r3
 80046ca:	400f      	ands	r7, r1
 80046cc:	1bc7      	subs	r7, r0, r7
 80046ce:	4639      	mov	r1, r7
 80046d0:	4648      	mov	r0, r9
 80046d2:	f000 fb3f 	bl	8004d54 <_sbrk_r>
 80046d6:	1c43      	adds	r3, r0, #1
 80046d8:	bf08      	it	eq
 80046da:	4640      	moveq	r0, r8
 80046dc:	f8da 3000 	ldr.w	r3, [sl]
 80046e0:	f8c5 8008 	str.w	r8, [r5, #8]
 80046e4:	bf08      	it	eq
 80046e6:	2700      	moveq	r7, #0
 80046e8:	eba0 0008 	sub.w	r0, r0, r8
 80046ec:	443b      	add	r3, r7
 80046ee:	4407      	add	r7, r0
 80046f0:	f047 0701 	orr.w	r7, r7, #1
 80046f4:	45ab      	cmp	fp, r5
 80046f6:	f8ca 3000 	str.w	r3, [sl]
 80046fa:	f8c8 7004 	str.w	r7, [r8, #4]
 80046fe:	d0c4      	beq.n	800468a <_malloc_r+0x322>
 8004700:	2e0f      	cmp	r6, #15
 8004702:	d810      	bhi.n	8004726 <_malloc_r+0x3be>
 8004704:	2301      	movs	r3, #1
 8004706:	f8c8 3004 	str.w	r3, [r8, #4]
 800470a:	68ab      	ldr	r3, [r5, #8]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	f022 0203 	bic.w	r2, r2, #3
 8004712:	4294      	cmp	r4, r2
 8004714:	eba2 0304 	sub.w	r3, r2, r4
 8004718:	d801      	bhi.n	800471e <_malloc_r+0x3b6>
 800471a:	2b0f      	cmp	r3, #15
 800471c:	dc1a      	bgt.n	8004754 <_malloc_r+0x3ec>
 800471e:	4648      	mov	r0, r9
 8004720:	f000 f842 	bl	80047a8 <__malloc_unlock>
 8004724:	e62d      	b.n	8004382 <_malloc_r+0x1a>
 8004726:	f8db 3004 	ldr.w	r3, [fp, #4]
 800472a:	3e0c      	subs	r6, #12
 800472c:	f026 0607 	bic.w	r6, r6, #7
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	4333      	orrs	r3, r6
 8004736:	f8cb 3004 	str.w	r3, [fp, #4]
 800473a:	eb0b 0306 	add.w	r3, fp, r6
 800473e:	2205      	movs	r2, #5
 8004740:	2e0f      	cmp	r6, #15
 8004742:	605a      	str	r2, [r3, #4]
 8004744:	609a      	str	r2, [r3, #8]
 8004746:	d9a0      	bls.n	800468a <_malloc_r+0x322>
 8004748:	f10b 0108 	add.w	r1, fp, #8
 800474c:	4648      	mov	r0, r9
 800474e:	f000 fc0f 	bl	8004f70 <_free_r>
 8004752:	e79a      	b.n	800468a <_malloc_r+0x322>
 8004754:	68ae      	ldr	r6, [r5, #8]
 8004756:	f044 0201 	orr.w	r2, r4, #1
 800475a:	4434      	add	r4, r6
 800475c:	f043 0301 	orr.w	r3, r3, #1
 8004760:	6072      	str	r2, [r6, #4]
 8004762:	60ac      	str	r4, [r5, #8]
 8004764:	6063      	str	r3, [r4, #4]
 8004766:	e631      	b.n	80043cc <_malloc_r+0x64>
 8004768:	200006c0 	.word	0x200006c0
 800476c:	20000500 	.word	0x20000500
 8004770:	00000080 	.word	0x00000080
 8004774:	20000690 	.word	0x20000690
 8004778:	0000007f 	.word	0x0000007f
 800477c:	200006b8 	.word	0x200006b8
 8004780:	200006bc 	.word	0x200006bc

08004784 <memcpy>:
 8004784:	b510      	push	{r4, lr}
 8004786:	1e43      	subs	r3, r0, #1
 8004788:	440a      	add	r2, r1
 800478a:	4291      	cmp	r1, r2
 800478c:	d100      	bne.n	8004790 <memcpy+0xc>
 800478e:	bd10      	pop	{r4, pc}
 8004790:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004794:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004798:	e7f7      	b.n	800478a <memcpy+0x6>
	...

0800479c <__malloc_lock>:
 800479c:	4801      	ldr	r0, [pc, #4]	; (80047a4 <__malloc_lock+0x8>)
 800479e:	f000 bca3 	b.w	80050e8 <__retarget_lock_acquire_recursive>
 80047a2:	bf00      	nop
 80047a4:	20000764 	.word	0x20000764

080047a8 <__malloc_unlock>:
 80047a8:	4801      	ldr	r0, [pc, #4]	; (80047b0 <__malloc_unlock+0x8>)
 80047aa:	f000 bc9e 	b.w	80050ea <__retarget_lock_release_recursive>
 80047ae:	bf00      	nop
 80047b0:	20000764 	.word	0x20000764

080047b4 <_Balloc>:
 80047b4:	b570      	push	{r4, r5, r6, lr}
 80047b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80047b8:	4604      	mov	r4, r0
 80047ba:	460e      	mov	r6, r1
 80047bc:	b93d      	cbnz	r5, 80047ce <_Balloc+0x1a>
 80047be:	2010      	movs	r0, #16
 80047c0:	f7ff fdca 	bl	8004358 <malloc>
 80047c4:	6260      	str	r0, [r4, #36]	; 0x24
 80047c6:	6045      	str	r5, [r0, #4]
 80047c8:	6085      	str	r5, [r0, #8]
 80047ca:	6005      	str	r5, [r0, #0]
 80047cc:	60c5      	str	r5, [r0, #12]
 80047ce:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80047d0:	68eb      	ldr	r3, [r5, #12]
 80047d2:	b183      	cbz	r3, 80047f6 <_Balloc+0x42>
 80047d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80047dc:	b9b8      	cbnz	r0, 800480e <_Balloc+0x5a>
 80047de:	2101      	movs	r1, #1
 80047e0:	fa01 f506 	lsl.w	r5, r1, r6
 80047e4:	1d6a      	adds	r2, r5, #5
 80047e6:	0092      	lsls	r2, r2, #2
 80047e8:	4620      	mov	r0, r4
 80047ea:	f000 fb3d 	bl	8004e68 <_calloc_r>
 80047ee:	b160      	cbz	r0, 800480a <_Balloc+0x56>
 80047f0:	6046      	str	r6, [r0, #4]
 80047f2:	6085      	str	r5, [r0, #8]
 80047f4:	e00e      	b.n	8004814 <_Balloc+0x60>
 80047f6:	2221      	movs	r2, #33	; 0x21
 80047f8:	2104      	movs	r1, #4
 80047fa:	4620      	mov	r0, r4
 80047fc:	f000 fb34 	bl	8004e68 <_calloc_r>
 8004800:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004802:	60e8      	str	r0, [r5, #12]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1e4      	bne.n	80047d4 <_Balloc+0x20>
 800480a:	2000      	movs	r0, #0
 800480c:	bd70      	pop	{r4, r5, r6, pc}
 800480e:	6802      	ldr	r2, [r0, #0]
 8004810:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004814:	2300      	movs	r3, #0
 8004816:	6103      	str	r3, [r0, #16]
 8004818:	60c3      	str	r3, [r0, #12]
 800481a:	bd70      	pop	{r4, r5, r6, pc}

0800481c <_Bfree>:
 800481c:	b570      	push	{r4, r5, r6, lr}
 800481e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004820:	4606      	mov	r6, r0
 8004822:	460d      	mov	r5, r1
 8004824:	b93c      	cbnz	r4, 8004836 <_Bfree+0x1a>
 8004826:	2010      	movs	r0, #16
 8004828:	f7ff fd96 	bl	8004358 <malloc>
 800482c:	6270      	str	r0, [r6, #36]	; 0x24
 800482e:	6044      	str	r4, [r0, #4]
 8004830:	6084      	str	r4, [r0, #8]
 8004832:	6004      	str	r4, [r0, #0]
 8004834:	60c4      	str	r4, [r0, #12]
 8004836:	b13d      	cbz	r5, 8004848 <_Bfree+0x2c>
 8004838:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800483a:	686a      	ldr	r2, [r5, #4]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004842:	6029      	str	r1, [r5, #0]
 8004844:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004848:	bd70      	pop	{r4, r5, r6, pc}

0800484a <__multadd>:
 800484a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800484e:	690d      	ldr	r5, [r1, #16]
 8004850:	461f      	mov	r7, r3
 8004852:	4606      	mov	r6, r0
 8004854:	460c      	mov	r4, r1
 8004856:	f101 0e14 	add.w	lr, r1, #20
 800485a:	2300      	movs	r3, #0
 800485c:	f8de 0000 	ldr.w	r0, [lr]
 8004860:	b281      	uxth	r1, r0
 8004862:	fb02 7101 	mla	r1, r2, r1, r7
 8004866:	0c0f      	lsrs	r7, r1, #16
 8004868:	0c00      	lsrs	r0, r0, #16
 800486a:	fb02 7000 	mla	r0, r2, r0, r7
 800486e:	b289      	uxth	r1, r1
 8004870:	3301      	adds	r3, #1
 8004872:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004876:	429d      	cmp	r5, r3
 8004878:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800487c:	f84e 1b04 	str.w	r1, [lr], #4
 8004880:	dcec      	bgt.n	800485c <__multadd+0x12>
 8004882:	b1d7      	cbz	r7, 80048ba <__multadd+0x70>
 8004884:	68a3      	ldr	r3, [r4, #8]
 8004886:	429d      	cmp	r5, r3
 8004888:	db12      	blt.n	80048b0 <__multadd+0x66>
 800488a:	6861      	ldr	r1, [r4, #4]
 800488c:	4630      	mov	r0, r6
 800488e:	3101      	adds	r1, #1
 8004890:	f7ff ff90 	bl	80047b4 <_Balloc>
 8004894:	6922      	ldr	r2, [r4, #16]
 8004896:	3202      	adds	r2, #2
 8004898:	f104 010c 	add.w	r1, r4, #12
 800489c:	4680      	mov	r8, r0
 800489e:	0092      	lsls	r2, r2, #2
 80048a0:	300c      	adds	r0, #12
 80048a2:	f7ff ff6f 	bl	8004784 <memcpy>
 80048a6:	4621      	mov	r1, r4
 80048a8:	4630      	mov	r0, r6
 80048aa:	f7ff ffb7 	bl	800481c <_Bfree>
 80048ae:	4644      	mov	r4, r8
 80048b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80048b4:	3501      	adds	r5, #1
 80048b6:	615f      	str	r7, [r3, #20]
 80048b8:	6125      	str	r5, [r4, #16]
 80048ba:	4620      	mov	r0, r4
 80048bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080048c0 <__hi0bits>:
 80048c0:	0c02      	lsrs	r2, r0, #16
 80048c2:	0412      	lsls	r2, r2, #16
 80048c4:	4603      	mov	r3, r0
 80048c6:	b9b2      	cbnz	r2, 80048f6 <__hi0bits+0x36>
 80048c8:	0403      	lsls	r3, r0, #16
 80048ca:	2010      	movs	r0, #16
 80048cc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80048d0:	bf04      	itt	eq
 80048d2:	021b      	lsleq	r3, r3, #8
 80048d4:	3008      	addeq	r0, #8
 80048d6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80048da:	bf04      	itt	eq
 80048dc:	011b      	lsleq	r3, r3, #4
 80048de:	3004      	addeq	r0, #4
 80048e0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80048e4:	bf04      	itt	eq
 80048e6:	009b      	lsleq	r3, r3, #2
 80048e8:	3002      	addeq	r0, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	db06      	blt.n	80048fc <__hi0bits+0x3c>
 80048ee:	005b      	lsls	r3, r3, #1
 80048f0:	d503      	bpl.n	80048fa <__hi0bits+0x3a>
 80048f2:	3001      	adds	r0, #1
 80048f4:	4770      	bx	lr
 80048f6:	2000      	movs	r0, #0
 80048f8:	e7e8      	b.n	80048cc <__hi0bits+0xc>
 80048fa:	2020      	movs	r0, #32
 80048fc:	4770      	bx	lr

080048fe <__lo0bits>:
 80048fe:	6803      	ldr	r3, [r0, #0]
 8004900:	f013 0207 	ands.w	r2, r3, #7
 8004904:	4601      	mov	r1, r0
 8004906:	d00b      	beq.n	8004920 <__lo0bits+0x22>
 8004908:	07da      	lsls	r2, r3, #31
 800490a:	d423      	bmi.n	8004954 <__lo0bits+0x56>
 800490c:	0798      	lsls	r0, r3, #30
 800490e:	bf49      	itett	mi
 8004910:	085b      	lsrmi	r3, r3, #1
 8004912:	089b      	lsrpl	r3, r3, #2
 8004914:	2001      	movmi	r0, #1
 8004916:	600b      	strmi	r3, [r1, #0]
 8004918:	bf5c      	itt	pl
 800491a:	600b      	strpl	r3, [r1, #0]
 800491c:	2002      	movpl	r0, #2
 800491e:	4770      	bx	lr
 8004920:	b298      	uxth	r0, r3
 8004922:	b9a8      	cbnz	r0, 8004950 <__lo0bits+0x52>
 8004924:	0c1b      	lsrs	r3, r3, #16
 8004926:	2010      	movs	r0, #16
 8004928:	f013 0fff 	tst.w	r3, #255	; 0xff
 800492c:	bf04      	itt	eq
 800492e:	0a1b      	lsreq	r3, r3, #8
 8004930:	3008      	addeq	r0, #8
 8004932:	071a      	lsls	r2, r3, #28
 8004934:	bf04      	itt	eq
 8004936:	091b      	lsreq	r3, r3, #4
 8004938:	3004      	addeq	r0, #4
 800493a:	079a      	lsls	r2, r3, #30
 800493c:	bf04      	itt	eq
 800493e:	089b      	lsreq	r3, r3, #2
 8004940:	3002      	addeq	r0, #2
 8004942:	07da      	lsls	r2, r3, #31
 8004944:	d402      	bmi.n	800494c <__lo0bits+0x4e>
 8004946:	085b      	lsrs	r3, r3, #1
 8004948:	d006      	beq.n	8004958 <__lo0bits+0x5a>
 800494a:	3001      	adds	r0, #1
 800494c:	600b      	str	r3, [r1, #0]
 800494e:	4770      	bx	lr
 8004950:	4610      	mov	r0, r2
 8004952:	e7e9      	b.n	8004928 <__lo0bits+0x2a>
 8004954:	2000      	movs	r0, #0
 8004956:	4770      	bx	lr
 8004958:	2020      	movs	r0, #32
 800495a:	4770      	bx	lr

0800495c <__i2b>:
 800495c:	b510      	push	{r4, lr}
 800495e:	460c      	mov	r4, r1
 8004960:	2101      	movs	r1, #1
 8004962:	f7ff ff27 	bl	80047b4 <_Balloc>
 8004966:	2201      	movs	r2, #1
 8004968:	6144      	str	r4, [r0, #20]
 800496a:	6102      	str	r2, [r0, #16]
 800496c:	bd10      	pop	{r4, pc}

0800496e <__multiply>:
 800496e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004972:	4614      	mov	r4, r2
 8004974:	690a      	ldr	r2, [r1, #16]
 8004976:	6923      	ldr	r3, [r4, #16]
 8004978:	429a      	cmp	r2, r3
 800497a:	bfb8      	it	lt
 800497c:	460b      	movlt	r3, r1
 800497e:	4689      	mov	r9, r1
 8004980:	bfbc      	itt	lt
 8004982:	46a1      	movlt	r9, r4
 8004984:	461c      	movlt	r4, r3
 8004986:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800498a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800498e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004992:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004996:	eb07 060a 	add.w	r6, r7, sl
 800499a:	429e      	cmp	r6, r3
 800499c:	bfc8      	it	gt
 800499e:	3101      	addgt	r1, #1
 80049a0:	f7ff ff08 	bl	80047b4 <_Balloc>
 80049a4:	f100 0514 	add.w	r5, r0, #20
 80049a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80049ac:	462b      	mov	r3, r5
 80049ae:	2200      	movs	r2, #0
 80049b0:	4543      	cmp	r3, r8
 80049b2:	d316      	bcc.n	80049e2 <__multiply+0x74>
 80049b4:	f104 0214 	add.w	r2, r4, #20
 80049b8:	f109 0114 	add.w	r1, r9, #20
 80049bc:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 80049c0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80049c4:	9301      	str	r3, [sp, #4]
 80049c6:	9c01      	ldr	r4, [sp, #4]
 80049c8:	4294      	cmp	r4, r2
 80049ca:	4613      	mov	r3, r2
 80049cc:	d80c      	bhi.n	80049e8 <__multiply+0x7a>
 80049ce:	2e00      	cmp	r6, #0
 80049d0:	dd03      	ble.n	80049da <__multiply+0x6c>
 80049d2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d054      	beq.n	8004a84 <__multiply+0x116>
 80049da:	6106      	str	r6, [r0, #16]
 80049dc:	b003      	add	sp, #12
 80049de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049e2:	f843 2b04 	str.w	r2, [r3], #4
 80049e6:	e7e3      	b.n	80049b0 <__multiply+0x42>
 80049e8:	f8b3 a000 	ldrh.w	sl, [r3]
 80049ec:	3204      	adds	r2, #4
 80049ee:	f1ba 0f00 	cmp.w	sl, #0
 80049f2:	d020      	beq.n	8004a36 <__multiply+0xc8>
 80049f4:	46ae      	mov	lr, r5
 80049f6:	4689      	mov	r9, r1
 80049f8:	f04f 0c00 	mov.w	ip, #0
 80049fc:	f859 4b04 	ldr.w	r4, [r9], #4
 8004a00:	f8be b000 	ldrh.w	fp, [lr]
 8004a04:	b2a3      	uxth	r3, r4
 8004a06:	fb0a b303 	mla	r3, sl, r3, fp
 8004a0a:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8004a0e:	f8de 4000 	ldr.w	r4, [lr]
 8004a12:	4463      	add	r3, ip
 8004a14:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004a18:	fb0a c40b 	mla	r4, sl, fp, ip
 8004a1c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004a26:	454f      	cmp	r7, r9
 8004a28:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004a2c:	f84e 3b04 	str.w	r3, [lr], #4
 8004a30:	d8e4      	bhi.n	80049fc <__multiply+0x8e>
 8004a32:	f8ce c000 	str.w	ip, [lr]
 8004a36:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8004a3a:	f1b9 0f00 	cmp.w	r9, #0
 8004a3e:	d01f      	beq.n	8004a80 <__multiply+0x112>
 8004a40:	682b      	ldr	r3, [r5, #0]
 8004a42:	46ae      	mov	lr, r5
 8004a44:	468c      	mov	ip, r1
 8004a46:	f04f 0a00 	mov.w	sl, #0
 8004a4a:	f8bc 4000 	ldrh.w	r4, [ip]
 8004a4e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004a52:	fb09 b404 	mla	r4, r9, r4, fp
 8004a56:	44a2      	add	sl, r4
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8004a5e:	f84e 3b04 	str.w	r3, [lr], #4
 8004a62:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004a66:	f8be 4000 	ldrh.w	r4, [lr]
 8004a6a:	0c1b      	lsrs	r3, r3, #16
 8004a6c:	fb09 4303 	mla	r3, r9, r3, r4
 8004a70:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8004a74:	4567      	cmp	r7, ip
 8004a76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004a7a:	d8e6      	bhi.n	8004a4a <__multiply+0xdc>
 8004a7c:	f8ce 3000 	str.w	r3, [lr]
 8004a80:	3504      	adds	r5, #4
 8004a82:	e7a0      	b.n	80049c6 <__multiply+0x58>
 8004a84:	3e01      	subs	r6, #1
 8004a86:	e7a2      	b.n	80049ce <__multiply+0x60>

08004a88 <__pow5mult>:
 8004a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a8c:	4615      	mov	r5, r2
 8004a8e:	f012 0203 	ands.w	r2, r2, #3
 8004a92:	4606      	mov	r6, r0
 8004a94:	460f      	mov	r7, r1
 8004a96:	d007      	beq.n	8004aa8 <__pow5mult+0x20>
 8004a98:	3a01      	subs	r2, #1
 8004a9a:	4c21      	ldr	r4, [pc, #132]	; (8004b20 <__pow5mult+0x98>)
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004aa2:	f7ff fed2 	bl	800484a <__multadd>
 8004aa6:	4607      	mov	r7, r0
 8004aa8:	10ad      	asrs	r5, r5, #2
 8004aaa:	d035      	beq.n	8004b18 <__pow5mult+0x90>
 8004aac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004aae:	b93c      	cbnz	r4, 8004ac0 <__pow5mult+0x38>
 8004ab0:	2010      	movs	r0, #16
 8004ab2:	f7ff fc51 	bl	8004358 <malloc>
 8004ab6:	6270      	str	r0, [r6, #36]	; 0x24
 8004ab8:	6044      	str	r4, [r0, #4]
 8004aba:	6084      	str	r4, [r0, #8]
 8004abc:	6004      	str	r4, [r0, #0]
 8004abe:	60c4      	str	r4, [r0, #12]
 8004ac0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004ac4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004ac8:	b94c      	cbnz	r4, 8004ade <__pow5mult+0x56>
 8004aca:	f240 2171 	movw	r1, #625	; 0x271
 8004ace:	4630      	mov	r0, r6
 8004ad0:	f7ff ff44 	bl	800495c <__i2b>
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	f8c8 0008 	str.w	r0, [r8, #8]
 8004ada:	4604      	mov	r4, r0
 8004adc:	6003      	str	r3, [r0, #0]
 8004ade:	f04f 0800 	mov.w	r8, #0
 8004ae2:	07eb      	lsls	r3, r5, #31
 8004ae4:	d50a      	bpl.n	8004afc <__pow5mult+0x74>
 8004ae6:	4639      	mov	r1, r7
 8004ae8:	4622      	mov	r2, r4
 8004aea:	4630      	mov	r0, r6
 8004aec:	f7ff ff3f 	bl	800496e <__multiply>
 8004af0:	4639      	mov	r1, r7
 8004af2:	4681      	mov	r9, r0
 8004af4:	4630      	mov	r0, r6
 8004af6:	f7ff fe91 	bl	800481c <_Bfree>
 8004afa:	464f      	mov	r7, r9
 8004afc:	106d      	asrs	r5, r5, #1
 8004afe:	d00b      	beq.n	8004b18 <__pow5mult+0x90>
 8004b00:	6820      	ldr	r0, [r4, #0]
 8004b02:	b938      	cbnz	r0, 8004b14 <__pow5mult+0x8c>
 8004b04:	4622      	mov	r2, r4
 8004b06:	4621      	mov	r1, r4
 8004b08:	4630      	mov	r0, r6
 8004b0a:	f7ff ff30 	bl	800496e <__multiply>
 8004b0e:	6020      	str	r0, [r4, #0]
 8004b10:	f8c0 8000 	str.w	r8, [r0]
 8004b14:	4604      	mov	r4, r0
 8004b16:	e7e4      	b.n	8004ae2 <__pow5mult+0x5a>
 8004b18:	4638      	mov	r0, r7
 8004b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b1e:	bf00      	nop
 8004b20:	08005640 	.word	0x08005640

08004b24 <__lshift>:
 8004b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b28:	460c      	mov	r4, r1
 8004b2a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004b2e:	6923      	ldr	r3, [r4, #16]
 8004b30:	6849      	ldr	r1, [r1, #4]
 8004b32:	eb0a 0903 	add.w	r9, sl, r3
 8004b36:	68a3      	ldr	r3, [r4, #8]
 8004b38:	4607      	mov	r7, r0
 8004b3a:	4616      	mov	r6, r2
 8004b3c:	f109 0501 	add.w	r5, r9, #1
 8004b40:	42ab      	cmp	r3, r5
 8004b42:	db31      	blt.n	8004ba8 <__lshift+0x84>
 8004b44:	4638      	mov	r0, r7
 8004b46:	f7ff fe35 	bl	80047b4 <_Balloc>
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	4680      	mov	r8, r0
 8004b4e:	f100 0314 	add.w	r3, r0, #20
 8004b52:	4611      	mov	r1, r2
 8004b54:	4552      	cmp	r2, sl
 8004b56:	db2a      	blt.n	8004bae <__lshift+0x8a>
 8004b58:	6920      	ldr	r0, [r4, #16]
 8004b5a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004b5e:	f104 0114 	add.w	r1, r4, #20
 8004b62:	f016 021f 	ands.w	r2, r6, #31
 8004b66:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8004b6a:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8004b6e:	d022      	beq.n	8004bb6 <__lshift+0x92>
 8004b70:	f1c2 0c20 	rsb	ip, r2, #32
 8004b74:	2000      	movs	r0, #0
 8004b76:	680e      	ldr	r6, [r1, #0]
 8004b78:	4096      	lsls	r6, r2
 8004b7a:	4330      	orrs	r0, r6
 8004b7c:	f843 0b04 	str.w	r0, [r3], #4
 8004b80:	f851 0b04 	ldr.w	r0, [r1], #4
 8004b84:	458e      	cmp	lr, r1
 8004b86:	fa20 f00c 	lsr.w	r0, r0, ip
 8004b8a:	d8f4      	bhi.n	8004b76 <__lshift+0x52>
 8004b8c:	6018      	str	r0, [r3, #0]
 8004b8e:	b108      	cbz	r0, 8004b94 <__lshift+0x70>
 8004b90:	f109 0502 	add.w	r5, r9, #2
 8004b94:	3d01      	subs	r5, #1
 8004b96:	4638      	mov	r0, r7
 8004b98:	f8c8 5010 	str.w	r5, [r8, #16]
 8004b9c:	4621      	mov	r1, r4
 8004b9e:	f7ff fe3d 	bl	800481c <_Bfree>
 8004ba2:	4640      	mov	r0, r8
 8004ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ba8:	3101      	adds	r1, #1
 8004baa:	005b      	lsls	r3, r3, #1
 8004bac:	e7c8      	b.n	8004b40 <__lshift+0x1c>
 8004bae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004bb2:	3201      	adds	r2, #1
 8004bb4:	e7ce      	b.n	8004b54 <__lshift+0x30>
 8004bb6:	3b04      	subs	r3, #4
 8004bb8:	f851 2b04 	ldr.w	r2, [r1], #4
 8004bbc:	f843 2f04 	str.w	r2, [r3, #4]!
 8004bc0:	458e      	cmp	lr, r1
 8004bc2:	d8f9      	bhi.n	8004bb8 <__lshift+0x94>
 8004bc4:	e7e6      	b.n	8004b94 <__lshift+0x70>

08004bc6 <__mcmp>:
 8004bc6:	6903      	ldr	r3, [r0, #16]
 8004bc8:	690a      	ldr	r2, [r1, #16]
 8004bca:	1a9b      	subs	r3, r3, r2
 8004bcc:	b530      	push	{r4, r5, lr}
 8004bce:	d10c      	bne.n	8004bea <__mcmp+0x24>
 8004bd0:	0092      	lsls	r2, r2, #2
 8004bd2:	3014      	adds	r0, #20
 8004bd4:	3114      	adds	r1, #20
 8004bd6:	1884      	adds	r4, r0, r2
 8004bd8:	4411      	add	r1, r2
 8004bda:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004bde:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004be2:	4295      	cmp	r5, r2
 8004be4:	d003      	beq.n	8004bee <__mcmp+0x28>
 8004be6:	d305      	bcc.n	8004bf4 <__mcmp+0x2e>
 8004be8:	2301      	movs	r3, #1
 8004bea:	4618      	mov	r0, r3
 8004bec:	bd30      	pop	{r4, r5, pc}
 8004bee:	42a0      	cmp	r0, r4
 8004bf0:	d3f3      	bcc.n	8004bda <__mcmp+0x14>
 8004bf2:	e7fa      	b.n	8004bea <__mcmp+0x24>
 8004bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8004bf8:	e7f7      	b.n	8004bea <__mcmp+0x24>

08004bfa <__mdiff>:
 8004bfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bfe:	460d      	mov	r5, r1
 8004c00:	4607      	mov	r7, r0
 8004c02:	4611      	mov	r1, r2
 8004c04:	4628      	mov	r0, r5
 8004c06:	4614      	mov	r4, r2
 8004c08:	f7ff ffdd 	bl	8004bc6 <__mcmp>
 8004c0c:	1e06      	subs	r6, r0, #0
 8004c0e:	d108      	bne.n	8004c22 <__mdiff+0x28>
 8004c10:	4631      	mov	r1, r6
 8004c12:	4638      	mov	r0, r7
 8004c14:	f7ff fdce 	bl	80047b4 <_Balloc>
 8004c18:	2301      	movs	r3, #1
 8004c1a:	6103      	str	r3, [r0, #16]
 8004c1c:	6146      	str	r6, [r0, #20]
 8004c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c22:	bfa4      	itt	ge
 8004c24:	4623      	movge	r3, r4
 8004c26:	462c      	movge	r4, r5
 8004c28:	4638      	mov	r0, r7
 8004c2a:	6861      	ldr	r1, [r4, #4]
 8004c2c:	bfa6      	itte	ge
 8004c2e:	461d      	movge	r5, r3
 8004c30:	2600      	movge	r6, #0
 8004c32:	2601      	movlt	r6, #1
 8004c34:	f7ff fdbe 	bl	80047b4 <_Balloc>
 8004c38:	692b      	ldr	r3, [r5, #16]
 8004c3a:	60c6      	str	r6, [r0, #12]
 8004c3c:	6926      	ldr	r6, [r4, #16]
 8004c3e:	f105 0914 	add.w	r9, r5, #20
 8004c42:	f104 0214 	add.w	r2, r4, #20
 8004c46:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004c4a:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004c4e:	f100 0514 	add.w	r5, r0, #20
 8004c52:	f04f 0c00 	mov.w	ip, #0
 8004c56:	f852 ab04 	ldr.w	sl, [r2], #4
 8004c5a:	f859 4b04 	ldr.w	r4, [r9], #4
 8004c5e:	fa1c f18a 	uxtah	r1, ip, sl
 8004c62:	b2a3      	uxth	r3, r4
 8004c64:	1ac9      	subs	r1, r1, r3
 8004c66:	0c23      	lsrs	r3, r4, #16
 8004c68:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8004c6c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004c70:	b289      	uxth	r1, r1
 8004c72:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004c76:	45c8      	cmp	r8, r9
 8004c78:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004c7c:	4696      	mov	lr, r2
 8004c7e:	f845 3b04 	str.w	r3, [r5], #4
 8004c82:	d8e8      	bhi.n	8004c56 <__mdiff+0x5c>
 8004c84:	45be      	cmp	lr, r7
 8004c86:	d305      	bcc.n	8004c94 <__mdiff+0x9a>
 8004c88:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8004c8c:	b18b      	cbz	r3, 8004cb2 <__mdiff+0xb8>
 8004c8e:	6106      	str	r6, [r0, #16]
 8004c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c94:	f85e 1b04 	ldr.w	r1, [lr], #4
 8004c98:	fa1c f381 	uxtah	r3, ip, r1
 8004c9c:	141a      	asrs	r2, r3, #16
 8004c9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ca8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004cac:	f845 3b04 	str.w	r3, [r5], #4
 8004cb0:	e7e8      	b.n	8004c84 <__mdiff+0x8a>
 8004cb2:	3e01      	subs	r6, #1
 8004cb4:	e7e8      	b.n	8004c88 <__mdiff+0x8e>

08004cb6 <__d2b>:
 8004cb6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004cba:	460e      	mov	r6, r1
 8004cbc:	2101      	movs	r1, #1
 8004cbe:	ec59 8b10 	vmov	r8, r9, d0
 8004cc2:	4615      	mov	r5, r2
 8004cc4:	f7ff fd76 	bl	80047b4 <_Balloc>
 8004cc8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004ccc:	4607      	mov	r7, r0
 8004cce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004cd2:	bb34      	cbnz	r4, 8004d22 <__d2b+0x6c>
 8004cd4:	9301      	str	r3, [sp, #4]
 8004cd6:	f1b8 0f00 	cmp.w	r8, #0
 8004cda:	d027      	beq.n	8004d2c <__d2b+0x76>
 8004cdc:	a802      	add	r0, sp, #8
 8004cde:	f840 8d08 	str.w	r8, [r0, #-8]!
 8004ce2:	f7ff fe0c 	bl	80048fe <__lo0bits>
 8004ce6:	9900      	ldr	r1, [sp, #0]
 8004ce8:	b1f0      	cbz	r0, 8004d28 <__d2b+0x72>
 8004cea:	9a01      	ldr	r2, [sp, #4]
 8004cec:	f1c0 0320 	rsb	r3, r0, #32
 8004cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf4:	430b      	orrs	r3, r1
 8004cf6:	40c2      	lsrs	r2, r0
 8004cf8:	617b      	str	r3, [r7, #20]
 8004cfa:	9201      	str	r2, [sp, #4]
 8004cfc:	9b01      	ldr	r3, [sp, #4]
 8004cfe:	61bb      	str	r3, [r7, #24]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	bf14      	ite	ne
 8004d04:	2102      	movne	r1, #2
 8004d06:	2101      	moveq	r1, #1
 8004d08:	6139      	str	r1, [r7, #16]
 8004d0a:	b1c4      	cbz	r4, 8004d3e <__d2b+0x88>
 8004d0c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004d10:	4404      	add	r4, r0
 8004d12:	6034      	str	r4, [r6, #0]
 8004d14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004d18:	6028      	str	r0, [r5, #0]
 8004d1a:	4638      	mov	r0, r7
 8004d1c:	b003      	add	sp, #12
 8004d1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d26:	e7d5      	b.n	8004cd4 <__d2b+0x1e>
 8004d28:	6179      	str	r1, [r7, #20]
 8004d2a:	e7e7      	b.n	8004cfc <__d2b+0x46>
 8004d2c:	a801      	add	r0, sp, #4
 8004d2e:	f7ff fde6 	bl	80048fe <__lo0bits>
 8004d32:	9b01      	ldr	r3, [sp, #4]
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	2101      	movs	r1, #1
 8004d38:	6139      	str	r1, [r7, #16]
 8004d3a:	3020      	adds	r0, #32
 8004d3c:	e7e5      	b.n	8004d0a <__d2b+0x54>
 8004d3e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004d42:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004d46:	6030      	str	r0, [r6, #0]
 8004d48:	6918      	ldr	r0, [r3, #16]
 8004d4a:	f7ff fdb9 	bl	80048c0 <__hi0bits>
 8004d4e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004d52:	e7e1      	b.n	8004d18 <__d2b+0x62>

08004d54 <_sbrk_r>:
 8004d54:	b538      	push	{r3, r4, r5, lr}
 8004d56:	4c06      	ldr	r4, [pc, #24]	; (8004d70 <_sbrk_r+0x1c>)
 8004d58:	2300      	movs	r3, #0
 8004d5a:	4605      	mov	r5, r0
 8004d5c:	4608      	mov	r0, r1
 8004d5e:	6023      	str	r3, [r4, #0]
 8004d60:	f000 fb86 	bl	8005470 <_sbrk>
 8004d64:	1c43      	adds	r3, r0, #1
 8004d66:	d102      	bne.n	8004d6e <_sbrk_r+0x1a>
 8004d68:	6823      	ldr	r3, [r4, #0]
 8004d6a:	b103      	cbz	r3, 8004d6e <_sbrk_r+0x1a>
 8004d6c:	602b      	str	r3, [r5, #0]
 8004d6e:	bd38      	pop	{r3, r4, r5, pc}
 8004d70:	2000076c 	.word	0x2000076c

08004d74 <__ssprint_r>:
 8004d74:	6893      	ldr	r3, [r2, #8]
 8004d76:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d7a:	4681      	mov	r9, r0
 8004d7c:	460c      	mov	r4, r1
 8004d7e:	4617      	mov	r7, r2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d060      	beq.n	8004e46 <__ssprint_r+0xd2>
 8004d84:	f04f 0b00 	mov.w	fp, #0
 8004d88:	f8d2 a000 	ldr.w	sl, [r2]
 8004d8c:	465e      	mov	r6, fp
 8004d8e:	b356      	cbz	r6, 8004de6 <__ssprint_r+0x72>
 8004d90:	68a3      	ldr	r3, [r4, #8]
 8004d92:	429e      	cmp	r6, r3
 8004d94:	d344      	bcc.n	8004e20 <__ssprint_r+0xac>
 8004d96:	89a2      	ldrh	r2, [r4, #12]
 8004d98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d9c:	d03e      	beq.n	8004e1c <__ssprint_r+0xa8>
 8004d9e:	6825      	ldr	r5, [r4, #0]
 8004da0:	6921      	ldr	r1, [r4, #16]
 8004da2:	eba5 0801 	sub.w	r8, r5, r1
 8004da6:	6965      	ldr	r5, [r4, #20]
 8004da8:	2302      	movs	r3, #2
 8004daa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004dae:	fb95 f5f3 	sdiv	r5, r5, r3
 8004db2:	f108 0301 	add.w	r3, r8, #1
 8004db6:	4433      	add	r3, r6
 8004db8:	429d      	cmp	r5, r3
 8004dba:	bf38      	it	cc
 8004dbc:	461d      	movcc	r5, r3
 8004dbe:	0553      	lsls	r3, r2, #21
 8004dc0:	d546      	bpl.n	8004e50 <__ssprint_r+0xdc>
 8004dc2:	4629      	mov	r1, r5
 8004dc4:	4648      	mov	r0, r9
 8004dc6:	f7ff facf 	bl	8004368 <_malloc_r>
 8004dca:	b998      	cbnz	r0, 8004df4 <__ssprint_r+0x80>
 8004dcc:	230c      	movs	r3, #12
 8004dce:	f8c9 3000 	str.w	r3, [r9]
 8004dd2:	89a3      	ldrh	r3, [r4, #12]
 8004dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dd8:	81a3      	strh	r3, [r4, #12]
 8004dda:	2300      	movs	r3, #0
 8004ddc:	60bb      	str	r3, [r7, #8]
 8004dde:	607b      	str	r3, [r7, #4]
 8004de0:	f04f 30ff 	mov.w	r0, #4294967295
 8004de4:	e031      	b.n	8004e4a <__ssprint_r+0xd6>
 8004de6:	f8da b000 	ldr.w	fp, [sl]
 8004dea:	f8da 6004 	ldr.w	r6, [sl, #4]
 8004dee:	f10a 0a08 	add.w	sl, sl, #8
 8004df2:	e7cc      	b.n	8004d8e <__ssprint_r+0x1a>
 8004df4:	4642      	mov	r2, r8
 8004df6:	6921      	ldr	r1, [r4, #16]
 8004df8:	9001      	str	r0, [sp, #4]
 8004dfa:	f7ff fcc3 	bl	8004784 <memcpy>
 8004dfe:	89a2      	ldrh	r2, [r4, #12]
 8004e00:	9b01      	ldr	r3, [sp, #4]
 8004e02:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8004e06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e0a:	81a2      	strh	r2, [r4, #12]
 8004e0c:	6123      	str	r3, [r4, #16]
 8004e0e:	6165      	str	r5, [r4, #20]
 8004e10:	4443      	add	r3, r8
 8004e12:	eba5 0508 	sub.w	r5, r5, r8
 8004e16:	6023      	str	r3, [r4, #0]
 8004e18:	60a5      	str	r5, [r4, #8]
 8004e1a:	4633      	mov	r3, r6
 8004e1c:	429e      	cmp	r6, r3
 8004e1e:	d200      	bcs.n	8004e22 <__ssprint_r+0xae>
 8004e20:	4633      	mov	r3, r6
 8004e22:	461a      	mov	r2, r3
 8004e24:	4659      	mov	r1, fp
 8004e26:	6820      	ldr	r0, [r4, #0]
 8004e28:	9301      	str	r3, [sp, #4]
 8004e2a:	f000 f971 	bl	8005110 <memmove>
 8004e2e:	68a2      	ldr	r2, [r4, #8]
 8004e30:	9b01      	ldr	r3, [sp, #4]
 8004e32:	1ad2      	subs	r2, r2, r3
 8004e34:	60a2      	str	r2, [r4, #8]
 8004e36:	6822      	ldr	r2, [r4, #0]
 8004e38:	4413      	add	r3, r2
 8004e3a:	6023      	str	r3, [r4, #0]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	1b9e      	subs	r6, r3, r6
 8004e40:	60be      	str	r6, [r7, #8]
 8004e42:	2e00      	cmp	r6, #0
 8004e44:	d1cf      	bne.n	8004de6 <__ssprint_r+0x72>
 8004e46:	2000      	movs	r0, #0
 8004e48:	6078      	str	r0, [r7, #4]
 8004e4a:	b003      	add	sp, #12
 8004e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e50:	462a      	mov	r2, r5
 8004e52:	4648      	mov	r0, r9
 8004e54:	f000 f97e 	bl	8005154 <_realloc_r>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2800      	cmp	r0, #0
 8004e5c:	d1d6      	bne.n	8004e0c <__ssprint_r+0x98>
 8004e5e:	6921      	ldr	r1, [r4, #16]
 8004e60:	4648      	mov	r0, r9
 8004e62:	f000 f885 	bl	8004f70 <_free_r>
 8004e66:	e7b1      	b.n	8004dcc <__ssprint_r+0x58>

08004e68 <_calloc_r>:
 8004e68:	b510      	push	{r4, lr}
 8004e6a:	4351      	muls	r1, r2
 8004e6c:	f7ff fa7c 	bl	8004368 <_malloc_r>
 8004e70:	4604      	mov	r4, r0
 8004e72:	b198      	cbz	r0, 8004e9c <_calloc_r+0x34>
 8004e74:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8004e78:	f022 0203 	bic.w	r2, r2, #3
 8004e7c:	3a04      	subs	r2, #4
 8004e7e:	2a24      	cmp	r2, #36	; 0x24
 8004e80:	d81b      	bhi.n	8004eba <_calloc_r+0x52>
 8004e82:	2a13      	cmp	r2, #19
 8004e84:	d917      	bls.n	8004eb6 <_calloc_r+0x4e>
 8004e86:	2100      	movs	r1, #0
 8004e88:	2a1b      	cmp	r2, #27
 8004e8a:	6001      	str	r1, [r0, #0]
 8004e8c:	6041      	str	r1, [r0, #4]
 8004e8e:	d807      	bhi.n	8004ea0 <_calloc_r+0x38>
 8004e90:	f100 0308 	add.w	r3, r0, #8
 8004e94:	2200      	movs	r2, #0
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	605a      	str	r2, [r3, #4]
 8004e9a:	609a      	str	r2, [r3, #8]
 8004e9c:	4620      	mov	r0, r4
 8004e9e:	bd10      	pop	{r4, pc}
 8004ea0:	2a24      	cmp	r2, #36	; 0x24
 8004ea2:	6081      	str	r1, [r0, #8]
 8004ea4:	60c1      	str	r1, [r0, #12]
 8004ea6:	bf11      	iteee	ne
 8004ea8:	f100 0310 	addne.w	r3, r0, #16
 8004eac:	6101      	streq	r1, [r0, #16]
 8004eae:	f100 0318 	addeq.w	r3, r0, #24
 8004eb2:	6141      	streq	r1, [r0, #20]
 8004eb4:	e7ee      	b.n	8004e94 <_calloc_r+0x2c>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	e7ec      	b.n	8004e94 <_calloc_r+0x2c>
 8004eba:	2100      	movs	r1, #0
 8004ebc:	f000 f942 	bl	8005144 <memset>
 8004ec0:	e7ec      	b.n	8004e9c <_calloc_r+0x34>
	...

08004ec4 <_malloc_trim_r>:
 8004ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ec8:	4f25      	ldr	r7, [pc, #148]	; (8004f60 <_malloc_trim_r+0x9c>)
 8004eca:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8004f6c <_malloc_trim_r+0xa8>
 8004ece:	4689      	mov	r9, r1
 8004ed0:	4606      	mov	r6, r0
 8004ed2:	f7ff fc63 	bl	800479c <__malloc_lock>
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	685d      	ldr	r5, [r3, #4]
 8004eda:	f1a8 0411 	sub.w	r4, r8, #17
 8004ede:	f025 0503 	bic.w	r5, r5, #3
 8004ee2:	eba4 0409 	sub.w	r4, r4, r9
 8004ee6:	442c      	add	r4, r5
 8004ee8:	fbb4 f4f8 	udiv	r4, r4, r8
 8004eec:	3c01      	subs	r4, #1
 8004eee:	fb08 f404 	mul.w	r4, r8, r4
 8004ef2:	4544      	cmp	r4, r8
 8004ef4:	da05      	bge.n	8004f02 <_malloc_trim_r+0x3e>
 8004ef6:	4630      	mov	r0, r6
 8004ef8:	f7ff fc56 	bl	80047a8 <__malloc_unlock>
 8004efc:	2000      	movs	r0, #0
 8004efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f02:	2100      	movs	r1, #0
 8004f04:	4630      	mov	r0, r6
 8004f06:	f7ff ff25 	bl	8004d54 <_sbrk_r>
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	442b      	add	r3, r5
 8004f0e:	4298      	cmp	r0, r3
 8004f10:	d1f1      	bne.n	8004ef6 <_malloc_trim_r+0x32>
 8004f12:	4261      	negs	r1, r4
 8004f14:	4630      	mov	r0, r6
 8004f16:	f7ff ff1d 	bl	8004d54 <_sbrk_r>
 8004f1a:	3001      	adds	r0, #1
 8004f1c:	d110      	bne.n	8004f40 <_malloc_trim_r+0x7c>
 8004f1e:	2100      	movs	r1, #0
 8004f20:	4630      	mov	r0, r6
 8004f22:	f7ff ff17 	bl	8004d54 <_sbrk_r>
 8004f26:	68ba      	ldr	r2, [r7, #8]
 8004f28:	1a83      	subs	r3, r0, r2
 8004f2a:	2b0f      	cmp	r3, #15
 8004f2c:	dde3      	ble.n	8004ef6 <_malloc_trim_r+0x32>
 8004f2e:	490d      	ldr	r1, [pc, #52]	; (8004f64 <_malloc_trim_r+0xa0>)
 8004f30:	6809      	ldr	r1, [r1, #0]
 8004f32:	1a40      	subs	r0, r0, r1
 8004f34:	490c      	ldr	r1, [pc, #48]	; (8004f68 <_malloc_trim_r+0xa4>)
 8004f36:	f043 0301 	orr.w	r3, r3, #1
 8004f3a:	6008      	str	r0, [r1, #0]
 8004f3c:	6053      	str	r3, [r2, #4]
 8004f3e:	e7da      	b.n	8004ef6 <_malloc_trim_r+0x32>
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	4a09      	ldr	r2, [pc, #36]	; (8004f68 <_malloc_trim_r+0xa4>)
 8004f44:	1b2d      	subs	r5, r5, r4
 8004f46:	f045 0501 	orr.w	r5, r5, #1
 8004f4a:	605d      	str	r5, [r3, #4]
 8004f4c:	6813      	ldr	r3, [r2, #0]
 8004f4e:	4630      	mov	r0, r6
 8004f50:	1b1c      	subs	r4, r3, r4
 8004f52:	6014      	str	r4, [r2, #0]
 8004f54:	f7ff fc28 	bl	80047a8 <__malloc_unlock>
 8004f58:	2001      	movs	r0, #1
 8004f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f5e:	bf00      	nop
 8004f60:	200000f8 	.word	0x200000f8
 8004f64:	20000500 	.word	0x20000500
 8004f68:	20000690 	.word	0x20000690
 8004f6c:	00000080 	.word	0x00000080

08004f70 <_free_r>:
 8004f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f74:	4604      	mov	r4, r0
 8004f76:	4688      	mov	r8, r1
 8004f78:	2900      	cmp	r1, #0
 8004f7a:	f000 80ab 	beq.w	80050d4 <_free_r+0x164>
 8004f7e:	f7ff fc0d 	bl	800479c <__malloc_lock>
 8004f82:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8004f86:	4d54      	ldr	r5, [pc, #336]	; (80050d8 <_free_r+0x168>)
 8004f88:	f022 0001 	bic.w	r0, r2, #1
 8004f8c:	f1a8 0308 	sub.w	r3, r8, #8
 8004f90:	181f      	adds	r7, r3, r0
 8004f92:	68a9      	ldr	r1, [r5, #8]
 8004f94:	687e      	ldr	r6, [r7, #4]
 8004f96:	428f      	cmp	r7, r1
 8004f98:	f026 0603 	bic.w	r6, r6, #3
 8004f9c:	f002 0201 	and.w	r2, r2, #1
 8004fa0:	d11b      	bne.n	8004fda <_free_r+0x6a>
 8004fa2:	4430      	add	r0, r6
 8004fa4:	b93a      	cbnz	r2, 8004fb6 <_free_r+0x46>
 8004fa6:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8004faa:	1a9b      	subs	r3, r3, r2
 8004fac:	4410      	add	r0, r2
 8004fae:	6899      	ldr	r1, [r3, #8]
 8004fb0:	68da      	ldr	r2, [r3, #12]
 8004fb2:	60ca      	str	r2, [r1, #12]
 8004fb4:	6091      	str	r1, [r2, #8]
 8004fb6:	f040 0201 	orr.w	r2, r0, #1
 8004fba:	605a      	str	r2, [r3, #4]
 8004fbc:	60ab      	str	r3, [r5, #8]
 8004fbe:	4b47      	ldr	r3, [pc, #284]	; (80050dc <_free_r+0x16c>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4298      	cmp	r0, r3
 8004fc4:	d304      	bcc.n	8004fd0 <_free_r+0x60>
 8004fc6:	4b46      	ldr	r3, [pc, #280]	; (80050e0 <_free_r+0x170>)
 8004fc8:	4620      	mov	r0, r4
 8004fca:	6819      	ldr	r1, [r3, #0]
 8004fcc:	f7ff ff7a 	bl	8004ec4 <_malloc_trim_r>
 8004fd0:	4620      	mov	r0, r4
 8004fd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fd6:	f7ff bbe7 	b.w	80047a8 <__malloc_unlock>
 8004fda:	607e      	str	r6, [r7, #4]
 8004fdc:	2a00      	cmp	r2, #0
 8004fde:	d139      	bne.n	8005054 <_free_r+0xe4>
 8004fe0:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8004fe4:	1a5b      	subs	r3, r3, r1
 8004fe6:	4408      	add	r0, r1
 8004fe8:	6899      	ldr	r1, [r3, #8]
 8004fea:	f105 0e08 	add.w	lr, r5, #8
 8004fee:	4571      	cmp	r1, lr
 8004ff0:	d032      	beq.n	8005058 <_free_r+0xe8>
 8004ff2:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8004ff6:	f8c1 e00c 	str.w	lr, [r1, #12]
 8004ffa:	f8ce 1008 	str.w	r1, [lr, #8]
 8004ffe:	19b9      	adds	r1, r7, r6
 8005000:	6849      	ldr	r1, [r1, #4]
 8005002:	07c9      	lsls	r1, r1, #31
 8005004:	d40a      	bmi.n	800501c <_free_r+0xac>
 8005006:	4430      	add	r0, r6
 8005008:	68b9      	ldr	r1, [r7, #8]
 800500a:	bb3a      	cbnz	r2, 800505c <_free_r+0xec>
 800500c:	4e35      	ldr	r6, [pc, #212]	; (80050e4 <_free_r+0x174>)
 800500e:	42b1      	cmp	r1, r6
 8005010:	d124      	bne.n	800505c <_free_r+0xec>
 8005012:	616b      	str	r3, [r5, #20]
 8005014:	612b      	str	r3, [r5, #16]
 8005016:	2201      	movs	r2, #1
 8005018:	60d9      	str	r1, [r3, #12]
 800501a:	6099      	str	r1, [r3, #8]
 800501c:	f040 0101 	orr.w	r1, r0, #1
 8005020:	6059      	str	r1, [r3, #4]
 8005022:	5018      	str	r0, [r3, r0]
 8005024:	2a00      	cmp	r2, #0
 8005026:	d1d3      	bne.n	8004fd0 <_free_r+0x60>
 8005028:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800502c:	d21a      	bcs.n	8005064 <_free_r+0xf4>
 800502e:	08c0      	lsrs	r0, r0, #3
 8005030:	1081      	asrs	r1, r0, #2
 8005032:	2201      	movs	r2, #1
 8005034:	408a      	lsls	r2, r1
 8005036:	6869      	ldr	r1, [r5, #4]
 8005038:	3001      	adds	r0, #1
 800503a:	430a      	orrs	r2, r1
 800503c:	606a      	str	r2, [r5, #4]
 800503e:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8005042:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8005046:	6099      	str	r1, [r3, #8]
 8005048:	3a08      	subs	r2, #8
 800504a:	60da      	str	r2, [r3, #12]
 800504c:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8005050:	60cb      	str	r3, [r1, #12]
 8005052:	e7bd      	b.n	8004fd0 <_free_r+0x60>
 8005054:	2200      	movs	r2, #0
 8005056:	e7d2      	b.n	8004ffe <_free_r+0x8e>
 8005058:	2201      	movs	r2, #1
 800505a:	e7d0      	b.n	8004ffe <_free_r+0x8e>
 800505c:	68fe      	ldr	r6, [r7, #12]
 800505e:	60ce      	str	r6, [r1, #12]
 8005060:	60b1      	str	r1, [r6, #8]
 8005062:	e7db      	b.n	800501c <_free_r+0xac>
 8005064:	0a42      	lsrs	r2, r0, #9
 8005066:	2a04      	cmp	r2, #4
 8005068:	d813      	bhi.n	8005092 <_free_r+0x122>
 800506a:	0982      	lsrs	r2, r0, #6
 800506c:	3238      	adds	r2, #56	; 0x38
 800506e:	1c51      	adds	r1, r2, #1
 8005070:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8005074:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8005078:	428e      	cmp	r6, r1
 800507a:	d124      	bne.n	80050c6 <_free_r+0x156>
 800507c:	2001      	movs	r0, #1
 800507e:	1092      	asrs	r2, r2, #2
 8005080:	fa00 f202 	lsl.w	r2, r0, r2
 8005084:	6868      	ldr	r0, [r5, #4]
 8005086:	4302      	orrs	r2, r0
 8005088:	606a      	str	r2, [r5, #4]
 800508a:	60de      	str	r6, [r3, #12]
 800508c:	6099      	str	r1, [r3, #8]
 800508e:	60b3      	str	r3, [r6, #8]
 8005090:	e7de      	b.n	8005050 <_free_r+0xe0>
 8005092:	2a14      	cmp	r2, #20
 8005094:	d801      	bhi.n	800509a <_free_r+0x12a>
 8005096:	325b      	adds	r2, #91	; 0x5b
 8005098:	e7e9      	b.n	800506e <_free_r+0xfe>
 800509a:	2a54      	cmp	r2, #84	; 0x54
 800509c:	d802      	bhi.n	80050a4 <_free_r+0x134>
 800509e:	0b02      	lsrs	r2, r0, #12
 80050a0:	326e      	adds	r2, #110	; 0x6e
 80050a2:	e7e4      	b.n	800506e <_free_r+0xfe>
 80050a4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80050a8:	d802      	bhi.n	80050b0 <_free_r+0x140>
 80050aa:	0bc2      	lsrs	r2, r0, #15
 80050ac:	3277      	adds	r2, #119	; 0x77
 80050ae:	e7de      	b.n	800506e <_free_r+0xfe>
 80050b0:	f240 5154 	movw	r1, #1364	; 0x554
 80050b4:	428a      	cmp	r2, r1
 80050b6:	bf9a      	itte	ls
 80050b8:	0c82      	lsrls	r2, r0, #18
 80050ba:	327c      	addls	r2, #124	; 0x7c
 80050bc:	227e      	movhi	r2, #126	; 0x7e
 80050be:	e7d6      	b.n	800506e <_free_r+0xfe>
 80050c0:	6889      	ldr	r1, [r1, #8]
 80050c2:	428e      	cmp	r6, r1
 80050c4:	d004      	beq.n	80050d0 <_free_r+0x160>
 80050c6:	684a      	ldr	r2, [r1, #4]
 80050c8:	f022 0203 	bic.w	r2, r2, #3
 80050cc:	4290      	cmp	r0, r2
 80050ce:	d3f7      	bcc.n	80050c0 <_free_r+0x150>
 80050d0:	68ce      	ldr	r6, [r1, #12]
 80050d2:	e7da      	b.n	800508a <_free_r+0x11a>
 80050d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050d8:	200000f8 	.word	0x200000f8
 80050dc:	20000504 	.word	0x20000504
 80050e0:	200006c0 	.word	0x200006c0
 80050e4:	20000100 	.word	0x20000100

080050e8 <__retarget_lock_acquire_recursive>:
 80050e8:	4770      	bx	lr

080050ea <__retarget_lock_release_recursive>:
 80050ea:	4770      	bx	lr

080050ec <__ascii_mbtowc>:
 80050ec:	b082      	sub	sp, #8
 80050ee:	b901      	cbnz	r1, 80050f2 <__ascii_mbtowc+0x6>
 80050f0:	a901      	add	r1, sp, #4
 80050f2:	b142      	cbz	r2, 8005106 <__ascii_mbtowc+0x1a>
 80050f4:	b14b      	cbz	r3, 800510a <__ascii_mbtowc+0x1e>
 80050f6:	7813      	ldrb	r3, [r2, #0]
 80050f8:	600b      	str	r3, [r1, #0]
 80050fa:	7812      	ldrb	r2, [r2, #0]
 80050fc:	1c10      	adds	r0, r2, #0
 80050fe:	bf18      	it	ne
 8005100:	2001      	movne	r0, #1
 8005102:	b002      	add	sp, #8
 8005104:	4770      	bx	lr
 8005106:	4610      	mov	r0, r2
 8005108:	e7fb      	b.n	8005102 <__ascii_mbtowc+0x16>
 800510a:	f06f 0001 	mvn.w	r0, #1
 800510e:	e7f8      	b.n	8005102 <__ascii_mbtowc+0x16>

08005110 <memmove>:
 8005110:	4288      	cmp	r0, r1
 8005112:	b510      	push	{r4, lr}
 8005114:	eb01 0302 	add.w	r3, r1, r2
 8005118:	d803      	bhi.n	8005122 <memmove+0x12>
 800511a:	1e42      	subs	r2, r0, #1
 800511c:	4299      	cmp	r1, r3
 800511e:	d10c      	bne.n	800513a <memmove+0x2a>
 8005120:	bd10      	pop	{r4, pc}
 8005122:	4298      	cmp	r0, r3
 8005124:	d2f9      	bcs.n	800511a <memmove+0xa>
 8005126:	1881      	adds	r1, r0, r2
 8005128:	1ad2      	subs	r2, r2, r3
 800512a:	42d3      	cmn	r3, r2
 800512c:	d100      	bne.n	8005130 <memmove+0x20>
 800512e:	bd10      	pop	{r4, pc}
 8005130:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005134:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005138:	e7f7      	b.n	800512a <memmove+0x1a>
 800513a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800513e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005142:	e7eb      	b.n	800511c <memmove+0xc>

08005144 <memset>:
 8005144:	4402      	add	r2, r0
 8005146:	4603      	mov	r3, r0
 8005148:	4293      	cmp	r3, r2
 800514a:	d100      	bne.n	800514e <memset+0xa>
 800514c:	4770      	bx	lr
 800514e:	f803 1b01 	strb.w	r1, [r3], #1
 8005152:	e7f9      	b.n	8005148 <memset+0x4>

08005154 <_realloc_r>:
 8005154:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005158:	4682      	mov	sl, r0
 800515a:	460c      	mov	r4, r1
 800515c:	b929      	cbnz	r1, 800516a <_realloc_r+0x16>
 800515e:	4611      	mov	r1, r2
 8005160:	b003      	add	sp, #12
 8005162:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005166:	f7ff b8ff 	b.w	8004368 <_malloc_r>
 800516a:	9201      	str	r2, [sp, #4]
 800516c:	f7ff fb16 	bl	800479c <__malloc_lock>
 8005170:	9a01      	ldr	r2, [sp, #4]
 8005172:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8005176:	f102 080b 	add.w	r8, r2, #11
 800517a:	f1b8 0f16 	cmp.w	r8, #22
 800517e:	f1a4 0908 	sub.w	r9, r4, #8
 8005182:	f025 0603 	bic.w	r6, r5, #3
 8005186:	d90a      	bls.n	800519e <_realloc_r+0x4a>
 8005188:	f038 0807 	bics.w	r8, r8, #7
 800518c:	d509      	bpl.n	80051a2 <_realloc_r+0x4e>
 800518e:	230c      	movs	r3, #12
 8005190:	f8ca 3000 	str.w	r3, [sl]
 8005194:	2700      	movs	r7, #0
 8005196:	4638      	mov	r0, r7
 8005198:	b003      	add	sp, #12
 800519a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800519e:	f04f 0810 	mov.w	r8, #16
 80051a2:	4590      	cmp	r8, r2
 80051a4:	d3f3      	bcc.n	800518e <_realloc_r+0x3a>
 80051a6:	45b0      	cmp	r8, r6
 80051a8:	f340 8145 	ble.w	8005436 <_realloc_r+0x2e2>
 80051ac:	4ba8      	ldr	r3, [pc, #672]	; (8005450 <_realloc_r+0x2fc>)
 80051ae:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80051b2:	eb09 0106 	add.w	r1, r9, r6
 80051b6:	4571      	cmp	r1, lr
 80051b8:	469b      	mov	fp, r3
 80051ba:	684b      	ldr	r3, [r1, #4]
 80051bc:	d005      	beq.n	80051ca <_realloc_r+0x76>
 80051be:	f023 0001 	bic.w	r0, r3, #1
 80051c2:	4408      	add	r0, r1
 80051c4:	6840      	ldr	r0, [r0, #4]
 80051c6:	07c7      	lsls	r7, r0, #31
 80051c8:	d447      	bmi.n	800525a <_realloc_r+0x106>
 80051ca:	f023 0303 	bic.w	r3, r3, #3
 80051ce:	4571      	cmp	r1, lr
 80051d0:	eb06 0703 	add.w	r7, r6, r3
 80051d4:	d119      	bne.n	800520a <_realloc_r+0xb6>
 80051d6:	f108 0010 	add.w	r0, r8, #16
 80051da:	4287      	cmp	r7, r0
 80051dc:	db3f      	blt.n	800525e <_realloc_r+0x10a>
 80051de:	eb09 0308 	add.w	r3, r9, r8
 80051e2:	eba7 0708 	sub.w	r7, r7, r8
 80051e6:	f047 0701 	orr.w	r7, r7, #1
 80051ea:	f8cb 3008 	str.w	r3, [fp, #8]
 80051ee:	605f      	str	r7, [r3, #4]
 80051f0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80051f4:	f003 0301 	and.w	r3, r3, #1
 80051f8:	ea43 0308 	orr.w	r3, r3, r8
 80051fc:	f844 3c04 	str.w	r3, [r4, #-4]
 8005200:	4650      	mov	r0, sl
 8005202:	f7ff fad1 	bl	80047a8 <__malloc_unlock>
 8005206:	4627      	mov	r7, r4
 8005208:	e7c5      	b.n	8005196 <_realloc_r+0x42>
 800520a:	45b8      	cmp	r8, r7
 800520c:	dc27      	bgt.n	800525e <_realloc_r+0x10a>
 800520e:	68cb      	ldr	r3, [r1, #12]
 8005210:	688a      	ldr	r2, [r1, #8]
 8005212:	60d3      	str	r3, [r2, #12]
 8005214:	609a      	str	r2, [r3, #8]
 8005216:	eba7 0008 	sub.w	r0, r7, r8
 800521a:	280f      	cmp	r0, #15
 800521c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005220:	eb09 0207 	add.w	r2, r9, r7
 8005224:	f240 8109 	bls.w	800543a <_realloc_r+0x2e6>
 8005228:	eb09 0108 	add.w	r1, r9, r8
 800522c:	f003 0301 	and.w	r3, r3, #1
 8005230:	ea43 0308 	orr.w	r3, r3, r8
 8005234:	f040 0001 	orr.w	r0, r0, #1
 8005238:	f8c9 3004 	str.w	r3, [r9, #4]
 800523c:	6048      	str	r0, [r1, #4]
 800523e:	6853      	ldr	r3, [r2, #4]
 8005240:	f043 0301 	orr.w	r3, r3, #1
 8005244:	6053      	str	r3, [r2, #4]
 8005246:	3108      	adds	r1, #8
 8005248:	4650      	mov	r0, sl
 800524a:	f7ff fe91 	bl	8004f70 <_free_r>
 800524e:	4650      	mov	r0, sl
 8005250:	f7ff faaa 	bl	80047a8 <__malloc_unlock>
 8005254:	f109 0708 	add.w	r7, r9, #8
 8005258:	e79d      	b.n	8005196 <_realloc_r+0x42>
 800525a:	2300      	movs	r3, #0
 800525c:	4619      	mov	r1, r3
 800525e:	07e8      	lsls	r0, r5, #31
 8005260:	f100 8084 	bmi.w	800536c <_realloc_r+0x218>
 8005264:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8005268:	eba9 0505 	sub.w	r5, r9, r5
 800526c:	6868      	ldr	r0, [r5, #4]
 800526e:	f020 0003 	bic.w	r0, r0, #3
 8005272:	4430      	add	r0, r6
 8005274:	2900      	cmp	r1, #0
 8005276:	d076      	beq.n	8005366 <_realloc_r+0x212>
 8005278:	4571      	cmp	r1, lr
 800527a:	d150      	bne.n	800531e <_realloc_r+0x1ca>
 800527c:	4403      	add	r3, r0
 800527e:	f108 0110 	add.w	r1, r8, #16
 8005282:	428b      	cmp	r3, r1
 8005284:	db6f      	blt.n	8005366 <_realloc_r+0x212>
 8005286:	462f      	mov	r7, r5
 8005288:	68ea      	ldr	r2, [r5, #12]
 800528a:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800528e:	60ca      	str	r2, [r1, #12]
 8005290:	6091      	str	r1, [r2, #8]
 8005292:	1f32      	subs	r2, r6, #4
 8005294:	2a24      	cmp	r2, #36	; 0x24
 8005296:	d83b      	bhi.n	8005310 <_realloc_r+0x1bc>
 8005298:	2a13      	cmp	r2, #19
 800529a:	d936      	bls.n	800530a <_realloc_r+0x1b6>
 800529c:	6821      	ldr	r1, [r4, #0]
 800529e:	60a9      	str	r1, [r5, #8]
 80052a0:	6861      	ldr	r1, [r4, #4]
 80052a2:	60e9      	str	r1, [r5, #12]
 80052a4:	2a1b      	cmp	r2, #27
 80052a6:	d81c      	bhi.n	80052e2 <_realloc_r+0x18e>
 80052a8:	f105 0210 	add.w	r2, r5, #16
 80052ac:	f104 0108 	add.w	r1, r4, #8
 80052b0:	6808      	ldr	r0, [r1, #0]
 80052b2:	6010      	str	r0, [r2, #0]
 80052b4:	6848      	ldr	r0, [r1, #4]
 80052b6:	6050      	str	r0, [r2, #4]
 80052b8:	6889      	ldr	r1, [r1, #8]
 80052ba:	6091      	str	r1, [r2, #8]
 80052bc:	eb05 0208 	add.w	r2, r5, r8
 80052c0:	eba3 0308 	sub.w	r3, r3, r8
 80052c4:	f043 0301 	orr.w	r3, r3, #1
 80052c8:	f8cb 2008 	str.w	r2, [fp, #8]
 80052cc:	6053      	str	r3, [r2, #4]
 80052ce:	686b      	ldr	r3, [r5, #4]
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	ea43 0308 	orr.w	r3, r3, r8
 80052d8:	606b      	str	r3, [r5, #4]
 80052da:	4650      	mov	r0, sl
 80052dc:	f7ff fa64 	bl	80047a8 <__malloc_unlock>
 80052e0:	e759      	b.n	8005196 <_realloc_r+0x42>
 80052e2:	68a1      	ldr	r1, [r4, #8]
 80052e4:	6129      	str	r1, [r5, #16]
 80052e6:	68e1      	ldr	r1, [r4, #12]
 80052e8:	6169      	str	r1, [r5, #20]
 80052ea:	2a24      	cmp	r2, #36	; 0x24
 80052ec:	bf01      	itttt	eq
 80052ee:	6922      	ldreq	r2, [r4, #16]
 80052f0:	61aa      	streq	r2, [r5, #24]
 80052f2:	6960      	ldreq	r0, [r4, #20]
 80052f4:	61e8      	streq	r0, [r5, #28]
 80052f6:	bf19      	ittee	ne
 80052f8:	f105 0218 	addne.w	r2, r5, #24
 80052fc:	f104 0110 	addne.w	r1, r4, #16
 8005300:	f105 0220 	addeq.w	r2, r5, #32
 8005304:	f104 0118 	addeq.w	r1, r4, #24
 8005308:	e7d2      	b.n	80052b0 <_realloc_r+0x15c>
 800530a:	463a      	mov	r2, r7
 800530c:	4621      	mov	r1, r4
 800530e:	e7cf      	b.n	80052b0 <_realloc_r+0x15c>
 8005310:	4621      	mov	r1, r4
 8005312:	4638      	mov	r0, r7
 8005314:	9301      	str	r3, [sp, #4]
 8005316:	f7ff fefb 	bl	8005110 <memmove>
 800531a:	9b01      	ldr	r3, [sp, #4]
 800531c:	e7ce      	b.n	80052bc <_realloc_r+0x168>
 800531e:	18c7      	adds	r7, r0, r3
 8005320:	45b8      	cmp	r8, r7
 8005322:	dc20      	bgt.n	8005366 <_realloc_r+0x212>
 8005324:	68cb      	ldr	r3, [r1, #12]
 8005326:	688a      	ldr	r2, [r1, #8]
 8005328:	60d3      	str	r3, [r2, #12]
 800532a:	609a      	str	r2, [r3, #8]
 800532c:	4628      	mov	r0, r5
 800532e:	68eb      	ldr	r3, [r5, #12]
 8005330:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8005334:	60d3      	str	r3, [r2, #12]
 8005336:	609a      	str	r2, [r3, #8]
 8005338:	1f32      	subs	r2, r6, #4
 800533a:	2a24      	cmp	r2, #36	; 0x24
 800533c:	d842      	bhi.n	80053c4 <_realloc_r+0x270>
 800533e:	2a13      	cmp	r2, #19
 8005340:	d93e      	bls.n	80053c0 <_realloc_r+0x26c>
 8005342:	6823      	ldr	r3, [r4, #0]
 8005344:	60ab      	str	r3, [r5, #8]
 8005346:	6863      	ldr	r3, [r4, #4]
 8005348:	60eb      	str	r3, [r5, #12]
 800534a:	2a1b      	cmp	r2, #27
 800534c:	d824      	bhi.n	8005398 <_realloc_r+0x244>
 800534e:	f105 0010 	add.w	r0, r5, #16
 8005352:	f104 0308 	add.w	r3, r4, #8
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	6002      	str	r2, [r0, #0]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	6042      	str	r2, [r0, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	6083      	str	r3, [r0, #8]
 8005362:	46a9      	mov	r9, r5
 8005364:	e757      	b.n	8005216 <_realloc_r+0xc2>
 8005366:	4580      	cmp	r8, r0
 8005368:	4607      	mov	r7, r0
 800536a:	dddf      	ble.n	800532c <_realloc_r+0x1d8>
 800536c:	4611      	mov	r1, r2
 800536e:	4650      	mov	r0, sl
 8005370:	f7fe fffa 	bl	8004368 <_malloc_r>
 8005374:	4607      	mov	r7, r0
 8005376:	2800      	cmp	r0, #0
 8005378:	d0af      	beq.n	80052da <_realloc_r+0x186>
 800537a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800537e:	f023 0301 	bic.w	r3, r3, #1
 8005382:	f1a0 0208 	sub.w	r2, r0, #8
 8005386:	444b      	add	r3, r9
 8005388:	429a      	cmp	r2, r3
 800538a:	d11f      	bne.n	80053cc <_realloc_r+0x278>
 800538c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8005390:	f027 0703 	bic.w	r7, r7, #3
 8005394:	4437      	add	r7, r6
 8005396:	e73e      	b.n	8005216 <_realloc_r+0xc2>
 8005398:	68a3      	ldr	r3, [r4, #8]
 800539a:	612b      	str	r3, [r5, #16]
 800539c:	68e3      	ldr	r3, [r4, #12]
 800539e:	616b      	str	r3, [r5, #20]
 80053a0:	2a24      	cmp	r2, #36	; 0x24
 80053a2:	bf01      	itttt	eq
 80053a4:	6923      	ldreq	r3, [r4, #16]
 80053a6:	61ab      	streq	r3, [r5, #24]
 80053a8:	6962      	ldreq	r2, [r4, #20]
 80053aa:	61ea      	streq	r2, [r5, #28]
 80053ac:	bf19      	ittee	ne
 80053ae:	f105 0018 	addne.w	r0, r5, #24
 80053b2:	f104 0310 	addne.w	r3, r4, #16
 80053b6:	f105 0020 	addeq.w	r0, r5, #32
 80053ba:	f104 0318 	addeq.w	r3, r4, #24
 80053be:	e7ca      	b.n	8005356 <_realloc_r+0x202>
 80053c0:	4623      	mov	r3, r4
 80053c2:	e7c8      	b.n	8005356 <_realloc_r+0x202>
 80053c4:	4621      	mov	r1, r4
 80053c6:	f7ff fea3 	bl	8005110 <memmove>
 80053ca:	e7ca      	b.n	8005362 <_realloc_r+0x20e>
 80053cc:	1f32      	subs	r2, r6, #4
 80053ce:	2a24      	cmp	r2, #36	; 0x24
 80053d0:	d82d      	bhi.n	800542e <_realloc_r+0x2da>
 80053d2:	2a13      	cmp	r2, #19
 80053d4:	d928      	bls.n	8005428 <_realloc_r+0x2d4>
 80053d6:	6823      	ldr	r3, [r4, #0]
 80053d8:	6003      	str	r3, [r0, #0]
 80053da:	6863      	ldr	r3, [r4, #4]
 80053dc:	6043      	str	r3, [r0, #4]
 80053de:	2a1b      	cmp	r2, #27
 80053e0:	d80e      	bhi.n	8005400 <_realloc_r+0x2ac>
 80053e2:	f100 0308 	add.w	r3, r0, #8
 80053e6:	f104 0208 	add.w	r2, r4, #8
 80053ea:	6811      	ldr	r1, [r2, #0]
 80053ec:	6019      	str	r1, [r3, #0]
 80053ee:	6851      	ldr	r1, [r2, #4]
 80053f0:	6059      	str	r1, [r3, #4]
 80053f2:	6892      	ldr	r2, [r2, #8]
 80053f4:	609a      	str	r2, [r3, #8]
 80053f6:	4621      	mov	r1, r4
 80053f8:	4650      	mov	r0, sl
 80053fa:	f7ff fdb9 	bl	8004f70 <_free_r>
 80053fe:	e76c      	b.n	80052da <_realloc_r+0x186>
 8005400:	68a3      	ldr	r3, [r4, #8]
 8005402:	6083      	str	r3, [r0, #8]
 8005404:	68e3      	ldr	r3, [r4, #12]
 8005406:	60c3      	str	r3, [r0, #12]
 8005408:	2a24      	cmp	r2, #36	; 0x24
 800540a:	bf01      	itttt	eq
 800540c:	6923      	ldreq	r3, [r4, #16]
 800540e:	6103      	streq	r3, [r0, #16]
 8005410:	6961      	ldreq	r1, [r4, #20]
 8005412:	6141      	streq	r1, [r0, #20]
 8005414:	bf19      	ittee	ne
 8005416:	f100 0310 	addne.w	r3, r0, #16
 800541a:	f104 0210 	addne.w	r2, r4, #16
 800541e:	f100 0318 	addeq.w	r3, r0, #24
 8005422:	f104 0218 	addeq.w	r2, r4, #24
 8005426:	e7e0      	b.n	80053ea <_realloc_r+0x296>
 8005428:	4603      	mov	r3, r0
 800542a:	4622      	mov	r2, r4
 800542c:	e7dd      	b.n	80053ea <_realloc_r+0x296>
 800542e:	4621      	mov	r1, r4
 8005430:	f7ff fe6e 	bl	8005110 <memmove>
 8005434:	e7df      	b.n	80053f6 <_realloc_r+0x2a2>
 8005436:	4637      	mov	r7, r6
 8005438:	e6ed      	b.n	8005216 <_realloc_r+0xc2>
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	431f      	orrs	r7, r3
 8005440:	f8c9 7004 	str.w	r7, [r9, #4]
 8005444:	6853      	ldr	r3, [r2, #4]
 8005446:	f043 0301 	orr.w	r3, r3, #1
 800544a:	6053      	str	r3, [r2, #4]
 800544c:	e6ff      	b.n	800524e <_realloc_r+0xfa>
 800544e:	bf00      	nop
 8005450:	200000f8 	.word	0x200000f8

08005454 <__ascii_wctomb>:
 8005454:	b149      	cbz	r1, 800546a <__ascii_wctomb+0x16>
 8005456:	2aff      	cmp	r2, #255	; 0xff
 8005458:	bf85      	ittet	hi
 800545a:	238a      	movhi	r3, #138	; 0x8a
 800545c:	6003      	strhi	r3, [r0, #0]
 800545e:	700a      	strbls	r2, [r1, #0]
 8005460:	f04f 30ff 	movhi.w	r0, #4294967295
 8005464:	bf98      	it	ls
 8005466:	2001      	movls	r0, #1
 8005468:	4770      	bx	lr
 800546a:	4608      	mov	r0, r1
 800546c:	4770      	bx	lr
	...

08005470 <_sbrk>:
 8005470:	4b04      	ldr	r3, [pc, #16]	; (8005484 <_sbrk+0x14>)
 8005472:	6819      	ldr	r1, [r3, #0]
 8005474:	4602      	mov	r2, r0
 8005476:	b909      	cbnz	r1, 800547c <_sbrk+0xc>
 8005478:	4903      	ldr	r1, [pc, #12]	; (8005488 <_sbrk+0x18>)
 800547a:	6019      	str	r1, [r3, #0]
 800547c:	6818      	ldr	r0, [r3, #0]
 800547e:	4402      	add	r2, r0
 8005480:	601a      	str	r2, [r3, #0]
 8005482:	4770      	bx	lr
 8005484:	200006c4 	.word	0x200006c4
 8005488:	20000770 	.word	0x20000770

0800548c <_init>:
 800548c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548e:	bf00      	nop
 8005490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005492:	bc08      	pop	{r3}
 8005494:	469e      	mov	lr, r3
 8005496:	4770      	bx	lr

08005498 <_fini>:
 8005498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549a:	bf00      	nop
 800549c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800549e:	bc08      	pop	{r3}
 80054a0:	469e      	mov	lr, r3
 80054a2:	4770      	bx	lr
